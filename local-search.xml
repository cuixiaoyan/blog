<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>获取map对象中的最大最小值</title>
    <link href="/blog/2021/02/07/%E8%8E%B7%E5%8F%96map%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <url>/blog/2021/02/07/%E8%8E%B7%E5%8F%96map%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>遇到的问题是获取map中的最高成绩和最低成绩 xxx.entrySet() 这里放的你的map</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WechatIMG96_1569388966080.png" alt="WechatIMG96">两种方式</p><h1 id="1-8后"><a href="#1-8后" class="headerlink" title="1.8后"></a>1.8后</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList(correctRateOm.entrySet());<br>Collections.sort(list, (o1, o2) -&gt; (o1.getValue().getScore().intValue() - o2.getValue().getScore().intValue()));<br>        <br>Double minScore = list.get(<span class="hljs-number">0</span>).getValue().getScore();<br> <br>List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list1 = <span class="hljs-keyword">new</span> ArrayList(correctRateOm.entrySet());<br>Collections.sort(list1, (o1, o2) -&gt; (o2.getValue().getScore().intValue()) - o1.getValue().getScore().intValue());<br> <br>Double maxScore = list1.get(<span class="hljs-number">0</span>).getValue().getScore();<br></code></pre></td></tr></table></figure><h1 id="1-8前"><a href="#1-8前" class="headerlink" title="1.8前"></a>1.8前</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//最大值</span><br>               List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList(correctRateOm.entrySet());<br>               Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>                           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>                               <span class="hljs-keyword">return</span> (o2.getValue().getScore().intValue() - o1.getValue().getScore().intValue());<br>                           &#125;<br>                       &#125;<br>               );<br>Double maxScore = list.get(<span class="hljs-number">0</span>).getValue().getScore();<br><br>               <span class="hljs-comment">//最小值</span><br>               List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list1 = <span class="hljs-keyword">new</span> ArrayList(correctRateOm1.entrySet());<br>               Collections.sort(list1, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>                           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>                               <span class="hljs-keyword">return</span> (o1.getValue().getScore().intValue() - o2.getValue().getScore().intValue());<br>                           &#125;<br>                       &#125;<br>               );<br>Double minScore = list1.get(<span class="hljs-number">0</span>).getValue().getScore();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合RabbitMQ</title>
    <link href="/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88RabbitMQ/"/>
    <url>/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.rabbitmq.host=<span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.71</span><br>spring.rabbitmq.port=<span class="hljs-number">5672</span><br>spring.rabbitmq.username=light<br>spring.rabbitmq.password=light<br>spring.rabbitmq.virtual-host=/test<br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpConfirguration</span> </span>&#123;<br> <br>  <span class="hljs-comment">//=============简单、工作队列模式===============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SIMPLE_QUEUE = <span class="hljs-string">&quot;simple_queue&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SIMPLE_QUEUE, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-comment">//===============发布/订阅模式============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PS_QUEUE_1 = <span class="hljs-string">&quot;ps_queue_1&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PS_QUEUE_2 = <span class="hljs-string">&quot;ps_queue_2&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_EXCHANGE = <span class="hljs-string">&quot;fanout_exchange&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">psQueue1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(PS_QUEUE_1, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">psQueue2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(PS_QUEUE_2, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title">fanoutExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">fanoutBinding1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(psQueue1()).to(fanoutExchange());<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">fanoutBinding2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(psQueue2()).to(fanoutExchange());<br>  &#125;<br> <br>  <span class="hljs-comment">//===============路由模式============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTING_QUEUE_1 = <span class="hljs-string">&quot;routing_queue_1&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTING_QUEUE_2 = <span class="hljs-string">&quot;routing_queue_2&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_EXCHANGE = <span class="hljs-string">&quot;direct_exchange&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">routingQueue1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(ROUTING_QUEUE_1, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">routingQueue2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(ROUTING_QUEUE_2, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title">directExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DirectExchange(DIRECT_EXCHANGE);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">directBinding1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(routingQueue1()).to(directExchange()).with(<span class="hljs-string">&quot;user&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">directBinding2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(routingQueue2()).to(directExchange()).with(<span class="hljs-string">&quot;order&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-comment">//===============主题模式============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_1 = <span class="hljs-string">&quot;topic_queue_1&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_2 = <span class="hljs-string">&quot;topic_queue_2&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_EXCHANGE = <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">topicQueue1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TOPIC_QUEUE_1, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">topicQueue2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TOPIC_QUEUE_2, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title">topicExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(TOPIC_EXCHANGE);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">topicBinding1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="hljs-string">&quot;user.add&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">topicBinding2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="hljs-string">&quot;user.#&quot;</span>);<br>  &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息生产者："><a href="#消息生产者：" class="headerlink" title="消息生产者："></a>消息生产者：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpSender</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> AmqpTemplate amqpTemplate;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 简单模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleSend</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.SIMPLE_QUEUE, message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发布/订阅模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">psSend</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.FANOUT_EXCHANGE, <span class="hljs-string">&quot;&quot;</span>, message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 路由模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">routingSend</span><span class="hljs-params">(String routingKey, String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.DIRECT_EXCHANGE, routingKey, message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 主题模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> routingKey</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topicSend</span><span class="hljs-params">(String routingKey, String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.TOPIC_EXCHANGE, routingKey, message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息消费者："><a href="#消息消费者：" class="headerlink" title="消息消费者："></a>消息消费者：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpReceiver</span> </span>&#123;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 简单模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.SIMPLE_QUEUE)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleReceive</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发布/订阅模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.PS_QUEUE_1)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">psReceive1</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.PS_QUEUE_1 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.PS_QUEUE_2)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">psReceive2</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.PS_QUEUE_2 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 路由模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.ROUTING_QUEUE_1)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">routingReceive1</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.ROUTING_QUEUE_1 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.ROUTING_QUEUE_2)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">routingReceive2</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.ROUTING_QUEUE_2 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 主题模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.TOPIC_QUEUE_1)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topicReceive1</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.TOPIC_QUEUE_1 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.TOPIC_QUEUE_2)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topicReceive2</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.TOPIC_QUEUE_2 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者使用 @RabbitListener 注解监听消息。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpTest</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> AmqpSender sender;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.simpleSend(<span class="hljs-string">&quot;test simpleSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPsSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.psSend(<span class="hljs-string">&quot;test psSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRoutingSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.routingSend(<span class="hljs-string">&quot;order&quot;</span>, <span class="hljs-string">&quot;test routingSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTopicSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.topicSend(<span class="hljs-string">&quot;user.add&quot;</span>, <span class="hljs-string">&quot;test topicSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合ActiveMQ</title>
    <link href="/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88ActiveMQ/"/>
    <url>/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88ActiveMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- 如果需要配置连接池，添加如下依赖 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;<br>    &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># activemq 配置<br>spring.activemq.broker-url=tcp:<span class="hljs-comment">//192.168.2.61:61616</span><br>spring.activemq.user=admin<br>spring.activemq.password=admin<br>spring.activemq.pool.enabled=<span class="hljs-keyword">false</span><br>spring.activemq.pool.max-connections=<span class="hljs-number">50</span><br># 使用发布/订阅模式时，下边配置需要设置成 true<br>spring.jms.pub-sub-domain=<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>此处 spring.activemq.pool.enabled=false，表示关闭连接池。</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsConfirguration</span> </span>&#123;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME = <span class="hljs-string">&quot;activemq_queue&quot;</span>;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_NAME = <span class="hljs-string">&quot;activemq_topic&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveMQQueue(QUEUE_NAME);<br>    &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Topic <span class="hljs-title">topic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveMQTopic(TOPIC_NAME);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsSender</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Queue queue;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Topic topic;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JmsMessagingTemplate jmsTemplate;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendByQueue</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.jmsTemplate.convertAndSend(queue, message);<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendByTopic</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.jmsTemplate.convertAndSend(topic, message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsReceiver</span> </span>&#123;<br> <br>  <span class="hljs-meta">@JmsListener(destination = JmsConfirguration.QUEUE_NAME)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveByQueue</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收队列消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@JmsListener(destination = JmsConfirguration.TOPIC_NAME)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveByTopic</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收主题消息:&quot;</span> + message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者使用 @JmsListener 注解监听消息。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsTest</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JmsSender sender;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendByQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.sendByQueue(<span class="hljs-string">&quot;hello activemq queue &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendByTopic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.sendByTopic(<span class="hljs-string">&quot;hello activemq topic &quot;</span> + i);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打印结果："><a href="#打印结果：" class="headerlink" title="打印结果："></a>打印结果：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">接收队列消息:hello activemq queue <span class="hljs-number">1</span><br>接收队列消息:hello activemq queue <span class="hljs-number">2</span><br>接收队列消息:hello activemq queue <span class="hljs-number">3</span><br>接收队列消息:hello activemq queue <span class="hljs-number">4</span><br>接收队列消息:hello activemq queue <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="测试发布-订阅模式时"><a href="#测试发布-订阅模式时" class="headerlink" title="测试发布/订阅模式时"></a>测试发布/订阅模式时</h1><p>设置 spring.jms.pub-sub-domain=true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">接收主题消息:hello activemq topic <span class="hljs-number">1</span><br>接收主题消息:hello activemq topic <span class="hljs-number">2</span><br>接收主题消息:hello activemq topic <span class="hljs-number">3</span><br>接收主题消息:hello activemq topic <span class="hljs-number">4</span><br>接收主题消息:hello activemq topic <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>ActiveMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea将项目提交到github上</title>
    <link href="/blog/2021/02/06/idea%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A/"/>
    <url>/blog/2021/02/06/idea%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<p>首先区分git 和 github 是不一样的, github 和 码云是一样的。 我的文字表达确实差 所以一图胜万语千言</p><h1 id="配置本地"><a href="#配置本地" class="headerlink" title="配置本地"></a>配置本地</h1><p>先把他放到本地git 本地想必大家都已经安装好了 没有安装的话百度一下 然后选择整个项目的文件夹 然后项目会变成红色<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133614@2x_1569303820807.png" alt="WX20190924-133614@2x"></p><h1 id="上传本地"><a href="#上传本地" class="headerlink" title="上传本地"></a>上传本地</h1><p>右键项目 add之后 文件都会变成绿色 然后在提交项目就没颜色了<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133704@2x_1569303820892.png" alt="WX20190924-133704@2x"></p><h1 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h1><p>这里输入备注 就会提交到GitHub 可以自定义名字我这里使用的就是项目的名字<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133818@2x_1569303820981.png" alt="WX20190924-133818@2x"></p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-134320@2x_1569303820947.png" alt="WX20190924-134320@2x">#两者区分 一般上先上传到本地 然后再右键push<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133901@2x_1569303821043.png" alt="WX20190924-133901@2x"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2021/02/06/%E5%89%AF%E6%9C%AC/"/>
    <url>/blog/2021/02/06/%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis</title>
    <link href="/blog/2021/02/05/SpringBoot%E6%95%B4%E5%90%88Redis/"/>
    <url>/blog/2021/02/05/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<p>Spring Data Redis 为我们提供 RedisTemplate 和 StringRedisTemplate 两个模板进行数据操作，它们主要 的访问方法如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190919-173422@2x_1568885674306.png" alt="WX20190919-173422@2x"></p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.redis.host=<span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.11</span><br>spring.redis.port=<span class="hljs-number">6379</span><br>spring.redis.password=redis123<br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisDao</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stringRedisTemplate.opsForValue().set(key, value);<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.stringRedisTemplate.opsForValue().get(key);<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String key)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stringRedisTemplate.delete(key);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisDaoTest</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> RedisDao redisDao;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSet</span><span class="hljs-params">()</span> </span>&#123;<br>    String key = <span class="hljs-string">&quot;name&quot;</span>;<br>    String value = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br> <br>    <span class="hljs-keyword">this</span>.redisDao.set(key, value);<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGet</span><span class="hljs-params">()</span> </span>&#123;<br>    String key = <span class="hljs-string">&quot;name&quot;</span>;<br>    String value = <span class="hljs-keyword">this</span>.redisDao.get(key);<br>    System.out.println(value);<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>    String key = <span class="hljs-string">&quot;name&quot;</span>;<br>    <span class="hljs-keyword">this</span>.redisDao.delete(key);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置EhCache缓存</title>
    <link href="/blog/2021/02/05/SpringBoot%E9%85%8D%E7%BD%AEEhCache%E7%BC%93%E5%AD%98/"/>
    <url>/blog/2021/02/05/SpringBoot%E9%85%8D%E7%BD%AEEhCache%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;dependency&gt;<br>  &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;<br>  &lt;artifactId&gt;ehcache&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p>在 src/main/resources 目录下创建 ehcache.xml 文件，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;ehcache xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:noNamespaceSchemaLocation=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span>&gt;<br> <br>    &lt;!-- 磁盘缓存位置 --&gt;<br>    &lt;diskStore path=<span class="hljs-string">&quot;java.io.tmpdir/ehcache&quot;</span>/&gt;<br> <br>    &lt;!-- 默认缓存 --&gt;<br>    &lt;defaultCache<br>            maxEntriesLocalHeap=<span class="hljs-string">&quot;10000&quot;</span><br>            eternal=<span class="hljs-string">&quot;false&quot;</span><br>            timeToIdleSeconds=<span class="hljs-string">&quot;120&quot;</span><br>            timeToLiveSeconds=<span class="hljs-string">&quot;120&quot;</span><br>            maxEntriesLocalDisk=<span class="hljs-string">&quot;10000000&quot;</span><br>            diskExpiryThreadIntervalSeconds=<span class="hljs-string">&quot;120&quot;</span><br>            memoryStoreEvictionPolicy=<span class="hljs-string">&quot;LRU&quot;</span>&gt;<br>        &lt;persistence strategy=<span class="hljs-string">&quot;localTempSwap&quot;</span>/&gt;<br>    &lt;/defaultCache&gt;<br> <br>    &lt;!-- 自定义缓存 --&gt;<br>    &lt;cache name=<span class="hljs-string">&quot;department&quot;</span><br>           maxElementsInMemory=<span class="hljs-string">&quot;1000&quot;</span><br>           eternal=<span class="hljs-string">&quot;false&quot;</span><br>           timeToIdleSeconds=<span class="hljs-string">&quot;50&quot;</span><br>           timeToLiveSeconds=<span class="hljs-string">&quot;50&quot;</span><br>           overflowToDisk=<span class="hljs-string">&quot;false&quot;</span><br>           memoryStoreEvictionPolicy=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;<br>&lt;/ehcache&gt;<br></code></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">name：Cache 的唯一标识<br>maxElementsInMemory：内存中允许存储的最大的元素个数<br>maxElementsOnDisk：硬盘最大缓存个数，<span class="hljs-number">0</span>代表无限个<br>clearOnFlush：内存数量最大时是否清除<br>eternal：缓存对象是否永久有效，如果是，超时设置将被忽略<br>overflowToDisk：内存不足（超过 maxElementsInMemory）时，是否启用磁盘缓存<br>timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=<span class="hljs-keyword">false</span>对象不是永久有效时使用，可选属性，默认值是<span class="hljs-number">0</span>，也就是可闲置时间无穷大<br>timeToLiveSeconds：缓存数据的生存时间（TTL），也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是<span class="hljs-number">0</span>就意味着元素可以停顿无穷长的时间<br>diskPersistent：是否将缓存数据持久化到磁盘上，如果为 <span class="hljs-keyword">true</span>，JVM 重启数据依然存在。默认值是<span class="hljs-keyword">false</span><br>diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区<br>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是<span class="hljs-number">120</span>秒<br>memoryStoreEvictionPolicy：当达到 maxElementsInMemory 限制时，Ehcache 将根据指定策略清除内存。默认为 LRU（最近最少使用），其他策略有 FIFO（先进先出），LFU（较少使用）<br></code></pre></td></tr></table></figure><h1 id="application-properties-："><a href="#application-properties-：" class="headerlink" title="application.properties ："></a>application.properties ：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># 缓存类型（ehcache、redis）<br>spring.cache.type=ehcache<br> <br># ehcache 配置文件<br>spring.cache.ehcache.config=classpath:ehcache.xml<br> <br># 打印日志，查看 sql<br>logging.level.com.light.springboot=DEBUG<br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>在持久层篇的基础上，结合 Mybatis 测试：</p><p>Service 层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheConfig(cacheNames = &quot;department&quot;)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentService</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> DepartmentMapper departmentMapper;<br> <br>  <span class="hljs-meta">@CachePut(key = &quot;#department.id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">save</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;保存 id=&quot;</span> + department.getId() + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    <span class="hljs-keyword">this</span>.departmentMapper.insert(department);<br>    <span class="hljs-keyword">return</span> department;<br>  &#125;<br> <br>  <span class="hljs-meta">@CachePut(key = &quot;#department.id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">update</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改 id=&quot;</span> + department.getId() + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    <span class="hljs-keyword">this</span>.departmentMapper.update(department);<br>    <span class="hljs-keyword">return</span> department;<br>  &#125;<br> <br>  <span class="hljs-meta">@Cacheable(key = &quot;#id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDepartmentById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;获取 id=&quot;</span> + id + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    Department department = <span class="hljs-keyword">this</span>.departmentMapper.getById(id);<br>    <span class="hljs-keyword">return</span> department;<br>  &#125;<br> <br>  <span class="hljs-meta">@CacheEvict(key = &quot;#id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;删除 id=&quot;</span> + id + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    <span class="hljs-keyword">this</span>.departmentMapper.deleteById(id);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="控制层："><a href="#控制层：" class="headerlink" title="控制层："></a>控制层：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;department&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentController</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> DepartmentService departmentService;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;save&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.departmentService.save(department);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;保存成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br>    Department department = <span class="hljs-keyword">this</span>.departmentService.getDepartmentById(id);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;获取成功&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;data&quot;</span>, department);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;update&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">update</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.departmentService.update(department);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;修改成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;delete/&#123;id&#125;&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.departmentService.delete(id);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;删除成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动类：</p><p>添加 @EnableCaching 注解，开启缓存功能。</p><h1 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h1><p>由于 ehcache 缓存是存储在应用的内存中，如果使用 junit 测试，方法执行完毕缓存就释放了，无法正常测试缓存效果，因此测试使用发起 http 请求的形式。</p><p>发起保存请求：</p><h2 id="发起保存请求："><a href="#发起保存请求：" class="headerlink" title="发起保存请求："></a>发起保存请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">保存 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">50</span>:<span class="hljs-number">48.800</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">7</span>] c.l.s.dao.DepartmentMapper.insert        : ==&gt;  Preparing: <span class="hljs-function">insert into <span class="hljs-title">department</span><span class="hljs-params">(id,name,descr)</span> <span class="hljs-title">values</span><span class="hljs-params">(?,?,?)</span></span><br><span class="hljs-function">2017-12-06 14:50:48.801 DEBUG 680 --- [nio-8081-exec-7] c.l.s.dao.DepartmentMapper.insert        : </span>==&gt; Parameters: <span class="hljs-number">2</span>(Integer), Ehcache 部门(String), Ehcache(String)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">50</span>:<span class="hljs-number">48.868</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">7</span>] c.l.s.dao.DepartmentMapper.insert        : &lt;==    Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>保存成功后，立刻发起查询请求，没有日志打印，但返回对象数据，说明数据是从缓存中获取。</p><h2 id="发起修改请求："><a href="#发起修改请求：" class="headerlink" title="发起修改请求："></a>发起修改请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">修改 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">16.588</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">8</span>] c.l.s.dao.DepartmentMapper.update        : ==&gt;  Preparing: update department set name = ? , descr = ? where id = ?<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">16.589</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">8</span>] c.l.s.dao.DepartmentMapper.update        : ==&gt; Parameters: Ehcache 部门<span class="hljs-number">2</span>(String), Ehcache2(String), <span class="hljs-number">2</span>(Integer)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">16.657</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">8</span>] c.l.s.dao.DepartmentMapper.update        : &lt;==    Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>修改成功后，立刻发起查询请求，没有日志打印，但返回修改后的对象数据，说明缓存中的数据已经同步。</p><h2 id="发起删除请求："><a href="#发起删除请求：" class="headerlink" title="发起删除请求："></a>发起删除请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">删除 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07.572</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">1</span>] c.l.s.dao.DepartmentMapper.deleteById    : ==&gt;  Preparing: delete from department where id = ?<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07.572</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">1</span>] c.l.s.dao.DepartmentMapper.deleteById    : ==&gt; Parameters: <span class="hljs-number">2</span>(Integer)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07.613</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">1</span>] c.l.s.dao.DepartmentMapper.deleteById    : &lt;==    Updates: <span class="hljs-number">1</span><br> <br></code></pre></td></tr></table></figure><p>删除成功后，立刻发起查询请求，控制台打印 sql 语句，说明缓存数据被删除，需要查询数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">获取 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.324</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">3</span>] c.l.s.dao.DepartmentMapper.getById       : ==&gt;  Preparing: select id,name,descr from department where id = ?<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.325</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">3</span>] c.l.s.dao.DepartmentMapper.getById       : ==&gt; Parameters: <span class="hljs-number">2</span>(Integer)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.328</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">3</span>] c.l.s.dao.DepartmentMapper.getById       : &lt;==      Total: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>EhCache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot配置 Druid 数据源</title>
    <link href="/blog/2021/02/03/Springboot%E9%85%8D%E7%BD%AEDruid%20%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/blog/2021/02/03/Springboot%E9%85%8D%E7%BD%AEDruid%20%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;druid&lt;/artifactId&gt;<br>    &lt;version&gt;1.1.8&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.druid.driverClassName=com.mysql.jdbc.Driver<br>spring.datasource.druid.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>spring.datasource.druid.username=root<br>spring.datasource.druid.password=tiger<br> <br>spring.datasource.druid.initialSize=<span class="hljs-number">5</span><br>spring.datasource.druid.minIdle=<span class="hljs-number">5</span><br>spring.datasource.druid.maxActive=<span class="hljs-number">20</span><br>spring.datasource.druid.maxWait=<span class="hljs-number">60000</span><br>spring.datasource.druid.timeBetweenEvictionRunsMillis=<span class="hljs-number">60000</span><br>spring.datasource.druid.min-evictableIdleTimeMillis=<span class="hljs-number">300000</span><br>spring.datasource.druid.validationQuery=SELECT <span class="hljs-number">1</span> FROM DUAL<br>spring.datasource.druid.testWhileIdle=<span class="hljs-keyword">true</span><br>spring.datasource.druid.testOnBorrow=<span class="hljs-keyword">false</span><br>spring.datasource.druid.testOnReturn=<span class="hljs-keyword">false</span><br>spring.datasource.druid.poolPreparedStatements=<span class="hljs-keyword">true</span><br>spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=<span class="hljs-number">20</span><br>spring.datasource.druid.filters=stat,wall<br> <br></code></pre></td></tr></table></figure><p>注意：配置中都是以 spring.datasource.druid 开头，使用驼峰命名</p><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfiguration</span> </span>&#123;<br> <br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)</span><br>    <span class="hljs-meta">@Bean(initMethod = &quot;init&quot;,destroyMethod = &quot;close&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        DruidDataSource ds = <span class="hljs-keyword">new</span> DruidDataSource();<br>        ds.setProxyFilters(Arrays.asList(statFilter()));<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Filter <span class="hljs-title">statFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        StatFilter filter = <span class="hljs-keyword">new</span> StatFilter();<br>        filter.setSlowSqlMillis(<span class="hljs-number">5000</span>);<br>        filter.setLogSlowSql(<span class="hljs-keyword">true</span>);<br>        filter.setMergeSql(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了保证访问的安全性，我们可以如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">## druid 监控<br>spring.datasource.druid.web-stat-filter.enabled=<span class="hljs-keyword">true</span><br>spring.datasource.druid.web-stat-filter.url-pattern=<span class="hljs-comment">/*</span><br><span class="hljs-comment">spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">## druid 监控页面</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.enabled=true</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.login-username=druid</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.login-password=druid123</span><br><span class="hljs-comment"> </span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190917-133136@2x_1568698317734.png" alt="WX20190917-133136@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>Druid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <link href="/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Mybatis/"/>
    <url>/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="整合-Mybatis"><a href="#整合-Mybatis" class="headerlink" title="整合 Mybatis"></a>整合 Mybatis</h1><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- jdbc --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- mybatis --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>    &lt;version&gt;3.4.4&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- spring,mybatis整合包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>    &lt;version&gt;1.3.1&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- mysql 驱动包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="配置数据库连接："><a href="#配置数据库连接：" class="headerlink" title="配置数据库连接："></a>配置数据库连接：</h2><p>在 application.properties 中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># 数据源配置<br>spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>spring.datasource.username=root<br>spring.datasource.password=tiger<br></code></pre></td></tr></table></figure><h2 id="创建配置类："><a href="#创建配置类：" class="headerlink" title="创建配置类："></a>创建配置类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisConfiguration</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">// 当容器里没有指定的 Bean 的情况下创建该对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;<br>        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        <span class="hljs-comment">// 设置数据源</span><br>        sqlSessionFactoryBean.setDataSource(dataSource);<br> <br>        <span class="hljs-comment">// 设置mybatis的主配置文件</span><br>        sqlSessionFactoryBean.setConfigLocation(<span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;mybatis/mybatis-config.xml&quot;</span>));<br> <br>        <span class="hljs-comment">// 设置mapper映射文件</span><br>        PathMatchingResourcePatternResolver resolver = <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver();<br>        Resource[] mapperXml;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mapperXml = resolver.getResources(<span class="hljs-string">&quot;classpath:mybatis/mapper/*.xml&quot;</span>);<br>            sqlSessionFactoryBean.setMapperLocations(mapperXml);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br> <br>        <span class="hljs-comment">// 设置别名包</span><br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;com.light.springboot.domain&quot;</span>);<br> <br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnBean(SqlSessionFactoryBean.class)</span> <span class="hljs-comment">// 当 SqlSessionFactoryBean 实例存在时创建对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title">mapperScannerConfigurer</span><span class="hljs-params">()</span> </span>&#123;<br>        MapperScannerConfigurer mapperScannerConfigurer = <span class="hljs-keyword">new</span> MapperScannerConfigurer();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;com.light.springboot.mapper&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 src/main/resources 下创建 mybatis 文件夹，并在 mybatis 文件夹中创建 “mybatis-config.xml” 配置文件，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;settings&gt;<br>        &lt;!-- 获取数据库自增主键值 --&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>        &lt;!-- 使用列别名替换列名，默认为 <span class="hljs-keyword">true</span> --&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;useColumnLabel&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>        &lt;!-- 开启驼峰命名转换：Table(create_time) =&gt; Entity(createTime) --&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>    &lt;/settings&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>mybatis 文件夹下再创建一个 “mapper” 文件夹，里边存放 Mpper 接口对应的 mapper 映射文件。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>在 MySQL 中创建名为 springboot 的数据库，在该库中创建 role 表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">CREATE TABLE `department` (<br>    `id` INT(<span class="hljs-number">11</span>) NOT NULL,<br>    `name` VARCHAR(<span class="hljs-number">10</span>) NOT NULL,<br>    `descr` VARCHAR(<span class="hljs-number">50</span>) NULL DEFAULT NULL,<br>    <span class="hljs-function">PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(`id`)</span></span><br><span class="hljs-function">)</span><br><span class="hljs-function">ENGINE</span>=InnoDB<br>;<br></code></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>setet 和 getter 方法省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">6067283535977178571L</span>;<br> <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">private</span> String descr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Department department)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getById</span><span class="hljs-params">(Integer id)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Department department)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>补充：Mapper 接口需要添加 @Mapper 注解，如果不想使用该注解，可以在启动类上使用 @MapperScan 配置 Mapper 接口路径</p><p>mybatis/mapper/departmentMapper.xml ：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE mapper PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.light.springboot.dao.DepartmentMapper&quot;</span>&gt;<br> <br>    &lt;insert id=<span class="hljs-string">&quot;insert&quot;</span> parameterType=<span class="hljs-string">&quot;com.light.springboot.domain.Department&quot;</span>&gt;<br>        <span class="hljs-function">insert into <span class="hljs-title">department</span><span class="hljs-params">(id,name,descr)</span> <span class="hljs-title">values</span><span class="hljs-params">(#&#123;id&#125;,#&#123;name&#125;,#&#123;descr&#125;)</span></span><br><span class="hljs-function">    &lt;/insert&gt;</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    &lt;select id</span>=<span class="hljs-string">&quot;getById&quot;</span> parameterType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> resultType=<span class="hljs-string">&quot;com.light.springboot.domain.Department&quot;</span>&gt;<br>        select id,name,descr from department where id = #&#123;id&#125;<br>    &lt;/select&gt;<br>    <br>    &lt;update id=<span class="hljs-string">&quot;update&quot;</span> parameterType=<span class="hljs-string">&quot;com.light.springboot.domain.Department&quot;</span>&gt;<br>        update department set descr = #&#123;descr&#125; where id = #&#123;id&#125;<br>    &lt;/update&gt;<br>    <br>    &lt;delete id=<span class="hljs-string">&quot;deleteById&quot;</span> parameterType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;<br>        delete from department where id = #&#123;id&#125;<br>    &lt;/delete&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DepartmentMapper departmentMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        Department department = <span class="hljs-keyword">new</span> Department();<br>        department.setId(<span class="hljs-number">1</span>);<br>        department.setName(<span class="hljs-string">&quot;研发部&quot;</span>);<br>        department.setDescr(<span class="hljs-string">&quot;开发产品&quot;</span>);<br>        <span class="hljs-keyword">this</span>.departmentMapper.insert(department);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetById</span><span class="hljs-params">()</span> </span>&#123;<br>        Department department = <span class="hljs-keyword">this</span>.departmentMapper.getById(<span class="hljs-number">1</span>);<br>        System.out.println(department);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>        Department department = <span class="hljs-keyword">new</span> Department();<br>        department.setId(<span class="hljs-number">1</span>);<br>        department.setDescr(<span class="hljs-string">&quot;开发高级产品&quot;</span>);<br>        <span class="hljs-keyword">this</span>.departmentMapper.update(department);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.departmentMapper.deleteById(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Spring-data-jpa</title>
    <link href="/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Spring-data-jpa/"/>
    <url>/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Spring-data-jpa/</url>
    
    <content type="html"><![CDATA[<p>增删改查很爽就对了 适合业务性比较单一的项目</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- jdbc --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- springboot,jpa 整合包--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- mysql 驱动包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h1><p>在 application.properties 中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"># 数据库连接配置<br>spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>spring.datasource.username=root<br>spring.datasource.password=tiger<br> <br># JPA 配置<br>spring.jpa.hibernate.ddl-auto=update<br>spring.jpa.show-sql=<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>在 MySQL 中创建名为 springboot 的数据库，在该库中创建 role 表： 注意，主键 ID 为 AUTO_INCREMENT 自增。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">CREATE TABLE `role` (<br>    `id` INT(<span class="hljs-number">11</span>) NOT NULL AUTO_INCREMENT,<br>    `name` VARCHAR(<span class="hljs-number">10</span>) NOT NULL,<br>    `descr` VARCHAR(<span class="hljs-number">100</span>) NULL DEFAULT NULL,<br>    <span class="hljs-function">PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(`id`)</span></span><br><span class="hljs-function">)</span><br><span class="hljs-function">COLLATE</span>=<span class="hljs-string">&#x27;utf8_general_ci&#x27;</span><br>ENGINE=InnoDB<br>;<br></code></pre></td></tr></table></figure><h2 id="建实体类"><a href="#建实体类" class="headerlink" title="建实体类"></a>建实体类</h2><p>添加相应的注解 getset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">3926276668667517847L</span>;<br> <br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String descr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Repository-接口"><a href="#Repository-接口" class="headerlink" title="Repository 接口"></a>Repository 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Role</span>, <span class="hljs-title">Integer</span>&gt;</span>&#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleRepositoryTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RoleRepository roleRepository;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        Role role = <span class="hljs-keyword">new</span> Role();<br>        role.setName(<span class="hljs-string">&quot;管理员&quot;</span>);<br>        role.setDescr(<span class="hljs-string">&quot;测试&quot;</span>);<br>        Role result = <span class="hljs-keyword">this</span>.roleRepository.save(role);<br>        System.out.println(result);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOne</span><span class="hljs-params">()</span> </span>&#123;<br>        Role role = <span class="hljs-keyword">this</span>.roleRepository.findOne(<span class="hljs-number">1</span>);<br>        System.out.println(role);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>        Role role = <span class="hljs-keyword">new</span> Role();<br>        role.setId(<span class="hljs-number">1</span>);<br>        role.setName(<span class="hljs-string">&quot;管理员&quot;</span>);<br>        role.setDescr(<span class="hljs-string">&quot;控制权限&quot;</span>);<br>        Role result = <span class="hljs-keyword">this</span>.roleRepository.save(role);<br>        System.out.println(result);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleRepository.delete(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>jpa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Tomcat</title>
    <link href="/blog/2021/02/02/Docker%E5%AE%89%E8%A3%85Tomcat/"/>
    <url>/blog/2021/02/02/Docker%E5%AE%89%E8%A3%85Tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="查看-Tomcat-镜像"><a href="#查看-Tomcat-镜像" class="headerlink" title="查看 Tomcat 镜像"></a>查看 Tomcat 镜像</h1><p>我一般上都是直接获取最新的 除非指定要哪个版本的时候 <strong>docker search tomcat</strong></p><h1 id="获取-Tomcat-镜像"><a href="#获取-Tomcat-镜像" class="headerlink" title="获取 Tomcat 镜像"></a>获取 Tomcat 镜像</h1><p>比如： 这种是指定版本 docker pull mongo:3.2.4 dockre pull redis:3.2</p><p><strong>docker pull tomcat</strong>（这种方法是获取最新的Tomcat镜像）</p><h1 id="启动Tomcat容器实例"><a href="#启动Tomcat容器实例" class="headerlink" title="启动Tomcat容器实例"></a>启动Tomcat容器实例</h1><p>第一个端口是外部访问的 我这里换成 8888 <strong>docker run –name tomcat -d -it –rm -p 8888:8080 tomcat</strong> –rm:表示当关闭或者销毁当前容器实例进程时，同时销毁容器实例。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190911-173602@2x_1568194575420.png" alt="WX20190911-173602@2x"></p><h1 id="实例化Tomcat容器实例"><a href="#实例化Tomcat容器实例" class="headerlink" title="实例化Tomcat容器实例"></a>实例化Tomcat容器实例</h1><p>docker restart tomcat（tomcat是当前实例的名称，也可以通过当前实例的容器ID来重启）</p><h1 id="关闭Tomcat容器实例"><a href="#关闭Tomcat容器实例" class="headerlink" title="关闭Tomcat容器实例"></a>关闭Tomcat容器实例</h1><p>docker stop tomcat（tomcat是当前实例的名称，也可以通过当前实例的容器ID来重启）</p><h1 id="启动Tomcat容器实例-1"><a href="#启动Tomcat容器实例-1" class="headerlink" title="启动Tomcat容器实例"></a>启动Tomcat容器实例</h1><p>docker start tomcat</p><h1 id="查看Tomcat容器实例进程信息"><a href="#查看Tomcat容器实例进程信息" class="headerlink" title="查看Tomcat容器实例进程信息"></a>查看Tomcat容器实例进程信息</h1><p>通过docker top tomcat查看</p><p>通过ps -ef | grep tomcat查看</p><h1 id="杀死Tomcat容器实例进程"><a href="#杀死Tomcat容器实例进程" class="headerlink" title="杀死Tomcat容器实例进程"></a>杀死Tomcat容器实例进程</h1><p>docker kill -s KILL tomcat 再查看 docker ps</p><h1 id="移除Tomcat容器实例"><a href="#移除Tomcat容器实例" class="headerlink" title="移除Tomcat容器实例"></a>移除Tomcat容器实例</h1><p>docker rm -f -v tomcat</p><h1 id="进入Tomcat容器实例"><a href="#进入Tomcat容器实例" class="headerlink" title="进入Tomcat容器实例"></a>进入Tomcat容器实例</h1><p>docker exec -it tomcat /bin/sh</p><h1 id="Tomcat-环境说明"><a href="#Tomcat-环境说明" class="headerlink" title="Tomcat 环境说明"></a>Tomcat 环境说明</h1><p>Tomcat 7、Tomcat 8 在容器的中的默认环境： CATALINA_BASE: /usr/local/tomcat CATALINA_HOME: /usr/local/tomcat CATALINA_TMPDIR: /usr/local/tomcat/temp JRE_HOME: /usr CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</p><h1 id="上传WEB应用到Tomcat的容器实例中"><a href="#上传WEB应用到Tomcat的容器实例中" class="headerlink" title="上传WEB应用到Tomcat的容器实例中"></a>上传WEB应用到Tomcat的容器实例中</h1><p>进入war包 文件所在目录 docker cp tyrone-demo.war tomcat:/usr/local/tomcat/webapps</p><p>注意：将WEB应用复制到Tomcat容器实例中后，会自动解压部署的，不需要重启容器。</p><h1 id="查看Tomcat容器实例中的WEB应用"><a href="#查看Tomcat容器实例中的WEB应用" class="headerlink" title="查看Tomcat容器实例中的WEB应用"></a>查看Tomcat容器实例中的WEB应用</h1><p>语法：docker exec -it tomcat /bin/sh（相当于开启tomcat终端）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap按照value排序</title>
    <link href="/blog/2021/02/02/HashMap%E6%8C%89%E7%85%A7value%E6%8E%92%E5%BA%8F/"/>
    <url>/blog/2021/02/02/HashMap%E6%8C%89%E7%85%A7value%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>给定一个HashMap&lt;String, BuziObj&gt; buziObjMap;，其中 BuziObj 实现了 Comparable 接口。现在需要将 buziObjMap 按照 BuziObj 有序输出。注意，BuziObj 实例有可能相等，要求多次返回的结果一致。可以使用JDK提供的各种API。</p><p>当时自己的想法是，将 buziObjMap 的 values 放在一个 List 中。然后使用 Collections.sort(valuesList) 对存放 values 的 valuesList 排序。再遍历排序之后的 valuesList 和 buziObjMap，比对 valuesList 与 buziObjMap 中的值，相等之后，将当前 buziObjMap 中的 Entry 放在 LinkedHashMap 中，返回 LinkedHashMap 即可。</p><p>但是如上解法主要存在两个问题： 1，不满足多次执行返回结果一致这个要求，因为在遍历 valuesList 与 buziObjMap 时，buziObjMap的输出顺序无法保证每次都是一致的。 2，算法的复杂度过大。</p><h1 id="实际遇到的问题"><a href="#实际遇到的问题" class="headerlink" title="实际遇到的问题"></a>实际遇到的问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br> <br>List&lt;Map.Entry&lt;K, V&gt;&gt; list =  <br>            <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;( map.entrySet() );  <br>        Collections.sort( list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()  <br>        &#123;  <br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )</span>  </span><br><span class="hljs-function">            </span>&#123;  <br>                <span class="hljs-keyword">return</span> (o1.getValue()).compareTo( o2.getValue() );  <br>            &#125;  <br>        &#125; );  <br>  <br>        Map&lt;K, V&gt; result = <span class="hljs-keyword">new</span> LinkedHashMap&lt;K, V&gt;();  <br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;K, V&gt; entry : list)  <br>        &#123;  <br>            result.put( entry.getKey(), entry.getValue() );  <br>        &#125;<br> <br><span class="hljs-comment">//map 里面的属性值需要替换成自己的 我这里用的key是String型 value 是实体类</span><br>  List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list =<br>                <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;(correctRateOm.entrySet());<br>        Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> (o1.getValue().getStudentId()).compareTo(o2.getValue().getStudentId());<br>            &#125;<br>        &#125;);<br> <br></code></pre></td></tr></table></figure><p>list 返回的就是排好顺序的啦</p><p><a href="https://bk.cuixiaoyan.xyz/archives/valuepaixu#%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a><a href="https://bk.cuixiaoyan.xyz/archives/valuepaixu#%E5%AE%9E%E9%99%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">实际遇到的问题</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>HashMap</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java的三种随机数生成方式</title>
    <link href="/blog/2021/02/02/java%E7%9A%84%E4%B8%89%E7%A7%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/"/>
    <url>/blog/2021/02/02/java%E7%9A%84%E4%B8%89%E7%A7%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>随机数的产生在一些代码中很常用，也是我们必须要掌握的。而java中产生随机数的方法主要有三种：</p><p>第一种：new Random()</p><p>第二种：Math.random()</p><p>第三种：currentTimeMillis()</p><p>第一种需要借助java.util.Random类来产生一个随机数发生器，也是最常用的一种，构造函数有两个，Random()和Random(long seed)。第一个就是以当前时间为默认种子，第二个是以指定的种子值进行。产生之后，借助不同的语句产生不同类型的数。</p><p>种子就是产生随机数的第一次使用值,机制是通过一个函数,将这个种子的值转化为随机数空间中的某一个点上,并且产生的随机数均匀的散布在空间中。以后产生的随机数都与前一个随机数有关。以代码为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"></span>&#123;<br>　　Random r = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">1</span>);<br>　　<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">5</span> ; i++)<br>　　&#123;<br>　　　　<span class="hljs-keyword">int</span> ran1 = r.nextInt(<span class="hljs-number">100</span>);<br>　　　　System.out.println(ran1);<br>　　&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>在我的编译器下产生的五个数均为85,88,47,13,54，如果采用Random r = new Random()，产生的随机数就不同，这就是确定种子导致的结果。</p><p>而第二种方法返回的数值是[0.0,1.0）的double型数值，由于double类数的精度很高，可以在一定程度下看做随机数，借助（int）来进行类型转换就可以得到整数随机数了，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"> </span>&#123;    <br>    <span class="hljs-keyword">int</span> max=<span class="hljs-number">100</span>,min=<span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">int</span> ran2 = (<span class="hljs-keyword">int</span>) (Math.random()*(max-min)+min); <br>     System.out.println(ran2);<br> &#125;<br> <br></code></pre></td></tr></table></figure><p>至于第三种方法虽然不常用，但是也是一种思路。方法返回从1970年1月1日0时0分0秒（这与UNIX系统有关）到现在的一个long型的毫秒数，取模之后即可得到所需范围内的随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> max=<span class="hljs-number">100</span>,min=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">long</span> randomNum = System.currentTimeMillis();<br><span class="hljs-keyword">int</span> ran3 = (<span class="hljs-keyword">int</span>) (randomNum%(max-min)+min);<br>System.out.println(ran3);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法移除K个数字</title>
    <link href="/blog/2021/02/01/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%A7%BB%E9%99%A4K%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
    <url>/blog/2021/02/01/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%A7%BB%E9%99%A4K%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>题目描述：有一 十进制正整数，移除其中的 K 个数，使剩下的数字是所有可能中最大的。 假设： 字符串的长度一定大于等于 K 字符串不会以 0 开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：<span class="hljs-number">1432219</span><br>           <span class="hljs-number">3</span><br> <br>输出：<span class="hljs-number">4329</span><br></code></pre></td></tr></table></figure><p>算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Stack;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteK</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>String num=scanner.nextLine();<br><span class="hljs-keyword">int</span> k=scanner.nextInt();<br>String resulteString=DeleteK.removeK(num, k);<br>System.out.println(resulteString);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span>   <span class="hljs-keyword">static</span> String <span class="hljs-title">removeK</span><span class="hljs-params">(String num,<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>String result=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//根据数值比较进行入栈移除</span><br>Stack&lt;Integer&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.length(); i++) &#123;<br><span class="hljs-keyword">int</span> temp=num.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-comment">//进行比较操作</span><br><span class="hljs-keyword">while</span> (stack.size()!=<span class="hljs-number">0</span>&amp;&amp;stack.peek()&lt;temp&amp;&amp;k&gt;<span class="hljs-number">0</span>) &#123;<br>stack.pop();<br>k--;<br>&#125;<br><span class="hljs-comment">//比较完成后，执行入栈操作</span><br><span class="hljs-keyword">if</span> (stack.size()!=<span class="hljs-number">0</span>||temp!=<span class="hljs-number">0</span>) &#123;<br>stack.push(temp);<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果存在数据全部存入栈中，但是k的值不为0的</span><br><span class="hljs-keyword">while</span> (k&gt;<span class="hljs-number">0</span>&amp;&amp;stack.size()!=<span class="hljs-number">0</span>) &#123;<br>stack.pop();<br>k--;<br>&#125;<br><br><span class="hljs-comment">//将数据从栈中全部取出</span><br><span class="hljs-keyword">while</span> (stack.size()!=<span class="hljs-number">0</span>) &#123;<br>result=stack.pop()+result;<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot工具集成</title>
    <link href="/blog/2021/02/01/SpringBoot%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90/"/>
    <url>/blog/2021/02/01/SpringBoot%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h1 id="整合-JavaMail"><a href="#整合-JavaMail" class="headerlink" title="整合 JavaMail"></a>整合 JavaMail</h1><p>本次测试演示带模板的邮件，使用 Freemark 实现邮件的模板。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"> 添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>添加配置<br>在 application.properties 中添加<br>这里的密码需要设置的是<span class="hljs-number">163</span>的第三方工具访问密码<br># javamail 配置<br>spring.mail.host=smtp<span class="hljs-number">.163</span>.com<br>spring.mail.username=<span class="hljs-number">13738137546</span>@<span class="hljs-number">163.</span>com<br>spring.mail.password=<br>spring.mail.properties.mail.smtp.auth=<span class="hljs-keyword">true</span><br>spring.mail.properties.mail.smtp.starttls.enable=<span class="hljs-keyword">true</span><br>spring.mail.properties.mail.smtp.starttls.required=<span class="hljs-keyword">true</span><br> <br> <br> 编码<br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableConfigurationProperties(MailProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaMailComponent</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String template = <span class="hljs-string">&quot;mail.ftl&quot;</span>;<br> <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> FreeMarkerConfigurer freeMarkerConfigurer;<br><br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br> <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MailProperties mailProperties;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>map.put(<span class="hljs-string">&quot;email&quot;</span>, email);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取内容</span><br>String text = <span class="hljs-keyword">this</span>.getTextByTemplate(template, map);<br><span class="hljs-comment">// 发送</span><br><span class="hljs-keyword">this</span>.send(email, text);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getTextByTemplate</span><span class="hljs-params">(String template, Map&lt;String, Object&gt; model)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">return</span> FreeMarkerTemplateUtils<br>.processTemplateIntoString(<span class="hljs-keyword">this</span>.freeMarkerConfigurer.getConfiguration().getTemplate(template), model);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">send</span><span class="hljs-params">(String email, String text)</span> <span class="hljs-keyword">throws</span> MessagingException, UnsupportedEncodingException </span>&#123;<br>MimeMessage message = <span class="hljs-keyword">this</span>.javaMailSender.createMimeMessage();<br>MimeMessageHelper helper = <span class="hljs-keyword">new</span> MimeMessageHelper(message, <span class="hljs-keyword">true</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>InternetAddress from = <span class="hljs-keyword">new</span> InternetAddress();<br>from.setAddress(<span class="hljs-keyword">this</span>.mailProperties.getUsername());<br>from.setPersonal(<span class="hljs-string">&quot;崔笑颜&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>helper.setFrom(from);<br>helper.setTo(email);<br>helper.setSubject(<span class="hljs-string">&quot;SpringBoot 发送的第一封邮件&quot;</span>);<br>helper.setText(text, <span class="hljs-keyword">true</span>);<br><span class="hljs-keyword">this</span>.javaMailSender.send(message);<br><span class="hljs-keyword">return</span> text;<br>&#125;<br>&#125;<br> <br>在 src/main/resources 下的 template 目录下创建名为 mail.ftl 的文件，其内容如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div style=<span class="hljs-string">&quot;width: 600px; text-align: left; margin: 0 auto;&quot;</span>&gt;<br>&lt;h1 style=&quot;color: #005da7;&quot;&gt;崔笑颜&lt;/h1&gt;<br>&lt;div style=&quot;border-bottom: 5px solid #005da7; height: 2px; width: 100%;&quot;&gt;&lt;/div&gt;<br>&lt;div style=<span class="hljs-string">&quot;border: 1px solid #005da7; font-size: 16px; line-height: 50px; padding: 20px;&quot;</span>&gt;<br>&lt;div&gt;$&#123;email&#125;，您好！&lt;/div&gt;<br>&lt;div&gt;<br>这是个测试<br>&lt;/div&gt;<br>&lt;div&gt;<br>想了解更多信息，请访问 &lt;a href=<span class="hljs-string">&quot;https://bk.cuixiaoyan.xyz/&quot;</span>&gt;https:<span class="hljs-comment">//bk.cuixiaoyan.xyz/&lt;/a&gt;</span><br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br>测试<br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailTest</span> </span>&#123;<br> <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JavaMailComponent javaMailComponent;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">this</span>.javaMailComponent.sendMail(<span class="hljs-string">&quot;56696508@qq.com&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="整合定时任务"><a href="#整合定时任务" class="headerlink" title="整合定时任务"></a>整合定时任务</h1><h2 id="Scheduled-方式"><a href="#Scheduled-方式" class="headerlink" title="Scheduled 方式"></a>Scheduled 方式</h2><h3 id="任务类"><a href="#任务类" class="headerlink" title="任务类"></a>任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Schedule</span> </span>&#123;<br> <br><span class="hljs-meta">@Scheduled(fixedRate = 2000)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">task</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;启动定时任务:&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 @Scheduled 定义任务执行时间，代码中表示每隔 2 秒执行一次任务。</p><h3 id="开启定时计划"><a href="#开启定时计划" class="headerlink" title="开启定时计划"></a>开启定时计划</h3><p>只需在 Spring Boot 的启动类上添加 @EnableScheduling 后，启动项目即可。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-schedule_1567762142429.jpg" alt="springboot-web-schedule"></p><h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><p>默认情况下，Spring Task 使用一条线程串行的执行所有的定时任务。为了提高执行效率，我们需要手动编写一个线程池实现定时任务的并行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncTaskConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SchedulingConfigurer</span>, <span class="hljs-title">AsyncConfigurer</span> </span>&#123;<br> <br>    <span class="hljs-comment">//线程池线程数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> corePoolSize = <span class="hljs-number">5</span>;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ThreadPoolTaskScheduler <span class="hljs-title">taskScheduler</span><span class="hljs-params">()</span> </span>&#123;<br>        ThreadPoolTaskScheduler scheduler = <span class="hljs-keyword">new</span> ThreadPoolTaskScheduler();<br>        scheduler.initialize();<span class="hljs-comment">//初始化线程池</span><br>        scheduler.setPoolSize(corePoolSize);<span class="hljs-comment">//线程池容量</span><br>        <span class="hljs-keyword">return</span> scheduler;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Executor <span class="hljs-title">getAsyncExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>        Executor executor = <span class="hljs-keyword">this</span>.taskScheduler();<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AsyncUncaughtExceptionHandler <span class="hljs-title">getAsyncUncaughtExceptionHandler</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configureTasks</span><span class="hljs-params">(ScheduledTaskRegistrar scheduledTaskRegistrar)</span> </span>&#123;<br>        scheduledTaskRegistrar.setTaskScheduler(taskScheduler());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="整合-Swagger2"><a href="#整合-Swagger2" class="headerlink" title="整合 Swagger2"></a>整合 Swagger2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;<br>&lt;version&gt;2.7.0&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;<br>&lt;version&gt;2.7.0&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>重新创建一个配置类，如下：<br> <br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Configuration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">accessToken</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;api&quot;</span>)<span class="hljs-comment">// 定义组</span><br>                .select() <span class="hljs-comment">// 选择那些路径和 api 会生成 document</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.cxy.template.controller&quot;</span>)) <span class="hljs-comment">// 拦截的包路径</span><br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;/*/.*&quot;</span>))<span class="hljs-comment">// 拦截的接口路径</span><br>                .build() <span class="hljs-comment">// 创建</span><br>                .apiInfo(apiInfo()); <span class="hljs-comment">// 配置说明</span><br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<span class="hljs-comment">//</span><br>                .title(<span class="hljs-string">&quot;Spring Boot 之 Web 篇&quot;</span>)<span class="hljs-comment">// 标题</span><br>                .description(<span class="hljs-string">&quot;spring boot Web 相关内容&quot;</span>)<span class="hljs-comment">// 描述</span><br>                .termsOfServiceUrl(<span class="hljs-string">&quot;https://bk.cuixiaoyan.xyz/&quot;</span>)<span class="hljs-comment">//</span><br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;moonlightL&quot;</span>, <span class="hljs-string">&quot;https://bk.cuixiaoyan.xyz/&quot;</span>, <span class="hljs-string">&quot;cuixiaoyande@163.com&quot;</span>))<span class="hljs-comment">// 联系</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<span class="hljs-comment">// 版本</span><br>                .build();<br>    &#125;<br> <br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 解决静态资源无法访问</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br>        <span class="hljs-comment">// 解决swagger无法访问</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/swagger-ui.html&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        <span class="hljs-comment">// 解决swagger的js文件无法访问</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    &#125;<br> <br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>为了能更好的说明接口信息，我们还可以在 Controller 类上使用 Swagger2 相关注解说明信息。 我们以 FastJsonController 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value = &quot;FastJson测试&quot;, tags = &#123; &quot;测试接口&quot; &#125;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonController</span> </span>&#123;<br> <br><span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span><br><span class="hljs-meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, dataType = &quot;string&quot;, paramType = &quot;query&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/test/&#123;name&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br> <br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(name);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br> <br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，上边的方法是用 @GetMapping 注解，如果只是使用 @RequestMapping 注解，不配置 method 属性，那么 API 文档会生成 7 种请求方式。</p><p>启动项目，打开浏览器访问 <a href="http://localhost:8080/swagger-ui.html![WX20190906-173719@2x](https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190906-173719@2x_1567762664793.png)">http://localhost:8080/swagger-ui.html![WX20190906-173719@2x](https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190906-173719@2x_1567762664793.png)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合</title>
    <link href="/blog/2021/02/01/SpringBoot%E6%95%B4%E5%90%88/"/>
    <url>/blog/2021/02/01/SpringBoot%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="配置-AOP-切面"><a href="#配置-AOP-切面" class="headerlink" title="配置 AOP 切面"></a>配置 AOP 切面</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>编写切面类<br>使用 <span class="hljs-meta">@Component</span>，<span class="hljs-meta">@Aspect</span> 标记到切面类上：<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeAspect</span> </span>&#123;<br> <br><span class="hljs-meta">@Around(&quot;execution(* com.light.springboot.controller.FastJsonController..*(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">method</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br> <br>System.out.println(<span class="hljs-string">&quot;=====Aspect处理=======&quot;</span>);<br>Object[] args = pjp.getArgs();<br><span class="hljs-keyword">for</span> (Object arg : args) &#123;<br>System.out.println(<span class="hljs-string">&quot;参数为:&quot;</span> + arg);<br>&#125;<br> <br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br> <br>Object object = pjp.proceed();<br> <br>System.out.println(<span class="hljs-string">&quot;Aspect 耗时:&quot;</span> + (System.currentTimeMillis() - start));<br> <br><span class="hljs-keyword">return</span> object;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>请求 FastJsonController 控制器的方法，结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-08_1567733306478.jpg" alt="springboot-web-08"></p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java">友好页面<br>先演示非友好页面，修改 FastJsonController 类中的 test 方法：<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br><br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><span class="hljs-comment">// 模拟异常</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br> <br>当系统报错时，返回到页面的内容通常是一些杂乱的代码段，这种显示对用户来说不友好，因此我们需要自定义一个友好的提示系统异常的页面。<br> <br>在 src/main/resources 下创建 /<span class="hljs-keyword">public</span>/error，在该目录下再创建一个名为 5xx.html 文件，该页面的内容就是当系统报错时返回给用户浏览的内容：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;系统错误&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;系统内部错误&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>路径时固定的，Spring Boot 会在系统报错时将返回视图指向该目录下的文件。<br>上边处理的 5xx 状态码的问题，接下来解决 <span class="hljs-number">404</span> 状态码的问题。<br> <br>当出现 <span class="hljs-number">404</span> 的情况时，用户浏览的页面也不够友好，因此我们也需要自定义一个友好的页面给用户展示。<br> <br>在 /<span class="hljs-keyword">public</span>/error 目录下再创建一个名为 <span class="hljs-number">404.</span>html 的文件：<br> <br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;访问异常&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;找不到页面&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br>全局异常捕获<br>如果项目前后端是通过 JSON 进行数据通信，则当出现异常时可以常用如下方式处理异常信息。<br> <br>编写一个类充当全局异常的处理类，需要使用 <span class="hljs-meta">@ControllerAdvice</span> 和 <span class="hljs-meta">@ExceptionHandler</span> 注解：<br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalDefaultExceptionHandler</span> </span>&#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理 Exception 类型的异常</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">defaultExceptionHandler</span><span class="hljs-params">(Exception e)</span> </span>&#123;<br><br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, e.getMessage());<br><span class="hljs-keyword">return</span> map;<br>&#125;<br>&#125;<br>其中，方法名为任意名，入参一般使用 Exception 异常类，方法返回值可自定义。<br> <br></code></pre></td></tr></table></figure><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;commons-io&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>&lt;version&gt;2.4&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>编写一个实体类，用于封装返回信息：<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInfo</span> </span>&#123;<br> <br><span class="hljs-keyword">private</span> String path;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileInfo</span><span class="hljs-params">(String path)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.path = path;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPath</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> path;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPath</span><span class="hljs-params">(String path)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.path = path;<br>&#125;<br><br>&#125;<br>编写 Controller，用于处理文件上传下载：<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br> <br><span class="hljs-keyword">private</span> String path = <span class="hljs-string">&quot;d:\\&quot;</span>;<br> <br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileInfo <span class="hljs-title">upload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>System.out.println(file.getName());<br>System.out.println(file.getOriginalFilename());<br>System.out.println(file.getSize());<br> <br>File localFile = <span class="hljs-keyword">new</span> File(path, file.getOriginalFilename());<br> <br>file.transferTo(localFile);<br> <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FileInfo(localFile.getAbsolutePath());<br>&#125;<br> <br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(path, id + <span class="hljs-string">&quot;.jpg&quot;</span>));<br>OutputStream outputStream = response.getOutputStream();) &#123;<br> <br>response.setContentType(<span class="hljs-string">&quot;application/x-download&quot;</span>);<br>response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + id + <span class="hljs-string">&quot;.jpg&quot;</span>);<br> <br>IOUtils.copy(inputStream, outputStream);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h1 id="CORS-支持"><a href="#CORS-支持" class="headerlink" title="CORS 支持"></a>CORS 支持</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java">前端页面<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br> <br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;跨域测试&lt;/title&gt;<br>&lt;/head&gt;<br> <br>&lt;body&gt;<br>    &lt;button id=&quot;test&quot;&gt;测试&lt;/button&gt;<br>    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(function() &#123;<br>        $(<span class="hljs-string">&quot;#test&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, function() &#123;<br>            $.ajax(&#123;<br>                <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://localhost:8080/fastjson/test&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>                <span class="hljs-string">&quot;dataType&quot;</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>                <span class="hljs-string">&quot;success&quot;</span>: function(data) &#123;<br>                    console.log(data);<br>                &#125;<br>            &#125;)<br>        &#125;);<br>    &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br> <br>&lt;/html&gt;<br> <br>前端服务器启动端口为 <span class="hljs-number">8088</span> 与后端服务器 <span class="hljs-number">8080</span> 不同源，因此出现跨域的问题。<br> <br>现在开始解决跨域问题，可以两种维度控制客户端请求。<br>粗粒度控制：<br> <br>方式一<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title">corsConfigurer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>              registry.addMapping(<span class="hljs-string">&quot;/fastjson/**&quot;</span>)<br>                      .allowedOrigins(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<span class="hljs-comment">// 允许 8088 端口访问</span><br>          &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br> <br>方式二<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/fastjson/**&quot;</span>)<br>              .allowedOrigins(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<span class="hljs-comment">// 允许 8088 端口访问</span><br>    &#125;<br>&#125;<br>细粒度控制：<br>在 FastJsonController 类中的方法上添加 <span class="hljs-meta">@CrossOrigin(origins=&quot;xx&quot;)</span> 注解：<br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-meta">@CrossOrigin(origins=&quot;http://localhost:8088&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br><br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><span class="hljs-keyword">return</span> user;<br>&#125;<br>在使用该注解时，需要注意 <span class="hljs-meta">@RequestMapping</span> 使用的请求方式类型，即 GET 或 POST。<br> <br> <br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义</title>
    <link href="/blog/2021/01/31/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <url>/blog/2021/01/31/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义-Servlet"><a href="#自定义-Servlet" class="headerlink" title="自定义 Servlet"></a>自定义 Servlet</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> 编写 Servlet<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>doPost(req, resp);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>resp.getWriter().write(<span class="hljs-string">&quot;自定义 Servlet&quot;</span>);<br>&#125;<br><br>&#125;<br> <br>注册 Servlet<br>将 Servelt 注册成 Bean。在上文创建的 WebConfig 类中添加如下代码：<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">servletRegistrationBean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> ServletTest(),<span class="hljs-string">&quot;/servletTest&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-04_1567661032166.jpg" alt="springboot-web-04"></p><h1 id="自定义过滤器-第三方过滤器"><a href="#自定义过滤器-第三方过滤器" class="headerlink" title="自定义过滤器/第三方过滤器"></a>自定义过滤器/第三方过滤器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">编写过滤器<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=======初始化过滤器=========&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br> <br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br> <br>filterChain.doFilter(request, response);<br> <br>System.out.println(<span class="hljs-string">&quot;filter 耗时：&quot;</span> + (System.currentTimeMillis() - start));<br> <br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=======销毁过滤器=========&quot;</span>);<br>&#125;<br> <br>&#125;<br> <br> 注册过滤器<br>要是该过滤器生效，有两种方式：<br><span class="hljs-number">1.</span>使用 <span class="hljs-meta">@Component</span> 注解<br><span class="hljs-number">2.</span>添加到过滤器链中，此方式适用于使用第三方的过滤器。将过滤器写到 WebConfig 类中，如下：<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">timeFilter</span><span class="hljs-params">()</span> </span>&#123;<br>FilterRegistrationBean registrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br><br>TimeFilter timeFilter = <span class="hljs-keyword">new</span> TimeFilter();<br>registrationBean.setFilter(timeFilter);<br><br>List&lt;String&gt; urls = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>urls.add(<span class="hljs-string">&quot;/*&quot;</span>);<br>registrationBean.setUrlPatterns(urls);<br><br><span class="hljs-keyword">return</span> registrationBean;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>结果如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-05_1567661159541.jpg" alt="springboot-web-05"></p><h1 id="自定义监听器"><a href="#自定义监听器" class="headerlink" title="自定义监听器"></a>自定义监听器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">编写监听器<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListenerTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;监听器初始化...&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br> <br>&#125;<br> <br>&#125;<br> <br>注册监听器<br>注册监听器为 Bean，在 WebConfig 配置类中添加如下代码：<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletListenerRegistrationBean&lt;ListenerTest&gt; <span class="hljs-title">servletListenerRegistrationBean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletListenerRegistrationBean&lt;ListenerTest&gt;(<span class="hljs-keyword">new</span> ListenerTest());<br>&#125;<br> <br>针对自定义 Servlet、Filter 和 Listener 的配置，还有另一种方式：<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootWebApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextInitializer</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    <span class="hljs-comment">// 配置 Servlet</span><br>        servletContext.addServlet(<span class="hljs-string">&quot;servletTest&quot;</span>,<span class="hljs-keyword">new</span> ServletTest())<br>          .addMapping(<span class="hljs-string">&quot;/servletTest&quot;</span>);<br>        <span class="hljs-comment">// 配置过滤器</span><br>        servletContext.addFilter(<span class="hljs-string">&quot;timeFilter&quot;</span>,<span class="hljs-keyword">new</span> TimeFilter())<br>          .addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST),<span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;/*&quot;</span>);<br>        <span class="hljs-comment">// 配置监听器</span><br>        servletContext.addListener(<span class="hljs-keyword">new</span> ListenerTest());<br>    &#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(SpringbootWebApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-06_1567661262946.jpg" alt="springboot-web-06"></p><h1 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">编写拦截器<br>使用 <span class="hljs-meta">@Component</span> 让 Spring 管理其生命周期：<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;========preHandle=========&quot;</span>);<br>System.out.println(((HandlerMethod)handler).getBean().getClass().getName());<br>System.out.println(((HandlerMethod)handler).getMethod().getName());<br><br>request.setAttribute(<span class="hljs-string">&quot;startTime&quot;</span>, System.currentTimeMillis());<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>System.out.println(<span class="hljs-string">&quot;========postHandle=========&quot;</span>);<br>Long start = (Long) request.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;耗时:&quot;</span>+(System.currentTimeMillis() - start));<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>System.out.println(<span class="hljs-string">&quot;========afterCompletion=========&quot;</span>);<br>Long start = (Long) request.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;耗时:&quot;</span>+(System.currentTimeMillis() - start));<br><br>System.out.println(exception);<br>&#125;<br> <br>&#125;<br> <br>注册拦截器<br>编写拦截器后，我们还需要将其注册到拦截器链中，如下配置：<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TimeInterceptor timeInterceptor;<br><br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>registry.addInterceptor(timeInterceptor);<br>&#125;<br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>请求一个 controller ，结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-07_1567661364759.jpg" alt="springboot-web-07"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-Web-Fastjson</title>
    <link href="/blog/2021/01/31/SpringBoot-Web-Fastjson/"/>
    <url>/blog/2021/01/31/SpringBoot-Web-Fastjson/</url>
    
    <content type="html"><![CDATA[<h1 id="整合模板引擎"><a href="#整合模板引擎" class="headerlink" title="整合模板引擎"></a>整合模板引擎</h1><p>由于 jsp 不被 SpringBoot 推荐使用，所以模板引擎主要介绍 Freemarker 和 Thymeleaf。</p><h2 id="Freemarker"><a href="#Freemarker" class="headerlink" title="Freemarker"></a>Freemarker</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">添加 Freemarker 依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>添加 Freemarker 模板配置<br>在 application.properties 中添加如下内容：<br>spring.freemarker.allow-request-override=<span class="hljs-keyword">false</span><br>spring.freemarker.cache=<span class="hljs-keyword">true</span><br>spring.freemarker.check-template-location=<span class="hljs-keyword">true</span><br>spring.freemarker.charset=UTF-<span class="hljs-number">8</span><br>spring.freemarker.content-type=text/html<br>spring.freemarker.expose-request-attributes=<span class="hljs-keyword">false</span><br>spring.freemarker.expose-session-attributes=<span class="hljs-keyword">false</span><br>spring.freemarker.expose-spring-macro-helpers=<span class="hljs-keyword">false</span><br>spring.freemarker.prefix=<br>spring.freemarker.suffix=.ftl<br> <br>Freemarker 案例演示<br>在 controller 包中创建 FreemarkerController：<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;freemarker&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreemarkerController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span> </span>&#123;<br><br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello Freemarker&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br>&#125;<br>在 templates 目录中创建名为 hello.ftl 文件，内容如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;$&#123;msg&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br></code></pre></td></tr></table></figure><h3 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboog-5-1_1567562182671.jpg" alt="springboog-5-1"></p><h2 id="整合-Thymeleaf"><a href="#整合-Thymeleaf" class="headerlink" title="整合 Thymeleaf"></a>整合 Thymeleaf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">添加 Thymeleaf 依赖<br>在 pom.xml 文件中添加：<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>添加 Thymeleaf 模板配置<br>在 application.properties 中添加如下内容：<br>spring.thymeleaf.cache=<span class="hljs-keyword">true</span><br>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.thymeleaf.encoding=UTF-<span class="hljs-number">8</span><br>spring.thymeleaf.content-type=text/html<br>上述配置都是默认值。<br> <br>Thymeleaf 案例演示<br>在 controller 包中创建 ThymeleafController:<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span> </span>&#123;<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello Thymeleaf&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br>&#125;<br> <br>在 template 目录下创建名为 hello.html 的文件，内容如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2 th:text=&quot;$&#123;msg&#125;&quot;&gt;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br></code></pre></td></tr></table></figure><h3 id="结果如下：-1"><a href="#结果如下：-1" class="headerlink" title="结果如下："></a>结果如下：</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboog-5-2_1567562330507.jpg" alt="springboog-5-2"></p><h2 id="整合-Fastjson"><a href="#整合-Fastjson" class="headerlink" title="整合 Fastjson"></a>整合 Fastjson</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;1.2.35&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>整合 Fastjson<br>创建一个配置管理类 WebConfig ，如下：<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br> <br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> HttpMessageConverters <span class="hljs-title">fastJsonHttpMessageConverters</span><span class="hljs-params">()</span> </span>&#123;<br>FastJsonHttpMessageConverter fastJsonHttpMessageConverter = <span class="hljs-keyword">new</span> FastJsonHttpMessageConverter();<br> <br>FastJsonConfig fastJsonConfig = <span class="hljs-keyword">new</span> FastJsonConfig();<br>fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);<br><br>fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);<br><br>HttpMessageConverter&lt;?&gt; converter = fastJsonHttpMessageConverter;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpMessageConverters(converter);<br> <br>&#125;<br>&#125;<br> <br>演示案例：<br>创建一个实体类 User： 记得get set<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br> <br><span class="hljs-keyword">private</span> Integer id;<br><br><span class="hljs-keyword">private</span> String username;<br><br><span class="hljs-keyword">private</span> String password;<br><br><span class="hljs-meta">@JSONField(format=&quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br> <br>&#125;<br> <br>创建控制器类 FastjsonController :<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br><br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="结果如下图："><a href="#结果如下图：" class="headerlink" title="结果如下图："></a>结果如下图：</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-06-1_1567562545811.jpg" alt="springboot-06-1">日期格式与我们修改的内容格式一致，说明 Fastjson 整合成功。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置logback</title>
    <link href="/blog/2021/01/31/SpringBoot%E9%85%8D%E7%BD%AElogback/"/>
    <url>/blog/2021/01/31/SpringBoot%E9%85%8D%E7%BD%AElogback/</url>
    
    <content type="html"><![CDATA[<h1 id="配置日志文件"><a href="#配置日志文件" class="headerlink" title="配置日志文件"></a>配置日志文件</h1><p>spring boot 默认会加载 classpath:logback-spring.xml 或者 classpath:logback-spring.groovy。</p><p>如需要自定义文件名称，在 application.properties 中配置 logging.config 选项即可。</p><p>在 src/main/resources 下创建 logback-spring.xml 文件，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;configuration&gt;<br>    &lt;!-- 文件输出格式 --&gt;<br>    &lt;property name=<span class="hljs-string">&quot;PATTERN&quot;</span> value=<span class="hljs-string">&quot;%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) |-%-5level [%thread] %c [%L] -| %msg%n&quot;</span> /&gt;<br>    &lt;!-- test文件路径 --&gt;<br>    &lt;property name=<span class="hljs-string">&quot;TEST_FILE_PATH&quot;</span> value=<span class="hljs-string">&quot;d:/test.log&quot;</span> /&gt;<br>    &lt;!-- pro文件路径 --&gt;<br>    &lt;property name=<span class="hljs-string">&quot;PRO_FILE_PATH&quot;</span> value=<span class="hljs-string">&quot;/opt/test/log&quot;</span> /&gt;<br> <br>    &lt;!-- 开发环境 --&gt;<br>    &lt;springProfile name=<span class="hljs-string">&quot;dev&quot;</span>&gt;<br>        &lt;appender name=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;<br>            &lt;encoder&gt;<br>                &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;<br>            &lt;/encoder&gt;<br>        &lt;/appender&gt;<br>        &lt;logger name=<span class="hljs-string">&quot;com.light.springboot&quot;</span> level=<span class="hljs-string">&quot;debug&quot;</span> /&gt;<br>        &lt;root level=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;appender-ref ref=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br> <br>    &lt;!-- 测试环境 --&gt;<br>    &lt;springProfile name=<span class="hljs-string">&quot;test&quot;</span>&gt;<br>        &lt;!-- 每天产生一个文件 --&gt;<br>        &lt;appender name=<span class="hljs-string">&quot;TEST-FILE&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;<br>            &lt;!-- 文件路径 --&gt;<br>            &lt;file&gt;$&#123;TEST_FILE_PATH&#125;&lt;/file&gt;<br>            &lt;rollingPolicy <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;<br>                &lt;!-- 文件名称 --&gt;<br>                &lt;fileNamePattern&gt;$&#123;TEST_FILE_PATH&#125;/info.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;<br>                &lt;!-- 文件最大保存历史数量 --&gt;<br>                &lt;MaxHistory&gt;100&lt;/MaxHistory&gt;<br>            &lt;/rollingPolicy&gt;<br>            &lt;layout <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;<br>                &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;<br>            &lt;/layout&gt;<br>        &lt;/appender&gt;<br>        &lt;logger name=<span class="hljs-string">&quot;com.light.springboot&quot;</span> level=<span class="hljs-string">&quot;debug&quot;</span> /&gt;<br>        &lt;root level=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;appender-ref ref=<span class="hljs-string">&quot;TEST-FILE&quot;</span> /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br> <br>    &lt;!-- 生产环境 --&gt;<br>    &lt;springProfile name=<span class="hljs-string">&quot;prod&quot;</span>&gt;<br>        &lt;appender name=<span class="hljs-string">&quot;PROD_FILE&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;<br>            &lt;file&gt;$&#123;PRO_FILE_PATH&#125;&lt;/file&gt;<br>            &lt;rollingPolicy <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;<br>                &lt;fileNamePattern&gt;$&#123;PRO_FILE_PATH&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;<br>                &lt;MaxHistory&gt;100&lt;/MaxHistory&gt;<br>            &lt;/rollingPolicy&gt;<br>            &lt;layout <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;<br>                &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;<br>            &lt;/layout&gt;<br>        &lt;/appender&gt;<br>        &lt;root level=<span class="hljs-string">&quot;warn&quot;</span>&gt;<br>            &lt;appender-ref ref=<span class="hljs-string">&quot;PROD_FILE&quot;</span> /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>其中，springProfile 标签的 name 属性对应 application.properties 中的 spring.profiles.active 的配置。</p><p>即 spring.profiles.active 的值可以看作是日志配置文件中对应的 springProfile 是否生效的开关。</p><h1 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h1><p>下面列出 Spring Boot 开发中常用的注解：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">@Configuration                 # 作用于类上，相当于一个 xml 配置文件<br>@Bean                          # 作用于方法上，相当于 xml 配置中的 &lt;bean&gt;<br>@SpringBootApplication         # Spring Boot的核心注解，是一个组合注解，用于启动类上<br>@EnableAutoConfiguration       # 启用自动配置，允许加载第三方 Jar 包的配置<br>@ComponentScan                 # 默认扫描 @SpringBootApplication 所在类的同级目录以及它的子目录<br>@PropertySource                # 加载 properties 文件<br>@Value                         # 将配置文件的属性注入到 Bean 中特定的成员变量<br>@EnableConfigurationProperties # 开启一个特性，让配置文件的属性可以注入到 Bean 中，与 @ConfigurationProperties 结合使用<br>@ConfigurationProperties       # 关联配置文件中的属性到 Bean 中<br>@Import                        # 加载指定 Class 文件，其生命周期被 Spring 管理<br>@ImportResource                # 加载 xml 文件<br></code></pre></td></tr></table></figure><h1 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h1><h2 id="属性装配"><a href="#属性装配" class="headerlink" title="属性装配"></a>属性装配</h2><p>有两种方式：使用 @Value 注解和 Environment 对象。 在 application.properties 中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">ds.userName=root<br>ds.password=tiger<br>ds.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test</span><br>ds.driverClassName=com.mysql.jdbc.Driver<br> <br>以上是自定义的配置。<br>创建一个配置类，如下：<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;ds.userName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String userName;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Environment environment;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ds.userName:&quot;</span> + <span class="hljs-keyword">this</span>.userName);<br>        System.out.println(<span class="hljs-string">&quot;ds.password:&quot;</span> + <span class="hljs-keyword">this</span>.environment.getProperty(<span class="hljs-string">&quot;ds.password&quot;</span>));<br>    &#125;<br>&#125;<br> <br>通过 <span class="hljs-meta">@Value</span> 获取 config.userName 配置；通过 environment 获取 config.password 配置。<br> <br>测试：<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ConfigurableApplicationContext context = SpringApplication.run(SpringbootApplication.class, args);<br>        context.getBean(WebConfig.class).show();<br>    &#125;<br>&#125;<br> <br>打印结果：<br>userName:root<br>password:tiger<br></code></pre></td></tr></table></figure><h2 id="对象装配"><a href="#对象装配" class="headerlink" title="对象装配"></a>对象装配</h2><p>创建一个封装类： 省略 get set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;ds&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceProperties</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> String url;<br> <br>    <span class="hljs-keyword">private</span> String driverClassName;<br> <br>    <span class="hljs-keyword">private</span> String userName;<br> <br>    <span class="hljs-keyword">private</span> String password;<br> <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ds.url=&quot;</span> + <span class="hljs-keyword">this</span>.url);<br>        System.out.println(<span class="hljs-string">&quot;ds.driverClassName=&quot;</span> + <span class="hljs-keyword">this</span>.driverClassName);<br>        System.out.println(<span class="hljs-string">&quot;ds.userName=&quot;</span> + <span class="hljs-keyword">this</span>.userName);<br>        System.out.println(<span class="hljs-string">&quot;ds.password=&quot;</span> +<span class="hljs-keyword">this</span>.password);<br>    &#125;<br> <br>&#125;<br>测试：<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ConfigurableApplicationContext context = SpringApplication.run(SpringbootApplication.class, args);<br>        context.getBean(DataSourceProperties.class).show();<br>    &#125;<br>&#125;<br> <br>打印结果<br>ds.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test</span><br>ds.driverClassName=com.mysql.jdbc.Driver<br>ds.userName=root<br>ds.password=tiger<br></code></pre></td></tr></table></figure><h1 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h1><p>打包的形式有两种：jar 和 war。</p><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><p>默认情况下，通过 maven 执行 package 命令后，会生成 jar 包，且该 jar 包会内置了 tomcat 容器，因此我们可以通过 java -jar 就可以运行项目</p><h2 id="war"><a href="#war" class="headerlink" title="war"></a>war</h2><p>让 SpringbootApplication 类继承 SpringBootServletInitializer 并重写 configure 方法，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder application)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> application.sources(SpringbootApplication.class);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootApplication.class, args);<br>    &#125;<br>&#125;<br>修改 pom.xml 文件，将 jar 改成 war，如下：<br>&lt;packaging&gt;war&lt;/packaging&gt;<br>移除内置 tomcat：<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;exclusions&gt;<br>&lt;exclusion&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>&lt;/exclusion&gt;<br>&lt;/exclusions&gt;<br>&lt;/dependency&gt;<br>&lt;!-- Servlet API --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>&lt;version&gt;3.1.0&lt;/version&gt;<br>&lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>打包成功后，将 war 包部署到 tomcat 容器中运行即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基本命令加RabbitMq安装</title>
    <link href="/blog/2021/01/25/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8A%A0RabbitMq%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2021/01/25/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8A%A0RabbitMq%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<ol><li>查看安装的Docker信息 docker info</li><li>查看Docker版本 docker version</li></ol><h1 id="镜像类命令"><a href="#镜像类命令" class="headerlink" title="镜像类命令"></a>镜像类命令</h1><ol><li>查看镜像 docker images</li><li>删除镜像 根据imageId或者imageName:tag删除本地镜像 docker rmi &lt;imageId|imageName:tag&gt;</li><li>拉取镜像 docker pull <a href="imagename:tag">imageName:tag</a></li><li>上传镜像到仓库 docker push <a href="imagename:tag">imageName:tag</a></li><li>保存镜像为tar包 docker save registry:latest &gt; /data/registry.tar</li><li>搜索镜像 docker search</li><li>导入镜像（用本地的tar包导入镜像） docker load –i</li><li>给镜像重新打tag docker tag <a href="imagename:tag">imageName:tag</a></li><li>构建镜像 docker build -t<img src="" alt="img">&lt;&gt;</li></ol><h1 id="容器类命令"><a href="#容器类命令" class="headerlink" title="容器类命令"></a>容器类命令</h1><ol><li>查询正在运行的容器 查询所有容器 docker ps docker ps -a</li><li>删除容器 删除的容器只能是停止的，非正在运行的容器 docker rm &lt;containerId|containerName&gt;</li><li>开启停止的容器 docker start &lt;containerId|containerName&gt;</li><li>停止容器 docker stop &lt;containerId|containerName&gt;</li><li>杀死容器 docker kill &lt;containerId|containerName&gt;</li><li>从容器中取日志 docker logs &lt;containerId|containerName&gt;</li><li>显示一个运行的容器里面的进程信息 docker top &lt;containerId|containerName&gt;</li><li>重启容器 docker restart &lt;containerId|containerName&gt;</li><li>从容器里面拷贝文件/目录到本地一个路径 docker cp &lt;containerId|containerName&gt;:/container_path to_path</li><li>启动容器 在容器中运行”echo”命令，输出”helloword” docker run image_name echo “hello word”</li><li>交互式进入容器中 docker run -i -t image_name /bin/bash</li><li>后台运行容器使用–d参数(后台运行) docker run -d image_name</li></ol><h1 id="Docker下安装rabbitmq"><a href="#Docker下安装rabbitmq" class="headerlink" title="Docker下安装rabbitmq"></a>Docker下安装rabbitmq</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">拉取镜像 <br>docker pull rabbitmq:3-management<br> <br>启动镜像<br>docker <span class="hljs-builtin-name">run</span> -d --hostname my-rabbit --name rabbit -v /data/rabbitmq:/var/lib/rabbitmq -e <span class="hljs-attribute">RABBITMQ_DEFAULT_USER</span>=admin -e <span class="hljs-attribute">RABBITMQ_DEFAULT_PASS</span>=admin -p 15672:15672 -p 5672:5672 rabbitmq:3-management<br></code></pre></td></tr></table></figure><p>完成后访问：<a href="http://ip:15672/">http://ip:15672</a> 用户名admin 密码 admin 也可以自己设置密码</p><p>是不是很简单 我自己在物理机上装了好几次 还是没有成功 docker 两句命令</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot入门设置</title>
    <link href="/blog/2021/01/25/SpringBoot%E5%85%A5%E9%97%A8%E8%AE%BE%E7%BD%AE/"/>
    <url>/blog/2021/01/25/SpringBoot%E5%85%A5%E9%97%A8%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。好就对了</p><h1 id="环境搭建maven项目"><a href="#环境搭建maven项目" class="headerlink" title="环境搭建maven项目"></a>环境搭建maven项目</h1><h2 id="pom-xml-中"><a href="#pom-xml-中" class="headerlink" title="pom.xml 中"></a>pom.xml 中</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 定义公共资源版本 --&gt;<br>&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;<br>    &lt;relativePath /&gt;<br>&lt;/parent&gt;<br> <br>&lt;properties&gt;<br>    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>&lt;/properties&gt;<br> <br>&lt;dependencies&gt;<br>    &lt;!-- 上边引入 parent，因此 下边无需指定版本 --&gt;<br>    &lt;!-- 包含 mvc,aop 等jar资源 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br> <br>&lt;build&gt;<br>    &lt;plugins&gt;<br>        &lt;plugin&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>        &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><h2 id="创建目录和配置文件"><a href="#创建目录和配置文件" class="headerlink" title="创建目录和配置文件"></a>创建目录和配置文件</h2><p>创建 src/main/resources 源文件目录，并在该目录下创建 application.properties 文件、static 和 templates 的文件夹。</p><p>application.properties：用于配置项目运行所需的配置数据。</p><p>static：用于存放静态资源，如：css、js、图片等。</p><p>templates：用于存放模板文件。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190902-094158@2x_1567388546384.png" alt="WX20190902-094158@2x"></p><h2 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h2><p>放在包下 com.cxy.template 不用单独建文件夹放 保持同级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 该注解指定项目为springboot，由此类当作程序入口</span><br><span class="hljs-comment"> 自动装配 web 依赖的环境</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>在com.cxy.template 下创建一个Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@GetMapping(&quot;/helloworld&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">helloworld</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:8080/helloworld">http://localhost:8080/helloworld</a> 这里建议增加热部署插件 <a href="https://bk.cuixiaoyan.xyz/archives/jrebel">idea 激活 jrebel</a></p><h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>pplication.properties 是 springboot 在运行中所需要的配置信息。</p><p>当我们在开发阶段，使用自己的机器开发，测试的时候需要用的测试服务器测试，上线时使用正式环境的服务器。</p><p>这三种环境需要的配置信息都不一样，当我们切换环境运行项目时，需要手动的修改多出配置信息，非常容易出错。</p><p>为了解决上述问题，springboot 提供多环境配置的机制，让开发者非常容易的根据需求而切换不同的配置环境。</p><p>在 src/main/resources 目录下创建三个配置文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">application-dev.properties：用于开发环境<br>application-test.properties：用于测试环境<br>application-prod.properties：用于生产环境<br> <br>我们可以在这个三个配置文件中设置不同的信息，application.properties 配置公共的信息。<br> <br>在 application.properties 中配置：<br>spring.profiles.active=dev<br> <br></code></pre></td></tr></table></figure><p>切换项目启动的环境不仅对读取配置文件信息有效，也可以对 Bean 有效。</p><p>当我们需要对不同环境使用不同的 Bean 时，可以通过 @Profile 注解进行区分，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanConfiguration</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;dev&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Runnable <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开发环境使用的 Bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> () -&gt; &#123;&#125;;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Runnable <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;测试环境使用的 Bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> () -&gt; &#123;&#125;;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;pro&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Runnable <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生成环境使用的 Bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> () -&gt; &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当启动项目后，Spring 会根据 spring.profiles.active 的值实例化对应的 Bean。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装Docker</title>
    <link href="/blog/2021/01/25/centos7%E5%AE%89%E8%A3%85Docker/"/>
    <url>/blog/2021/01/25/centos7%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要用Docker"><a href="#为什么要用Docker" class="headerlink" title="为什么要用Docker"></a>为什么要用Docker</h1><p>全凭自己理解 我又不是专业的运维 搞这个干嘛 这种想法可不行哦</p><ol><li>安装软件方便快捷 例如rabbitmq 之前在本地怎么安装都访问不到web管理页面 但是docker就两句话 最后的效果是一样的</li><li>能节省服务器一部分资源 我的服务器确实太小了</li><li>而且像我这种小白白 安装错了 直接停止 删除镜像就可以了</li><li>安装在服务器上 恐怕要去谷歌 如何完全卸载xxx啦</li></ol><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>目前，CentOS 仅发行版本中的内核支持 Docker。 Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。 Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><p><strong>两种方式 二选一</strong></p><h2 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#查看你当前的内核版本</span><br>uname -r<br><br><span class="hljs-meta">#安装 Docker</span><br>yum -y install docker<br><br><span class="hljs-meta">#启动 Docker 后台服务</span><br>service docker start<br><br><span class="hljs-meta">#测试运行 hello-world,由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><h1 id="使用脚本安装-Docker"><a href="#使用脚本安装-Docker" class="headerlink" title="使用脚本安装 Docker"></a>使用脚本安装 Docker</h1><p>1、使用 sudo 或 root 权限登录 Centos。 2、确保 yum 包更新到最新。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#确保 yum 包更新到最新</span><br>sudo yum update<br><br><span class="hljs-meta">#执行 Docker 安装脚本,执行这个脚本会添加 docker.repo 源并安装 Docker。</span><br>curl -fsSL https:<span class="hljs-comment">//get.docker.com/ | sh</span><br><br><span class="hljs-meta">#启动 Docker 进程</span><br>sudo service docker start<br><br><span class="hljs-meta">#验证 docker 是否安装成功并在容器中执行一个测试的镜像</span><br>sudo docker run hello-world<br></code></pre></td></tr></table></figure><h2 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h2><p>docker version<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190828-091709@2x_1566955051972.png" alt="WX20190828-091709@2x"></p><p>到此安装成功 最后推荐一款 管理界面 个人使用是免费的 足够啦<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190828-092421@2x_1566955505633.png" alt="WX20190828-092421@2x"></p><p><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8docker">为什么要用Docker</a><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">前提条件</a><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85-docker">使用脚本安装 Docker</a><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E6%9F%A5%E7%9C%8Bdocker%E7%89%88%E6%9C%AC">查看Docker版本</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的数学工具类Math</title>
    <link href="/blog/2021/01/24/java%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B7%A5%E5%85%B7%E7%B1%BBMath/"/>
    <url>/blog/2021/01/24/java%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B7%A5%E5%85%B7%E7%B1%BBMath/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>java.util.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作。</p><h2 id="基本的方法"><a href="#基本的方法" class="headerlink" title="基本的方法"></a>基本的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;获取绝对值。有多种重载，absolutely绝对地<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">ceil</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;向上取整，ceil是天花板的意思<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">floor</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;向下取整，floor是地板的意思<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">round</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;四舍六入五成双（看下面代码的注释），round有大约，完整的意思<br> <br></code></pre></td></tr></table></figure><h2 id="四种方法一起通过代码演示一遍"><a href="#四种方法一起通过代码演示一遍" class="headerlink" title="四种方法一起通过代码演示一遍"></a>四种方法一起通过代码演示一遍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//abs方法，取绝对值</span><br>        System.out.println(Math.abs(<span class="hljs-number">3.14</span>)); <span class="hljs-comment">//3.14</span><br>        System.out.println(Math.abs(<span class="hljs-number">0</span>));    <span class="hljs-comment">//0</span><br>        System.out.println(Math.abs(-<span class="hljs-number">2.2</span>)); <span class="hljs-comment">//2.2</span><br> <br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br> <br>        <span class="hljs-comment">//ceil方法，向上取整，往大的靠</span><br>        System.out.println(Math.ceil(<span class="hljs-number">3.2</span>));  <span class="hljs-comment">//4.0</span><br>        System.out.println(Math.ceil(<span class="hljs-number">3.8</span>));  <span class="hljs-comment">//4.0</span><br>        System.out.println(Math.ceil(-<span class="hljs-number">3.2</span>)); <span class="hljs-comment">//-3.0</span><br>        System.out.println(Math.ceil(-<span class="hljs-number">3.8</span>)); <span class="hljs-comment">//-3.0</span><br> <br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        <br>        <span class="hljs-comment">//floor方法，向下取整，往小的靠</span><br>        System.out.println(Math.floor(<span class="hljs-number">3.2</span>));  <span class="hljs-comment">//3.0</span><br>        System.out.println(Math.floor(<span class="hljs-number">3.8</span>));  <span class="hljs-comment">//3.0</span><br>        System.out.println(Math.floor(-<span class="hljs-number">3.2</span>)); <span class="hljs-comment">//-4.0</span><br>        System.out.println(Math.floor(-<span class="hljs-number">3.8</span>)); <span class="hljs-comment">//-4.0</span><br> <br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br> <br>        <span class="hljs-comment">//【注意，面试高频】round方法，四舍 六入 五成双</span><br>        <span class="hljs-comment">//先看看四舍六入，如果出现负数，先转成正数，再四舍六入，最后加上负号</span><br>        System.out.println(Math.round(<span class="hljs-number">3.4</span>));  <span class="hljs-comment">//3</span><br>        System.out.println(Math.round(<span class="hljs-number">3.6</span>));  <span class="hljs-comment">//4</span><br>        System.out.println(Math.round(-<span class="hljs-number">3.4</span>)); <span class="hljs-comment">//-3</span><br>        System.out.println(Math.round(-<span class="hljs-number">3.6</span>)); <span class="hljs-comment">//-4</span><br>        <span class="hljs-comment">//五成双是什么意思呢？当出现0.5结尾的时候，就给它再加上+0.5，5不就成双了</span><br>        <span class="hljs-comment">//接着再对相加的结果进行floor运算</span><br>        System.out.println(Math.round(-<span class="hljs-number">2.5</span>));  <span class="hljs-comment">//-2</span><br>        System.out.println(Math.floor(-<span class="hljs-number">2.5</span> + <span class="hljs-number">0.5</span>));  <span class="hljs-comment">//与Math.round(-2.5)结果一致</span><br> <br>System.out.println(Math.round(<span class="hljs-number">2.5</span>));  <span class="hljs-comment">//3</span><br>        System.out.println(Math.floor(<span class="hljs-number">2.5</span> + <span class="hljs-number">0.5</span>));  <span class="hljs-comment">//与Math.round(2.5)结果一致</span><br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="圆周率Math-PI"><a href="#圆周率Math-PI" class="headerlink" title="圆周率Math.PI"></a>圆周率Math.PI</h2><p>在Math类的源码中，我们可以看到，它自定义的圆周率 PI = 3.14159265358979323846</p><p>以后的计算如果需要用到PI，尽量用已经定义好的圆周率，非常精确</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql入门</title>
    <link href="/blog/2021/01/24/mysql%E5%85%A5%E9%97%A8/"/>
    <url>/blog/2021/01/24/mysql%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h1><p>是数据库对象，实现数据库的快速查询</p><p>使用索引的原因：实现数据库的快速查询，提高查询速度</p><h1 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <br><span class="hljs-number">1</span>，普通索引<br>最基本的索引，对字段数据的类型和值没有任何限制，数据类型可以任意，字段的值可以为空也可以重复。<br> <br><span class="hljs-number">2</span>，主键索引<br>给主键字段添加的索引、<br>主键特点：唯一且非空<br> <br><span class="hljs-number">3</span>，唯一索引<br>给唯一字段添加的索引<br>唯一索引和主键索引的区别：<br>唯一索引：只有唯一，可以有空值<br>主键索引：唯一且非空<br><br><span class="hljs-number">4</span>，全文索引<br>适用于给一大串文本添加的索引，只可以给字符串数据类型添加<br>字符串数据类型（<span class="hljs-type">char</span> <span class="hljs-type">varchar</span> text）<br><br><span class="hljs-number">5</span>，空间索引<br>字段的数据类型只能是空间数据类型，且改字段的值必须为 非空 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>空间数据类型 geometry point linestring polygon<br><br><span class="hljs-number">6</span>，复合索引<br>给多个字段添加的索引<br>注意：如果使用了复合索引，查询条件中只有使用了第一个字段，该索引才会被触发<br>例如（id name）只有查询条件中使用了id字段，索引才会被使用<br>如果查询条件只有name字段，则索引不会被触发<br> <br></code></pre></td></tr></table></figure><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，自动创建索引<br>在创建表的时候，给表添加了主键和唯一约束时，数据库给自动的给主键约束和唯一约束创建对应的主键索引和唯一索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">unique</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br>查询表中的索引语法为：<span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> 表名<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br><br><span class="hljs-number">2</span>，手动创建索引<br> <br>a，创建表时创建索引<br><br><br><span class="hljs-number">1</span>，创建普通索引、<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>index (sno)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br><br><span class="hljs-number">2</span>，唯一索引的创建<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br><span class="hljs-keyword">unique</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br><span class="hljs-keyword">unique</span> index (sno)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br><span class="hljs-number">3</span>，创建主键索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br><span class="hljs-keyword">primary</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br><span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> (sno)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br> <br><span class="hljs-number">4</span>，创建全文索引、只有：只能给字符串数据类型添加<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>fulltext index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>fulltext key (sinfo)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br> <br><span class="hljs-number">5</span>，创建复合索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名<span class="hljs-number">1</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">2</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">3</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><br><span class="hljs-comment">---创建表index_student,给sno 和 sname 添加复合索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>index (sno,sname)<br>);<br> <br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br><span class="hljs-number">6</span>，创建空间索引<br>注意：只能给空间数据类型添加，且该字段的值不能为空 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>spatial index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><br><span class="hljs-comment">---创建表index_student,给sloc字段（是point字段类型）添加空间索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>sloc point <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>spatial index (sloc)<br>);<br><br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br><br>b，创建表后使用“<span class="hljs-keyword">create</span> index ”创建索引<br><span class="hljs-keyword">create</span> [ <span class="hljs-keyword">unique</span><span class="hljs-operator">|</span>fulltext<span class="hljs-operator">|</span>spatial ] index 索引名称 [索引的类型] <span class="hljs-keyword">on</span> 表名 (字段名<span class="hljs-number">1</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">2</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br> <br>需要注意的是：使用<span class="hljs-keyword">create</span> index这种创建索引的方式不能创建主键索引<br> <br>(<span class="hljs-number">1</span>)，创建普通索引<br><span class="hljs-comment">---创建表index_student,给表sno添加普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">create</span> index index_student_sno <span class="hljs-keyword">on</span> index_student (sno);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">2</span>)，创建唯一索引<br><span class="hljs-comment">---创建表index_student,给表sname添加唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index index_student_sname <span class="hljs-keyword">on</span> index_student (sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">3</span>)，创建全文索引 fulltext<br><span class="hljs-comment">---创建表index_student,给表sinfo添加全文索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><span class="hljs-keyword">create</span> fulltext index index_student_sinfo <span class="hljs-keyword">on</span> index_student (sinfo);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br><br> <br>(<span class="hljs-number">4</span>)，创建空间索引<br><span class="hljs-comment">---创建表index_student,给表sloc添加空间索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sloc point <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><span class="hljs-keyword">create</span> spatial index index_student_sloc <span class="hljs-keyword">on</span> index_student (sloc);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">5</span>)，创建复合索引<br><span class="hljs-comment">---创建表index_student,给表sno和sname添加复合索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">create</span> index index_student_sno_sname <span class="hljs-keyword">on</span> index_student (sno, sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>c，给已有表添加索引“<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>”<br><br>(<span class="hljs-number">1</span>)添加普通索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sno添加普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> index (sno)<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">2</span>)添加唯一索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sname添加唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> index (sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">3</span>)添加主键索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sno添加主键索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> (sno);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br><br><br>(<span class="hljs-number">4</span>)添加全文索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> fulltext [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sinfo添加全文索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> fulltext index(sinfo);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">5</span>)添加空间索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> spatial [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sloc添加空间索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sloc point <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> spatial index (sloc);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">6</span>)添加复合索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名<span class="hljs-number">1</span> [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">2</span> [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sno和sname添加复合索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> index (sno,sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br></code></pre></td></tr></table></figure><h1 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 删除<br>语法为<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> index<span class="hljs-operator">|</span>key 索引名称<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">drop</span> index sno;<br><br><span class="hljs-number">2</span>，使用<span class="hljs-keyword">drop</span> index 删除<br>语法为<span class="hljs-keyword">drop</span> index 索引名称 <span class="hljs-keyword">on</span> 表名<br><br>注意：使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 方式不能删除主键索引<br>  删除主键索引的方式为：<br>  a,<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span><br>  b,使用<span class="hljs-keyword">drop</span> index进行删除<br> <br></code></pre></td></tr></table></figure><h1 id="数据的插入"><a href="#数据的插入" class="headerlink" title="数据的插入"></a>数据的插入</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs sql">(<span class="hljs-number">1</span>)为所有字段插入数据<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 [(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....)] <span class="hljs-keyword">values</span><span class="hljs-operator">|</span><span class="hljs-keyword">value</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...)<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><span class="hljs-comment">---为表中所有字段插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sno,sname,age,sex,email) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot;张三&quot;, <span class="hljs-number">20</span>, &quot;男&quot;, &quot;zhangsan@163.com&quot;);<br><br><span class="hljs-comment">---另一种写法表后面不写字段名，则插入值的顺序要与表结构相同</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,&quot;李四&quot;, <span class="hljs-number">21</span>, &quot;女&quot;, &quot;lisi@163.com&quot;);<br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br> <br> <br>(<span class="hljs-number">2</span>)为指定字段插入数据<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....) <span class="hljs-keyword">values</span><span class="hljs-operator">|</span><span class="hljs-keyword">value</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...)<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><span class="hljs-comment">---给表中sname和age插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sname,age) <span class="hljs-keyword">values</span> (&quot;王五&quot;, <span class="hljs-number">18</span>);<br><br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br> <br>(<span class="hljs-number">3</span>)使用<span class="hljs-keyword">SET</span>方式插入数据<br>语法为：<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>字段值<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>字段值<span class="hljs-number">2</span>,....;<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><span class="hljs-comment">---使用set方式给表中所有字段插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">set</span> sno<span class="hljs-operator">=</span><span class="hljs-number">4</span>,sname<span class="hljs-operator">=</span>&quot;皮皮&quot;,age<span class="hljs-operator">=</span><span class="hljs-number">17</span>,sex<span class="hljs-operator">=</span>&quot;男&quot;,email<span class="hljs-operator">=</span>&quot;pipi@16.com&quot;;<br><br><span class="hljs-comment">---使用set方式给指定的字段插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">set</span> sname<span class="hljs-operator">=</span>&quot;彬彬&quot;,age<span class="hljs-operator">=</span><span class="hljs-number">2</span>,email<span class="hljs-operator">=</span>&quot;binbin@163.com&quot;;<br><br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><br> <br>(<span class="hljs-number">4</span>)同时插入多条数据<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 [(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....)] <span class="hljs-keyword">values</span><span class="hljs-operator">|</span><span class="hljs-keyword">value</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...),....;<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---给所有字段插入多条数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sno,sname,age,sex,email) <br><span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>,&quot;小红&quot;,<span class="hljs-number">15</span>,&quot;女&quot;,&quot;xiaohong@163.com&quot;),(<span class="hljs-number">7</span>,&quot;小二&quot;,<span class="hljs-number">17</span>,&quot;男&quot;,&quot;xiaoer@163.com&quot;);<br><br><span class="hljs-comment">---给指定字段插入多条数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sname,age,email) <br><span class="hljs-keyword">values</span> (&quot;小花&quot;,<span class="hljs-number">14</span>,&quot;xiaohua@163.com&quot;),(&quot;小强&quot;,<span class="hljs-number">11</span>,&quot;xiaoqiang@163.com&quot;);<br><br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br> <br> <br>(<span class="hljs-number">5</span>)插入查询结果<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....) <span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3.</span>....<span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 条件;<br>注意：插入表的字段和查询的字段个数和类型要保持一致<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---创建t_student表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;女&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---将student表中的数据查询结果插入到t_student表中</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_student <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_student;<br> <br> <br></code></pre></td></tr></table></figure><h1 id="数据的更新"><a href="#数据的更新" class="headerlink" title="数据的更新"></a>数据的更新</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，更新指定数据<br>语法为：<span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>[,字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,....] <span class="hljs-keyword">where</span> 条件<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---更新指定数据</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> sname<span class="hljs-operator">=</span>&quot;张老大&quot; <span class="hljs-keyword">where</span> sname<span class="hljs-operator">=</span>&quot;张三&quot;;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><br> <br><span class="hljs-number">2</span>，更新全部数据<br>语法为：<span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>[,字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,....] <br> <br><span class="hljs-comment">---更新全部数据 将表中年龄都修改为18</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">18</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br></code></pre></td></tr></table></figure><h1 id="数据的删除"><a href="#数据的删除" class="headerlink" title="数据的删除"></a>数据的删除</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，删除指定数据<br>语法为：<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br><br><span class="hljs-comment">---删除student表中sno大于2的学生信息</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sno<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>;<br> <br> <br><span class="hljs-number">2</span>，删除全部数据<br>语法为：<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br><br><span class="hljs-comment">---删除student表的全部数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br> <br> <br><span class="hljs-number">3</span>，<span class="hljs-keyword">truncate</span>关键字删除数据<br>语法为：<span class="hljs-keyword">truncate</span> 表名<br> <br><span class="hljs-number">4</span>，<span class="hljs-keyword">truncate</span>与<span class="hljs-keyword">delete</span>删除全部记录的区别：<br> <br>a，<span class="hljs-keyword">delete</span>是数据操纵语言DML 而<span class="hljs-keyword">truncate</span>是数据定义语言DDL<br><br>b，<span class="hljs-keyword">delete</span>删除数据是一条一条删除<br><span class="hljs-keyword">truncate</span>删除数据是保留表结构，直接删除数据，删除后表的状态相当于新表<br><span class="hljs-keyword">truncate</span>的效率比<span class="hljs-keyword">delete</span>高<br><br>c，<span class="hljs-keyword">delete</span>删除数据，会显示删除行数<br><span class="hljs-keyword">truncate</span>不会显示<br><br>d，删除记录后，再次向表添加数据，自增的值会在原来最大值<span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">truncate</span>删除记录后，会从<span class="hljs-number">1</span>开始自增<br><br>e，<span class="hljs-keyword">delete</span>操作可以回滚即删除的数据可以恢复<br><span class="hljs-keyword">truncate</span>操作隐士提交，删除的数据不能恢复<br> <br> <br></code></pre></td></tr></table></figure><h1 id="创建emp表"><a href="#创建emp表" class="headerlink" title="创建emp表"></a>创建emp表</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <br> <br>用户用不同的方式从数据库中获取自己所需要的数据<br>是数据库操作中非常重要且频繁的操作<br> <br><span class="hljs-comment">---创建新库test</span><br><span class="hljs-comment">---在test库中创建emp(雇员表)</span><br>emp(雇员编号empno<br>雇员名称ename<br>雇员职位job<br>雇员领导mgr<br>雇员入职日期hiredate<br>雇员月薪sal<br>雇员津贴comm<br>雇员部门编号deptno<br><br><span class="hljs-keyword">create</span> database test;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>empno <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>job <span class="hljs-type">varchar</span>(<span class="hljs-number">9</span>),<br>mgr <span class="hljs-type">int</span>(<span class="hljs-number">4</span>),<br>hiredate <span class="hljs-type">date</span>,<br>sal <span class="hljs-type">decimal</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>comm <span class="hljs-type">decimal</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>deptno <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br> <br><span class="hljs-comment">---同时插入多条数据</span><br> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp <span class="hljs-keyword">values</span><br>(<span class="hljs-number">7369</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7902</span>, <span class="hljs-string">&#x27;1980-12-17&#x27;</span>, <span class="hljs-number">800</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7499</span>, <span class="hljs-string">&#x27;Allen&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-02-20&#x27;</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">300</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7521</span>, <span class="hljs-string">&#x27;Ward&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-02-22&#x27;</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;manager&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-04-02&#x27;</span>, <span class="hljs-number">2975</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7654</span>, <span class="hljs-string">&#x27;Maritn&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-09-28&#x27;</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;Blake&#x27;</span>, <span class="hljs-string">&#x27;manager&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-05-01&#x27;</span>, <span class="hljs-number">2850</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7782</span>, <span class="hljs-string">&#x27;Clark&#x27;</span>, <span class="hljs-string">&#x27;manager&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-06-09&#x27;</span>, <span class="hljs-number">2450</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>), (<span class="hljs-number">7788</span>, <span class="hljs-string">&#x27;Scott&#x27;</span>, <span class="hljs-string">&#x27;analyst&#x27;</span>, <span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;1987-04-19&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-string">&#x27;president&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;1981-11-17&#x27;</span>, <span class="hljs-number">5000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>), (<span class="hljs-number">7844</span>, <span class="hljs-string">&#x27;Turner&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-09-08&#x27;</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7876</span>, <span class="hljs-string">&#x27;Adams&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7788</span>, <span class="hljs-string">&#x27;1987-05-23&#x27;</span>, <span class="hljs-number">1100</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7900</span>, <span class="hljs-string">&#x27;James&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-12-03&#x27;</span>, <span class="hljs-number">950</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7902</span>, <span class="hljs-string">&#x27;Ford&#x27;</span>, <span class="hljs-string">&#x27;analyst&#x27;</span>, <span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;1981-12-03&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7934</span>, <span class="hljs-string">&#x27;Miller&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7782</span>, <span class="hljs-string">&#x27;1982-01-23&#x27;</span>, <span class="hljs-number">1300</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>);<br> <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br> <br> <br> <br><span class="hljs-number">2</span>，以上表创建完成之后进行单表查询<br> <br>a，查询所有字段<br>语法<span class="hljs-number">1</span>为：<span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名<br>语法<span class="hljs-number">2</span>为：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名<br> <br>b，查询指定字段<br>语法为：<span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名<br><span class="hljs-comment">---查询雇员表中雇员姓名，职位，部门号，薪资</span><br><span class="hljs-keyword">select</span> ename,job,deptno,sal <span class="hljs-keyword">from</span> emp;<br> <br>c，去重<span class="hljs-keyword">distinct</span>的使用<br>语法为：<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名<br><span class="hljs-comment">---查询雇员在哪个部门号中</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> deptno <span class="hljs-keyword">from</span> emp;<br><span class="hljs-comment">---查询雇员部门号及职位</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> deptno,job <span class="hljs-keyword">from</span> emp;<br>注意：<span class="hljs-keyword">distinct</span>使用到多个字段上时，只有多个字段的值都相同时才去重<br> <br><br>d，查询时算术运算符的使用<br> <span class="hljs-operator">+</span>   <span class="hljs-operator">-</span>   <span class="hljs-operator">*</span>  <span class="hljs-operator">/</span>(div)   v<span class="hljs-operator">%</span>(mod)<br><span class="hljs-comment">---查询每个雇员的年薪</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br> <br>e，给字段起别名<br>语法为：<span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span> [<span class="hljs-keyword">as</span>] 别名,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名;<br><span class="hljs-comment">---查询每个雇员的年薪，别名为yearsal</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp;<br>注意：如果别名中有空格特殊符号，需要使用单引号括起来<br><span class="hljs-comment">---查询每个雇员的年薪，别名为yearsal&amp;年薪 或者别名为 yearsal 年薪</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;yearsal&amp;年薪&#x27;</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;yearsal 年薪&#x27;</span> <span class="hljs-keyword">from</span> emp;<br> <br></code></pre></td></tr></table></figure><h2 id="查询结果排序"><a href="#查询结果排序" class="headerlink" title="查询结果排序"></a>查询结果排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">默认升序 <span class="hljs-keyword">asc</span><br>降序 <span class="hljs-keyword">desc</span><br> <br><span class="hljs-number">1</span>，在单个字段中排序<br>语法为：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段  <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span><br><span class="hljs-comment">---查询雇员信息按雇员薪资升序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>;<br><span class="hljs-comment">---由于默认的排序方式是升序，所以asc可以省略</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal;<br><br><span class="hljs-number">2</span>，在多个字段中使用排序<br>语法为：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名<span class="hljs-number">1</span>  <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>,字段名<span class="hljs-number">2</span>  <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span>desc....<br><span class="hljs-comment">---查询雇员信息，先按雇员薪资升序排，如薪资相同则按入职日期降序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal,hiredate <span class="hljs-keyword">desc</span>;<br>注意：排序可以起别名<br><span class="hljs-comment">---查询雇员的年薪给年薪起个别名yearsal,按年薪降序排序</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> yearsal <span class="hljs-keyword">desc</span>;<br> <br></code></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs sql">是用户按照一定条件查询，查询满足条件的部分记录<br>语法格式：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 条件<br> <br>(<span class="hljs-number">1</span>)比较运算符的使用   <span class="hljs-operator">=</span>    <span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>      <span class="hljs-operator">&gt;=</span>      <span class="hljs-operator">&lt;=</span>      <span class="hljs-operator">!=</span>       <span class="hljs-operator">&lt;&gt;</span><br><span class="hljs-comment">---查询部门号为20的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br><span class="hljs-comment">---查询薪资大于等于3000的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">3000</span>;<br><span class="hljs-comment">---查询薪资小于3000的雇员名称，薪资，职位</span><br><span class="hljs-keyword">select</span> ename,sal,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&lt;</span><span class="hljs-number">3000</span>;<br><span class="hljs-comment">---查询名为Smith的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span>&quot;Smith&quot;;<br>注意：MySQL默认不区分大小写，如果要区分大小写则可以使用<span class="hljs-type">binary</span>关键字<br><span class="hljs-comment">---binary的使用</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-type">binary</span> ename<span class="hljs-operator">=</span>&quot;Smith&quot;;<br><br>(<span class="hljs-number">2</span>) [<span class="hljs-keyword">not</span>] <span class="hljs-keyword">between</span> <span class="hljs-keyword">and</span>的使用 <br>可以查询某区间范围的记录<br><span class="hljs-comment">---查询薪资在1200-3000之间的雇员信息</span><br><span class="hljs-comment">---between后面是开始值，and后面是结束值，不能颠倒。包括边界</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">between</span> <span class="hljs-number">1200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br><span class="hljs-comment">---查询薪资不在1200-3000范围之内的雇员姓名，薪资</span><br><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">not</span> <span class="hljs-keyword">between</span> <span class="hljs-number">1200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br> <br>(<span class="hljs-number">3</span>)[<span class="hljs-keyword">not</span>] <span class="hljs-keyword">in</span>的使用<br>语法格式为：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 字段名 <span class="hljs-keyword">in</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,...)<br><span class="hljs-comment">---查询雇员姓名是smith,scott,king的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">in</span>(&quot;smith&quot;,&quot;scott&quot;,&quot;king&quot;);<br><span class="hljs-comment">---查询雇员姓名不是smith,scott,king的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(&quot;smith&quot;,&quot;scott&quot;,&quot;king&quot;);<br> <br>(<span class="hljs-number">4</span>)<span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> 或者 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>  判断某个字段是否为空<br><span class="hljs-comment">---查询雇员中，有津贴的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">---查询雇员中，没有津贴的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br> <br>(<span class="hljs-number">5</span>)模糊查询<br>可查询以XX开头，以XX结尾，包含XX，第几个是X<br><span class="hljs-operator">%</span>：指任意长度的字符<br>_：匹配一个字符<br>语法为：<span class="hljs-keyword">select</span> 查询内容<span class="hljs-keyword">from</span>表名<span class="hljs-keyword">where</span>字段名<span class="hljs-keyword">like</span><br><span class="hljs-comment">---查询雇员姓名以S开头的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;S%&quot;;<br><span class="hljs-comment">---查询雇员姓名以S结尾的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;%S&quot;;<br><span class="hljs-comment">---查询雇员姓名包含S的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;%S%&quot;;<br><span class="hljs-comment">---查询雇员姓名第二个字符是L的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;_L%&quot;;<br><span class="hljs-comment">---查询雇员姓名长度是5的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;_____&quot;;<br> <br>(<span class="hljs-number">6</span>)条件中的逻辑运算符<br><span class="hljs-keyword">and</span>：查询时，只有满足所有条件的记录才会被查询出来<br><span class="hljs-keyword">select</span> 查询内容<span class="hljs-keyword">from</span>表名<span class="hljs-keyword">where</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> 条件<span class="hljs-number">2</span> and....<br><span class="hljs-comment">---查询雇员表中部门号为20 职位是clerk的雇员姓名 部门编号 职位</span><br><span class="hljs-keyword">select</span> ename,deptno,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span>&quot;clerk&quot;;<br><span class="hljs-comment">---查询部门号为30，薪资在1500-3000之间的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">and</span> sal <span class="hljs-keyword">between</span> <span class="hljs-number">1500</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br><br><span class="hljs-keyword">or</span>：查询时，只要满足任一条件记录就能被查询出来<br><span class="hljs-keyword">select</span> 查询内容<span class="hljs-keyword">from</span>表名<span class="hljs-keyword">where</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> 条件<span class="hljs-number">2</span> or....<br><span class="hljs-comment">---查询雇员表中部门号为20 或者职位是clerk的雇员姓名 部门编号 职位</span><br><span class="hljs-keyword">select</span> ename,deptno,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span>&quot;clerk&quot;;<br> <br> <br></code></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名 <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span> limit a,b <br>注意：<br>(a代表从哪条记录开始，b代表每页显示的条数) 且默认第一条数据的值为<span class="hljs-number">0</span><br>如果limit与<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 连用的时候，先排序再分页<br><span class="hljs-comment">---显示第一页雇员信息 例如每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">0</span>,<span class="hljs-number">4</span>;<br><span class="hljs-comment">---显示第二页雇员信息 每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">4</span>,<span class="hljs-number">4</span>;<br><span class="hljs-comment">---显示第三页雇员信息 每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">8</span>,<span class="hljs-number">4</span>;<br><span class="hljs-comment">---显示第n页雇员信息 每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit (n<span class="hljs-number">-1</span>)<span class="hljs-operator">*</span><span class="hljs-number">4</span>,<span class="hljs-number">4</span>;<br> <br> <br></code></pre></td></tr></table></figure><h1 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h1><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs sql">a，字符函数 <br>(<span class="hljs-number">1</span>)concat() 拼接字符串<br><span class="hljs-comment">---查询雇员信息，以指定格式输出</span><br>雇员姓名：XX,薪资：XX,职位：XX,入职日期：XX,年薪：XX,<br><span class="hljs-keyword">select</span> concat(&quot;雇员姓名：&quot;,ename,&quot;，薪资：&quot;,sal,&quot;，职位：&quot;,job,&quot;，入职日期：&quot;,hiredate,&quot;，年薪：&quot;,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span>) <span class="hljs-keyword">from</span> emp;<br><br>(<span class="hljs-number">2</span>)length()计算字符串的长度<br><span class="hljs-comment">---查询雇员姓名长度是5的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> length(ename)<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><br>(<span class="hljs-number">3</span>)<span class="hljs-built_in">lower</span>()  <span class="hljs-built_in">upper</span>()转换大小写<br><span class="hljs-comment">---查询雇员姓名 大写的雇员姓名 小写的雇员姓名</span><br><span class="hljs-keyword">select</span> ename,<span class="hljs-built_in">lower</span>(ename),<span class="hljs-built_in">upper</span>(ename) <span class="hljs-keyword">from</span> emp;<br><br>(<span class="hljs-number">4</span>)replace()在指定的字符串中，将某子串替换为新的字符串<br>replace(目标字符串,查找的子串,新字符串)<br><span class="hljs-comment">---将helloWord字符串中的hello替换为hi</span><br><span class="hljs-keyword">select</span> replace(&quot;helloworld&quot;,&quot;hello&quot;,&quot;hi&quot;) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">---另一种写法为</span><br><span class="hljs-keyword">select</span> replace(&quot;helloworld&quot;,&quot;hello&quot;,&quot;hi&quot;);<br><br>(<span class="hljs-number">5</span>)<span class="hljs-built_in">substring</span>()截取子串<br><span class="hljs-built_in">substring</span>(目标字符串,开始位置,长度)  注意开始索引是从<span class="hljs-number">1</span>开始的。<br><span class="hljs-comment">---截取雇员姓名的前4个字符</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(ename,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">from</span> emp;<br> <br> <br>b，数值函数<br><span class="hljs-number">1</span>，<span class="hljs-built_in">abs</span>()  作用是：取绝对值<br><span class="hljs-keyword">select</span>(<span class="hljs-number">1</span>),(<span class="hljs-number">-1</span>);<br> <br><span class="hljs-number">2</span>，pi()  作用是：获取圆周率<br><span class="hljs-keyword">select</span> pi();<br> <br><span class="hljs-number">3</span>，<span class="hljs-built_in">mod</span>() 作用是：取余<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">mod</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-number">5</span>，pow() 作用是：求一个数的n次方<br><span class="hljs-keyword">select</span> pow(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br> <br><span class="hljs-number">6</span>，<span class="hljs-built_in">ceil</span>() 向上取整  <span class="hljs-built_in">floor</span>()向下取整<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">ceil</span>(<span class="hljs-number">5.43</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-number">5.7</span>);<br> <br><span class="hljs-number">7</span>，round(num) 代表返回四舍五入的整数<br>round(num,n)返回四舍五入n位小数<br><span class="hljs-keyword">select</span> round(<span class="hljs-number">5.4</span>),round(<span class="hljs-number">6.8</span>),round(<span class="hljs-number">5.34</span>,<span class="hljs-number">1</span>),round(<span class="hljs-number">6.789</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-number">8</span>，<span class="hljs-keyword">truncate</span>(num,n) n的值可以为<span class="hljs-number">0</span>,<span class="hljs-number">1</span>，<span class="hljs-number">2</span>,<span class="hljs-number">3</span>，<span class="hljs-number">4.</span>..其中n为<span class="hljs-number">0</span>时代表截取整数<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">truncate</span>(<span class="hljs-number">5.3</span>,<span class="hljs-number">0</span>),<span class="hljs-keyword">truncate</span>(<span class="hljs-number">5.67</span>,<span class="hljs-number">1</span>),<span class="hljs-keyword">truncate</span>(<span class="hljs-number">5.789</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-number">9</span>，rand() 获取浮点类型的随机数，范围是<span class="hljs-number">0</span><span class="hljs-number">-1.0</span>。包括<span class="hljs-number">0</span>但不包含<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> rand(),rand(),rand();<br> <br> <br>c，时间日期函数<br><span class="hljs-number">1</span>，now() 获取<span class="hljs-keyword">SQL</span>执行时当前日期和时间 包括年月日 时分秒<br><span class="hljs-keyword">select</span> now();<br> <br><span class="hljs-number">2</span>，curdate()获取当前日期 只包括年月日<br><span class="hljs-keyword">select</span> curdate()<br><br><span class="hljs-number">3</span>，curtime()获取当前时间 只包括时分秒<br><span class="hljs-keyword">select</span> curtime();<br><br><span class="hljs-number">4</span>，sysdate()获取函数执行时的日期和时间<br><span class="hljs-keyword">select</span> sysdate(),now(),sleep(<span class="hljs-number">3</span>),sysdate(),now();<br><br><span class="hljs-number">5</span>，dayofyear()获取某个日期是所在年份的第几天<br> week()获取某个日期是所在年份的第几周<br> <span class="hljs-keyword">select</span> dayofyear(now()),week(now());<br><br><span class="hljs-number">6</span>，datediff()计算两个日期之间的时间间隔<br><span class="hljs-comment">---计算2019.1.1日距离现在时间间隔</span><br><span class="hljs-keyword">select</span> datediff(&quot;2019-12-30&quot;,now());<br> <br><span class="hljs-number">7</span>，date_add(),date_sub() 实现日期的加减运算<br>date_add(日期, 时间间隔类型关键字<span class="hljs-type">interval</span>, 时间间隔类型对应的表达式, 时间间隔类型)<br> day_hour  <span class="hljs-number">1</span>_12 代表<span class="hljs-number">1</span>天<span class="hljs-number">12</span>个小时<br> year_month <span class="hljs-number">2</span>_1 代表<span class="hljs-number">2</span>年<span class="hljs-number">1</span>个月<br> <br> <span class="hljs-keyword">select</span> date_add(now(), <span class="hljs-type">interval</span> &quot;2_1&quot; year_month)<br> <span class="hljs-keyword">select</span> date_sub(now(), <span class="hljs-type">interval</span> <span class="hljs-number">10</span> <span class="hljs-keyword">day</span>);<br> <br>e，流程控制函数<br><span class="hljs-number">1</span>，if(条件,t,f) 如果条件成立返回t，否则返回f<br><span class="hljs-keyword">select</span> if(<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>,&quot;1大于2&quot;,&quot;1小于2&quot;);<br><span class="hljs-comment">---查询雇员的薪资，如果薪资&gt;=3000，输入“高薪”，否则“低薪”</span><br><span class="hljs-keyword">select</span> sal,if(sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">3000</span>,&quot;高薪&quot;,&quot;低薪&quot;) &quot;薪资水平&quot; <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-number">2</span>，ifnull(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>) 如果值<span class="hljs-number">1</span>不为空则返回值<span class="hljs-number">1</span>，否则返回值<span class="hljs-number">2</span><br><span class="hljs-comment">---查询雇员的年薪</span><br><span class="hljs-keyword">select</span> sal,comm,(sal<span class="hljs-operator">+</span>comm)<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp; 此语句达不到想要的效果<br><span class="hljs-keyword">select</span> (sal<span class="hljs-operator">+</span>ifnull(comm,<span class="hljs-number">0</span>))<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> sal,comm,(sal<span class="hljs-operator">+</span>ifnull(comm,<span class="hljs-number">0</span>))<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">3</span>，<span class="hljs-built_in">nullif</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>) 如果值<span class="hljs-number">1</span>等于值<span class="hljs-number">2</span>返回<span class="hljs-keyword">null</span>，否则返回值<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">nullif</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<span class="hljs-built_in">nullif</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-number">4</span>，   <span class="hljs-keyword">case</span> 值<br><span class="hljs-keyword">when</span> 值<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">1</span><br><span class="hljs-keyword">when</span> 值<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">else</span> 其他结果<br><span class="hljs-keyword">end</span><br> <span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> &quot;这是结果1&quot; <span class="hljs-keyword">when</span> <span class="hljs-number">2</span> <span class="hljs-keyword">then</span> &quot;这是结果2&quot; <span class="hljs-keyword">else</span> &quot;这是其他结果&quot; <span class="hljs-keyword">end</span>;<br> <br><span class="hljs-number">5</span>，   <span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> 条件 <span class="hljs-keyword">then</span> 结果<span class="hljs-number">1</span><br><span class="hljs-keyword">when</span> 条件 <span class="hljs-keyword">then</span> 结果<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">else</span> 其他结果<br><span class="hljs-keyword">end</span><br>示例为：<span class="hljs-comment">---查询雇员薪资，如果薪资&gt;=3000返回“高薪”，否则“低薪”</span><br><span class="hljs-keyword">select</span> sal,<span class="hljs-keyword">case</span><br><span class="hljs-keyword">when</span> sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">3000</span> <span class="hljs-keyword">then</span> &quot;高薪&quot;<br><span class="hljs-keyword">else</span> &quot;低薪&quot;<br><span class="hljs-keyword">end</span> &quot;薪资水平&quot;<br><span class="hljs-keyword">from</span> emp;<br> <br></code></pre></td></tr></table></figure><h2 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h2><p>定义：操作一组数据(多行记录)返回一个结果，也叫分组函数 大多用于统计 例如：统计各部门中雇员的人数。统计各部门中最高和最低薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，<span class="hljs-built_in">count</span>()统计表中记录的数目<br><span class="hljs-comment">---查询emp表中有多少条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp;<br> <br>另一条语法是<span class="hljs-built_in">count</span>(exp)统计exp值非空的记录数目<br><span class="hljs-comment">---查询雇员表中，有多少位雇员有津贴</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(comm) <span class="hljs-keyword">from</span> emp;<br> <br>另一条语法是<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(exp)) 返回表达式exp的值不重复且非空的总记录数目<br><span class="hljs-comment">---统计雇员表中有多少位雇员是领导</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(mgr)) <span class="hljs-keyword">from</span> emp;<span class="hljs-comment">--统计的是除董事长外的领导人数</span><br><span class="hljs-comment">---统计雇员表中包含董事长的领导数 需要用到ifnull函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(ifnull(mgr,<span class="hljs-number">1</span>))) <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-number">2</span>，<span class="hljs-built_in">sum</span>(exp) 返回表达式值的总和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal) <span class="hljs-keyword">from</span> emp;<br><br>另一条语法是<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">distinct</span>(exp))返回不重复的表达式exp的总和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal),<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">distinct</span>(sal)) <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-number">3</span>，<span class="hljs-built_in">avg</span>(exp)返回表达式值的平均值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp;<br> <br>另一条语法是<span class="hljs-built_in">avg</span>(<span class="hljs-keyword">distinct</span>(exp))返回不重复的表达式exp的平均值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(<span class="hljs-keyword">distinct</span>(sal)) <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-number">4</span>，<span class="hljs-built_in">max</span>()  <span class="hljs-built_in">min</span>() <br><span class="hljs-built_in">max</span>(emp)返回表达式值的最大值<br><span class="hljs-built_in">min</span>(emp)返回表达式值的最小值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(sal),<span class="hljs-built_in">max</span>(sal) <span class="hljs-keyword">from</span> emp;<br> <br></code></pre></td></tr></table></figure><h2 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法为：<br><span class="hljs-keyword">select</span> 查询内容<br><span class="hljs-keyword">from</span> 表名<br>[<span class="hljs-keyword">where</span> 条件]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名<span class="hljs-number">1</span>,分组字段名<span class="hljs-number">2</span>,...]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名 <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>]<br>[limit]<br> <br>示例如下：<br> <span class="hljs-comment">---求每个部门的人数</span><br> <span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br> <span class="hljs-comment">---求每个部门的平均工资</span><br> <span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br> <span class="hljs-comment">---求每个部门中最高工资和人数</span><br> <span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">max</span>(sal),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br> <span class="hljs-comment">---求每个岗位的人数</span><br> <span class="hljs-keyword">select</span> job,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job;<br> <span class="hljs-comment">---显示每个部门不同岗位的人数</span><br> <span class="hljs-keyword">select</span> deptno,job,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br> <br>注意事项<span class="hljs-number">1</span>：如果查询字段，没有在多行函数中，则必须是分组字段<br><span class="hljs-keyword">select</span> ename,job,<span class="hljs-built_in">sum</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job; 此语句运行后会报错<br> <br>注意事项<span class="hljs-number">2</span>：如果没有<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 则查询字段不能与多行函数一起查询<br><span class="hljs-keyword">select</span> sal,empto <span class="hljs-keyword">from</span> emp; 合法<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal),empto <span class="hljs-keyword">from</span> emp;不合法<br> <br>注意事项<span class="hljs-number">3</span>：不允许在<span class="hljs-keyword">where</span>条件中使用多行函数<br> <br></code></pre></td></tr></table></figure><h2 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法为：<br><span class="hljs-keyword">select</span> 查询内容<br><span class="hljs-keyword">from</span> 表名<br>[<span class="hljs-keyword">where</span> 条件]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段]<br>[<span class="hljs-keyword">having</span> 条件]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>]<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">from</span> <span class="hljs-comment">---where过滤---group by---having过滤</span><br>示例如下：<br><span class="hljs-comment">---每个部门不同岗位的人数，且人数大于2</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),deptno,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>;<br><span class="hljs-comment">---在emp表中列出工资最小值小于2000的职位</span><br><span class="hljs-keyword">select</span> job,<span class="hljs-built_in">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job <span class="hljs-keyword">having</span> <span class="hljs-built_in">min</span>(sal)<span class="hljs-operator">&lt;</span><span class="hljs-number">2000</span>;<br><span class="hljs-comment">---查询每个职位的最低薪资</span><br><span class="hljs-keyword">select</span> job,<span class="hljs-built_in">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job;<br><span class="hljs-comment">---列出平均工资大于1200的部门和职位搭配组合</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(avg) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job <span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(sal)<span class="hljs-operator">&gt;</span><span class="hljs-number">1200</span>;<br><span class="hljs-comment">---求每个部门不同职位的平均工资</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql子查询</title>
    <link href="/blog/2021/01/24/mysql%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/blog/2021/01/24/mysql%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1g8kqx5e1oouz">https://cloud.tencent.com/developer/support-plan?invite_code=1g8kqx5e1oouz</a></p><h1 id="子查询定义"><a href="#子查询定义" class="headerlink" title="子查询定义"></a>子查询定义</h1><p>在一个表表达中可以调用另一个表表达式，这个被调用的表表达式叫做子查询（subquery），我么也称作子选择（subselect）或内嵌选择（inner select）。子查询的结果传递给调用它的表表达式继续处理。</p><h1 id="子查询分类"><a href="#子查询分类" class="headerlink" title="子查询分类"></a>子查询分类</h1><h2 id="按返回结果集分类"><a href="#按返回结果集分类" class="headerlink" title="按返回结果集分类"></a>按返回结果集分类</h2><p>子查询按返回结果集的不同分为4种：表子查询，行子查询，列子查询和标量子查询。 表子查询：返回的结果集是一个行的集合，N行N列（N&gt;=1）。表子查询经常用于父查询的FROM子句中。 行子查询：返回的结果集是一个列的集合，一行N列（N&gt;=1）。行子查询可以用于福查询的FROM子句和WHERE子句中。 列子查询：返回的结果集是一个行的集合，N行一列（N&gt;=1）。 标量子查询：返回的结果集是一个标量集合，一行一列，也就是一个标量值。可以指定一个标量表达式的任何地方，都可以用一个标量子查询。</p><p>从定义上讲，每个标量子查询也是一个行子查询和一个列子查询，反之则不是；每个行子查询和列子查询也是一个表子查询，反之也不是。</p><h2 id="按照对返回结果的调用方法"><a href="#按照对返回结果的调用方法" class="headerlink" title="按照对返回结果的调用方法"></a>按照对返回结果的调用方法</h2><p>子查询按对返回结果集的调用方法，可分为where型子查询，from型子查询及exists型子查询。</p><p>where型子查询：（把内层查询结果当作外层查询的比较条件）定义：where型的子查询就是把内层查询的结果当作外层查询的条件。 from型子查询：（把内层的查询结果供外层再次查询）定义：from子查询就是把子查询的结果(内存里的一张表)当作一张临时表，然后再对它进行处理。 exists型子查询：（把外层查询结果拿到内层，看内层的查询是否成立）定义：exists子查询就是对外层表进行循环，再对内表进行内层查询。和in ()差不多，但是它们还是有区别的。主要是看两个张表大小差的程度。若子查询表大则用exists（内层索引），子查询表小则用in（外层索引）；</p><h1 id="使用子查询原则"><a href="#使用子查询原则" class="headerlink" title="使用子查询原则"></a>使用子查询原则</h1><p>1.一个子查询必须放在圆括号中。 2.将子查询放在比较条件的右边以增加可读性。子查询不包含 ORDER BY 子句。对一个 SELECT 语句只能用一个 ORDER BY 子句，并且如果指定了它就必须放在主 SELECT 语句的最后。 3.在子查询中可以使用两种比较条件：单行运算符(&gt;, =, &gt;=, &lt;, &lt;&gt;, &lt;=) 和多行运算符(IN, ANY, ALL)。</p><h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><h2 id="创建测试表"><a href="#创建测试表" class="headerlink" title="创建测试表"></a>创建测试表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> PLAYERS<br>    (PLAYERNO      <span class="hljs-type">INTEGER</span>      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    NAME           <span class="hljs-type">CHAR</span>(<span class="hljs-number">15</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    INITIALS       <span class="hljs-type">CHAR</span>(<span class="hljs-number">3</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    BIRTH_DATE     <span class="hljs-type">DATE</span>                 ,<br>    SEX            <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    JOINED         <span class="hljs-type">SMALLINT</span>     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    STREET         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    HOUSENO        <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>)              ,<br>    POSTCODE       <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)              ,<br>    TOWN           <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    PHONENO        <span class="hljs-type">CHAR</span>(<span class="hljs-number">13</span>)             ,<br>    LEAGUENO       <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>)              ,<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>    (PLAYERNO));<br> <br><span class="hljs-keyword">CREATE</span>   <span class="hljs-keyword">TABLE</span> PENALTIES<br>        (PAYMENTNO      <span class="hljs-type">INTEGER</span>      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         PLAYERNO       <span class="hljs-type">INTEGER</span>      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         PAYMENT_DATE   <span class="hljs-type">DATE</span>         <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         AMOUNT         <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>    (PAYMENTNO));<br></code></pre></td></tr></table></figure><p>注：表players为球员信息基本表，表penalties为有过罚款记录的球员信息列表。</p><h2 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Everett&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;1948-09-01&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1975</span>, <span class="hljs-string">&#x27;Stoney Road&#x27;</span>,<span class="hljs-string">&#x27;43&#x27;</span>, <span class="hljs-string">&#x27;3575NH&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-237893&#x27;</span>, <span class="hljs-string">&#x27;2411&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;Parmenter&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;1964-06-25&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1977</span>, <span class="hljs-string">&#x27;Haseltine Lane&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;1234KK&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-476537&#x27;</span>, <span class="hljs-string">&#x27;8467&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Wise&#x27;</span>, <span class="hljs-string">&#x27;GWS&#x27;</span>, <span class="hljs-string">&#x27;1963-05-11&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1981</span>, <span class="hljs-string">&#x27;Edgecombe Way&#x27;</span>,<span class="hljs-string">&#x27;39&#x27;</span>, <span class="hljs-string">&#x27;9758VB&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-347689&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;Newcastle&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;1962-07-08&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1980</span>, <span class="hljs-string">&#x27;Station Road&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;6584WO&#x27;</span>, <span class="hljs-string">&#x27;Inglewood&#x27;</span>, <span class="hljs-string">&#x27;070-458458&#x27;</span>, <span class="hljs-string">&#x27;2983&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">27</span>, <span class="hljs-string">&#x27;Collins&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>, <span class="hljs-string">&#x27;1964-12-28&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1983</span>, <span class="hljs-string">&#x27;Long Drive&#x27;</span>,<span class="hljs-string">&#x27;804&#x27;</span>, <span class="hljs-string">&#x27;8457DK&#x27;</span>, <span class="hljs-string">&#x27;Eltham&#x27;</span>, <span class="hljs-string">&#x27;079-234857&#x27;</span>, <span class="hljs-string">&#x27;2513&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Collins&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;1963-06-22&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1983</span>, <span class="hljs-string">&#x27;Old Main Road&#x27;</span>,<span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;1294QK&#x27;</span>, <span class="hljs-string">&#x27;Midhurst&#x27;</span>, <span class="hljs-string">&#x27;010-659599&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">39</span>, <span class="hljs-string">&#x27;Bishop&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;1956-10-29&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1980</span>, <span class="hljs-string">&#x27;Eaton Square&#x27;</span>,<span class="hljs-string">&#x27;78&#x27;</span>, <span class="hljs-string">&#x27;9629CD&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-393435&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">44</span>, <span class="hljs-string">&#x27;Baker&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;1963-01-09&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1980</span>, <span class="hljs-string">&#x27;Lewis Street&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>, <span class="hljs-string">&#x27;4444LJ&#x27;</span>, <span class="hljs-string">&#x27;Inglewood&#x27;</span>, <span class="hljs-string">&#x27;070-368753&#x27;</span>, <span class="hljs-string">&#x27;1124&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">57</span>, <span class="hljs-string">&#x27;Brown&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;1971-08-17&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1985</span>, <span class="hljs-string">&#x27;Edgecombe Way&#x27;</span>,<span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;4377CB&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-473458&#x27;</span>, <span class="hljs-string">&#x27;6409&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">83</span>, <span class="hljs-string">&#x27;Hope&#x27;</span>, <span class="hljs-string">&#x27;PK&#x27;</span>, <span class="hljs-string">&#x27;1956-11-11&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1982</span>, <span class="hljs-string">&#x27;Magdalene Road&#x27;</span>,<span class="hljs-string">&#x27;16A&#x27;</span>, <span class="hljs-string">&#x27;1812UP&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-353548&#x27;</span>, <span class="hljs-string">&#x27;1608&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Miller&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;1963-05-14&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1972</span>, <span class="hljs-string">&#x27;High Street&#x27;</span>,<span class="hljs-string">&#x27;33A&#x27;</span>, <span class="hljs-string">&#x27;5746OP&#x27;</span>, <span class="hljs-string">&#x27;Douglas&#x27;</span>, <span class="hljs-string">&#x27;070-867564&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;Parmenter&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;1963-02-28&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1979</span>, <span class="hljs-string">&#x27;Haseltine Lane&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;6494SG&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-494593&#x27;</span>, <span class="hljs-string">&#x27;6524&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">104</span>, <span class="hljs-string">&#x27;Moorman&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;1970-05-10&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1984</span>, <span class="hljs-string">&#x27;Stout Street&#x27;</span>,<span class="hljs-string">&#x27;65&#x27;</span>, <span class="hljs-string">&#x27;9437AO&#x27;</span>, <span class="hljs-string">&#x27;Eltham&#x27;</span>, <span class="hljs-string">&#x27;079-987571&#x27;</span>, <span class="hljs-string">&#x27;7060&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">112</span>, <span class="hljs-string">&#x27;Bailey&#x27;</span>, <span class="hljs-string">&#x27;IP&#x27;</span>, <span class="hljs-string">&#x27;1963-10-01&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1984</span>, <span class="hljs-string">&#x27;Vixen Road&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;6392LK&#x27;</span>, <span class="hljs-string">&#x27;Plymouth&#x27;</span>, <span class="hljs-string">&#x27;010-548745&#x27;</span>, <span class="hljs-string">&#x27;1319&#x27;</span>);<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,  <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;1980-12-08&#x27;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;1981-05-05&#x27;</span>, <span class="hljs-number">75</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;1983-09-10&#x27;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>,<span class="hljs-number">104</span>, <span class="hljs-string">&#x27;1984-12-08&#x27;</span>, <span class="hljs-number">50</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;1980-12-08&#x27;</span>, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>,  <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;1980-12-08&#x27;</span>, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;1982-12-30&#x27;</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;1984-11-12&#x27;</span>, <span class="hljs-number">75</span>);<br></code></pre></td></tr></table></figure><h2 id="表子查询实例"><a href="#表子查询实例" class="headerlink" title="表子查询实例"></a>表子查询实例</h2><p>如：获取编号小于10的男性球员的号码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <span class="hljs-keyword">from</span> (<br>    <span class="hljs-keyword">select</span> playerno, sex <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span>) <br><span class="hljs-keyword">as</span> players10 <span class="hljs-keyword">where</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="行子查询实例"><a href="#行子查询实例" class="headerlink" title="行子查询实例"></a>行子查询实例</h2><p>如：获取和100号球员性别相同并且居住在同一城市的球员号码。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> (sex, town) <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">select</span> sex, town <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>说明：子查询的结果是带有两个值的一行：（’M’,’stratford’）。这个值和一个行表达式（sex,town）进行比较。</p><h2 id="标量子查询实例"><a href="#标量子查询实例" class="headerlink" title="标量子查询实例"></a>标量子查询实例</h2><p>可以指定一个标量表达式的任何地方，几乎都可以使用一个标量子查询。 如：获取和27号球员出生在同一年的球员的号码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(birth_date) <span class="hljs-operator">=</span> <br>    (<span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(birth_date) <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> <span class="hljs-number">27</span>) <br><span class="hljs-keyword">and</span> playerno <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">27</span>;<br></code></pre></td></tr></table></figure><p>上面语句等同于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <span class="hljs-keyword">from</span> players <span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(birth_date) <span class="hljs-operator">=</span> <span class="hljs-number">1964</span> <span class="hljs-keyword">and</span> playerno <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">27</span>;<br></code></pre></td></tr></table></figure><h2 id="列子查询实例"><a href="#列子查询实例" class="headerlink" title="列子查询实例"></a>列子查询实例</h2><p> 由于列子查询返回的结果集是 N 行一列，因此不能直接使用 =  &gt;  &lt;  &gt;=  &lt;=  &lt;&gt; 这些比较标量结果的操作符。在列子查询中可以使用 IN、ANY（SOME）和ALL操作符：   IN：在指定项内，同 IN(项1,项2,…)。   ANY：与比较操作符联合使用，ANY关键字必须接在一个比较操作符的后面，表示与子查询返回的任何值比较为 TRUE ，则返回 TRUE 。   SOME：ANY 的别名，较少使用。   ALL：与比较操作符联合使用，ALL关键字必须接在一个比较操作符的后面，表示与子查询返回的所有值比较都为 TRUE ，则返回 TRUE 。</p><p>  实例1（in）：获取球员性别为女的所有球员的球员号，名字及所在城市。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno, name, town <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> playerno <span class="hljs-keyword">in</span> <br>    (<span class="hljs-keyword">select</span> playerno <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;F&#x27;</span>);<br></code></pre></td></tr></table></figure><p>实例2（any）：获取至少比同城的另一球员年轻的所有球员的号码，日期和居住城市。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno, birth_date, town <br><span class="hljs-keyword">from</span> players <span class="hljs-keyword">as</span> p1 <br><span class="hljs-keyword">where</span> birth_date <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span> <br>    (<span class="hljs-keyword">select</span> birth_date <br>    <span class="hljs-keyword">from</span> players <span class="hljs-keyword">as</span> p2 <br>    <span class="hljs-keyword">where</span> p1.town <span class="hljs-operator">=</span> p2.town);<br></code></pre></td></tr></table></figure><p>实例3（all）：获取最老球员的号码，名字及生日。（即出生日期数值小于或等于所有其它球员的球员）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno, name, birth_date <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> birth_date <span class="hljs-operator">&lt;=</span> <span class="hljs-keyword">all</span> <br>    (<span class="hljs-keyword">select</span> birth_date <br>    <span class="hljs-keyword">from</span> players);<br></code></pre></td></tr></table></figure><p>XISTS关键字表示存在。使用EXISTS关键字时，内层查询语句不返回查询的记录，而是返回一个真假值，如果内层查询语句查询到满足条件的记录，只要子查询中至少返回一个值，则EXISTS语句的值就为True。就返回true，否则返回false。当返回的值为true时，外层查询语句将进行查询，否则不进行查询。NOT EXISTS刚好与之相反。exists的用法和in ()差不多，但是它们还是有区别的。主要是看两个张表大小差的程度。若子查询表大则用exists（内层索引），子查询表小则用in（外层索引）;</p><p>  实例1（exists）：获取那些至少支付了一次罚款的球员的名字和首字母。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> name, initials <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> <br>    (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> penalties <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> players.playerno);<br></code></pre></td></tr></table></figure><p>实例2（not exists）：获取那些从来没有罚款的球员的名字和首字母。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> name, initials <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <br>    (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> penalties <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> players.playerno);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java语言描述数据结构与算法</title>
    <link href="/blog/2021/01/20/java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/blog/2021/01/20/java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>冒泡排序 插入排序 选择排序 希尔排序 快速排序 归并排序 二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">package</span> com.demo.test;<br> <br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//随机输入n个数,存放在数组a中</span><br>    Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">int</span> n=scanner.nextInt();<br>    <span class="hljs-keyword">int</span> a[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    <span class="hljs-comment">//这是第一种输入方法</span><br>    <span class="hljs-comment">/*for (int i=0;i&lt;n;i++) &#123;</span><br><span class="hljs-comment">    a[i]=scanner.nextInt();</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//这是第二种输入方法</span><br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(k&lt;n) &#123;<br>    a[k]=scanner.nextInt();<br>    k++;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span>[] b=choicSort(a);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;b.length;j++) &#123;<br>    System.out.print(b[j]+<span class="hljs-string">&quot;  &quot;</span>);<br>    &#125;<br>    &#125;<br>    <br><br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;array.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;array.length-i;j++) &#123;<br><span class="hljs-keyword">if</span> (array[j]&gt;array[j+<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-keyword">int</span> temp=array[j];<br>array[j]=array[j+<span class="hljs-number">1</span>];<br>array[j+<span class="hljs-number">1</span>]=temp;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//插入排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] insertSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;array.length;i++) &#123;<br><span class="hljs-keyword">int</span> j=i;<br><span class="hljs-keyword">int</span> temp=array[i];<br><span class="hljs-keyword">while</span> (j&gt;<span class="hljs-number">0</span>&amp;&amp;array[j-<span class="hljs-number">1</span>]&gt;temp) &#123;<br>array[j]=array[j-<span class="hljs-number">1</span>];<br>j--;<br>&#125;<br>array[j]=temp;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//选择排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] choicSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length-<span class="hljs-number">1</span>;i++) &#123;<br><span class="hljs-keyword">int</span> min=i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;array.length;j++) &#123;<br><span class="hljs-keyword">if</span> (array[j]&lt;array[min]) &#123;<br>min=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (min!=i) &#123;<br><span class="hljs-keyword">int</span> temp=array[i];<br>array[i]=array[min];<br>array[min]=temp;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//希尔排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] shellSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><span class="hljs-keyword">int</span> step=(array.length-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (step&gt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=step;i&lt;array.length;i++) &#123;<br><span class="hljs-keyword">int</span> j=i;<br><span class="hljs-keyword">int</span> temp=array[i];<br><span class="hljs-keyword">while</span>(j&gt;(step-<span class="hljs-number">1</span>)&amp;&amp;array[j-step]&gt;=temp) &#123;<br>array[j]=array[j-step];<br>j=j-step;<br>&#125;<br>array[j]=temp;<br>&#125;<br>step=step/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>reQuickSort(array,<span class="hljs-number">0</span>,array.length-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reQuickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (left&gt;=right) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> partition=partitionIt(array,left,right);<br>reQuickSort(array,left,partition-<span class="hljs-number">1</span>);<br>reQuickSort(array,partition+<span class="hljs-number">1</span>,right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partitionIt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i=left;<br><span class="hljs-keyword">int</span> j=right+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> povit=array[left];<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">while</span> (i&lt;right&amp;&amp;array[++i]&lt;povit) &#123;&#125;<br><span class="hljs-keyword">while</span> (j&gt;<span class="hljs-number">0</span>&amp;&amp;array[--j]&gt;povit) &#123;&#125;<br><span class="hljs-keyword">if</span> (i&lt;j) &#123;<br>swap(array,i,j);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>swap(array,left,j);<br><span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br><span class="hljs-keyword">int</span> temp=array[i];<br>array[i]=array[j];<br>array[j]=temp;<br>&#125;<br> <br> <br><span class="hljs-comment">//归并排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] a,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)&#123;<br>        <span class="hljs-keyword">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>            sort(a,low,mid);<br>            sort(a,mid+<span class="hljs-number">1</span>,high);<br>            <span class="hljs-comment">//左右归并</span><br>            merge(a,low,mid,high);<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>     <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[high-low+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> i= low;<br>        <span class="hljs-keyword">int</span> j = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 把较小的数先移到新数组中</span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;a[j])&#123;<br>                temp[k++] = a[i++];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                temp[k++] = a[j++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 把左边剩余的数移入数组 </span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid)&#123;<br>            temp[k++] = a[i++];<br>        &#125;<br>        <span class="hljs-comment">// 把右边边剩余的数移入数组</span><br>        <span class="hljs-keyword">while</span>(j&lt;=high)&#123;<br>            temp[k++] = a[j++];<br>        &#125;<br>        <span class="hljs-comment">// 把新数组中的数覆盖nums数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;x&lt;temp.length;x++)&#123;<br>            a[x+low] = temp[x];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySerach</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i=left;<br><span class="hljs-keyword">int</span> j=right;<br><span class="hljs-keyword">int</span> mid=(i+j)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (i&gt;j) &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (array[mid]&gt;value) &#123;<br><span class="hljs-keyword">return</span> binarySerach(array,<span class="hljs-number">0</span>,mid-<span class="hljs-number">1</span>,value);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(array[mid]&lt;value)&#123;<br><span class="hljs-keyword">return</span> binarySerach(array,mid+<span class="hljs-number">1</span>,right,value);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br><br>&#125;<br><br>&#125;<br> <br> <br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql行列转换</title>
    <link href="/blog/2021/01/20/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/"/>
    <url>/blog/2021/01/20/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>需求是将以下两种表样式互相转换：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190821-153724@2x_1566373118554.png" alt="WX20190821-153724@2x"></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190821-153732@2x_1566373118567.png" alt="WX20190821-153732@2x">score_1转score_2，如下： 这里也可以用来统计数据</p><p>如果等于1 就加一 不然就不加 SUM(IF(C.question_type = ‘1’, 1, 0)) AS ‘论述’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ID<br>    ,<span class="hljs-built_in">max</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数学&#x27;</span> <span class="hljs-keyword">then</span> score <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数学&#x27;</span><br>    ,<span class="hljs-built_in">max</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span> <span class="hljs-keyword">then</span> score <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;英语&#x27;</span><br>    ,<span class="hljs-built_in">max</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;法律&#x27;</span> <span class="hljs-keyword">then</span> score <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;法律&#x27;</span><br><span class="hljs-keyword">from</span> score_1<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id;<br></code></pre></td></tr></table></figure><p>score_2转score_1：两种引号不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <br>    ,<span class="hljs-string">&#x27;数学&#x27;</span> <span class="hljs-keyword">as</span> course<br>    ,`数学` <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> score_2<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br><span class="hljs-keyword">select</span> id <br>    ,<span class="hljs-string">&#x27;英语&#x27;</span> <span class="hljs-keyword">as</span> course<br>    ,`英语` <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> score_2<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br><span class="hljs-keyword">select</span> id <br>    ,<span class="hljs-string">&#x27;法律&#x27;</span> <span class="hljs-keyword">as</span> course<br>    ,`法律` <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> score_2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>左连接-右连接-内连接-全外连接的4者区别</title>
    <link href="/blog/2021/01/20/%E5%B7%A6%E8%BF%9E%E6%8E%A5-%E5%8F%B3%E8%BF%9E%E6%8E%A5-%E5%86%85%E8%BF%9E%E6%8E%A5-%E5%85%A8%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%844%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/01/20/%E5%B7%A6%E8%BF%9E%E6%8E%A5-%E5%8F%B3%E8%BF%9E%E6%8E%A5-%E5%86%85%E8%BF%9E%E6%8E%A5-%E5%85%A8%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%844%E8%80%85%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="基本定义："><a href="#基本定义：" class="headerlink" title="基本定义："></a>基本定义：</h1><p>　　left join （左连接）：返回包括左表中的所有记录和右表中连接字段相等的记录。</p><p>　　right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。</p><p>　　inner join （等值连接或者叫内连接）：只返回两个表中连接字段相等的行。</p><p>　　full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录。</p><p>举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">　A表　　　　　　　　　　<br> <br>　　id　  name　　<br> <br>　　<span class="hljs-number">1</span>　　小王<br> <br>　　<span class="hljs-number">2</span>　　小李<br> <br>　　<span class="hljs-number">3</span>　　小刘<br> <br>　　B表<br> <br>　　id　　A_id　　job<br> <br>　　<span class="hljs-number">1</span>　　<span class="hljs-number">2</span>　　　　老师<br> <br>　　<span class="hljs-number">2</span>　　<span class="hljs-number">4</span>　　　　程序员<br></code></pre></td></tr></table></figure><h2 id="内连接：（只有2张表匹配的行才能显示）"><a href="#内连接：（只有2张表匹配的行才能显示）" class="headerlink" title="内连接：（只有2张表匹配的行才能显示）"></a>内连接：（只有2张表匹配的行才能显示）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　只能得到一条记录<br> <br>　　小李　　老师<br></code></pre></td></tr></table></figure><h2 id="左连接：（左边的表不加限制）"><a href="#左连接：（左边的表不加限制）" class="headerlink" title="左连接：（左边的表不加限制）"></a>左连接：（左边的表不加限制）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　三条记录<br> <br>　　小王　　<span class="hljs-keyword">null</span><br> <br>　　小李　　老师<br> <br>　　小刘　　<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h2 id="右连接：（右边的表不加限制）"><a href="#右连接：（右边的表不加限制）" class="headerlink" title="右连接：（右边的表不加限制）"></a>右连接：（右边的表不加限制）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　两条记录<br> <br>　　小李　　老师<br> <br>　　<span class="hljs-keyword">null</span>　　程序员<br></code></pre></td></tr></table></figure><h2 id="全外连接：-左右2张表都不加限制）"><a href="#全外连接：-左右2张表都不加限制）" class="headerlink" title="全外连接：(左右2张表都不加限制）"></a>全外连接：(左右2张表都不加限制）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　四条数据<br> <br>　　小王　　<span class="hljs-keyword">null</span><br> <br>　　小李　　老师<br> <br>　　小刘　　<span class="hljs-keyword">null</span><br> <br>　　<span class="hljs-keyword">null</span>　　程序员<br></code></pre></td></tr></table></figure><p>注：在sql中l外连接包括左连接（left join ）和右连接（right join），全外连接（full join），等值连接（inner join）又叫内连接。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql基本操作命令汇总</title>
    <link href="/blog/2021/01/19/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/blog/2021/01/19/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a>关于数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建数据库<br><span class="hljs-keyword">create</span> database h_test;        <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据库<br><span class="hljs-keyword">show</span> databases;  <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据库信息    <br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database h_test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改数据库的编码，可使用上一条语句查看是否修改成功<br><span class="hljs-keyword">alter</span> database h_test <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk <span class="hljs-keyword">collate</span> gbk_bin;      <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除数据库<br><span class="hljs-keyword">drop</span> database h_test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>综上，可以直接创建数据库且设置编码方式<br><span class="hljs-keyword">CREATE</span> DATABASE h_test <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首先选定操作的数据库<br>use h_test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表student<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br>  name  <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据表<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据表信息，后面加上参数<span class="hljs-operator">/</span>G可使结果更加美观<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看表的的字段信息<br><span class="hljs-keyword">desc</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改表名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student rename [<span class="hljs-keyword">to</span>] h_student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改字段名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student change name stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改字段的数据类型<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student modify id <span class="hljs-type">int</span>(<span class="hljs-number">20</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加字段<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student <span class="hljs-keyword">add</span> grade <span class="hljs-type">float</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除字段<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student <span class="hljs-keyword">drop</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改字段的位置<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student modify stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">first</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student modify id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) after age;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除数据表<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> h_student;<br></code></pre></td></tr></table></figure><h2 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h2><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190820-155510@2x_1566287798018.png" alt="WX20190820-155510@2x"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>作用：提高表中数据的查询速度 1.普通索引 2.唯一性索引 3.全文索引 4.单列索引 5.多列索引 6.空间索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建索引<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>一.创建表的时候创建索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>        字段名 数据类型[完整性约束条件],<br>        ...<br>        字段名 数据类型,<br>        [<span class="hljs-keyword">UNIQUE</span><span class="hljs-operator">|</span>FULLTEXT<span class="hljs-operator">|</span>SPATIAL] INDEX<span class="hljs-operator">|</span>KEY<br>  );<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-1.</span>创建普通索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  INDEX (id)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>可以插入一条数据,查看索引是否被使用<br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test1 <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> \G;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-2.</span>创建唯一性索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test2(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  <span class="hljs-keyword">UNIQUE</span> INDEX unique_id(id <span class="hljs-keyword">asc</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-3.</span>创建全文索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test3(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  FULLTEXT INDEX fulltext_name(name)<br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-4.</span>创建单列索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test4(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  INDEX single_name(name(<span class="hljs-number">20</span>))<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-5.</span>创建多列索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test5(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  INDEX multi(id,name(<span class="hljs-number">20</span>))<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-6.</span>创建空间索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test6(<br>  id  <span class="hljs-type">INT</span>,<br>  space GEOMETRY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  SPATIAL INDEX sp(space)<br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-comment">---------------------------------------------------</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>二.使用<span class="hljs-keyword">create</span> index语句在已经存在的表上创建索引<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首先新建一个表,这个表没有索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span>,<br>  age <span class="hljs-type">int</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  intro <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>  g GEOMETRY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-1.</span>创建普通索引<br><span class="hljs-keyword">create</span> index index_id <span class="hljs-keyword">on</span> student(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-2.</span>创建唯一性索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index uniqueidx <span class="hljs-keyword">on</span> student(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-3.</span>创建单列索引<br><span class="hljs-keyword">create</span> index singleidx <span class="hljs-keyword">on</span> student(age);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-4.</span>创建多列索引<br><span class="hljs-keyword">create</span> index mulitidx <span class="hljs-keyword">on</span> student(name(<span class="hljs-number">20</span>),intro(<span class="hljs-number">40</span>));<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-5.</span>创建全文索引<br><span class="hljs-keyword">create</span> fulltext index fulltextidx <span class="hljs-keyword">on</span> student(name);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-6.</span>创建空间索引<br><span class="hljs-keyword">create</span> spatial index spatidx <span class="hljs-keyword">on</span> student(g); <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>三.使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>语句在已经存在的表上创建索引<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除student表，重新创建<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span>,<br>  age <span class="hljs-type">int</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  intro <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>  space GEOMETRY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-1.</span>创建普通索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> index index_id(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-2.</span>创建唯一性索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> uniqueidx(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-3.</span>创建单列索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> index singleidx (age);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-4.</span>创建多列索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> index multidx(name(<span class="hljs-number">20</span>),intro(<span class="hljs-number">40</span>));<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-5.</span>创建全文索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> fulltext index fulltextidx(name);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-6.</span>创建空间索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> spatial index spatidx(space);<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除索引，有下面两种方式<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>删除索引fulltextidx<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">drop</span> index fulltextidx;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>使用<span class="hljs-keyword">drop</span> index删除索引spatidx<br><span class="hljs-keyword">drop</span> index spatidx <span class="hljs-keyword">on</span> student;<br> <br></code></pre></td></tr></table></figure><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>重新建立表student<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  grade <span class="hljs-type">float</span><br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入一条数据，也可以少某个字段的同时也少对应的数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(id,name,grade) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">70</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>也可以不指定字段名，但要注意顺序<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>也可以这样添加数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">set</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>,name<span class="hljs-operator">=</span>&quot;howie&quot;,grade<span class="hljs-operator">=</span><span class="hljs-number">90</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>同时添加多条数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span><br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>),<br>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>);<br></code></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>更新id<span class="hljs-operator">=</span><span class="hljs-number">1</span>的数据<br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span>&quot;howie1&quot;,grade<span class="hljs-operator">=</span><span class="hljs-number">60</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>批量更新,如果没有<span class="hljs-keyword">where</span>子句，会更新表中所有对应数据<br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">4</span>;<br> <br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除id<span class="hljs-operator">=</span><span class="hljs-number">6</span>的数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>批量删除数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除所有数据,DDL(数据定义语言)语句 <span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> student也可以删除表内所有数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><h2 id="单表查询和多表操作"><a href="#单表查询和多表操作" class="headerlink" title="单表查询和多表操作"></a>单表查询和多表操作</h2><p>单表查询：如何从数据库中获取你需要的数据 多表查询：实际开发中，需要进行2张表以上进行操作</p><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>建立表student<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  grade <span class="hljs-type">float</span>,<br>  <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>(id)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (name,grade) <span class="hljs-keyword">values</span><br>(&quot;howie1&quot;,<span class="hljs-number">40</span>),<br>(&quot;howie1&quot;,<span class="hljs-number">50</span>),<br>(&quot;howie2&quot;,<span class="hljs-number">50</span>),<br>(&quot;howie3&quot;,<span class="hljs-number">60</span>),<br>(&quot;howie4&quot;,<span class="hljs-number">70</span>),<br>(&quot;howie5&quot;,<span class="hljs-number">80</span>),<br>(&quot;howie6&quot;,<span class="hljs-keyword">null</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询全部<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询某个字段<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>条件查询,查询id<span class="hljs-operator">=</span><span class="hljs-number">2</span>学生的信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">in</span>关键字查询,也可以使用<span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-keyword">IN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">between</span> <span class="hljs-keyword">and</span>关键字查询<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-keyword">between</span> <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>空值(<span class="hljs-keyword">NULL</span>)查询，使用<span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>来判断<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> grade <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">distinct</span>关键字查询<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> name <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">like</span>关键字查询,查询以h开头，e结尾的数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;h%e&quot;;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">and</span>关键字多条件查询,<span class="hljs-keyword">or</span>关键字的使用也是类似<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span> <span class="hljs-keyword">and</span> grade<span class="hljs-operator">&gt;</span><span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>聚合函数<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-built_in">count</span>()函数,<span class="hljs-built_in">sum</span>()函数,<span class="hljs-built_in">avg</span>()函数,<span class="hljs-built_in">max</span>()函数,<span class="hljs-built_in">min</span>()函数<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>对查询结果进行排序<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>分组查询<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>单独使用<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>分组<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>和聚合函数一起使用<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),grade <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span>和<span class="hljs-keyword">having</span>关键字一起使用<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(grade),name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(grade) <span class="hljs-operator">&gt;</span><span class="hljs-number">100</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>使用limit限制查询结果的数量<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student limit <span class="hljs-number">5</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student limit <span class="hljs-number">2</span>,<span class="hljs-number">2</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">desc</span> limit <span class="hljs-number">2</span>,<span class="hljs-number">2</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>函数,mysql提供了许多函数<br><span class="hljs-keyword">select</span> concat(id,<span class="hljs-string">&#x27;:&#x27;</span>,name,<span class="hljs-string">&#x27;:&#x27;</span>,grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>为表取别名<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> stu <span class="hljs-keyword">where</span> stu.name<span class="hljs-operator">=</span>&quot;howie&quot;;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>为字段取别名,<span class="hljs-keyword">as</span>关键字也可以不写<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">as</span> stu_name,grade stu_grade <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><p>1.了解外键 2.了解关联关系 3.了解各种连接查询多表的数据 4.了解子查询，会使用各种关键字以及比较运算符查询多表中的数据</p><p>外键 外键是指引用另一个表中的一列或者多列，被引用的列应该具有主键约束或者唯一性约束，用于建立和加强两个数据表之间的连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表class,student<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> class(<br>   id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>   classname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>   stu_id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>   stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>   cid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>      <span class="hljs-comment">-- 表示班级id，它就是class表的外键</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_ID <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(cid) <span class="hljs-keyword">references</span> class(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> FK_ID;<br></code></pre></td></tr></table></figure><h2 id="操作关联表"><a href="#操作关联表" class="headerlink" title="操作关联表"></a>操作关联表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>数据表有三种关联关系，多对一、多对多、一对一<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>学生(student)和班级(class)是多对一关系，添加数据<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首选添加外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_ID <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(cid) <span class="hljs-keyword">references</span> class(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加数据,这两个表便有了关联若插入中文在终端显示空白，可设置<span class="hljs-keyword">set</span> names <span class="hljs-string">&#x27;gbk&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> class <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,&quot;软件一班&quot;),(<span class="hljs-number">2</span>,&quot;软件二班&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,&quot;howie&quot;,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,&quot;howie1&quot;,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,&quot;howie2&quot;,<span class="hljs-number">1</span>),(<span class="hljs-number">4</span>,&quot;howie3&quot;,<span class="hljs-number">2</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>交叉连接<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">cross</span> <span class="hljs-keyword">join</span> class;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>内连接，该功能也可以使用<span class="hljs-keyword">where</span>语句实现<br><span class="hljs-keyword">select</span> student.stu_name,class.classname <span class="hljs-keyword">from</span> student <span class="hljs-keyword">join</span> class <span class="hljs-keyword">on</span> class.id<span class="hljs-operator">=</span>student.cid;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>外连接<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首先在student,class表中插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> class <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,&quot;软件三班&quot;);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>左连接，右连接<br><span class="hljs-keyword">select</span> s.stu_id,s.stu_name,c.classname <span class="hljs-keyword">from</span> student s <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> class c <span class="hljs-keyword">on</span> c.id<span class="hljs-operator">=</span>s.cid;<br><span class="hljs-keyword">select</span> s.stu_id,s.stu_name,c.classname <span class="hljs-keyword">from</span> student s <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> class c <span class="hljs-keyword">on</span> c.id<span class="hljs-operator">=</span>s.cid;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>复合条件连接查询就是添加过滤条件<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>子查询<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">in</span>关键字子查询跟上面的<span class="hljs-keyword">in</span>关键字查询类似<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> cid <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">exists</span>关键字查询,相当于测试，不产生数据，只返回<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>，只有返回<span class="hljs-literal">true</span>，外层才会执行，具体看下图<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">12</span>);   <span class="hljs-comment">-- 外层不会执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>);    <span class="hljs-comment">-- 外层会执行</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">any</span>关键字查询<br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> cid<span class="hljs-operator">&gt;</span><span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">all</span>关键字查询<br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span><span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class);<br></code></pre></td></tr></table></figure><h1 id="事务与存储过程"><a href="#事务与存储过程" class="headerlink" title="事务与存储过程"></a>事务与存储过程</h1><p>事务的概念，会开启、提交和回滚事务 事务的四种隔离级别 创建存储过程 调用、查看、修改和删除存储过程</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> transaction;  <span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">commit</span>;             <span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">rollback</span>;           <span class="hljs-comment">-- 取消事务(回滚)</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表account，插入数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>  money <span class="hljs-type">float</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(name,money) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3000</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>利用事务实现转账功能，首先开启事务，然后执行语句，提交事务<br><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>事务的提交，通过这个命令查看mysql提交方式<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>; <span class="hljs-comment">-- 若为1，表示自动提交，为0，就要手动提交</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>若事务的提交方式为手动提交<br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 设置为手动提交</span><br><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>现在执行<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account 可以看到转账成功，若此时退出数据库重新登录，会看到各账户余额没有改变，所以一定要用<span class="hljs-keyword">commit</span>语句提交事务，否则会失败<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>事务的回滚，别忘记设置为手动提交的模式<br><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>若此时a不想转账给b，可以使用事务的回滚<br><span class="hljs-keyword">rollback</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>事务的隔离级别<br>read uncommitted;<br>read committed;<br>repeatable read;<br>serializable;<br></code></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建查看student表的存储过程<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建student表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student( <br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment, <br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>), <br>  grade <span class="hljs-type">float</span> <br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span>  <span class="hljs-comment">-- 将mysql的结束符设置为//</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> Proc()<br>  <span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br>  <span class="hljs-keyword">end</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;   <span class="hljs-comment">-- 将mysql的结束符设置为;</span><br><span class="hljs-keyword">call</span> Proc();  <span class="hljs-comment">-- 这样就可以调用该存储过程</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>变量的使用,mysql中变量不用事前申明，在用的时候直接用“@变量名”使用就可以<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@number</span><span class="hljs-operator">=</span><span class="hljs-number">100</span>; <span class="hljs-comment">-- 或set @num:=1;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>定义条件和处理程序<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>光标的使用<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>声明光标<br><span class="hljs-keyword">DECLARE</span> <span class="hljs-operator">*</span> cursor_name<span class="hljs-operator">*</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statement<br><span class="hljs-number">2.</span> 光标<span class="hljs-keyword">OPEN</span>语句<br><span class="hljs-keyword">OPEN</span> cursor_name<br><span class="hljs-number">3.</span> 光标<span class="hljs-keyword">FETCH</span>语句<br><span class="hljs-keyword">FETCH</span> cursor_name <span class="hljs-keyword">INTO</span> var_name [, var_name] ...<br><span class="hljs-number">4.</span> 光标<span class="hljs-keyword">CLOSE</span>语句<br><span class="hljs-keyword">CLOSE</span> cursor_name<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>流程控制的使用  不做介绍<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>定义存储过程<br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> proc1(<span class="hljs-keyword">in</span> name <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>),<span class="hljs-keyword">out</span> num <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> num <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span>name;<br><span class="hljs-keyword">end</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>调用存储过程<br><span class="hljs-keyword">call</span> proc1(&quot;tom&quot;,<span class="hljs-variable">@num</span>) <span class="hljs-comment">-- 查找名为tom学生人数</span><br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看存储过程<br> <span class="hljs-keyword">show</span> <span class="hljs-keyword">procedure</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;p%&#x27;</span> \G <span class="hljs-comment">-- 获得以p开头的存储过程信息</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改存储过程<br>alter &#123;procedure|function&#125; sp_name[characteristic...]<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除存储过程<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> proc1;<br></code></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>如何创建视图 查看、修改、更新、删除视图</p><h2 id="视图的基本操作"><a href="#视图的基本操作" class="headerlink" title="视图的基本操作"></a>视图的基本操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在单表上创建视图,重新创建student表，插入数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  math <span class="hljs-type">float</span>,<br>  chinese <span class="hljs-type">float</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(name,math,chinese) <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;howie1&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>),<br>(<span class="hljs-string">&#x27;howie2&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>),<br>(<span class="hljs-string">&#x27;howie3&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>开始创建视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> math,chinese,math<span class="hljs-operator">+</span>chinese <span class="hljs-keyword">from</span> student;  <span class="hljs-comment">-- 下图可看出创建成功</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>也可以创建自定义字段名称的视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_view2(math,chin,sum) <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> math,chinese,math<span class="hljs-operator">+</span>chinese <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在多表上创建视图，创建表stu_info，插入数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu_info(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>  class <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  addr <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu_info(class,addr) <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;anhui&#x27;</span>),<br>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;fujian&#x27;</span>),<br>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;guangdong&#x27;</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建视图stu_class<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_class(id,name,class) <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> student.id,student.name,stu_info.class <span class="hljs-keyword">from</span> <br>student,stu_info <span class="hljs-keyword">where</span> student.id<span class="hljs-operator">=</span>stu_info.id;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看视图<br><span class="hljs-keyword">desc</span> stu_class;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;stu_class&#x27;</span>\G<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_class\G<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> chinese <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>更新视图<br><span class="hljs-keyword">update</span> stu_view <span class="hljs-keyword">set</span> chinese<span class="hljs-operator">=</span><span class="hljs-number">100</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;haha&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> stu_view2 <span class="hljs-keyword">where</span> math<span class="hljs-operator">=</span><span class="hljs-number">100</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除视图<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> if <span class="hljs-keyword">exists</span> stu_view2;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAOP原理分析</title>
    <link href="/blog/2021/01/19/SpringAOP%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/blog/2021/01/19/SpringAOP%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring核心知识"><a href="#Spring核心知识" class="headerlink" title="Spring核心知识"></a>Spring核心知识</h1><p>Spring是一个开源框架，Spring是于2003年兴起的一个轻量级的Java开发框架，由Rod Johnson在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转(IoC)和面向切面(AOP)。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式)轻量级开源框架。</p><p>为什么说Spring是一个一站式的轻量级开源框架呢？EE开发可分成三层架构，针对JavaEE的三层结构，每一层Spring都提供了不同的解决技术。</p><p>• WEB层：SpringMVC</p><p>• 业务层：Spring的IoC</p><p>• 持久层：Spring的JDBCTemplate(Spring的JDBC模板，ORM模板用于整合其他的持久层框架)</p><p>从上面的简要介绍中，我们要知道Spring的核心有两部分：</p><p>• IoC：控制反转。</p><p>举例来说，在之前的操作中，比方说有一个类，我们想要调用类里面的方法(不是静态方法)，就要创建类的对象，使用对象调用方法实现。对于Spring来说，Spring创建对象的过程，不是在代码里面实现的，而是交给Spring来进行配置实现的。</p><p>AOP：面向切面编程。</p><h1 id="SpringAOP原理"><a href="#SpringAOP原理" class="headerlink" title="SpringAOP原理"></a>SpringAOP原理</h1><p>AOP编程技术 什么是AOP编程 AOP: Aspect Oriented Programming 面向切面编程。 　　面向切面编程(也叫面向方面)：Aspect Oriented Programming(AOP),是目前软件开发中的一个热点。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 　　AOP是OOP的延续，是（Aspect Oriented Programming）的缩写，意思是面向切面（方面）编程。 　　主要的功能是：日志记录，性能统计，安全控制，事务处理，异常处理等等。 　　主要的意图是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改 变这些行为的时候不影响业务逻辑的代码。</p><p>　　可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP实际是GoF设计模式的延续，设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP可以说也是这种目标的一种实现。</p><p>假设把应用程序想成一个立体结构的话，OOP的利刃是纵向切入系统，把系统划分为很多个模块（如：用户模块，文章模块等等），而AOP的利刃是横向切入系统，提取各个模块可能都要重复操作的部分（如：权限检查，日志记录等等）。由此可见，AOP是OOP的一个有效补充。</p><p>注意：AOP不是一种技术，实际上是编程思想。凡是符合AOP思想的技术，都可以看成是AOP的实现。</p><p>Aop， aspect object programming 面向切面编程</p><p>功能： 让关注点代码与业务代码分离！</p><p>关注点</p><p>关注点,重复代码就叫做关注点；</p><p>切面</p><p>关注点形成的类，就叫切面(类)！</p><p>面向切面编程，就是指 对很多功能都有的重复的代码抽取，再在运行的时候网业务方法上动态植入“切面类代码”。</p><p>切入点</p><p>执行目标对象方法，动态植入切面代码。</p><p>可以通过切入点表达式，指定拦截哪些类的哪些方法； 给指定的类在运行的时候植入切面类代码。</p><h1 id="AOP底层实现原理"><a href="#AOP底层实现原理" class="headerlink" title="AOP底层实现原理"></a>AOP底层实现原理</h1><p>代理设计模式</p><p>什么是代理模式</p><p>通过代理控制对象的访问,可以详细访问某个对象的方法，在这个方法调用处理，或调用后处理。既(AOP微实现) ,AOP核心技术面向切面编程。</p><p>代理模式应用场景</p><p>SpringAOP、事物原理、日志打印、权限控制、远程调用、安全代理 可以隐蔽真实角色</p><p>代理的分类</p><p>静态代理(静态定义代理类)</p><p>动态代理(动态生成代理类)</p><p>Jdk自带动态代理</p><p>Cglib 、javaassist（字节码操作库）</p><p>静态代理</p><p>什么是静态代理</p><p>由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p><p>静态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;已经保存数据...&quot;</span>);<br>    &#125;<br>&#125;<br>代理类<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> IUserDao target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoProxy</span><span class="hljs-params">(IUserDao iuserDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = iuserDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开启事物...&quot;</span>);<br>        target.save();<br>        System.out.println(<span class="hljs-string">&quot;关闭事物...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理</p><p>什么是动态代理</p><p>1.代理对象,不需要实现接口</p><p>2.代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)</p><p>3.动态代理也叫做:JDK代理,接口代理</p><p>JDK动态代理</p><p>1)原理：是根据类加载器和接口创建代理类（此代理类是接口的实现类，所以必须使用接口 面向接口生成代理，位于java.lang.reflect包下）</p><p>2)实现方式：</p><p>通过实现InvocationHandler接口创建自己的调用处理器 IvocationHandler handler = new InvocationHandlerImpl(…);</p><p>通过为Proxy类指定ClassLoader对象和一组interface创建动态代理类Class clazz = Proxy.getProxyClass(classLoader,new Class[]{…});</p><p>通过反射机制获取动态代理类的构造函数，其参数类型是调用处理器接口类型Constructor constructor = clazz.getConstructor(new Class[]);</p><p>通过构造函数创建代理类实例，此时需将调用处理器对象作为参数被传入Interface Proxy = (Interface)constructor.newInstance(new Object[] (handler));</p><p>缺点：jdk动态代理，必须是面向接口，目标业务类必须实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 每次生成动态代理类对象时,实现了InvocationHandler接口的调用处理器对象 </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvocationHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target;<span class="hljs-comment">// 这其实业务实现类对象，用来调用具体的业务方法</span><br>    <span class="hljs-comment">// 通过构造函数传入目标对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvocationHandlerImpl</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Object result = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;调用开始处理&quot;</span>);<br>        result = method.invoke(target, args);<br>        System.out.println(<span class="hljs-string">&quot;调用结束处理&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException, InstantiationException,</span><br><span class="hljs-function">            IllegalAccessException, IllegalArgumentException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">// 被代理对象</span><br>        IUserDao userDao = <span class="hljs-keyword">new</span> UserDao();<br>        InvocationHandlerImpl invocationHandlerImpl = <span class="hljs-keyword">new</span> InvocationHandlerImpl(userDao);<br>        ClassLoader loader = userDao.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = userDao.getClass().getInterfaces();<br>        <span class="hljs-comment">// 主要装载器、一组接口及调用处理动态代理实例</span><br>        IUserDao newProxyInstance = (IUserDao) Proxy.newProxyInstance(loader, interfaces, invocationHandlerImpl);<br>        newProxyInstance.save();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>CGLIB动态代理与JDK动态区别</p><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p><p>而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p><p>Spring中。</p><p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p><p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p><p>3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。 CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。 因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</p><h1 id="AOP编程使用"><a href="#AOP编程使用" class="headerlink" title="AOP编程使用"></a>AOP编程使用</h1><p>注解版本实现AOP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;  开启事物注解权限<br><span class="hljs-meta">@Aspect</span>                         指定一个类为切面类       <br><span class="hljs-meta">@Pointcut(&quot;execution(* com.service.UserService.add(..))&quot;)</span>  指定切入点表达式<br><span class="hljs-meta">@Before(&quot;pointCut_()&quot;)</span>              前置通知: 目标方法之前执行<br><span class="hljs-meta">@After(&quot;pointCut_()&quot;)</span>               后置通知：目标方法之后执行（始终执行）<br><span class="hljs-meta">@AfterReturning(&quot;pointCut_()&quot;)</span>       返回后通知： 执行方法结束前执行(异常不执行)<br><span class="hljs-meta">@AfterThrowing(&quot;pointCut_()&quot;)</span>           异常通知:  出现异常时候执行<br><span class="hljs-meta">@Around(&quot;pointCut_()&quot;)</span>              环绕通知： 环绕目标方法执行<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopLog</span> </span>&#123;<br><br>    <span class="hljs-comment">// 前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 运行通知</span><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">returning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;运行通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;异常通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知开始&quot;</span>);<br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>XML方式实现AOP</p><p>Xml实现aop编程： 1） 引入jar文件 【aop 相关jar， 4个】 2） 引入aop名称空间 3）aop 配置 * 配置切面类 （重复执行代码形成的类） * aop配置 拦截哪些方法 / 拦截到方法后应用通知代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>    xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:p=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span><br>    xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>    xmlns:aop=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br>    xsi:schemaLocation=<span class="hljs-string">&quot;</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">        http://www.springframework.org/schema/context</span><br><span class="hljs-string">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="hljs-string">        http://www.springframework.org/schema/aop</span><br><span class="hljs-string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;<br><br>    &lt;!-- dao 实例 --&gt;<br><br>    &lt;bean id=&quot;userService&quot; class=&quot;com.service.UserService&quot;&gt;&lt;/bean&gt;<br>    &lt;!-- 切面类 --&gt;<br>    &lt;bean id=&quot;aop&quot; class=&quot;com.aop2.AopLog2&quot;&gt;&lt;/bean&gt;<br>    &lt;!-- Aop配置 --&gt;<br>    &lt;aop:config&gt;<br>        &lt;!-- 定义一个切入点表达式： 拦截哪些方法 --&gt;<br>        &lt;aop:pointcut expression=<span class="hljs-string">&quot;execution(* com.service.UserService.*(..))&quot;</span><br>            id=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>        &lt;!-- 切面 --&gt;<br>        &lt;aop:aspect ref=<span class="hljs-string">&quot;aop&quot;</span>&gt;<br>            &lt;!-- 环绕通知 --&gt;<br>            &lt;aop:around method=<span class="hljs-string">&quot;around&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 前置通知： 在目标方法调用前执行 --&gt;<br>            &lt;aop:before method=<span class="hljs-string">&quot;begin&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 后置通知： --&gt;<br>            &lt;aop:after method=<span class="hljs-string">&quot;after&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 返回后通知 --&gt;<br>            &lt;aop:after-returning method=<span class="hljs-string">&quot;afterReturning&quot;</span><br>                pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 异常通知 --&gt;<br>            &lt;aop:after-throwing method=<span class="hljs-string">&quot;afterThrowing&quot;</span><br>                pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>        &lt;/aop:aspect&gt;<br>    &lt;/aop:config&gt;<br><br>&lt;/beans&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopLog2</span> </span>&#123;<br><br>    <span class="hljs-comment">// 前置通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// 后置通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 运行通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">returning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;运行通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 异常通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;异常通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 环绕通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知开始&quot;</span>);<br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/aop#spring%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86">Spring核心知识</a><a href="https://bk.cuixiaoyan.xyz/archives/aop#springaop%E5%8E%9F%E7%90%86">SpringAOP原理</a><a href="https://bk.cuixiaoyan.xyz/archives/aop#aop%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">AOP底层实现原理</a><a href="https://bk.cuixiaoyan.xyz/archives/aop#aop%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8">AOP编程使用</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现多线程的三种方法</title>
    <link href="/blog/2021/01/19/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/blog/2021/01/19/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Java虚拟机（JVM，是运行所有Java程序的抽象计算机，是Java语言的运行环境）允许应用程序并发地运行多个线程。在Java语言中，多线程的实现一般有以下三种方法：</p><p>1、实现Runnable接口，并实现该接口的run()方法。</p><p>　　①自定义类并实现Runnable接口，实现run()方法。</p><p>　　②创建Thread对象，用实现Runnable接口的对象作为参数实例化该Thread对象。</p><p>　　③调用Thread的start()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;　　<span class="hljs-comment">//创建线程类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Thread body&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread thread = <span class="hljs-keyword">new</span> MyThread();<br>        Thread t = <span class="hljs-keyword">new</span> Thread(thread);<br>        t.run();　　<span class="hljs-comment">//开启线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、继承Thread类，重写run()方法。</p><p>　　Thread本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，启动线程的唯一方法就是通过Thread类的start()方法。start()方法是一个native（本地）方法，它将启动一个新线程，并执行run()方法（Thread中提供的run()方法是一个空方法）。这种方式通过自定义类直接extends Thread，并重写run()方法，就可以启动新线程并执行自己定义的run()方法。需要注意的是，当start()方法调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行多线程代码是由操作系统决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;    <span class="hljs-comment">//创建线程类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Thread body&quot;</span>);    <span class="hljs-comment">//线程的方法体</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread thread = <span class="hljs-keyword">new</span> MyThread();<br>        thread.run();    <span class="hljs-comment">//开启线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、实现Callable接口，重写call()方法。</p><p>　　Callable对象实际是属于Executor框架中的功能类，Callable接口与Runnable接口类似，但是提供了比Runnable更强大 的功能，主要表现为以下三点：</p><p>　　①Callable可以在任务结束后提供一个返回值，Runnable无法提供这个功能。</p><p>　　②Callable中的call方法可以抛出异常，而Runnable的run()方法不能抛出异常。</p><p>　　③运行Callable可以拿到一个Future对象，Future对象表示异步计算的结果。它提供了检查计算是否完成的方法。由于线程属于异步计算模型，所以无法从其他线程中得到方法的返回值，在这种情况下，就可以使用Future来监视目标线程调用call()方法的情况，当调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法结束返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableAndFuture</span></span>&#123;　　<span class="hljs-comment">//创建线程类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExecutorService threadPool = Executors.newSingleThreadExecutor();<br>        <span class="hljs-comment">//启动线程</span><br>        Future&lt;String&gt; future = threadPool.submit(<span class="hljs-keyword">new</span> CallableTest());<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;waiting thread to finish&quot;</span>);<br>            System.out.println(future.get());　　<span class="hljs-comment">//等待线程结束，并获取返回结果</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　在以上三种方式中，前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。当需要实现多线程时，一般推荐实现Runnable接口的方式，原因如下：首先，Thread类定义了多种方法可以被派生类使用或重写，但是只有run方法是必须被重写的，在run方法中实现这个线程的主要功能。这当然是实现Runnable接口所需的同样的方法。而且，很多Java开发人员认为，一个人仅在它们需要被加强或修改时才会被继承。因此，如果没有必要重写Thread类中的其他方法，那么通过继承Thread的实现方式和实现Runnable接口的效果相同，在这种情况下最好通过Runnable接口的方式来创建线程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java集合面试20问</title>
    <link href="/blog/2021/01/18/java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%9520%E9%97%AE/"/>
    <url>/blog/2021/01/18/java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%9520%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<ol><li>HashMap的内部实现原理是什么？</li></ol><p>HashMap内部实现原理是数组+链表，通过散列算法将key值散列到数组中，如果到相同的位置，则通过拉链法解决散列冲突。在JDK8中新增了红黑树结构，当HashMap中的散列冲突链表结构超过8个数据时，会从链表结构转换为红黑树结构。</p><ol><li>HashMap的key值能否是null，如果能，key=null如何存储以及如何读取的？如果不能，为什么？</li></ol><p>HashMap的key值可以是null。如果key=null，则会将它放置在数组下标为0的位置。</p><ol><li>HashMap如何实现扩容？</li></ol><p>HashMap扩容和初始容器大小与负载因子有关。HashMap的初始容器大小为16，默认的负载因子为0.75，当实际容量超过16*0.75=12个元素时会进行扩容。扩容后的容器大小是扩容前的2倍，第一次扩容后的容器大小为32。</p><ol><li>设置HashMap的容量有没有注意的地方，为什么？</li></ol><p>指定HashMap的容量时，建议是2的幂次方。</p><p>HashMap在寻址是会key的hash值与容器长度做与运算，(n - 1) &amp; hash。当n的长度为2的幂次方时，n-1的二进制形式就会是111111，这样与操作效率会非常的快。</p><ol><li>HashMap是否是线程安全的？如果不是，多线程下并发操作它可能会带来什么问题？如果是，它是怎么实现的？</li></ol><p>HashMap不是线程安全的。如果在多线程下并发操作不仅会导致脏数据，甚至可能会造成死循环。（关于死循环产生的原因参考<a href="https://www.cnblogs.com/yulinfeng/p/8558983.html%EF%BC%89">https://www.cnblogs.com/yulinfeng/p/8558983.html）</a></p><ol><li>LinkedHashMap的内部实现原理是什么？它是否支持key=null？</li></ol><p>LinkedHashMap是插入有序的Map集合。它直接继承了HashMap，所以很多都直接复用了HashMap方法，所以也支持key=null。它在内部除了沿用HashMap的底层结构，还单独维护了一个双向链表，在对Map进行put操作时，同时还会将数据写到了链表的尾部，保证了插入有序。</p><ol><li>TreeMap的内部实现原理是什么？它是否支持key=null？</li></ol><p>TreeMap结构也是有序的，不同的是它是字典有序，由于它底层是红黑树结构，插入时会进行比较key值的顺序，所以不允许key=null的情况。</p><ol><li>介绍下Hashtable</li></ol><p>Hashtable是线程安全的Map类型，但它的线程安全代价是为整个散列表加锁，效率很低，几乎已经废弃。如果要使用线程安全的Map，应该使用ConcurrentHashMap，它的实现是分段锁，能最大的提高效率。</p><ol><li>以上三种Map类型分别可以应用到哪些场景？你在哪些场景下使用过？</li></ol><p>HashMap的使用场景很多，这个使用场景就太多了，比如用作本地缓存。</p><p>LinkedHashMap因为它的链表结构可以实现LRU（最近最少使用），即缓存空间有限，当元素多余缓存空间，可淘汰掉最近最少使用的元素。在LinkedHashMap维护了一个accessOrder字段，默认为false，当设置为true时，如果访问一个key值，就会将这个元素放置链表头部，这样在链表尾部的元素就是不常用的元素，空间不足直接remove末尾的元素即可。所以当要实现LRU缓存时，就可以将accessOrder设置为true实现。</p><p>TreeMap没有实际应用过，如果有需要排序的场景则使用TreeMap</p><p>Set 10. HashSet的内部实现原理是什么，它有什么特点？</p><p>HashSet集合的特点是不允许有重复的元素，且无序的，允许null值。它在内部维护一个HashMap，存储在HashSet中的元素实际上存储在HashMap的key中。</p><ol><li>LinkedHashSet的内部实现原理是什么，它有什么特点？</li></ol><p>LinkedHashSet继承自HashMap，在内部维护一个双向链表保证插入有序，允许null值。</p><ol><li>TreeSet的内部实现原理是什么，它有什么特点？</li></ol><p>TreeSet是一个有序的集合，它的作用是提供有序的Set集合，TreeSet是基于TreeMap实现的。不允许有null值。</p><ol><li>以上三种Set类型分别可以应用到哪些场景？你在哪些场景下使用过？</li></ol><p>HashSet可应用于批量查询时去重。</p><p>如果需要返回的数据和入参的数据顺序一致则可以使用LinkedHashSet。</p><p>List 14. ArrayList的内部实现原理什么？</p><p>底层通过数组实现，创建一个ArrayList对象实例时不会初始化数组，当插入第一条数据时会创建一个大小为10的数组。</p><ol><li>既然ArrayList的底层实现是数组，那定义ArrayList时，需要定义它的大小吗？</li></ol><p>可以不用定义容器的大小，默认大小为10，当容量大小不足时此时将会进行扩容。</p><ol><li>ArrayList的扩容机制是什么？</li></ol><p>每次新增的容量是旧容量的一半，扩容后调用System.arraycopy方法拷贝到新的数组。</p><ol><li>如果初始化ArrayList时，定义一个容量大小为11，此时扩容了几次，容量大小为16呢？</li></ol><p>不进行扩容。</p><ol><li>LinkedList的内部实现原理是什么？</li></ol><p>底层通过链表实现，所以不存在扩容。</p><ol><li>Vector和ArrayList、LinkedList的区别？</li></ol><p>Vector是线程安全的额，ArrayList、LinkedList不是线程安全的。Vector的线程安全是为每个方法加上synchronized关键字，效率不高，不常用。</p><ol><li>ArrayList与LinkedList分别可以应用到哪些场景？</li></ol><p>大多数情况下使用ArrayList，因为ArrayList是数组实现，它随机读取的速度更快，但插入指定位置慢；LinkedList由于是链表实现，所以随机读取的速度慢，但插入指定位置快。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装ElasticSearch6</title>
    <link href="/blog/2021/01/18/centos7%E5%AE%89%E8%A3%85ElasticSearch6/"/>
    <url>/blog/2021/01/18/centos7%E5%AE%89%E8%A3%85ElasticSearch6/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是-ElasticSearch"><a href="#什么是-ElasticSearch" class="headerlink" title="什么是 ElasticSearch"></a>什么是 ElasticSearch</h1><p>ElasticSearch是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>索引：含有相同属性的文档集合</p><p>类型：索引可以定义一个或多个类型，文档必须属于一个类型</p><p>文档：可以被索引的基础数据单位</p><p>分片：每个索引都有多个分片，每个分片都是 Lucene 索引</p><p>备份：拷贝一份分片就完成分片的备份</p><h2 id="形象比喻："><a href="#形象比喻：" class="headerlink" title="形象比喻："></a>形象比喻：</h2><p>百货大楼里有各式各样的商品，例如书籍、笔、水果等。书籍可以根据内容划分成不同种类，如科技类、教育类、悬疑推理等。悬疑推理类的小说中比较有名气的有《福尔摩斯探案集》、《白夜行》等。</p><p>百货大楼 –&gt; ElasticSearch 数据库</p><p>书籍 –&gt; 索引</p><p>悬疑推理 –&gt; 类型</p><p>白夜行 –&gt; 文档</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>需要JDK1.8 和 NodeJS 最新版的7 慎重考虑需要需要JDK 11 登陆<a href="https://www.elastic.co/cn/downloads/past-releases">老版本下载</a> 官网下载文件。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-094122@2x_1565919762389.png" alt="WX20190816-094122@2x">解压到 /use 目录下<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-094419@2x_1565919900521.png" alt="WX20190816-094419@2x"></p><p>因为 Elasticsearch 可以执行脚本文件，为了安全性，默认不允许通过 root 用户启动服务。我们需要新创建用户名和用户组启动服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">#增加 es 组<br>groupadd es<br><br>#增加 es 用户并附加到 es 组<br>useradd es -g es -<span class="hljs-keyword">p</span> es<br><br>#给目录权限 进入到你解压的位置 输入<span class="hljs-keyword">pwd</span> 将路径拷贝到 es 后面<br>chown -R <span class="hljs-keyword">e</span><span class="hljs-variable">s:es</span> /usr/elasticsearch-<span class="hljs-number">5.6</span>.<span class="hljs-number">1</span><br><br>#使用es用户<br>su es<br></code></pre></td></tr></table></figure><p>默认情况下，Elasticsearch 只允许本机访问，如果需要远程访问，需要修改其配置文件 特别注意 要和上下文对齐 不要多空格 和少空格</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> config/elasticsearch.yml<br><br># 去掉 network.host 前边的注释，将它的值改成<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>network.hos<span class="hljs-variable">t:</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><br><br><br># 在文件末尾添加 <span class="hljs-number">2</span> 段配置 这里是为了解决跨域问题 web管理界面<br><br>http.cors.enabled: true<br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">bin/elasticsearch 或 bin/elasticsearch -d # -d 表示后台启动<br></code></pre></td></tr></table></figure><h1 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h1><p>先不后台启动 错误会直接打印 调试没有问题之后 后台启动 可能会出现的问题 6也会遇到</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vim">elasticsearch5.<span class="hljs-number">0</span>启动失败，出现如下提示：<br><br>1、Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=&#x27;Cannot allocate memory&#x27; (errno=12)<br><br>由于elasticsearch5.<span class="hljs-number">0</span>默认分配jvm空间大小为<span class="hljs-number">2</span>g，修改jvm空间分配<br><br># <span class="hljs-keyword">vim</span> config/jvm.<span class="hljs-keyword">options</span><br>-Xms2g<br>-Xmx2g<br>修改为  还是同样的错误的话 继续往下调 <br>-Xms512m<br>-Xmx512m<br><br><br><span class="hljs-number">2</span>、<span class="hljs-built_in">max</span> <span class="hljs-keyword">number</span> of threads [<span class="hljs-number">1024</span>] <span class="hljs-keyword">for</span> user [elasticsearch] <span class="hljs-keyword">is</span> too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">2048</span>]<br>修改 /etc/security/limits.d/<span class="hljs-number">90</span>-nproc.<span class="hljs-keyword">conf</span> <br><br>*          soft    nproc     <span class="hljs-number">1024</span><br><br>*          soft    nproc     <span class="hljs-number">2048</span><br><br><br><br><span class="hljs-number">3</span>、<span class="hljs-built_in">max</span> virtual memory areas <span class="hljs-keyword">vm</span>.max_map_count [<span class="hljs-number">65530</span>] <span class="hljs-keyword">is</span> too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">262144</span>]<br><br>修改/etc/sysctl.<span class="hljs-keyword">conf</span>配置文件，<br><br><span class="hljs-keyword">cat</span> /etc/sysctl.<span class="hljs-keyword">conf</span> | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">vm</span>.max_map_count<br><span class="hljs-keyword">vm</span>.max_map_count=<span class="hljs-number">262144</span><br><br>如果不存在则添加<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;vm.max_map_count=262144&quot;</span> &gt;&gt;/etc/sysctl.<span class="hljs-keyword">conf</span><br><br><br><br><span class="hljs-number">4</span>、<span class="hljs-built_in">max</span> <span class="hljs-keyword">file</span> descriptors [<span class="hljs-number">65535</span>] <span class="hljs-keyword">for</span> elasticsearch process likely too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">65536</span>]<br><br><br><br>ulimit -n <span class="hljs-number">65536</span><br><br><br><br><br><br>以下是在<span class="hljs-number">5.5</span>.<span class="hljs-number">1</span>是踩过的坑<br><br><br><br><span class="hljs-number">5</span>、启动异常：ERROR: bootstrap checks failed<br><br>system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk<br><br><br><br>问题原因：因为Centos6不支持SecComp，而ES默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。详见 ：http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/elastic/elasticsearch/issues/<span class="hljs-number">22899</span><br><br><br><br>解决方法：在elasticsearch.yml中配置bootstrap.system_call_filter为false，注意要在Memory下面:<br>bootstrap.memory_lock: false<br>bootstrap.system_call_filter: false<br><br><br><br><span class="hljs-number">6</span>、logstash使用rpm包安装的时候没有配置init的启动脚本<br><br>默认情况使用rpm包安装完logstash之后没有启动脚本。官网给了一个脚本，需要根据不同的系统版本生成对应的启动脚本，而且官网没有给明使用方法，对于新用户来说算是个坑，不过在终端可以查看到脚本的使用帮助# /usr/share/logstash/bin/<span class="hljs-built_in">system</span>-install --<span class="hljs-keyword">help</span><br><br>生成启动脚本，centos6使用sysv参数，centos7使用systemd<br><br># /usr/share/logstash/bin/<span class="hljs-built_in">system</span>-install /etc/logstash/startup.<span class="hljs-keyword">options</span> sysv<br><br>Successfully created <span class="hljs-built_in">system</span> startup script <span class="hljs-keyword">for</span> Logstash<br></code></pre></td></tr></table></figure><p>启动成功 你的ip 9200 默认端口<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-100353@2x_1565921056554.png" alt="WX20190816-100353@2x"></p><h1 id="head插件"><a href="#head插件" class="headerlink" title="head插件"></a>head插件</h1><p>查看内容显示效果不友好，因此，我们需要安装一个名为 elasticsearch-head 的插件，让内容显示效果比较舒适。需要安装nodejs githup下载 端口9100</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> elasticsearch-head-master<br><br>npm install<br><br>npm run start<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-100733@2x_1565921326422.png" alt="WX20190816-100733@2x"></p><p>后面是我整合啦spring boot</p>]]></content>
    
    
    
    <tags>
      
      <tag>centos7</tag>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB 与 MySQL 的区别</title>
    <link href="/blog/2021/01/18/MongoDB%E4%B8%8E%20MySQL%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/01/18/MongoDB%E4%B8%8E%20MySQL%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>概念区别<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190815-134731@2x_1565848087636.png" alt="WX20190815-134731@2x">关键字和函数区别<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190815-134744@2x_1565848087719.png" alt="WX20190815-134744@2x">语句区别 创建表/集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.insertOne( &#123;<br>    user_id: &quot;abc123&quot;,<br>    age: <span class="hljs-number">55</span>,<br>    status: &quot;A&quot;<br> &#125; )<br> <br>相当于 <br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> people (<br>    id MEDIUMINT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    user_id <span class="hljs-type">Varchar</span>(<span class="hljs-number">30</span>),<br>    age Number,<br>    status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (id)<br>)<br></code></pre></td></tr></table></figure><p>新增字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.updateMany(<br>    &#123; &#125;,<br>    &#123; $set: &#123; join_date: new Date() &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> people <span class="hljs-keyword">ADD</span> join_date DATETIME<br></code></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.updateMany(<br>    &#123; &#125;,<br>    &#123; $unset: &#123; &quot;join_date&quot;: &quot;&quot; &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> people <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> join_date<br></code></pre></td></tr></table></figure><p>创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.createIndex( &#123; user_id: 1 &#125; )<br> <br>相当于 <span class="hljs-keyword">CREATE</span> INDEX idx_user_id_asc <span class="hljs-keyword">ON</span> people(user_id)<br></code></pre></td></tr></table></figure><p>删除表/集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.drop()<br> <br>相当于 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> people<br></code></pre></td></tr></table></figure><p>新增记录/文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.insertOne(<br>   &#123; user_id: &quot;bcd001&quot;, age: 45, status: &quot;A&quot; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> people(user_id,age,status) <span class="hljs-keyword">VALUES</span> (&quot;bcd001&quot;,<span class="hljs-number">45</span>,&quot;A&quot;)<br></code></pre></td></tr></table></figure><p>简单查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people<br> <br>db.people.find(<br>    &#123; &#125;,<br>    &#123; user_id: 1, status: 1 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> id,user_id,status <span class="hljs-keyword">FROM</span> people<br> <br>db.people.find(<br>    &#123; &#125;,<br>    &#123; user_id: 1, status: 1, _id: 0 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> user_id, status <span class="hljs-keyword">FROM</span> people<br></code></pre></td></tr></table></figure><p>条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; status: &quot;A&quot; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;<br> <br>db.people.find(<br>    &#123; status: &quot;A&quot; &#125;,<br>    &#123; user_id: 1, status: 1, _id: 0 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> user_id, status <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;<br></code></pre></td></tr></table></figure><p>非查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; status: &#123; $ne: &quot;A&quot; &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">!=</span> &quot;A&quot;<br></code></pre></td></tr></table></figure><p>且查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; status: &quot;A&quot;,<br>      age: 50 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">AND</span> age <span class="hljs-operator">=</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>或查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; $or: [ &#123; status: &quot;A&quot; &#125; ,<br>             &#123; age: 50 &#125; ] &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">OR</span> age <span class="hljs-operator">=</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>大于查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; age: &#123; $gt: 25 &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>小于查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>   &#123; age: &#123; $lt: 25 &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>范围查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>   &#123; age: &#123; $gt: 25, $lte: 50 &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span> <span class="hljs-keyword">AND</span>   age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find( &#123; user_id: /bc/ &#125; ) 或 db.people.find( &#123; user_id: &#123; $regex: /bc/ &#125; &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-keyword">like</span> &quot;%bc%&quot;<br> <br>db.people.find( &#123; user_id: /^bc/ &#125; ) 或 db.people.find( &#123; user_id: &#123; $regex: /^bc/ &#125; &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-keyword">like</span> &quot;bc%&quot;<br></code></pre></td></tr></table></figure><p>排序查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find( &#123; status: &quot;A&quot; &#125; ).sort( &#123; user_id: 1 &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> user_id <span class="hljs-keyword">ASC</span><br> <br>db.people.find( &#123; status: &quot;A&quot; &#125; ).sort( &#123; user_id: -1 &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> user_id <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p>统计查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.<span class="hljs-built_in">count</span>() 或 db.people.find().<span class="hljs-built_in">count</span>()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> people<br> <br>db.people.count( &#123; user_id: &#123; $exists: true &#125; &#125; ) 或 db.people.find( &#123; user_id: &#123; $exists: true &#125; &#125; ).count()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(user_id) <span class="hljs-keyword">FROM</span> people<br> <br>db.people.count( &#123; age: &#123; $gt: 30 &#125; &#125; ) 或 db.people.find( &#123; age: &#123; $gt: 30 &#125; &#125; ).count()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>去重查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.distinct( &quot;status&quot; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(status) <span class="hljs-keyword">FROM</span> people<br></code></pre></td></tr></table></figure><p>分页查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.findOne() 或 db.people.find().limit(<span class="hljs-number">1</span>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people LIMIT <span class="hljs-number">1</span><br> <br>db.people.find().limit(<span class="hljs-number">5</span>).<span class="hljs-keyword">skip</span>(<span class="hljs-number">10</span>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people LIMIT <span class="hljs-number">5</span> <span class="hljs-keyword">SKIP</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>查询计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find( &#123; status: &quot;A&quot; &#125; ).explain()<br> <br>相当于 EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;<br></code></pre></td></tr></table></figure><p>修改记录/文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.updateMany(<br>   &#123; age: &#123; $gt: 25 &#125; &#125;,<br>   &#123; $set: &#123; status: &quot;C&quot; &#125; &#125;<br>);<br> <br>相当于 <span class="hljs-keyword">UPDATE</span> people <span class="hljs-keyword">SET</span> status <span class="hljs-operator">=</span> &quot;C&quot; <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span>;<br> <br>db.people.updateMany(<br>   &#123; status: &quot;A&quot; &#125; ,<br>   &#123; $inc: &#123; age: 3 &#125; &#125;<br>);<br> <br>相当于 <span class="hljs-keyword">UPDATE</span> people <span class="hljs-keyword">SET</span> age <span class="hljs-operator">=</span> age <span class="hljs-operator">+</span> <span class="hljs-number">3</span> <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;;<br></code></pre></td></tr></table></figure><p>删除记录/文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.deleteMany( &#123; status: &quot;D&quot; &#125; );<br> <br>相当于 <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;D&quot;;<br> <br>db.people.deleteMany(&#123;&#125;);<br> <br>相当于 <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> people;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gradle使用本地jar包</title>
    <link href="/blog/2021/01/16/gradle%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0jar%E5%8C%85/"/>
    <url>/blog/2021/01/16/gradle%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0jar%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>有很多时候 我们需要用到自己的jar包 特殊原因 你明白的</p><p>1.在项目根目录(与src同级目录)创建lib文件夹，并将jar包拷贝进去。</p><p>2.在build.gradle文件中的dependencies中添加如下脚本： compile fileTree(dir: ‘lib’, include: [ ‘*.jar’])</p><p>3.运行gradle build即可将jar文件打到工程Jar包中。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190815-103617@2x_1565836606994.png" alt="WX20190815-103617@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pdf 转 图片</title>
    <link href="/blog/2021/01/16/pdf%E8%BD%AC%E5%9B%BE%E7%89%87/"/>
    <url>/blog/2021/01/16/pdf%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>这里使用到的jar包 是 // <a href="https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox">https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox</a> compile group: ‘org.apache.pdfbox’, name: ‘fontbox’, version: ‘1.8.16’ // <a href="https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox">https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox</a> compile group: ‘org.apache.pdfbox’, name: ‘pdfbox’, version: ‘1.8.16’</p><p>pdf转单页图片 合并一张的工具库 前往<a href="https://bk.cuixiaoyan.xyz/archives/zhuantupian">aspose-words word转图片</a> 下载使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将pdf转成一张图片</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pdffile</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPDFBinary</span><span class="hljs-params">(String pdffile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//文件流</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(pdffile);<br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(pdffile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br> <br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br>PDDocument doc = PDDocument.load(inputStream);<br><span class="hljs-comment">//获取pdf文件 页数</span><br>List&lt;PDPage&gt; pages = doc.getDocumentCatalog().getAllPages();<br> <br>List&lt;BufferedImage&gt; imageList = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br>BufferedImage image = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pages.size(); i++) &#123;<br>PDPage page = (PDPage)pages.get(i); <span class="hljs-comment">// 获取第i页</span><br>image = page.convertToImage();<br>imageList.add(image);<br><span class="hljs-comment">//合并一张</span><br>image = MergeImage.mergeImage(<span class="hljs-keyword">false</span>, imageList);<br>&#125;<br> <br><span class="hljs-keyword">boolean</span> png = ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent +<span class="hljs-string">&quot;/&quot;</span>+ fileName + <span class="hljs-string">&quot;.png&quot;</span>));<br><span class="hljs-keyword">if</span>(png == <span class="hljs-keyword">false</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换失败&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>;<br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><p>pdf 每页转图片 放到文件夹内 转换成压缩包 也可以不放压缩包 随意 压缩包工具类 <a href="https://bk.cuixiaoyan.xyz/archives/yasuo">java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将pdf 转化为 图片分页 压缩包</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPDFBinarys</span><span class="hljs-params">(String pdffile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//文件流</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(pdffile);<br>PDDocument doc = PDDocument.load(inputStream);<br> <br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(pdffile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br><span class="hljs-comment">//获取pdf文件 页数</span><br>List&lt;PDPage&gt; pages = doc.getDocumentCatalog().getAllPages();<br> <br>BufferedImage image = <span class="hljs-keyword">null</span>;<br> <br><span class="hljs-comment">//创建同名文件夹</span><br><span class="hljs-keyword">new</span> File(parent+<span class="hljs-string">&quot;/&quot;</span>+ fileName).mkdir();<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pages.size(); i++) &#123;<br>PDPage page = (PDPage) pages.get(i); <span class="hljs-comment">// 获取第i页</span><br>image = page.convertToImage();<br>ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent +<span class="hljs-string">&quot;/&quot;</span>+ fileName +<span class="hljs-string">&quot;/&quot;</span>+ <span class="hljs-string">&quot;第&quot;</span>+ i +<span class="hljs-string">&quot;页&quot;</span> + fileName + <span class="hljs-string">&quot;.png&quot;</span>));<br> <br>&#125;<br> <br><span class="hljs-comment">//压缩同名文件夹</span><br>    File f = <span class="hljs-keyword">new</span> File(parent  +<span class="hljs-string">&quot;/&quot;</span> + fileName );<br>            <span class="hljs-keyword">new</span> CompactAlgorithm(<span class="hljs-keyword">new</span> File( parent+ <span class="hljs-string">&quot;/&quot;</span>,f.getName()+<span class="hljs-string">&quot;.zip&quot;</span>)).zipFiles(f);<br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br> <br> <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>+pages.size()+<span class="hljs-string">&quot;页&quot;</span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aspose-words java word 转换 服务器乱码解决</title>
    <link href="/blog/2021/01/16/aspose-words-java-word%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
    <url>/blog/2021/01/16/aspose-words-java-word%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>在本机测试是好的 但是到服务器就乱码 想到pdf是一种为打印设计的文档格式，可能跟字体相关。而且转出来的pdf中文都是空心方框，不是单纯的乱码，很有可能是缺少字体渲染不出来造成的。 服务器上用fc-list命令查看字体，果然没有中文字体 接下来将本机Windows的字体上传到CentOS服务器上。 具体操作： 也可以直接使用我的字体 经测试没问题 有的系统版本的原因 也会导致乱码 链接: <a href="https://pan.baidu.com/s/1Fj6pqfNDi__sdBJthdFCFg">https://pan.baidu.com/s/1Fj6pqfNDi__sdBJthdFCFg</a> 提取码: k35v 将Windows上字体文件 C:\Windows\Fonts目录，复制到CentOS的/usr/share/fonts目录 重启服务器</p><p>如果你转换的文档中有 公式系列的话 那么还需要再导入一种公式字体 这里已经准备好啦 链接: <a href="https://pan.baidu.com/s/1c8WYZMcqVeRHc23vVe3xrQ">https://pan.baidu.com/s/1c8WYZMcqVeRHc23vVe3xrQ</a> 提取码: c329<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190809-100929@2x_1565316592563.png" alt="WX20190809-100929@2x">同样需要重启服务器</p><p><strong>已知问题 着重号无法转换 官网也为给出解决方案</strong><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6_1565316729182.jpg" alt="未命名文件"></p><h1 id="aspose-words-word转图片"><a href="#aspose-words-word转图片" class="headerlink" title="aspose-words word转图片"></a>aspose-words word转图片</h1><p>这里所用到的jar包 和这里所用的的一样 <a href="https://bk.cuixiaoyan.xyz/archives/wordpdf">jar包下载 和谐文件</a> 将word转换为单张图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-comment">// 将word 转化为图片一张</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">parseFileToBase64_PNG</span><span class="hljs-params">(String wordfile)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br><span class="hljs-comment">//文件流</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(wordfile);<br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(wordfile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br> <br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br>List&lt;BufferedImage&gt; bufferedImages = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br>BufferedImage image = <span class="hljs-keyword">null</span>;<br>bufferedImages = wordToImg(inputStream);<br>image = MergeImage.mergeImage(<span class="hljs-keyword">false</span>, bufferedImages);<br> <br><span class="hljs-keyword">boolean</span> png = ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent + <span class="hljs-string">&quot;/&quot;</span> + fileName + <span class="hljs-string">&quot;.png&quot;</span>));<span class="hljs-comment">// 写入流中</span><br> <br> <br><span class="hljs-keyword">if</span>(png == <span class="hljs-keyword">false</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换失败&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: word和txt文件转换图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;BufferedImage&gt; <span class="hljs-title">wordToImg</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">if</span> (!isWordLicense()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-keyword">try</span> &#123;<br> <br>Document doc = <span class="hljs-keyword">new</span> Document(inputStream);<br>ImageSaveOptions options = <span class="hljs-keyword">new</span> ImageSaveOptions(SaveFormat.PNG);<br>options.setPrettyFormat(<span class="hljs-keyword">true</span>);<br>options.setUseAntiAliasing(<span class="hljs-keyword">true</span>);<br>options.setUseHighQualityRendering(<span class="hljs-keyword">true</span>);<br><span class="hljs-keyword">int</span> pageCount = doc.getPageCount();<br> <br>List&lt;BufferedImage&gt; imageList = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pageCount; i++) &#123;<br>OutputStream output = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>options.setPageIndex(i);<br> <br>doc.save(output, options);<br>ImageInputStream imageInputStream = ImageIO.createImageInputStream(parse(output));<br>imageList.add(ImageIO.read(imageInputStream));<br>&#125;<br><span class="hljs-keyword">return</span> imageList;<br> <br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 验证aspose.word组件是否授权：无授权的文件有水印和试用标记</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWordLicense</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// InputStream inputStream = new</span><br><span class="hljs-comment">// FileInputStream(&quot;D:\\Workspaces\\TestFilters\\lib\\license.xml&quot;);</span><br><span class="hljs-comment">// 避免文件遗漏</span><br>String licensexml = <span class="hljs-string">&quot;&lt;License&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Data&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Products&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Total for Java&lt;/Product&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Words for Java&lt;/Product&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Products&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;EditionType&gt;Enterprise&lt;/EditionType&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SubscriptionExpiry&gt;20991231&lt;/SubscriptionExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;LicenseExpiry&gt;20991231&lt;/LicenseExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SerialNumber&gt;23dcc79f-44ec-4a23-be3a-03c1632404e9&lt;/SerialNumber&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/Data&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Signature&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Signature&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/License&gt;&quot;</span>;<br>InputStream inputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(licensexml.getBytes());<br>com.aspose.words.License license = <span class="hljs-keyword">new</span> com.aspose.words.License();<br>license.setLicense(inputStream);<br>result = <span class="hljs-keyword">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br> <br><span class="hljs-comment">// outputStream转inputStream</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteArrayInputStream <span class="hljs-title">parse</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>baos = (ByteArrayOutputStream) out;<br>ByteArrayInputStream swapStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br><span class="hljs-keyword">return</span> swapStream;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>新建一个工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br> <br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: transformation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 多张图片合成</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: cuixy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2019-07-26 17:10</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeImage</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并任数量的图片成一张图片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> isHorizontal</span><br><span class="hljs-comment">     *            true代表水平合并，fasle代表垂直合并</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> imgs</span><br><span class="hljs-comment">     *            待合并的图片数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title">mergeImage</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isHorizontal, List&lt;BufferedImage&gt; imgs)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 生成新图片</span><br>        BufferedImage destImage = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 计算新图片的长和高</span><br>        <span class="hljs-keyword">int</span> allw = <span class="hljs-number">0</span>, allh = <span class="hljs-number">0</span>, allwMax = <span class="hljs-number">0</span>, allhMax = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 获取总长、总宽、最长、最宽</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; imgs.size(); i++) &#123;<br>            BufferedImage img = imgs.get(i);<br>            allw += img.getWidth();<br> <br>            <span class="hljs-keyword">if</span> (imgs.size() != i + <span class="hljs-number">1</span>) &#123;<br>                allh += img.getHeight() + <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                allh += img.getHeight();<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (img.getWidth() &gt; allwMax) &#123;<br>                allwMax = img.getWidth();<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (img.getHeight() &gt; allhMax) &#123;<br>                allhMax = img.getHeight();<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-comment">// 创建新图片</span><br>        <span class="hljs-keyword">if</span> (isHorizontal) &#123;<br>            destImage = <span class="hljs-keyword">new</span> BufferedImage(allw, allhMax, BufferedImage.TYPE_INT_RGB);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            destImage = <span class="hljs-keyword">new</span> BufferedImage(allwMax, allh, BufferedImage.TYPE_INT_RGB);<br>        &#125;<br> <br>        <span class="hljs-comment">// 注释，分隔线从灰色变成纯黑</span><br>        <span class="hljs-comment">// Graphics2D g2 = (Graphics2D) destImage.getGraphics();</span><br>        <span class="hljs-comment">// g2.setBackground(Color.LIGHT_GRAY);</span><br>        <span class="hljs-comment">// g2.clearRect(0, 0, allw, allh);</span><br>        <span class="hljs-comment">// g2.setPaint(Color.RED);</span><br> <br>        <span class="hljs-comment">// 合并所有子图片到新图片</span><br>        <span class="hljs-keyword">int</span> wx = <span class="hljs-number">0</span>, wy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; imgs.size(); i++) &#123;<br>            BufferedImage img = imgs.get(i);<br>            <span class="hljs-keyword">int</span> w1 = img.getWidth();<br>            <span class="hljs-keyword">int</span> h1 = img.getHeight();<br>            <span class="hljs-comment">// 从图片中读取RGB</span><br>            <span class="hljs-keyword">int</span>[] ImageArrayOne = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[w1 * h1];<br>            ImageArrayOne = img.getRGB(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w1, h1, ImageArrayOne, <span class="hljs-number">0</span>, w1); <span class="hljs-comment">// 逐行扫描图像中各个像素的RGB到数组中</span><br>            <span class="hljs-keyword">if</span> (isHorizontal) &#123; <span class="hljs-comment">// 水平方向合并</span><br>                destImage.setRGB(wx, <span class="hljs-number">0</span>, w1, h1, ImageArrayOne, <span class="hljs-number">0</span>, w1); <span class="hljs-comment">// 设置上半部分或左半部分的RGB</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 垂直方向合并</span><br>                destImage.setRGB(<span class="hljs-number">0</span>, wy, w1, h1, ImageArrayOne, <span class="hljs-number">0</span>, w1); <span class="hljs-comment">// 设置上半部分或左半部分的RGB</span><br>            &#125;<br> <br>            wx += w1;<br>            wy += h1 + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> destImage;<br>    &#125;<br> <br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><p>将word转换为单页 每页为一张图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * word 转每页pdf</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> wordfile</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">parseFileToBase64_PNG1</span><span class="hljs-params">(String wordfile)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br><span class="hljs-keyword">if</span> (!isWordLicense()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-comment">// 声明一个</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(wordfile);<br> <br> <br> <br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(wordfile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br><span class="hljs-comment">//创建同名文件夹</span><br><span class="hljs-keyword">new</span> File(parent+<span class="hljs-string">&quot;/&quot;</span>+ fileName).mkdir();<br> <br>List&lt;BufferedImage&gt; bufferedImages = wordToImg1(inputStream);<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bufferedImages.size(); i++)&#123;<br>ImageIO.write(bufferedImages.get(i), <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent +<span class="hljs-string">&quot;/&quot;</span>+ fileName +<span class="hljs-string">&quot;/&quot;</span>+ <span class="hljs-string">&quot;第&quot;</span>+ i +<span class="hljs-string">&quot;页&quot;</span> + fileName + <span class="hljs-string">&quot;.png&quot;</span>));<br>&#125;<br> <br> <br><br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br> <br> <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="图片转换为base64-前台预览"><a href="#图片转换为base64-前台预览" class="headerlink" title="图片转换为base64 前台预览"></a>图片转换为base64 前台预览</h1><p>业务需求 word转换成在线预览 结合<a href="https://bk.cuixiaoyan.xyz/archives/zhuantupian">这里是word转图片</a> 也可以直接转换为在线预览</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">parseFileToBase64_PNG1</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-keyword">int</span> pageNum)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">// String png_base64 = &quot;&quot;;</span><br>List&lt;BufferedImage&gt; bufferedImages = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br>BufferedImage image = <span class="hljs-keyword">null</span>;<br>ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<span class="hljs-comment">// io流</span><br>bufferedImages = wordToImg1(inputStream, pageNum);<br>image = mergeImage(<span class="hljs-keyword">false</span>, bufferedImages);<br>ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, baos);<span class="hljs-comment">// 写入流中</span><br> <br><span class="hljs-keyword">byte</span>[] bytes = baos.toByteArray();<span class="hljs-comment">// 转换成字节</span><br>BASE64Encoder encoder = <span class="hljs-keyword">new</span> BASE64Encoder();<br>String png_base64 = encoder.encodeBuffer(bytes).trim();<span class="hljs-comment">// 转换成base64串</span><br>png_base64 = png_base64.replaceAll(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replaceAll(<span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">// 删除</span><br><br><span class="hljs-keyword">return</span> png_base64;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>aspose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aspose-words java word 转pdf</title>
    <link href="/blog/2021/01/15/aspose-words-java-word%E8%BD%ACpdf/"/>
    <url>/blog/2021/01/15/aspose-words-java-word%E8%BD%ACpdf/</url>
    
    <content type="html"><![CDATA[<p>和谐版jar包 加激活 去除水印 转换从此无限制 就算是在服务器上也不需要安装其他工具 目前最好 使用 方便快捷 jar包下载地址 链接: <a href="https://pan.baidu.com/s/1tlbueAQq5bxPNgncS7GgoA">https://pan.baidu.com/s/1tlbueAQq5bxPNgncS7GgoA</a> 提取码: p35p</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * word to pdf</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> inPath  word 全路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> outPath 生成的pdf 全路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> an</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">docPdf</span><span class="hljs-params">(String inPath, String outPath)</span>   </span>&#123;<br> <br><span class="hljs-keyword">if</span> (!isWordLicense()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-keyword">try</span> &#123;<br>String path = outPath.substring(<span class="hljs-number">0</span>, outPath.lastIndexOf(File.separator));<br>File file = <span class="hljs-keyword">null</span>;<br>file = <span class="hljs-keyword">new</span> File(path);<br><span class="hljs-keyword">if</span> (!file.exists()) &#123;<span class="hljs-comment">//创建文件夹</span><br>file.mkdirs();<br>&#125;<br>file = <span class="hljs-keyword">new</span> File(outPath);<span class="hljs-comment">// 新建一个空白pdf文档</span><br>FileOutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>Document doc = <span class="hljs-keyword">new</span> Document(inPath); <span class="hljs-comment">// Address是将要被转化的word文档</span><br>doc.save(os, SaveFormat.PDF);<span class="hljs-comment">// 全面支持DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF,</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">// EPUB, XPS, SWF 相互转换</span><br><span class="hljs-keyword">return</span> outPath;<br>&#125;<br> <br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 验证aspose.word组件是否授权：无授权的文件有水印和试用标记</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWordLicense</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// InputStream inputStream = new</span><br><span class="hljs-comment">// FileInputStream(&quot;D:\\Workspaces\\TestFilters\\lib\\license.xml&quot;);</span><br><span class="hljs-comment">// 避免文件遗漏</span><br>String licensexml = <span class="hljs-string">&quot;&lt;License&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Data&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Products&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Total for Java&lt;/Product&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Words for Java&lt;/Product&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Products&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;EditionType&gt;Enterprise&lt;/EditionType&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SubscriptionExpiry&gt;20991231&lt;/SubscriptionExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;LicenseExpiry&gt;20991231&lt;/LicenseExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SerialNumber&gt;23dcc79f-44ec-4a23-be3a-03c1632404e9&lt;/SerialNumber&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/Data&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Signature&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Signature&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/License&gt;&quot;</span>;<br>InputStream inputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(licensexml.getBytes());<br>com.aspose.words.License license = <span class="hljs-keyword">new</span> com.aspose.words.License();<br>license.setLicense(inputStream);<br>result = <span class="hljs-keyword">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br> <br><span class="hljs-comment">// outputStream转inputStream</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteArrayInputStream <span class="hljs-title">parse</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>baos = (ByteArrayOutputStream) out;<br>ByteArrayInputStream swapStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br><span class="hljs-keyword">return</span> swapStream;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>aspose</tag>
      
      <tag>word</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将数字金额转为大写中文金额</title>
    <link href="/blog/2021/01/13/%E5%B0%86%E6%95%B0%E5%AD%97%E9%87%91%E9%A2%9D%E8%BD%AC%E4%B8%BA%E5%A4%A7%E5%86%99%E4%B8%AD%E6%96%87%E9%87%91%E9%A2%9D/"/>
    <url>/blog/2021/01/13/%E5%B0%86%E6%95%B0%E5%AD%97%E9%87%91%E9%A2%9D%E8%BD%AC%E4%B8%BA%E5%A4%A7%E5%86%99%E4%B8%AD%E6%96%87%E9%87%91%E9%A2%9D/</url>
    
    <content type="html"><![CDATA[<p>输入数字金额参数，运行程序得到其对应的大写中文金额；例如：输入— 12.56，输出— 12.56:壹拾贰元伍角陆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Title</span>: ConvertUpMoney </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:  将数字金额转为大写汉字金额</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2019年6月18日 下午10:52:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertUpMoney</span> </span>&#123;<br><br><span class="hljs-comment">//大写数字</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] NUMBERS = &#123;<span class="hljs-string">&quot;零&quot;</span>,<span class="hljs-string">&quot;壹&quot;</span>,<span class="hljs-string">&quot;贰&quot;</span>,<span class="hljs-string">&quot;叁&quot;</span>,<span class="hljs-string">&quot;肆&quot;</span>,<span class="hljs-string">&quot;伍&quot;</span>,<span class="hljs-string">&quot;陆&quot;</span>,<span class="hljs-string">&quot;柒&quot;</span>,<span class="hljs-string">&quot;捌&quot;</span>,<span class="hljs-string">&quot;玖&quot;</span>&#125;;<br><span class="hljs-comment">// 整数部分的单位</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] IUNIT = &#123;<span class="hljs-string">&quot;元&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;万&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;亿&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;万&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>&#125;;<br>    <span class="hljs-comment">//小数部分的单位</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] DUNIT = &#123;<span class="hljs-string">&quot;角&quot;</span>,<span class="hljs-string">&quot;分&quot;</span>,<span class="hljs-string">&quot;厘&quot;</span>&#125;;<br><br><span class="hljs-comment">//转成中文的大写金额</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toChinese</span><span class="hljs-params">(String str)</span> </span>&#123;<br><span class="hljs-comment">//判断输入的金额字符串是否符合要求</span><br><span class="hljs-keyword">if</span> (StringUtils.isBlank(str) || !str.matches(<span class="hljs-string">&quot;(-)?[\\d]*(.)?[\\d]*&quot;</span>)) &#123;<br>System.out.println(<span class="hljs-string">&quot;抱歉，请输入数字！&quot;</span>);<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;0&quot;</span>.equals(str) || <span class="hljs-string">&quot;0.00&quot;</span>.equals(str) || <span class="hljs-string">&quot;0.0&quot;</span>.equals(str)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;零元&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//判断是否存在负号&quot;-&quot;</span><br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span>(str.startsWith(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>flag = <span class="hljs-keyword">true</span>;<br>str = str.replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br>str = str.replaceAll(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//去掉&quot;,&quot;</span><br>String integerStr;<span class="hljs-comment">//整数部分数字</span><br>String decimalStr;<span class="hljs-comment">//小数部分数字</span><br><br><br><span class="hljs-comment">//初始化：分离整数部分和小数部分</span><br><span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;.&quot;</span>)&gt;<span class="hljs-number">0</span>) &#123;<br>integerStr = str.substring(<span class="hljs-number">0</span>,str.indexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>decimalStr = str.substring(str.indexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;.&quot;</span>)==<span class="hljs-number">0</span>) &#123;<br>integerStr = <span class="hljs-string">&quot;&quot;</span>;<br>decimalStr = str.substring(<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>integerStr = str;<br>decimalStr = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//beyond超出计算能力，直接返回</span><br><span class="hljs-keyword">if</span>(integerStr.length()&gt;IUNIT.length) &#123;<br>System.out.println(str+<span class="hljs-string">&quot;：超出计算能力&quot;</span>);<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-keyword">int</span>[] integers = toIntArray(integerStr);<span class="hljs-comment">//整数部分数字</span><br><span class="hljs-comment">//判断整数部分是否存在输入012的情况</span><br><span class="hljs-keyword">if</span> (integers.length&gt;<span class="hljs-number">1</span> &amp;&amp; integers[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;抱歉，请输入数字！&quot;</span>);<br><span class="hljs-keyword">if</span> (flag) &#123;<br>str = <span class="hljs-string">&quot;-&quot;</span>+str;<br>&#125;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-keyword">boolean</span> isWan = isWan5(integerStr);<span class="hljs-comment">//设置万单位</span><br><span class="hljs-keyword">int</span>[] decimals = toIntArray(decimalStr);<span class="hljs-comment">//小数部分数字</span><br>String result = getChineseInteger(integers,isWan)+getChineseDecimal(decimals);<span class="hljs-comment">//返回最终的大写金额</span><br><span class="hljs-keyword">if</span>(flag)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;负&quot;</span>+result;<span class="hljs-comment">//如果是负数，加上&quot;负&quot;</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//将字符串转为int数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] toIntArray(String number) &#123;<br><span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[number.length()];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;number.length();i++) &#123;<br>array[i] = Integer.parseInt(number.substring(i,i+<span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-comment">//将整数部分转为大写的金额</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getChineseInteger</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] integers,<span class="hljs-keyword">boolean</span> isWan)</span> </span>&#123;<br>StringBuffer chineseInteger = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">int</span> length = integers.length;<br><span class="hljs-keyword">if</span> (length == <span class="hljs-number">1</span> &amp;&amp; integers[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++) &#123;<br>String key = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(integers[i] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">13</span>)<span class="hljs-comment">//万（亿）</span><br>key = IUNIT[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">9</span>) &#123;<span class="hljs-comment">//亿</span><br>key = IUNIT[<span class="hljs-number">8</span>];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">5</span> &amp;&amp; isWan) &#123;<span class="hljs-comment">//万</span><br>key = IUNIT[<span class="hljs-number">4</span>];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//元</span><br>key = IUNIT[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">if</span>((length - i)&gt;<span class="hljs-number">1</span> &amp;&amp; integers[i+<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>) &#123;<br>key += NUMBERS[<span class="hljs-number">0</span>];<br>&#125;<br>&#125;<br>chineseInteger.append(integers[i]==<span class="hljs-number">0</span>?key:(NUMBERS[integers[i]]+IUNIT[length - i -<span class="hljs-number">1</span>]));<br>&#125;<br><span class="hljs-keyword">return</span> chineseInteger.toString();<br>&#125;<br><span class="hljs-comment">//将小数部分转为大写的金额</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getChineseDecimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] decimals)</span> </span>&#123;<br>StringBuffer chineseDecimal = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;decimals.length;i++) &#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>chineseDecimal.append(decimals[i]==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;&quot;</span>:(NUMBERS[decimals[i]]+DUNIT[i]));<br>&#125;<br><span class="hljs-keyword">return</span> chineseDecimal.toString();<br>&#125;<br><span class="hljs-comment">//判断当前整数部分是否已经是达到【万】</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWan5</span><span class="hljs-params">(String integerStr)</span> </span>&#123;<br><span class="hljs-keyword">int</span> length = integerStr.length();<br><span class="hljs-keyword">if</span>(length &gt; <span class="hljs-number">4</span>) &#123;<br>String subInteger = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(length &gt; <span class="hljs-number">8</span>) &#123;<br>subInteger = integerStr.substring(length- <span class="hljs-number">8</span>,length -<span class="hljs-number">4</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>subInteger = integerStr.substring(<span class="hljs-number">0</span>,length - <span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-keyword">return</span> Integer.parseInt(subInteger) &gt; <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String number = <span class="hljs-string">&quot;12.56&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;1234567890563886.123&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;1600&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;156,0&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;-156,0&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;0.12&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;0.0&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;01.12&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;0125&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;-0125&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;sdw5655&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>System.out.println(<span class="hljs-keyword">null</span>+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(<span class="hljs-keyword">null</span>));<br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类3</title>
    <link href="/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB3/"/>
    <url>/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB3/</url>
    
    <content type="html"><![CDATA[<p>在Java中，工具类定义了一组公共方法，这篇文章将介绍Java中使用最频繁及最通用的Java工具类。以下工具类、方法按使用流行度排名，参考数据来源于Github上随机选取的5万个开源项目源码。</p><p>一. org.apache.commons.io.IOUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">closeQuietly：关闭一个IO流、socket、或者selector且不抛出异常，通常放在<span class="hljs-keyword">finally</span>块<br>toString：转换IO流、 Uri、 <span class="hljs-keyword">byte</span>[]为String<br>copy：IO流数据复制，从输入流写到输出流中，最大支持2GB<br>toByteArray：从输入流、URI获取<span class="hljs-keyword">byte</span>[]<br>write：把字节. 字符等写入输出流<br>toInputStream：把字符转换为输入流<br>readLines：从输入流中读取多行数据，返回List&lt;String&gt;<br>copyLarge：同copy，支持2GB以上数据的复制<br>lineIterator：从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败<br></code></pre></td></tr></table></figure><p>二. org.apache.commons.io.FileUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">deleteDirectory：删除文件夹<br>readFileToString：以字符形式读取文件内容<br>deleteQueitly：删除文件或文件夹且不会抛出异常<br>copyFile：复制文件<br>writeStringToFile：把字符写到目标文件，如果文件不存在，则创建<br>forceMkdir：强制创建文件夹，如果该文件夹父级目录不存在，则创建父级<br>write：把字符写到指定文件中<br>listFiles：列举某个目录下的文件(根据过滤器)<br>copyDirectory：复制文件夹<br>forceDelete：强制删除文件<br></code></pre></td></tr></table></figure><p>三. org.apache.commons.lang.StringUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">isBlank：字符串是否为空 (trim后判断)<br>isEmpty：字符串是否为空 (不trim并判断)<br>equals：字符串是否相等<br>join：合并数组为单一字符串，可传分隔符<br>split：分割字符串<br>EMPTY：返回空字符串<br>trimToNull：trim后为空字符串则转换为<span class="hljs-keyword">null</span><br>replace：替换字符串<br></code></pre></td></tr></table></figure><p>四. org.apache.http.util.EntityUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">toString：把Entity转换为字符串<br>consume：确保Entity中的内容全部被消费。可以看到源码里又一次消费了Entity的内容，假如用户没有消费，那调用Entity时候将会把它消费掉<br>toByteArray：把Entity转换为字节流<br>consumeQuietly：和consume一样，但不抛异常<br>getContentCharset：获取内容的编码<br></code></pre></td></tr></table></figure><p>五. org.apache.commons.lang3.StringUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">isBlank：字符串是否为空 (trim后判断)<br>isEmpty：字符串是否为空 (不trim并判断)<br>equals：字符串是否相等<br>join：合并数组为单一字符串，可传分隔符<br>split：分割字符串<br>EMPTY：返回空字符串<br>replace：替换字符串<br>capitalize：首字符大写<br></code></pre></td></tr></table></figure><p>六. org.apache.commons.io.FilenameUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">getExtension：返回文件后缀名<br>getBaseName：返回文件名，不包含后缀名<br>getName：返回文件全名<br>concat：按命令行风格组合文件路径(详见方法注释)<br>removeExtension：删除后缀名<br>normalize：使路径正常化<br>wildcardMatch：匹配通配符<br>seperatorToUnix：路径分隔符改成unix系统格式的，即/<br>getFullPath：获取文件路径，不包括文件名<br>isExtension：检查文件后缀名是不是传入参数(List&lt;String&gt;)中的一个<br></code></pre></td></tr></table></figure><p>七. org.springframework.util.StringUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">hasText：检查字符串中是否包含文本<br>hasLength：检测字符串是否长度大于<span class="hljs-number">0</span><br>isEmpty：检测字符串是否为空（若传入为对象，则判断对象是否为<span class="hljs-keyword">null</span>）<br>commaDelimitedStringToArray：逗号分隔的String转换为数组<br>collectionToDelimitedString：把集合转为CSV格式字符串<br>replace 替换字符串<br><span class="hljs-number">7.</span> delimitedListToStringArray：相当于split<br>uncapitalize：首字母小写<br>collectionToDelimitedCommaString：把集合转为CSV格式字符串<br>tokenizeToStringArray：和split基本一样，但能自动去掉空白的单词<br></code></pre></td></tr></table></figure><p>八. org.apache.commons.lang.ArrayUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">contains：是否包含某字符串<br>addAll：添加整个数组<br>clone：克隆一个数组<br>isEmpty：是否空数组<br>add：向数组添加元素<br>subarray：截取数组<br>indexOf：查找某个元素的下标<br>isEquals：比较数组是否相等<br>toObject：基础类型数据数组转换为对应的Object数组<br></code></pre></td></tr></table></figure><p>九. org.apache.commons.lang.StringEscapeUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">参考十五：org.apache.commons.lang3.StringEscapeUtils<br></code></pre></td></tr></table></figure><p>十. org.apache.http.client.utils.URLEncodedUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">format：格式化参数，返回一个HTTP POST或者HTTP PUT可用application/x-www-form-urlencoded字符串<br>parse：把String或者URI等转换为List&lt;NameValuePair&gt;<br></code></pre></td></tr></table></figure><p>十一. org.apache.commons.codec.digest.DigestUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">md5Hex：MD5加密，返回<span class="hljs-number">32</span>位字符串<br>sha1Hex：SHA-<span class="hljs-number">1</span>加密<br>sha256Hex：SHA-<span class="hljs-number">256</span>加密<br>sha512Hex：SHA-<span class="hljs-number">512</span>加密<br>md5：MD5加密，返回<span class="hljs-number">16</span>位字符串<br></code></pre></td></tr></table></figure><p>十二. org.apache.commons.collections.CollectionUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">isEmpty：是否为空<br>select：根据条件筛选集合元素<br>transform：根据指定方法处理集合元素，类似List的map()<br>filter：过滤元素，雷瑟List的filter()<br>find：基本和select一样<br>collect：和transform 差不多一样，但是返回新数组<br>forAllDo：调用每个元素的指定方法<br>isEqualCollection：判断两个集合是否一致<br></code></pre></td></tr></table></figure><p>十三. org.apache.commons.lang3.ArrayUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">contains：是否包含某个字符串<br>addAll：添加整个数组<br>clone：克隆一个数组<br>isEmpty：是否空数组<br>add：向数组添加元素<br>subarray：截取数组<br>indexOf：查找某个元素的下标<br>isEquals：比较数组是否相等<br>toObject：基础类型数据数组转换为对应的Object数组<br></code></pre></td></tr></table></figure><p>十四. org.apache.commons.beanutils.PropertyUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">getProperty：获取对象属性值<br>setProperty：设置对象属性值<br>getPropertyDiscriptor：获取属性描述器<br>isReadable：检查属性是否可访问<br>copyProperties：复制属性值，从一个对象到另一个对象<br>getPropertyDiscriptors：获取所有属性描述器<br>isWriteable：检查属性是否可写<br>getPropertyType：获取对象属性类型<br></code></pre></td></tr></table></figure><p>十五. org.apache.commons.lang3.StringEscapeUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">unescapeHtml4：转义html<br>escapeHtml4：反转义html<br>escapeXml：转义xml<br>unescapeXml：反转义xml<br>escapeJava：转义unicode编码<br>escapeEcmaScript：转义EcmaScript字符<br>unescapeJava：反转义unicode编码<br>escapeJson：转义json字符<br>escapeXml10：转义Xml10<br>这个现在已经废弃了，建议使用commons-text包里面的方法。<br></code></pre></td></tr></table></figure><p>十六. org.apache.commons.beanutils.BeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">copyPeoperties：复制属性值，从一个对象到另一个对象<br>getProperty：获取对象属性值<br>setProperty：设置对象属性值<br>populate：根据Map给属性复制<br>copyPeoperty：复制单个值，从一个对象到另一个对象<br>cloneBean：克隆bean实例<br></code></pre></td></tr></table></figure><p>现在你只要了解了以上16种最流行的工具类方法，你就不必要再自己写工具类了，不必重复造轮子。大部分工具类方法通过其名字就能明白其用途，如果不清楚的，可以看下别人是怎么用的，或者去网上查询其用法。</p><p>另外，工具类，根据阿里开发手册，包名如果要使用util不能带s，工具类命名为 XxxUtils</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类2</title>
    <link href="/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB2/"/>
    <url>/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB2/</url>
    
    <content type="html"><![CDATA[<p>一、当相同元素为String时 方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * List去重</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title">removeDuplicate</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>    LinkedHashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> LinkedHashSet&lt;String&gt;(list.size());<br>    set.addAll(list);<br>    list.clear();<br>    list.addAll(set);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list= list.stream().distinct().collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p>二、当相同元素为对象时 方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注意Comparator.comparing要根据参数的类型进行选择</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;GroupVO&gt; <span class="hljs-title">removeDuplicateGroupVO</span><span class="hljs-params">(List&lt;GroupVO&gt; groupVOS)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> groupVOS.stream().collect(<br>            Collectors.collectingAndThen(<br>                    Collectors.toCollection(<br>                            () -&gt; <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(GroupVO::getId))<br>                    ), ArrayList::<span class="hljs-keyword">new</span><br>            )<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Person&gt; <span class="hljs-title">removeDupliById</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      Set&lt;Person&gt; personSet = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;((o1, o2) -&gt; o1.getId().compareTo(o2.getId()));<br>      personSet.addAll(persons);<br> <br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(personSet);<br>  &#125;<br></code></pre></td></tr></table></figure><p>方法三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Predicate&lt;T&gt; <span class="hljs-title">distinctByKey</span><span class="hljs-params">(Function&lt;? <span class="hljs-keyword">super</span> T, Object&gt; keyExtractor)</span> </span>&#123;<br>      Map&lt;Object, Boolean&gt; map = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br>      <span class="hljs-keyword">return</span> t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="hljs-keyword">null</span>;<br>  &#125;<br> <br><span class="hljs-comment">// remove duplicate</span><br>persons.stream().filter(distinctByKey(p -&gt; p.getId())).forEach(p -&gt; System.out.println(p));<br></code></pre></td></tr></table></figure><p>方法一：简单粗暴，直接使用copy()，如果目标存在，先使用delete()删除，再复制；</p><p>方法二：使用输入输出流。（代码注释部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg2;<br> <br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br><span class="hljs-comment">/******************</span><br><span class="hljs-comment"> * 文件的复制</span><br><span class="hljs-comment"> *******************/</span><br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2_3</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入指定文件夹路径：&quot;</span>);<br>        String oldpath = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入目标文件夹路径：&quot;</span>);<br>        String newpath = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入要复制的文件名：&quot;</span>);<br>        String filename = sc.next();<br>        copy(filename, oldpath, newpath);<br>        System.out.println(<span class="hljs-string">&quot;复制完成！&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(String filename, String oldpath, String newpath)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        File oldpaths = <span class="hljs-keyword">new</span> File(oldpath + <span class="hljs-string">&quot;/&quot;</span> + filename);<br>        File newpaths = <span class="hljs-keyword">new</span> File(newpath + <span class="hljs-string">&quot;/&quot;</span> + filename);<br>        <span class="hljs-keyword">if</span> (!newpaths.exists()) &#123;<br>            Files.copy(oldpaths.toPath(), newpaths.toPath());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            newpaths.delete();<br>            Files.copy(oldpaths.toPath(), newpaths.toPath());<br>        &#125;<br> <br>        <span class="hljs-comment">// String newfile = &quot;&quot;;</span><br>        <span class="hljs-comment">// newfile += newpaths;</span><br>        <span class="hljs-comment">// FileInputStream in = new FileInputStream(oldpaths);</span><br>        <span class="hljs-comment">// File file = new File(newfile);</span><br>        <span class="hljs-comment">// if (!file.exists()) &#123;</span><br>        <span class="hljs-comment">// file.createNewFile();</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// FileOutputStream out = new FileOutputStream(newpaths);</span><br>        <span class="hljs-comment">// byte[] buffer = new byte[1024];</span><br>        <span class="hljs-comment">// int c;</span><br>        <span class="hljs-comment">// while ((c = in.read(buffer)) != -1) &#123;</span><br>        <span class="hljs-comment">// for (int i = 0; i &lt; c; i++) &#123;</span><br>        <span class="hljs-comment">// out.write(buffer[i]);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// in.close();</span><br>        <span class="hljs-comment">// out.close();</span><br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩"><a href="#java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩" class="headerlink" title="java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩"></a>java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: transformation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: cuixy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2019-07-26 14:30</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipOutputStream;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 压缩算法类</span><br><span class="hljs-comment"> * 实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ljheee</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompactAlgorithm</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 完成的结果文件--输出的压缩文件</span><br><span class="hljs-comment">     */</span><br>    File targetFile;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CompactAlgorithm</span><span class="hljs-params">()</span> </span>&#123;&#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CompactAlgorithm</span><span class="hljs-params">(File target)</span> </span>&#123;<br>        targetFile = target;<br>        <span class="hljs-keyword">if</span> (targetFile.exists())<br>            targetFile.delete();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcfile</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFiles</span><span class="hljs-params">(File srcfile)</span> </span>&#123;<br> <br>        ZipOutputStream out = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            out = <span class="hljs-keyword">new</span> ZipOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(targetFile));<br> <br>            <span class="hljs-keyword">if</span>(srcfile.isFile())&#123;<br>                zipFile(srcfile, out, <span class="hljs-string">&quot;&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                File[] list = srcfile.listFiles();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>                    compress(list[i], out, <span class="hljs-string">&quot;&quot;</span>);<br>                &#125;<br>            &#125;<br> <br>            System.out.println(<span class="hljs-string">&quot;压缩完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>)<br>                    out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩文件夹里的文件</span><br><span class="hljs-comment">     * 起初不知道是文件还是文件夹--- 统一调用该方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> out</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basedir</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compress</span><span class="hljs-params">(File file, ZipOutputStream out, String basedir)</span> </span>&#123;<br>        <span class="hljs-comment">/* 判断是目录还是文件 */</span><br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-keyword">this</span>.zipDirectory(file, out, basedir);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.zipFile(file, out, basedir);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩单个文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcfile</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFile</span><span class="hljs-params">(File srcfile, ZipOutputStream out, String basedir)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!srcfile.exists())<br>            <span class="hljs-keyword">return</span>;<br> <br>        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        FileInputStream in = <span class="hljs-keyword">null</span>;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> len;<br>            in = <span class="hljs-keyword">new</span> FileInputStream(srcfile);<br>            out.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(basedir + srcfile.getName()));<br> <br>            <span class="hljs-keyword">while</span> ((len = in.read(buf)) &gt; <span class="hljs-number">0</span>) &#123;<br>                out.write(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>)<br>                    out.closeEntry();<br>                <span class="hljs-keyword">if</span> (in != <span class="hljs-keyword">null</span>)<br>                    in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩文件夹</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dir</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> out</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basedir</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipDirectory</span><span class="hljs-params">(File dir, ZipOutputStream out, String basedir)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!dir.exists())<br>            <span class="hljs-keyword">return</span>;<br> <br>        File[] files = dir.listFiles();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>            <span class="hljs-comment">/* 递归 */</span><br>            compress(files[i], out, basedir + dir.getName() + <span class="hljs-string">&quot;/&quot;</span>);<br>        &#125;<br>    &#125;<br> <br> <br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//压缩测试</span><br>File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/Users/cuixiaoyan/Downloads/浏览器下载&quot;</span>);<br><span class="hljs-keyword">new</span> CompactAlgorithm(<span class="hljs-keyword">new</span> File( <span class="hljs-string">&quot;/Users/cuixiaoyan/Downloads/&quot;</span>,f.getName()+<span class="hljs-string">&quot;.zip&quot;</span>)).zipFiles(f);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中实现List自定义排序</title>
    <link href="/blog/2021/01/11/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0List%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <url>/blog/2021/01/11/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0List%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whty.entity;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.whty.test;<br> <br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">import</span> com.whty.entity.User;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-number">20</span>));<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;spark&quot;</span>, <span class="hljs-number">19</span>));<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;hive&quot;</span>, <span class="hljs-number">21</span>));<br><br><span class="hljs-keyword">for</span>(User user :list) &#123;<br>System.out.println(<span class="hljs-string">&quot;排序前：&quot;</span> + user.toString());<br>&#125;<br><span class="hljs-comment">//实现排序</span><br>Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;User&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(User u1, User u2)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(u1.getAge() &gt; u2.getAge()) &#123;<br><span class="hljs-comment">//return -1:即为正序排序</span><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u1.getAge() == u2.getAge()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//return 1: 即为倒序排序</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;);<br><br><span class="hljs-keyword">for</span>(User user :list) &#123;<br>System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span> + user.toString());<br>&#125;<br>&#125;<br>&#125;<br> <br> <br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">排序前：User [id=<span class="hljs-number">1</span>, name=java, age=<span class="hljs-number">20</span>]<br>排序前：User [id=<span class="hljs-number">2</span>, name=spark, age=<span class="hljs-number">19</span>]<br>排序前：User [id=<span class="hljs-number">3</span>, name=hive, age=<span class="hljs-number">21</span>]<br>排序后：User [id=<span class="hljs-number">3</span>, name=hive, age=<span class="hljs-number">21</span>]<br>排序后：User [id=<span class="hljs-number">1</span>, name=java, age=<span class="hljs-number">20</span>]<br>排序后：User [id=<span class="hljs-number">2</span>, name=spark, age=<span class="hljs-number">19</span>]<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类</title>
    <link href="/blog/2021/01/11/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/blog/2021/01/11/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>java中，StringUtils类中的一些常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isBlank</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否为空或长度为0或由空白符(whitespace)构成</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isBlank</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;\t \n \f \r&quot;</span>) = <span class="hljs-keyword">true</span> <span class="hljs-comment">//对于制表符、换行符、换页符和回车符StringUtils.isBlank()均识为空白符</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;\b&quot;</span>) = <span class="hljs-keyword">false</span> <span class="hljs-comment">//&quot;\b&quot;为单词边界符</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isBlank(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">false</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isNotBlank</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否不为空且长度不为0且不由空白符(whitespace)构成，等于!isBlank(String str)</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isNotBlank</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;\t \n \f \r&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;\b&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">true</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否为空，为空的标准是str==null或str.length()==0</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isEmpty</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">true</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span> <span class="hljs-comment">//注意在StringUtils中空格作非空处理</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">false</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isNotEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否非空，等于!isEmpty(String str)</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isNotEmpty</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">false</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">true</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">trim</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的控制符(control characters, char &lt;= 32),如果输入为null则返回null</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">trim</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.trim(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">trimToNull</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的控制符(control characters, char &lt;= 32),如果变为null或&quot;&quot;，则返回null</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">trimToNull</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss&quot;</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">trimToEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的控制符(control characters, char &lt;= 32),如果变为null或&quot;&quot;，则返回&quot;&quot;</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">trimToEmpty</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">strip</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的空白符(whitespace)，如果输入为null则返回null(注意和trim()的区别)：</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">strip</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.strip(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;\b&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss \b&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">stripToNull</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的空白符(whitespace)，如果变为null或&quot;&quot;，则返回null(注意和trimToNull()的区别)：</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">stripToNull</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;\b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss \b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">stripToEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的空白符(whitespace)，如果变为null或&quot;&quot;，则返回&quot;&quot;(注意和trimToEmpty()的区别)：</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">stripToNull</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-string">&quot;&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;\b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss \b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br></code></pre></td></tr></table></figure><p>java中我们会常用一些判断如IP、电子邮箱、电话号码的是不是合法，那么我们怎么来判断呢，答案就是利用正则表达式来判断了，废话不多说，下面就是上代码。</p><p>1:判断是否是正确的IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 用正则表达式进行判断</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isIPAddressByRegex</span><span class="hljs-params">(String str)</span> </span>&#123;<br>            String regex = <span class="hljs-string">&quot;\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;&quot;</span>;<br>            <span class="hljs-comment">// 判断ip地址是否与正则表达式匹配</span><br>            <span class="hljs-keyword">if</span> (str.matches(regex)) &#123;<br>                String[] arr = str.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                    <span class="hljs-keyword">int</span> temp = Integer.parseInt(arr[i]);<br>                    <span class="hljs-comment">//如果某个数字不是0到255之间的数 就返回false</span><br>                    <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || temp &gt; <span class="hljs-number">255</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>2:判断是否是正确的邮箱地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*正则表达式验证邮箱</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (email == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(email)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            String regex = <span class="hljs-string">&quot;\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*&quot;</span>;<br>           <span class="hljs-keyword">return</span> email.matches(regex);<br>  &#125;<br></code></pre></td></tr></table></figure><p>3:判断是否是手机号码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*正则表达式验证手机</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">orPhoneNumber</span><span class="hljs-params">(String phoneNumber)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (phoneNumber == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(phoneNumber))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>           String regex = <span class="hljs-string">&quot;^1[3|4|5|8][0-9]\\d&#123;8&#125;$&quot;</span>;<br>           <span class="hljs-keyword">return</span> phoneNumber.matches(regex);<br>    &#125;<br></code></pre></td></tr></table></figure><p>代码如下 收藏备用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工具类，实现阴阳历互转</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> luohao</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LunarCalendar</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持转换的最小农历年份</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_YEAR = <span class="hljs-number">1900</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持转换的最大农历年份</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_YEAR = <span class="hljs-number">2099</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公历每月前的天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] DAYS_BEFORE_MONTH = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">59</span>, <span class="hljs-number">90</span>, <span class="hljs-number">120</span>, <span class="hljs-number">151</span>, <span class="hljs-number">181</span>, <span class="hljs-number">212</span>, <span class="hljs-number">243</span>, <span class="hljs-number">273</span>, <span class="hljs-number">304</span>, <span class="hljs-number">334</span>, <span class="hljs-number">365</span>&#125;;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来表示1900年到2099年间农历年份的相关信息，共24位bit的16进制表示，其中：</span><br><span class="hljs-comment">     * 1. 前4位表示该年闰哪个月；</span><br><span class="hljs-comment">     * 2. 5-17位表示农历年份13个月的大小月分布，0表示小，1表示大；</span><br><span class="hljs-comment">     * 3. 最后7位表示农历年首（正月初一）对应的公历日期。</span><br><span class="hljs-comment">     * 以2014年的数据0x955ABF为例说明：</span><br><span class="hljs-comment">     *                  1001 0101 0101 1010 1011 1111</span><br><span class="hljs-comment">     *                闰九月                                  农历正月初一对应公历1月31号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] LUNAR_INFO = &#123;<br>            <span class="hljs-comment">/*1900*/</span><br>            <span class="hljs-number">0x84B6BF</span>,<br>            <span class="hljs-comment">/*1901-1910*/</span><br>            <span class="hljs-number">0x04AE53</span>, <span class="hljs-number">0x0A5748</span>, <span class="hljs-number">0x5526BD</span>, <span class="hljs-number">0x0D2650</span>, <span class="hljs-number">0x0D9544</span>, <span class="hljs-number">0x46AAB9</span>, <span class="hljs-number">0x056A4D</span>, <span class="hljs-number">0x09AD42</span>, <span class="hljs-number">0x24AEB6</span>, <span class="hljs-number">0x04AE4A</span>,<br>            <span class="hljs-comment">/*1911-1920*/</span><br>            <span class="hljs-number">0x6A4DBE</span>, <span class="hljs-number">0x0A4D52</span>, <span class="hljs-number">0x0D2546</span>, <span class="hljs-number">0x5D52BA</span>, <span class="hljs-number">0x0B544E</span>, <span class="hljs-number">0x0D6A43</span>, <span class="hljs-number">0x296D37</span>, <span class="hljs-number">0x095B4B</span>, <span class="hljs-number">0x749BC1</span>, <span class="hljs-number">0x049754</span>,<br>            <span class="hljs-comment">/*1921-1930*/</span><br>            <span class="hljs-number">0x0A4B48</span>, <span class="hljs-number">0x5B25BC</span>, <span class="hljs-number">0x06A550</span>, <span class="hljs-number">0x06D445</span>, <span class="hljs-number">0x4ADAB8</span>, <span class="hljs-number">0x02B64D</span>, <span class="hljs-number">0x095742</span>, <span class="hljs-number">0x2497B7</span>, <span class="hljs-number">0x04974A</span>, <span class="hljs-number">0x664B3E</span>,<br>            <span class="hljs-comment">/*1931-1940*/</span><br>            <span class="hljs-number">0x0D4A51</span>, <span class="hljs-number">0x0EA546</span>, <span class="hljs-number">0x56D4BA</span>, <span class="hljs-number">0x05AD4E</span>, <span class="hljs-number">0x02B644</span>, <span class="hljs-number">0x393738</span>, <span class="hljs-number">0x092E4B</span>, <span class="hljs-number">0x7C96BF</span>, <span class="hljs-number">0x0C9553</span>, <span class="hljs-number">0x0D4A48</span>,<br>            <span class="hljs-comment">/*1941-1950*/</span><br>            <span class="hljs-number">0x6DA53B</span>, <span class="hljs-number">0x0B554F</span>, <span class="hljs-number">0x056A45</span>, <span class="hljs-number">0x4AADB9</span>, <span class="hljs-number">0x025D4D</span>, <span class="hljs-number">0x092D42</span>, <span class="hljs-number">0x2C95B6</span>, <span class="hljs-number">0x0A954A</span>, <span class="hljs-number">0x7B4ABD</span>, <span class="hljs-number">0x06CA51</span>,<br>            <span class="hljs-comment">/*1951-1960*/</span><br>            <span class="hljs-number">0x0B5546</span>, <span class="hljs-number">0x555ABB</span>, <span class="hljs-number">0x04DA4E</span>, <span class="hljs-number">0x0A5B43</span>, <span class="hljs-number">0x352BB8</span>, <span class="hljs-number">0x052B4C</span>, <span class="hljs-number">0x8A953F</span>, <span class="hljs-number">0x0E9552</span>, <span class="hljs-number">0x06AA48</span>, <span class="hljs-number">0x6AD53C</span>,<br>            <span class="hljs-comment">/*1961-1970*/</span><br>            <span class="hljs-number">0x0AB54F</span>, <span class="hljs-number">0x04B645</span>, <span class="hljs-number">0x4A5739</span>, <span class="hljs-number">0x0A574D</span>, <span class="hljs-number">0x052642</span>, <span class="hljs-number">0x3E9335</span>, <span class="hljs-number">0x0D9549</span>, <span class="hljs-number">0x75AABE</span>, <span class="hljs-number">0x056A51</span>, <span class="hljs-number">0x096D46</span>,<br>            <span class="hljs-comment">/*1971-1980*/</span><br>            <span class="hljs-number">0x54AEBB</span>, <span class="hljs-number">0x04AD4F</span>, <span class="hljs-number">0x0A4D43</span>, <span class="hljs-number">0x4D26B7</span>, <span class="hljs-number">0x0D254B</span>, <span class="hljs-number">0x8D52BF</span>, <span class="hljs-number">0x0B5452</span>, <span class="hljs-number">0x0B6A47</span>, <span class="hljs-number">0x696D3C</span>, <span class="hljs-number">0x095B50</span>,<br>            <span class="hljs-comment">/*1981-1990*/</span><br>            <span class="hljs-number">0x049B45</span>, <span class="hljs-number">0x4A4BB9</span>, <span class="hljs-number">0x0A4B4D</span>, <span class="hljs-number">0xAB25C2</span>, <span class="hljs-number">0x06A554</span>, <span class="hljs-number">0x06D449</span>, <span class="hljs-number">0x6ADA3D</span>, <span class="hljs-number">0x0AB651</span>, <span class="hljs-number">0x095746</span>, <span class="hljs-number">0x5497BB</span>,<br>            <span class="hljs-comment">/*1991-2000*/</span><br>            <span class="hljs-number">0x04974F</span>, <span class="hljs-number">0x064B44</span>, <span class="hljs-number">0x36A537</span>, <span class="hljs-number">0x0EA54A</span>, <span class="hljs-number">0x86B2BF</span>, <span class="hljs-number">0x05AC53</span>, <span class="hljs-number">0x0AB647</span>, <span class="hljs-number">0x5936BC</span>, <span class="hljs-number">0x092E50</span>, <span class="hljs-number">0x0C9645</span>,<br>            <span class="hljs-comment">/*2001-2010*/</span><br>            <span class="hljs-number">0x4D4AB8</span>, <span class="hljs-number">0x0D4A4C</span>, <span class="hljs-number">0x0DA541</span>, <span class="hljs-number">0x25AAB6</span>, <span class="hljs-number">0x056A49</span>, <span class="hljs-number">0x7AADBD</span>, <span class="hljs-number">0x025D52</span>, <span class="hljs-number">0x092D47</span>, <span class="hljs-number">0x5C95BA</span>, <span class="hljs-number">0x0A954E</span>,<br>            <span class="hljs-comment">/*2011-2020*/</span><br>            <span class="hljs-number">0x0B4A43</span>, <span class="hljs-number">0x4B5537</span>, <span class="hljs-number">0x0AD54A</span>, <span class="hljs-number">0x955ABF</span>, <span class="hljs-number">0x04BA53</span>, <span class="hljs-number">0x0A5B48</span>, <span class="hljs-number">0x652BBC</span>, <span class="hljs-number">0x052B50</span>, <span class="hljs-number">0x0A9345</span>, <span class="hljs-number">0x474AB9</span>,<br>            <span class="hljs-comment">/*2021-2030*/</span><br>            <span class="hljs-number">0x06AA4C</span>, <span class="hljs-number">0x0AD541</span>, <span class="hljs-number">0x24DAB6</span>, <span class="hljs-number">0x04B64A</span>, <span class="hljs-number">0x6a573D</span>, <span class="hljs-number">0x0A4E51</span>, <span class="hljs-number">0x0D2646</span>, <span class="hljs-number">0x5E933A</span>, <span class="hljs-number">0x0D534D</span>, <span class="hljs-number">0x05AA43</span>,<br>            <span class="hljs-comment">/*2031-2040*/</span><br>            <span class="hljs-number">0x36B537</span>, <span class="hljs-number">0x096D4B</span>, <span class="hljs-number">0xB4AEBF</span>, <span class="hljs-number">0x04AD53</span>, <span class="hljs-number">0x0A4D48</span>, <span class="hljs-number">0x6D25BC</span>, <span class="hljs-number">0x0D254F</span>, <span class="hljs-number">0x0D5244</span>, <span class="hljs-number">0x5DAA38</span>, <span class="hljs-number">0x0B5A4C</span>,<br>            <span class="hljs-comment">/*2041-2050*/</span><br>            <span class="hljs-number">0x056D41</span>, <span class="hljs-number">0x24ADB6</span>, <span class="hljs-number">0x049B4A</span>, <span class="hljs-number">0x7A4BBE</span>, <span class="hljs-number">0x0A4B51</span>, <span class="hljs-number">0x0AA546</span>, <span class="hljs-number">0x5B52BA</span>, <span class="hljs-number">0x06D24E</span>, <span class="hljs-number">0x0ADA42</span>, <span class="hljs-number">0x355B37</span>,<br>            <span class="hljs-comment">/*2051-2060*/</span><br>            <span class="hljs-number">0x09374B</span>, <span class="hljs-number">0x8497C1</span>, <span class="hljs-number">0x049753</span>, <span class="hljs-number">0x064B48</span>, <span class="hljs-number">0x66A53C</span>, <span class="hljs-number">0x0EA54F</span>, <span class="hljs-number">0x06AA44</span>, <span class="hljs-number">0x4AB638</span>, <span class="hljs-number">0x0AAE4C</span>, <span class="hljs-number">0x092E42</span>,<br>            <span class="hljs-comment">/*2061-2070*/</span><br>            <span class="hljs-number">0x3C9735</span>, <span class="hljs-number">0x0C9649</span>, <span class="hljs-number">0x7D4ABD</span>, <span class="hljs-number">0x0D4A51</span>, <span class="hljs-number">0x0DA545</span>, <span class="hljs-number">0x55AABA</span>, <span class="hljs-number">0x056A4E</span>, <span class="hljs-number">0x0A6D43</span>, <span class="hljs-number">0x452EB7</span>, <span class="hljs-number">0x052D4B</span>,<br>            <span class="hljs-comment">/*2071-2080*/</span><br>            <span class="hljs-number">0x8A95BF</span>, <span class="hljs-number">0x0A9553</span>, <span class="hljs-number">0x0B4A47</span>, <span class="hljs-number">0x6B553B</span>, <span class="hljs-number">0x0AD54F</span>, <span class="hljs-number">0x055A45</span>, <span class="hljs-number">0x4A5D38</span>, <span class="hljs-number">0x0A5B4C</span>, <span class="hljs-number">0x052B42</span>, <span class="hljs-number">0x3A93B6</span>,<br>            <span class="hljs-comment">/*2081-2090*/</span><br>            <span class="hljs-number">0x069349</span>, <span class="hljs-number">0x7729BD</span>, <span class="hljs-number">0x06AA51</span>, <span class="hljs-number">0x0AD546</span>, <span class="hljs-number">0x54DABA</span>, <span class="hljs-number">0x04B64E</span>, <span class="hljs-number">0x0A5743</span>, <span class="hljs-number">0x452738</span>, <span class="hljs-number">0x0D264A</span>, <span class="hljs-number">0x8E933E</span>,<br>            <span class="hljs-comment">/*2091-2099*/</span><br>            <span class="hljs-number">0x0D5252</span>, <span class="hljs-number">0x0DAA47</span>, <span class="hljs-number">0x66B53B</span>, <span class="hljs-number">0x056D4F</span>, <span class="hljs-number">0x04AE45</span>, <span class="hljs-number">0x4A4EB9</span>, <span class="hljs-number">0x0A4D4C</span>, <span class="hljs-number">0x0D1541</span>, <span class="hljs-number">0x2D92B5</span><br>    &#125;;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将农历日期转换为公历日期</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year                               农历年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month                              农历月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> monthDay                   农历日</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> isLeapMonth        该月是否是闰月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回农历日期对应的公历日期，year0, month1, day2.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] lunarToSolar(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> monthDay, <span class="hljs-keyword">boolean</span> isLeapMonth) &#123;<br> <br>        <span class="hljs-keyword">int</span> dayOffset;<br> <br>        <span class="hljs-keyword">int</span> leapMonth;<br> <br>        <span class="hljs-keyword">int</span> i;<br> <br>        <span class="hljs-keyword">if</span> (year &lt; MIN_YEAR || year &gt; MAX_YEAR || month &lt; <span class="hljs-number">1</span> || month &gt; <span class="hljs-number">12</span><br>                || monthDay &lt; <span class="hljs-number">1</span> || monthDay &gt; <span class="hljs-number">30</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                    <span class="hljs-string">&quot;Illegal lunar date, must be like that:\n\t&quot;</span> +<br>                            <span class="hljs-string">&quot;year : 1900~2099\n\t&quot;</span> +<br>                            <span class="hljs-string">&quot;month : 1~12\n\t&quot;</span> +<br>                            <span class="hljs-string">&quot;day : 1~30&quot;</span>);<br>        &#125;<br>        dayOffset = (LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0x001F</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (((LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0x0060</span>) &gt;&gt; <span class="hljs-number">5</span>) == <span class="hljs-number">2</span>) &#123;<br>            dayOffset += <span class="hljs-number">31</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; month; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; (<span class="hljs-number">0x80000</span> &gt;&gt; (i - <span class="hljs-number">1</span>))) == <span class="hljs-number">0</span>) &#123;<br>                dayOffset += <span class="hljs-number">29</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dayOffset += <span class="hljs-number">30</span>;<br>            &#125;<br>        &#125;<br>        dayOffset += monthDay;<br> <br>        leapMonth = (LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0xf00000</span>) &gt;&gt; <span class="hljs-number">20</span>;<br> <br>        <span class="hljs-comment">// 这一年有闰月</span><br> <br>        <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (month &gt; leapMonth || (month == leapMonth &amp;&amp; isLeapMonth)) &#123;<br> <br>                <span class="hljs-keyword">if</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; (<span class="hljs-number">0x80000</span> &gt;&gt; (month - <span class="hljs-number">1</span>))) == <span class="hljs-number">0</span>) &#123;<br>                    dayOffset += <span class="hljs-number">29</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dayOffset += <span class="hljs-number">30</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (dayOffset &gt; <span class="hljs-number">366</span> || (year % <span class="hljs-number">4</span> != <span class="hljs-number">0</span> &amp;&amp; dayOffset &gt; <span class="hljs-number">365</span>)) &#123;<br>            year += <span class="hljs-number">1</span>;<br> <br>            <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>) &#123;<br>                dayOffset -= <span class="hljs-number">366</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dayOffset -= <span class="hljs-number">365</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">int</span>[] solarInfo = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">13</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> iPos = DAYS_BEFORE_MONTH[i];<br> <br>            <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i &gt; <span class="hljs-number">2</span>) &#123;<br> <br>                iPos += <span class="hljs-number">1</span>;<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i == <span class="hljs-number">2</span> &amp;&amp; iPos + <span class="hljs-number">1</span> == dayOffset) &#123;<br> <br>                solarInfo[<span class="hljs-number">1</span>] = i;<br> <br>                solarInfo[<span class="hljs-number">2</span>] = dayOffset - <span class="hljs-number">31</span>;<br> <br>                <span class="hljs-keyword">break</span>;<br> <br>            &#125;<br>            <span class="hljs-keyword">if</span> (iPos &gt;= dayOffset) &#123;<br>                solarInfo[<span class="hljs-number">1</span>] = i;<br>                iPos = DAYS_BEFORE_MONTH[i - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i &gt; <span class="hljs-number">2</span>) &#123;<br>                    iPos += <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (dayOffset &gt; iPos) &#123;<br>                    solarInfo[<span class="hljs-number">2</span>] = dayOffset - iPos;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dayOffset == iPos) &#123;<br>                    <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i == <span class="hljs-number">2</span>) &#123;<br>                        solarInfo[<span class="hljs-number">2</span>] = DAYS_BEFORE_MONTH[i] - DAYS_BEFORE_MONTH[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        solarInfo[<span class="hljs-number">2</span>] = DAYS_BEFORE_MONTH[i] - DAYS_BEFORE_MONTH[i - <span class="hljs-number">1</span>];<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    solarInfo[<span class="hljs-number">2</span>] = dayOffset;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        solarInfo[<span class="hljs-number">0</span>] = year;<br>        <span class="hljs-keyword">return</span> solarInfo;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将公历日期转换为农历日期，且标识是否是闰月</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> monthDay</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回公历日期对应的农历日期，year0，month1，day2，leap3</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] solarToLunar(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> monthDay) &#123;<br>        <span class="hljs-keyword">int</span>[] lunarDate = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>];<br>        Date baseDate = <span class="hljs-keyword">new</span> GregorianCalendar(<span class="hljs-number">1900</span>, <span class="hljs-number">0</span>, <span class="hljs-number">31</span>).getTime();<br>        Date objDate = <span class="hljs-keyword">new</span> GregorianCalendar(year, month - <span class="hljs-number">1</span>, monthDay).getTime();<br>        <span class="hljs-keyword">int</span> offset = (<span class="hljs-keyword">int</span>) ((objDate.getTime() - baseDate.getTime()) / <span class="hljs-number">86400000L</span>);<br>        <span class="hljs-comment">// 用offset减去每农历年的天数计算当天是农历第几天</span><br>        <span class="hljs-comment">// iYear最终结果是农历的年份, offset是当年的第几天</span><br>        <span class="hljs-keyword">int</span> iYear, daysOfYear = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (iYear = MIN_YEAR; iYear &lt;= MAX_YEAR &amp;&amp; offset &gt; <span class="hljs-number">0</span>; iYear++) &#123;<br>            daysOfYear = daysInLunarYear(iYear);<br>            offset -= daysOfYear;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>) &#123;<br>            offset += daysOfYear;<br>            iYear--;<br>        &#125;<br>        <span class="hljs-comment">// 农历年份</span><br>        lunarDate[<span class="hljs-number">0</span>] = iYear;<br>        <span class="hljs-keyword">int</span> leapMonth = leapMonth(iYear);<br>        <span class="hljs-comment">// 闰哪个月,1-12</span><br>        <span class="hljs-keyword">boolean</span> isLeap = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 用当年的天数offset,逐个减去每月（农历）的天数，求出当天是本月的第几天</span><br>        <span class="hljs-keyword">int</span> iMonth, daysOfMonth = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (iMonth = <span class="hljs-number">1</span>; iMonth &lt;= <span class="hljs-number">13</span> &amp;&amp; offset &gt; <span class="hljs-number">0</span>; iMonth++) &#123;<br>            daysOfMonth = daysInLunarMonth(iYear, iMonth);<br>            offset -= daysOfMonth;<br>        &#125;<br>        <span class="hljs-comment">// 当前月超过闰月，要校正</span><br>        <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span> &amp;&amp; iMonth &gt; leapMonth) &#123;<br>            --iMonth;<br>            <span class="hljs-keyword">if</span> (iMonth == leapMonth) &#123;<br>                isLeap = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// offset小于0时，也要校正</span><br>        <span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>) &#123;<br>            offset += daysOfMonth;<br>            --iMonth;<br>        &#125;<br>        lunarDate[<span class="hljs-number">1</span>] = iMonth;<br>        lunarDate[<span class="hljs-number">2</span>] = offset + <span class="hljs-number">1</span>;<br>        lunarDate[<span class="hljs-number">3</span>] = isLeap ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> lunarDate;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历year年month月的总天数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year   要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month        要计算的月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> daysInMonth(year, month, <span class="hljs-keyword">false</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历year年month月的总天数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year   要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month        要计算的月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> leap   当月是否是闰月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回天数，如果闰月是错误的，返回0.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">boolean</span> leap)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> leapMonth = leapMonth(year);<br>        <span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果本年有闰月且month大于闰月时，需要校正</span><br>        <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span> &amp;&amp; month &gt; leapMonth) &#123;<br>            offset = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 不考虑闰月</span><br>        <span class="hljs-keyword">if</span> (!leap) &#123;<br>            <span class="hljs-keyword">return</span> daysInLunarMonth(year, month + offset);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 传入的闰月是正确的月份</span><br>            <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span> &amp;&amp; leapMonth == month) &#123;<br>                <span class="hljs-keyword">return</span> daysInLunarMonth(year, month + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历 year年的总天数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year 将要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回传入年份的总天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInLunarYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i, sum = <span class="hljs-number">348</span>;<br>        <span class="hljs-keyword">if</span> (leapMonth(year) != <span class="hljs-number">0</span>) &#123;<br>            sum = <span class="hljs-number">377</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> monthInfo = LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0x0FFF80</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0x80000</span>; i &gt; <span class="hljs-number">0x7</span>; i &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((monthInfo &amp; i) != <span class="hljs-number">0</span>) &#123;<br>                sum += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历 year年month月的总天数，总共有13个月包括闰月</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year  将要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month 将要计算的月份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回农历 year年month月的总天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInLunarMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; (<span class="hljs-number">0x100000</span> &gt;&gt; month)) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">29</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">30</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历 year年闰哪个月 1-12 , 没闰传回 0</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year 将要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回农历 year年闰哪个月1-12, 没闰传回 0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leapMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0xF00000</span>)) &gt;&gt; <span class="hljs-number">20</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Arrays.toString(solarToLunar(<span class="hljs-number">2019</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>)));<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>在做项目的时候遇到一个业务需要对图片进行旋转，于是找到一个工具类，亲测有效；在此与大家共享，需要用时可以直接用哈！ 一、旋转工具类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> zh.test.utils;<br> <br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图片旋转工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RotateImage</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对图片进行旋转</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src   被旋转图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> angel 旋转角度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 旋转后的图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title">Rotate</span><span class="hljs-params">(Image src, <span class="hljs-keyword">int</span> angel)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> src_width = src.getWidth(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">int</span> src_height = src.getHeight(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 计算旋转后图片的尺寸</span><br>        Rectangle rect_des = CalcRotatedSize(<span class="hljs-keyword">new</span> Rectangle(<span class="hljs-keyword">new</span> Dimension(<br>                src_width, src_height)), angel);<br>        BufferedImage res = <span class="hljs-keyword">null</span>;<br>        res = <span class="hljs-keyword">new</span> BufferedImage(rect_des.width, rect_des.height,<br>                BufferedImage.TYPE_INT_RGB);<br>        Graphics2D g2 = res.createGraphics();<br>        <span class="hljs-comment">// 进行转换</span><br>        g2.translate((rect_des.width - src_width) / <span class="hljs-number">2</span>,<br>                (rect_des.height - src_height) / <span class="hljs-number">2</span>);<br>        g2.rotate(Math.toRadians(angel), src_width / <span class="hljs-number">2</span>, src_height / <span class="hljs-number">2</span>);<br> <br>        g2.drawImage(src, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算旋转后的图片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src   被旋转的图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> angel 旋转角度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 旋转后的图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Rectangle <span class="hljs-title">CalcRotatedSize</span><span class="hljs-params">(Rectangle src, <span class="hljs-keyword">int</span> angel)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果旋转的角度大于90度做相应的转换</span><br>        <span class="hljs-keyword">if</span> (angel &gt;= <span class="hljs-number">90</span>) &#123;<br>            <span class="hljs-keyword">if</span> (angel / <span class="hljs-number">90</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">int</span> temp = src.height;<br>                src.height = src.width;<br>                src.width = temp;<br>            &#125;<br>            angel = angel % <span class="hljs-number">90</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">double</span> r = Math.sqrt(src.height * src.height + src.width * src.width) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">double</span> len = <span class="hljs-number">2</span> * Math.sin(Math.toRadians(angel) / <span class="hljs-number">2</span>) * r;<br>        <span class="hljs-keyword">double</span> angel_alpha = (Math.PI - Math.toRadians(angel)) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">double</span> angel_dalta_width = Math.atan((<span class="hljs-keyword">double</span>) src.height / src.width);<br>        <span class="hljs-keyword">double</span> angel_dalta_height = Math.atan((<span class="hljs-keyword">double</span>) src.width / src.height);<br> <br>        <span class="hljs-keyword">int</span> len_dalta_width = (<span class="hljs-keyword">int</span>) (len * Math.cos(Math.PI - angel_alpha<br>                - angel_dalta_width));<br>        <span class="hljs-keyword">int</span> len_dalta_height = (<span class="hljs-keyword">int</span>) (len * Math.cos(Math.PI - angel_alpha<br>                - angel_dalta_height));<br>        <span class="hljs-keyword">int</span> des_width = src.width + len_dalta_width * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> des_height = src.height + len_dalta_height * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rectangle(<span class="hljs-keyword">new</span> Dimension(des_width, des_height));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二、调用工具类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> zh.test.controller;<br> <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> zh.test.utils.RotateImage;<br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试图片旋转</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.POST)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testImgRotate</span><span class="hljs-params">(MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        BufferedImage src = ImageIO.read(multipartFile.getInputStream());<br>        <span class="hljs-comment">//顺时针旋转90度</span><br>        BufferedImage des1 = RotateImage.Rotate(src, <span class="hljs-number">90</span>);<br>        ImageIO.write(des1, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:/90.jpg&quot;</span>));<br>        <span class="hljs-comment">//顺时针旋转180度</span><br>        BufferedImage des2 = RotateImage.Rotate(src, <span class="hljs-number">180</span>);<br>        ImageIO.write(des2, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/180.jpg&quot;</span>));<br>        <span class="hljs-comment">//顺时针旋转270度</span><br>        BufferedImage des3 = RotateImage.Rotate(src, <span class="hljs-number">270</span>);<br>        ImageIO.write(des3, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/270.jpg&quot;</span>));<br> <br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea取消警告</title>
    <link href="/blog/2021/01/11/idea%E5%8F%96%E6%B6%88%E8%AD%A6%E5%91%8A/"/>
    <url>/blog/2021/01/11/idea%E5%8F%96%E6%B6%88%E8%AD%A6%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>右边那五颜六色的一堆东西 是警告 如果是报错还是会提醒的哦<br>打开设置 搜索 inspections<br><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/BC0B365A-0200-45E5-B6E9-0DD5A2E557DA_1564123100369.png" alt="BC0B365A-0200-45E5-B6E9-0DD5A2E557DA"></p><h1 id="java判断中文汉字工具类"><a href="#java判断中文汉字工具类" class="headerlink" title="java判断中文汉字工具类"></a>java判断中文汉字工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wlkj.util;<br><br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChineseUtil</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断中文字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> c</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isChinese</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span>&#123;<br>    Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);<br>    <span class="hljs-keyword">if</span>(ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS ||<br>       ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS ||<br>       ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A ||<br>       ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B ||<br>       ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION ||<br>       ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS ||<br>       ub == Character.UnicodeBlock.GENERAL_PUNCTUATION)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包含中文字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsChinese</span><span class="hljs-params">(String str)</span></span>&#123;<br>    <span class="hljs-keyword">char</span>[] ch = str.toCharArray();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : ch)&#123;<br>        <span class="hljs-keyword">if</span>(isChinese(c))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否中文（非标点符号）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> c</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isChineseWord</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br><span class="hljs-keyword">char</span>[] ch = &#123;c&#125;;<br>Pattern pattern = Pattern.compile(<span class="hljs-string">&quot;([\u4E00-\uFA29]|[\uE7C7-\uE7F3])&quot;</span>);<br>Matcher matcher = pattern.matcher(<span class="hljs-keyword">new</span> String(ch));<br><span class="hljs-keyword">return</span> matcher.find();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包含汉字（非标点符号）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsChineseWords</span><span class="hljs-params">(String name)</span> </span>&#123;<br>Pattern pattern = Pattern.compile(<span class="hljs-string">&quot;^.*([\u4E00-\uFA29]|[\uE7C7-\uE7F3])+.*$&quot;</span>);<br>Matcher matcher = pattern.matcher(name);<br><span class="hljs-keyword">return</span> matcher.find();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转换成拼音字母缩写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> abbr</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toPinyinAbbr</span><span class="hljs-params">(String str)</span></span>&#123;<br>String abbr = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : str.toCharArray())&#123;<br><span class="hljs-keyword">if</span>(ChineseUtil.isChineseWord(c))&#123;<br>abbr += PinyinHelper.toHanyuPinyinStringArray(c)[<span class="hljs-number">0</span>].substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase();<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> abbr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(isChinese(<span class="hljs-string">&#x27;め&#x27;</span>));<span class="hljs-comment">// false</span><br>System.out.println(isChineseWord(<span class="hljs-string">&#x27;我&#x27;</span>));<span class="hljs-comment">// true</span><br>System.out.println(containsChinese(<span class="hljs-string">&quot;a我b&quot;</span>));<span class="hljs-comment">// true</span><br>System.out.println(containsChineseWords(<span class="hljs-string">&quot;a，b&quot;</span>)); <span class="hljs-comment">// false</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql系统知识梳理</title>
    <link href="/blog/2021/01/10/Mysql%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <url>/blog/2021/01/10/Mysql%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>1 数据库分类</p><p>　　MySQL Oracle redis</p><p>2 MySQL 存储引擎有哪些</p><p>　　ENGINE=InnoDB 提供事务安全表，支持外键。</p><p>　　MyISAM</p><p>　　Memory数据存入内存中，如果内存出现异常或事重启关机，所有数据都会消失</p><p>3 事务</p><p>　　概念：逻辑上的一组sql语句，组成这组操作的sql语句，要么成功，要么失败。</p><p>3.1 事务四大特性ACID</p><p>　　原子性(Atomicity)：事务是一个不可分割的单位，事务中的sql语句，要么全都发生，要么都不发生。</p><p>　　一致性(Consistency)：事务发生前后，数据的完整性必须保持一致。</p><p>　　隔离性(Isolation)：当并发访问数据库的时候，一个正在执行的事务在执行完前，对于其他的会话是不可见的，多个并发的事务之间的数据库相互隔离。</p><p>　　持久性(Durability)：一个事务一旦被提交，数据库中的数据改变就是持久性的。如果出了错误也不能撤销。</p><p>3.2 事务隔离级别</p><p>　　对于同时运行的几个事务，当这些事务同时访问数据库时，如果不采取隔离措施就会导致各种并发问题。由此引出隔离级别的概念，总有4个，由低到高，可逐步解决脏读，不可重复读，幻读等问题。</p><p>　　Default spring：默认隔离级别，使用数据库默认的事务隔离级别</p><p>　　read_uncommitied：读未提交，一个会话可以读取其他事务未提交的更新结果，一旦这个事务被回滚了，导致这个会话的结果不正确了。</p><p>　　read_commited：读已提交，一个会话只能读取其他事务已经提交的更新结果，否则，等待。但是其他会话可以修改这个事务中被读取的记录，而不必等待事务结束。导致了，一个事务中两个相同的读取操作，其结果可能不同。</p><p>　　repeatable_read：重复读取，在数据读取出来后加锁，直到这个事务执行结束。</p><p>　　serlalizable：串行化，不管多少事务，只有执行完一个事务的所有子事务后，才可以执行另外一个事务里的所有子事务。</p><p>3.3 数据库设置的隔离级别read_commited</p><p>　　可以避免脏读，且具有较好的并发性能，可能出现的问题场景，可以使用悲观锁或乐观锁控制。</p><p>4 悲观锁和乐观锁，以及使用场景</p><p>　　悲观排他后，不能修改数据，即在数据被操作的时候，锁定数据不被访问。</p><p>　　乐观排他后，可以修改数据，即假设数据一般情况下不会造成冲突。</p><p>5 如何实现分页</p><p>　　使用sql语句关键字limit</p><p>6 数据库三大范式</p><p>1NF：对属性的原子性约束，要求属性具有原子性，不可再分解。</p><p>2NF：对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性。</p><p>3NF：对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。</p><p>7 Mysql有哪些索引：fulltext、hash、btree、rtree</p><p>8 什么时候该建立索引</p><p>　　1）表的主键、外键必须有索引</p><p>　　2）数据量超过300的表应该有索引</p><p>　　3）经常与其他表进行连接的表，在连接字段上应该建立索引</p><p>　　4）经常出现在where子句中的字段，特别是大表的字段，应该建立索引</p><p>9 sql关键字执行顺序：select-&gt;from-&gt;where-&gt;group by-&gt;having-&gt;order by</p><p>10 explain包含哪些列</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7Nginx的SSl证书安装</title>
    <link href="/blog/2021/01/10/Centos7Nginx%E7%9A%84SSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2021/01/10/Centos7Nginx%E7%9A%84SSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>注意路径</p><p>可见，nginx缺少SSL模块支持。这是因为我当年建站的时候根本没用到SSL啊，所以以前编译nginx的时候使用了不带SSL支持的默认编译参数。 为了让nginx添加SSL模块，只能重新编译它。但是，如何在现有nginx的基础上，添加一个支持SSL的编译参数呢？首先要找回原来编译nginx时的编译参数，然后再加上支持SSL的编译参数。如果不这样做，那么编译出来的nginx可能就会有问题（某些旧的编译参数被去掉了，使得nginx不能支持某些功能）。 所以先查看旧的nginx的编译参数：nginx -V 大写V 输出的信息中，最重要的一句是： configure arguments: –prefix=/usr/local/nginx 可见，当时我编译nginx的时候，只是指定了一个安装路径，没有其他特殊的编译参数。那么现在事情就好办了：回到nginx的源码目录下，加上SSL支持参数重新编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">./configure --prefix=/usr/local/nginx --with-http_ssl_module<br>make<br></code></pre></td></tr></table></figure><p>注意，此时千万不能手快直接 make install！因为我原来的nginx还有一堆的配置文件，不能被覆盖。我们应该只覆盖编译出来的nginx可执行程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cp /usr/local/nginx/sbin/nginx ~/<br>cp objs/nginx /usr/local/nginx/sbin/<br></code></pre></td></tr></table></figure><p>其中，objs/nginx 是新编译出来的nginx可执行程序。 覆盖之后，再尝试重新启动nginx，就没有问题了。</p><p>接下来安装证书<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190724-133740@2x_1563946759206.png" alt="WX20190724-133740@2x">一个证书 针对一个域名<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190724-133807@2x_1563946759366.png" alt="WX20190724-133807@2x">进入nginx 目录下创建一个 mkdir cert 将两个文件上传到这个目录下 建议将文件重命名为 zhzq.pem 和 zhzq.key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">编辑 vim nginx.conf<br> <br>server &#123;<br>    listen <span class="hljs-number">80</span>;<br>    listen <span class="hljs-number">443</span> ssl;<br>    server_name ; 你的域名<br>    ssl off;<br>    ssl_certificate ../cert/zhzq.pem;<br>    ssl_certificate_key ../cert/zhzq.key;<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1<span class="hljs-number">.1</span> TLSv1<span class="hljs-number">.2</span>;<br>    ssl_prefer_server_ciphers on;<br>  <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>重新载入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">../sbin/nginx -s reload<br># 如果上面的命令不起作用，也可以重启<br>../sbin/nginx -s stop<br>../sbin/nginx<br></code></pre></td></tr></table></figure><p>https 443 开放对应的端口 访问就可以了</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java将PDF转为Word、图片、SVG、XPS、Html、PDF。</title>
    <link href="/blog/2021/01/10/java%E5%B0%86PDF%E8%BD%AC%E4%B8%BAWord%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81SVG%E3%80%81XPS%E3%80%81Html%E3%80%81PDF%E3%80%82/"/>
    <url>/blog/2021/01/10/java%E5%B0%86PDF%E8%BD%AC%E4%B8%BAWord%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81SVG%E3%80%81XPS%E3%80%81Html%E3%80%81PDF%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍通过Java编程来实现PDF文档转换的方法。包括：</p><ol><li><p>PDF转为Word</p></li><li><p>PDF转为图片</p></li><li><p>PDF转为Html</p></li><li><p>PDF转为SVG</p><p>4.1 将PDF每一页转为单个的SVG</p><p>4.2 将一个包含多页的PDF文档转为一个SVG</p></li><li><p>PDF转为XPS</p></li><li><p>PDF转为PDF/A</p></li></ol><p>使用工具：Free Spire.PDF for Java（免费版）</p><p>Jar文件获取及导入：</p><p>方法1：通过官网下载<a href="https://www.e-iceblue.cn/Downloads/Free-Spire-PDF-JAVA.html">下载jar包</a>。下载后，解压文件，并将lib文件夹下的Spire.Pdf.jar文件导入Java程序。</p><p>方法2：可通过maven仓库安装导入。参考<a href="https://www.e-iceblue.cn/licensing/install-spirepdf-for-java-from-maven-repository.html">导入方法</a></p><h2 id="PDF-转Word"><a href="#PDF-转Word" class="headerlink" title="PDF 转Word"></a>PDF 转Word</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToWord.docx&quot;</span>,FileFormat.DOCX);<br></code></pre></td></tr></table></figure><h2 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h2><p>支持的图片格式包括Jpeg, Jpg, Png, Bmp, Tiff, Gif, EMF等。这里以保存为Png格式为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.spire.pdf.*;<br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDFtoimage</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br> <br>PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>BufferedImage image;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; pdf.getPages().getCount();i++)&#123;<br>    image = pdf.saveAsImage(i);<br>    File file = <span class="hljs-keyword">new</span> File( String.format(<span class="hljs-string">&quot;ToImage-img-%d.png&quot;</span>, i));<br>    ImageIO.write(image, <span class="hljs-string">&quot;PNG&quot;</span>, file);<br>&#125;<br>pdf.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PDF转Html"><a href="#PDF转Html" class="headerlink" title="PDF转Html"></a>PDF转Html</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToHTML.html&quot;</span>, FileFormat.HTML);<br></code></pre></td></tr></table></figure><h2 id="PDF转SVG"><a href="#PDF转SVG" class="headerlink" title="PDF转SVG"></a>PDF转SVG</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转为单个svg</span><br>PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToSVG.svg&quot;</span>, FileFormat.SVG);<br><span class="hljs-comment">//多页pdf转为一个svg</span><br>PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;sampe.pdf&quot;</span>);<br>pdf.getConvertOptions().setOutputToOneSvg(<span class="hljs-keyword">true</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToOneSvg.svg&quot;</span>,FileFormat.SVG);<br></code></pre></td></tr></table></figure><h2 id="PDF-转XPS"><a href="#PDF-转XPS" class="headerlink" title="PDF 转XPS"></a>PDF 转XPS</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToXPS.xps&quot;</span>, FileFormat.XPS);<br></code></pre></td></tr></table></figure><h2 id="PDF转PDF-A"><a href="#PDF转PDF-A" class="headerlink" title="PDF转PDF/A"></a>PDF转PDF/A</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.spire.pdf.*;<br><span class="hljs-keyword">import</span> com.spire.pdf.graphics.PdfMargins;<br><span class="hljs-keyword">import</span> java.awt.geom.Dimension2D;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDFtoPDFA</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[]args)</span></span>&#123;<br>        <span class="hljs-comment">//加载测试文档</span><br>        PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument();<br>        pdf.loadFromFile(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br> <br>        <span class="hljs-comment">//转换为Pdf_A_1_B格式</span><br>        PdfNewDocument newDoc = <span class="hljs-keyword">new</span> PdfNewDocument();<br>        newDoc.setConformance(PdfConformanceLevel.Pdf_A_1_B);<br>        PdfPageBase page;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; pdf.getPages().getCount();i++) &#123;<br>            page = pdf.getPages().get(i);<br>            Dimension2D size = page.getSize();<br>            PdfPageBase p = newDoc.getPages().add(size, <span class="hljs-keyword">new</span> PdfMargins(<span class="hljs-number">0</span>));<br>            page.createTemplate().draw(p, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br> <br>        <span class="hljs-comment">//保存结果文件</span><br>        newDoc.save(<span class="hljs-string">&quot;ToPDFA.pdf&quot;</span>);<br>        newDoc.close();<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf-%E8%BD%ACword">PDF 转Word</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%AC%E5%9B%BE%E7%89%87">PDF转图片</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%AChtml">PDF转Html</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%ACsvg">PDF转SVG</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf-%E8%BD%ACxps">PDF 转XPS</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%ACpdfa">PDF转PDF/A</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决IntellijIDEA部署JavaWeb项目404问题</title>
    <link href="/blog/2021/01/10/%E8%A7%A3%E5%86%B3IntellijIDEA%E9%83%A8%E7%BD%B2JavaWeb%E9%A1%B9%E7%9B%AE404%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2021/01/10/%E8%A7%A3%E5%86%B3IntellijIDEA%E9%83%A8%E7%BD%B2JavaWeb%E9%A1%B9%E7%9B%AE404%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>首先你要保证 你和同事的版本保持一致 jdk 和 tomcat 重中之重 检查一下Project Structure的配置，首先是project：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/2_1563416756399.png" alt="2">Modules-Sources如下图：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/3_1563416756457.png" alt="3">Modules-Paths中没什么需要特别修改的地方。 Modules-Dependencis如下图： 不用勾选<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/4_1563416756561.png" alt="4">Liraires如下图所示：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/5_1563416756527.png" alt="5">Facets如下，路径一定不要配错，不如一定404，如下图： 尤其是从eclipse 导入尤其注意<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/6_1563416756587.png" alt="6">最后就是Artifacts:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/7_1563416756592.png" alt="7">项目到这就配置完了，有些路径一定要结合自己的项目来配置。</p><p>接下来配置tomcat：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/8_1563416765804.png" alt="8">不加就是/目录<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/9_1563416765774.png" alt="9"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postman的基础功能</title>
    <link href="/blog/2021/01/10/Postman%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/"/>
    <url>/blog/2021/01/10/Postman%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>前后端分离 接口调试工具<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/20180523232921542_1563331603653.png" alt="20180523232921542"></p><p>1.表单提交<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190717-104908@2x_1563331761801.png" alt="WX20190717-104908@2x"></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190717-104757@2x_1563331703420.png" alt="WX20190717-104757@2x">2.json提交 下图中，当我们选择JSON(application/json) 是会自动帮我们设置 headers 为 application/json<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/2018052400054291_1563331856704.png" alt="2018052400054291"></p><h2 id="下面就是很多系统会需要登陆之后-才能模拟效果"><a href="#下面就是很多系统会需要登陆之后-才能模拟效果" class="headerlink" title="下面就是很多系统会需要登陆之后 才能模拟效果"></a>下面就是很多系统会需要登陆之后 才能模拟效果</h2><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190717-105157@2x_1563331933756.png" alt="WX20190717-105157@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Postman</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现下雪特效</title>
    <link href="/blog/2021/01/06/js%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%AA%E7%89%B9%E6%95%88/"/>
    <url>/blog/2021/01/06/js%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%AA%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>直接上代码 放到你的script 标签中 具体效果参考博客页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)</span>&#123;<br>$.fn.snow = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)</span>&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).html(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-built_in">document</span>).height(),<br>documentWidth= $(<span class="hljs-built_in">document</span>).width(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.extend(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-built_in">Math</span>.random() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-built_in">Math</span>.random(),<br>sizeFlake = options.minSize + <span class="hljs-built_in">Math</span>.random() * options.maxSize,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">5000</span>;<br>$flake.clone().appendTo(<span class="hljs-string">&#x27;body&#x27;</span>).css(&#123;<br>left: startPositionLeft,<br>opacity: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br>color: options.flakeColor<br>&#125;).animate(&#123;<br>top: endPositionTop,<br>left: endPositionLeft,<br>opacity: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>$(<span class="hljs-built_in">this</span>).remove()<br>&#125;);<br>&#125;, options.newOn);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.fn.snow(&#123; <br>    minSize: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    maxSize: <span class="hljs-number">30</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    newOn: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装redis</title>
    <link href="/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85redis/"/>
    <url>/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85redis/</url>
    
    <content type="html"><![CDATA[<p>在CentOS和Red Hat系统中，首先添加EPEL仓库，然后更新yum源：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo yum install epel-<span class="hljs-keyword">release</span><br>sudo yum <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>然后安装Redis数据库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum -y <span class="hljs-keyword">install</span> redis<br></code></pre></td></tr></table></figure><p>安装好后启动Redis服务即可：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo systemctl <span class="hljs-literal">start</span> redis<br></code></pre></td></tr></table></figure><p>这里同样可以使用redis-cli进入Redis命令行模式操作。</p><p>另外，为了可以使Redis能被远程连接，需要修改配置文件，路径为/etc/redis.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>redis.conf<br></code></pre></td></tr></table></figure><p>需要修改的地方： 直接搜索 requirepass</p><p>首先，注释这一行： 另外，推荐给Redis设置密码，取消注释这一行：</p><p>#requirepass foobared</p><p>foobared即当前密码，可以自行修改为 这里我设置成root</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#bind 127.0.0.1</span><br> <br><span class="hljs-attribute">requirepass</span> root <br></code></pre></td></tr></table></figure><p>然后重启Redis服务，使用的命令如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart redis</span><br></code></pre></td></tr></table></figure><p>ps: 其他命令</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gauss">systemctl start redis.service <span class="hljs-meta">#启动redis服务器</span><br> <br>systemctl <span class="hljs-keyword">stop</span> redis.service <span class="hljs-meta">#停止redis服务器</span><br> <br>systemctl restart redis.service <span class="hljs-meta">#重新启动redis服务器</span><br> <br>systemctl status redis.service <span class="hljs-meta">#获取redis服务器的运行状态</span><br> <br>systemctl <span class="hljs-keyword">enable</span> redis.service <span class="hljs-meta">#开机启动redis服务器</span><br> <br>systemctl <span class="hljs-keyword">disable</span> redis.service <span class="hljs-meta">#开机禁用redis服务器</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Nginx</title>
    <link href="/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-是C语言开发的-所以要安装gcc编译器。"><a href="#Nginx-是C语言开发的-所以要安装gcc编译器。" class="headerlink" title="Nginx 是C语言开发的,所以要安装gcc编译器。"></a>Nginx 是C语言开发的,所以要安装gcc编译器。</h1><ol><li>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">yum</span> <span class="hljs-comment">install</span> <span class="hljs-literal">-</span><span class="hljs-comment">y</span> <span class="hljs-comment">gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span>++<br></code></pre></td></tr></table></figure><ol><li>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y pcre pcre-devel<br></code></pre></td></tr></table></figure><p>3.zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum install -y <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel<br></code></pre></td></tr></table></figure><p>4.OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y openssl openssl-devel<br></code></pre></td></tr></table></figure><p>下载nginx 到一个自己创建到文件夹中 随意</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载 wget https:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.13</span>.<span class="hljs-number">0</span>.tar.gz<br>解压 tar -zxvf nginx-<span class="hljs-number">1.10</span>.<span class="hljs-number">1</span>.tar.gz<br>进入 cd nginx-<span class="hljs-number">1.10</span>.<span class="hljs-number">1</span><br>配置 ./configure<br>编译 make<br>安装 make install<br>一次完成也可以 .<span class="hljs-regexp">/configure --prefix=/</span>opt<span class="hljs-regexp">/software/</span>nginx &amp;&amp; make install<br>配置环境变量：（注意是sbin不是bin） <br>echo <span class="hljs-string">&#x27;export PATH=$PATH:/opt/software/nginx/sbin&#x27;</span> &gt; <span class="hljs-regexp">/etc/</span>profile.d/nginx.sh<br></code></pre></td></tr></table></figure><p>环境变量生效 source /etc/profile 查看安装路径 whereis nginx</p><p>前提进入安装路径里面 sbin 目录下 cd /opt/software/nginx/sbin/ 启动 ./nginx 查看进程 ps aux|grep nginx 重启 先停止再启动（推荐）：</p><p>./nginx -s quit ./nginx</p><p>有很多时候只改配置 不用重启了就 当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，即可将配置信息在 nginx 中生效，如下：</p><p>./nginx -s reload</p><p>默认端口为80 不用加 直接外部IP 访问 就能访问到页面</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装mysql5.7</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85mysql/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="先检查系统是否装有mysql"><a href="#先检查系统是否装有mysql" class="headerlink" title="先检查系统是否装有mysql"></a>先检查系统是否装有mysql</h2><p>rpm -qa | grep mysql 这里执行安装命令是无效的，因为centos-7默认是Mariadb，所以执行以下命令只是更新Mariadb数据库 yum install mysql 删除 yum remove mysql</p><h2 id="下载mysql的repo源"><a href="#下载mysql的repo源" class="headerlink" title="下载mysql的repo源"></a>下载mysql的repo源</h2><p>wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></p><h2 id="安装mysql-community-release-el7-5-noarch-rpm包"><a href="#安装mysql-community-release-el7-5-noarch-rpm包" class="headerlink" title="安装mysql-community-release-el7-5.noarch.rpm包"></a>安装mysql-community-release-el7-5.noarch.rpm包</h2><p>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>sudo yum install mysql-server</p><h3 id="这里可能会报错-请注意"><a href="#这里可能会报错-请注意" class="headerlink" title="这里可能会报错 请注意"></a>这里可能会报错 请注意</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Package: mysql-community-libs<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: systemd<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-client<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br> You could try using --skip-broken to work around the problem<br> You could try running: rpm -Va --nofiles --nodigest<br> <br></code></pre></td></tr></table></figure><h3 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h3><p>yum install glibc.i686 yum list libstdc++*</p><p>然后登陆 没有密码直接回车跳过 mysql -u root -p</p><h3 id="登录时有可能报这样的错：ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2-，原因是-var-lib-mysql的访问权限问题。下面的命令把-var-lib-mysql的拥有者改为当前用户："><a href="#登录时有可能报这样的错：ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2-，原因是-var-lib-mysql的访问权限问题。下面的命令把-var-lib-mysql的拥有者改为当前用户：" class="headerlink" title="登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户："></a>登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户：</h3><p>sudo chown -R openscanner:openscanner /var/lib/mysql</p><p>重启mysql service mysqld restart</p><p>这里密码设置的为root</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysql &gt; use mysql;<br>mysql &gt; update user set password=password(<span class="hljs-string">&#x27;root&#x27;</span>) where user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql &gt; <span class="hljs-keyword">exit</span>;<br> <br></code></pre></td></tr></table></figure><p>再重启 登陆mysql 加上远程访问权限 为root添加远程连接的能力。链接密码为 “root”（不包括双引号）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> root@&quot;%&quot; IDENTIFIED <span class="hljs-keyword">BY</span> &quot;root&quot;;　　<br></code></pre></td></tr></table></figure><h1 id="最后最后-非常重要-查询不区分大小写表名"><a href="#最后最后-非常重要-查询不区分大小写表名" class="headerlink" title="最后最后 非常重要 查询不区分大小写表名"></a>最后最后 非常重要 查询不区分大小写表名</h1><p>vim /etc/my.cnf 在[mysqld]节点下，加入一行： lower_case_table_names=1<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190710-151220@2x_1562742772778.png" alt="WX20190710-151220@2x">重启数据库 连接工具测试连接<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/5E7E7FBB-4F4B-4C82-83E0-F98203469C7A_1562742912107.png" alt="5E7E7FBB-4F4B-4C82-83E0-F98203469C7A"></p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装tomcat9</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85tomcat9/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85tomcat9/</url>
    
    <content type="html"><![CDATA[<h2 id="首先检查是否安装好jdk-和配置好运行环境-还有就是名字和路径"><a href="#首先检查是否安装好jdk-和配置好运行环境-还有就是名字和路径" class="headerlink" title="首先检查是否安装好jdk 和配置好运行环境 还有就是名字和路径"></a>首先检查是否安装好jdk 和配置好运行环境 还有就是名字和路径</h2><p>输入命令：Java -version，如果显示JDK版本号，则证明已经安装了JDK。</p><p>输入命令：echo $JAVA_HOME，如果显示路径，则证明配置了环境变量。</p><p>如果没有参考 <a href="http://47.100.236.144:888/archives/centos7-jdk">安装jdk</a> tomcat 下载地址 [tomcat9]( <a href="https://pan.baidu.com/s/171M_rXvsyKNI5jAY8nwd1Q">https://pan.baidu.com/s/171M_rXvsyKNI5jAY8nwd1Q</a> 提取码: 3r8q )</p><ol><li>cd /usr/local/ 进入此目录下面 创建 mkdir tomcat</li><li>进入tomcat 文件夹下面 将云盘安装包放入 解压</li><li>tar -zxvf apache-tomcat-9.0.21.tar.gz</li><li>再进入 cd apache-tomcat-9.0.21/bin/startup.sh 启动tomcat</li><li>启动 /usr/local/tomcat/apache-tomcat-9.0.21/bin/startup.sh</li><li>关闭 /usr/local/tomcat/apache-tomcat-9.0.21/bin/shutdown.sh</li><li>重启 建议 ps -ef | grep tomcat 查询 tomcat 占用的pid</li><li>kill -9 pid 再启动</li><li>ip 加端口能访问到 就成功了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装jdk</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85jdk/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85jdk/</url>
    
    <content type="html"><![CDATA[<p>请注意版本和文件名 是否一致 按照你的地址来!</p><ol><li>先进入 cd /usr/local/</li><li>创建一个放jdk的文件夹 mkdir java</li><li>进入 cd java</li><li>通过工具 finalshell 直接把安装包放到Java文件夹下</li><li>tar -zxv -f jdk-8u211-linux-x64.tar.gz 解压出来 [jdk 下载地址](链接: <a href="https://pan.baidu.com/s/1KjBBvHRxj4QHWkAnsIQGbQ">https://pan.baidu.com/s/1KjBBvHRxj4QHWkAnsIQGbQ</a> 提取码: n1bp 复制这段内容后打开百度网盘手机App，操作更方便哦)</li></ol><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1562571285905_1562571317802.jpg" alt="1562571285905"></p><h2 id="上面步骤已经安装完成了-下面配置环境变量"><a href="#上面步骤已经安装完成了-下面配置环境变量" class="headerlink" title="上面步骤已经安装完成了 下面配置环境变量"></a>上面步骤已经安装完成了 下面配置环境变量</h2><p>vim /etc/profile 打开之后按键盘【i】键进入编辑模式，将下面的内容复制到底部：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_211<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext:$JAVA_HOME/</span>lib/tools.jar<br>export PATH JAVA_HOME CLASSPATH<br> <br></code></pre></td></tr></table></figure><p>配置完成后，最重要的一步就是使文件立即生效。命令如下： source /etc/profile</p><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>java -version echo $JAVA_HOME<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190708-154036@2x_1562571647150.png" alt="WX20190708-154036@2x">说明安装成功，环境变量也配置成功！</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器</title>
    <link href="/blog/2021/01/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/blog/2021/01/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>24岁以下自动获取学生身份 所以入手一年用来部署自己的博客和项目 经过比较几个大厂的vps 推荐阿里云 <a href="https://promotion.aliyun.com/ntms/act/campus2018.html">购买地址</a></p><p>这里我买的是第二款<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-140757@2x_1562479700993.png" alt="WX20190707-140757@2x">购买完成之后在控制台 查看自己的ECS 云服务器<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141000@2x_1562479814153.png" alt="WX20190707-141000@2x">在网络与安全中 安全组 配置 下面还需要添加安全组 用来后面在外部访问各种端口 这里我比较懒 就直接将全部端口开放 当然这是不太安全的<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141206@2x_1562480012754.png" alt="WX20190707-141206@2x"></p><p>再回到实例 加入安全组<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141549@2x_1562480182400.png" alt="WX20190707-141549@2x"></p><p>最后用远程连接工具连接上之后 就开始云服务之旅啦</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis经典9种设计模式</title>
    <link href="/blog/2021/01/04/Mybatis%E7%BB%8F%E5%85%B89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/01/04/Mybatis%E7%BB%8F%E5%85%B89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。</p><h2 id="Mybatis至少遇到了以下的设计模式的使用"><a href="#Mybatis至少遇到了以下的设计模式的使用" class="headerlink" title="Mybatis至少遇到了以下的设计模式的使用"></a>Mybatis至少遇到了以下的设计模式的使用</h2><h2 id="1、Builder模式"><a href="#1、Builder模式" class="headerlink" title="1、Builder模式"></a>1、Builder模式</h2><p>例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder。</p><h2 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h2><p>例如SqlSessionFactory、ObjectFactory、MapperProxyFactory。</p><h2 id="3、单例模式"><a href="#3、单例模式" class="headerlink" title="3、单例模式"></a>3、单例模式</h2><p>例如ErrorContext和LogFactory。</p><h2 id="4、代理模式"><a href="#4、代理模式" class="headerlink" title="4、代理模式"></a>4、代理模式</h2><p>Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果。</p><h2 id="5、组合模式"><a href="#5、组合模式" class="headerlink" title="5、组合模式"></a>5、组合模式</h2><p>例如SqlNode和各个子类ChooseSqlNode等。</p><h2 id="6、模板方法模式"><a href="#6、模板方法模式" class="headerlink" title="6、模板方法模式"></a>6、模板方法模式</h2><p>例如BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler。</p><h2 id="7、适配器模式"><a href="#7、适配器模式" class="headerlink" title="7、适配器模式"></a>7、适配器模式</h2><p>例如Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现。</p><h2 id="8、装饰者模式"><a href="#8、装饰者模式" class="headerlink" title="8、装饰者模式"></a>8、装饰者模式</h2><p>例如Cache包中的cache.decorators子包中等各个装饰者的实现。</p><h2 id="9、迭代器模式"><a href="#9、迭代器模式" class="headerlink" title="9、迭代器模式"></a>9、迭代器模式</h2><p>例如迭代器模式PropertyTokenizer。</p><p><strong>接下来挨个模式进行解读，先介绍模式自身的知识，然后解读在Mybatis中怎样应用了该模式。</strong></p><h2 id="一、Builder模式"><a href="#一、Builder模式" class="headerlink" title="一、Builder模式"></a>一、Builder模式</h2><p>Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis环境的初始化过程中，SqlSessionFactoryBuilder会调用XMLConfigBuilder读取所有的MybatisMapConfig.xml和所有的Mapper.xml文件，构建Mybatis运行的核心对象Configuration对象，然后将该Configuration对象作为参数构建一个SqlSessionFactory对象。</p><p>其中XMLConfigBuilder在构建Configuration对象时，也会调用XMLMapperBuilder用于读取*Mapper文件，而XMLMapperBuilder会使用XMLStatementBuilder来读取和build所有的SQL语句。</p><p>在这个过程中，有一个相似的特点，就是这些Builder会读取文件或者配置，然后做大量的XpathParser解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。</p><p><strong>对于builder的具体类，方法都大都用build*开头，比如SqlSessionFactoryBuilder为例，它包含以下方法：</strong></p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>即根据不同的输入参数来构建SqlSessionFactory这个工厂对象。</p><h2 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h2><p>在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</p><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>SqlSession可以认为是一个Mybatis工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。</p><p><strong>在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,<br><span class="hljs-keyword">boolean</span> autoCommit) &#123;<br>Transaction tx = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">final</span> Environment environment = configuration.getEnvironment();<br><span class="hljs-keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br>tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br><span class="hljs-keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>closeTransaction(tx); <span class="hljs-comment">// may have fetched a connection so lets call</span><br><span class="hljs-comment">// close()</span><br><span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>ErrorContext.instance().reset();<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。</p><p>在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。</p><p><strong>而对于LogFactory，它的实现代码：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> final <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Constructor&lt;? <span class="hljs-keyword">extends</span> Log&gt; logConstructor;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">LogFactory</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-comment">// disable construction</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-function"><span class="hljs-title">getLog</span>(<span class="hljs-params">Class&lt;?&gt; aClass</span>)</span> &#123;<br><span class="hljs-keyword">return</span> getLog(aClass.getName());<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>这里有个特别的地方，是Log变量的的类型是Constructor&lt;? extends Log&gt;，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。</p><h2 id="三、单例模式"><a href="#三、单例模式" class="headerlink" title="三、单例模式"></a>三、单例模式</h2><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。</p><p><strong>ErrorContext的单例实现代码：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ErrorContext</span> &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">ErrorContext</span>&gt; LOCAL</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;ErrorContext&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ErrorContext</span>(<span class="hljs-params"></span>)</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ErrorContext <span class="hljs-title">instance</span>(<span class="hljs-params"></span>)</span> &#123;<br>ErrorContext context = LOCAL.<span class="hljs-keyword">get</span>();<br><span class="hljs-keyword">if</span> (context == <span class="hljs-literal">null</span>) &#123;<br>context = <span class="hljs-keyword">new</span> ErrorContext();<br>LOCAL.<span class="hljs-keyword">set</span>(context);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>构造函数是private修饰，具有一个static的局部instance变量和一个获取instance变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。</p><p>只是这里有个有趣的地方是，LOCAL的静态实例变量使用了ThreadLocal修饰，也就是说它属于每个线程各自的数据，而在instance()方法中，先获取本线程的该实例，如果没有就创建该线程独有的ErrorContext。</p><h2 id="四、代理模式"><a href="#四、代理模式" class="headerlink" title="四、代理模式"></a>四、代理模式</h2><p>代理模式可以认为是Mybatis的核心使用的模式，正是由于这个模式，我们只需要编写Mapper.java接口，不需要实现，由Mybatis后台帮我们完成具体SQL的执行。</p><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p><p><strong>代理模式包含如下角色：</strong></p><h3 id="1-Subject"><a href="#1-Subject" class="headerlink" title="1.Subject:"></a>1.Subject:</h3><p>抽象主题角色</p><h3 id="2-Proxy"><a href="#2-Proxy" class="headerlink" title="2.Proxy:"></a>2.Proxy:</h3><p>代理主题角色</p><h3 id="3-RealSubject"><a href="#3-RealSubject" class="headerlink" title="3.RealSubject:"></a>3.RealSubject:</h3><p>真实主题角色</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务； 当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author </span>Lasse Voss</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxyFactory</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> final Class&lt;T&gt; mapperInterface;<br><span class="hljs-keyword">private</span> final <span class="hljs-built_in">Map</span>&lt;Method, MapperMethod&gt; methodCache = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;Method, MapperMethod&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">MapperProxyFactory</span>(<span class="hljs-params">Class&lt;T&gt; mapperInterface</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.mapperInterface = mapperInterface;<br>&#125;<br><br><span class="hljs-keyword">public</span> Class&lt;T&gt; <span class="hljs-function"><span class="hljs-title">getMapperInterface</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> mapperInterface;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;Method, MapperMethod&gt; <span class="hljs-function"><span class="hljs-title">getMethodCache</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> methodCache;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">&quot;unchecked&quot;</span>)<br><span class="hljs-keyword">protected</span> T <span class="hljs-function"><span class="hljs-title">newInstance</span>(<span class="hljs-params">MapperProxy&lt;T&gt; mapperProxy</span>)</span> &#123;<br><span class="hljs-keyword">return</span> (T) <span class="hljs-built_in">Proxy</span>.newProxyInstance(mapperInterface.getClassLoader(), <span class="hljs-keyword">new</span> Class[] &#123; mapperInterface &#125;,<br>mapperProxy);<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-function"><span class="hljs-title">newInstance</span>(<span class="hljs-params">SqlSession sqlSession</span>)</span> &#123;<br>final MapperProxy&lt;T&gt; mapperProxy = <span class="hljs-keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);<br><span class="hljs-keyword">return</span> newInstance(mapperProxy);<br>&#125;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>在这里，先通过T newInstance(SqlSession sqlSession)方法会得到一个MapperProxy对象，然后调用T newInstance(MapperProxymapperProxy)生成代理对象然后返回。</p><p><strong>而查看MapperProxy的代码，可以看到如下内容：</strong></p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxy</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span>, <span class="hljs-title">Serializable</span> &#123;</span><br><br>@Override<br><span class="hljs-keyword">public</span> Object invoke(Object proxy, <span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">method</span>, <span class="hljs-title">Object</span>[] <span class="hljs-title">args</span>) <span class="hljs-title">throws</span> <span class="hljs-title">Throwable</span> &#123;</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br><span class="hljs-keyword">return</span> method.invoke(this, args);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDefaultMethod(<span class="hljs-function"><span class="hljs-keyword">method</span>)) &#123;</span><br><span class="hljs-keyword">return</span> invokeDefaultMethod(proxy, <span class="hljs-function"><span class="hljs-keyword">method</span>, <span class="hljs-title">args</span>);</span><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br><span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>&#125;<br><span class="hljs-keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(<span class="hljs-function"><span class="hljs-keyword">method</span>);</span><br><span class="hljs-keyword">return</span> mapperMethod.execute(sqlSession, args);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>非常典型的，该MapperProxy类实现了InvocationHandler接口，并且实现了该接口的invoke方法。</p><p>通过这种方式，我们只需要编写Mapper.java接口类，当真正执行一个Mapper接口的时候，就会转发给MapperProxy.invoke方法，而该方法则会调用后续的sqlSession.cud&gt;executor.execute&gt;prepareStatement等一系列方法，完成SQL的执行和返回。</p><h2 id="五、组合模式"><a href="#五、组合模式" class="headerlink" title="五、组合模式"></a>五、组合模式</h2><p>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。</p><p>组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。</p><p>在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fce4762c12a74809aacc0143f05a2ce7~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>Mybatis支持动态SQL的强大功能，比如下面的这个SQL：</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;org.format.dynamicproxy.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="xml">    UPDATE users</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            , age = #</span><span class="hljs-template-variable">&#123;age&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;birthday != null and birthday != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            , birthday = #</span><span class="hljs-template-variable">&#123;birthday&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">    where id = $</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br><span class="xml">复制代码</span><br></code></pre></td></tr></table></figure><p>在这里面使用到了trim、if等动态元素，可以根据条件来生成不同情况下的SQL；</p><p>在DynamicSqlSource.getBoundSql方法里，调用了rootSqlNode.apply(context)方法，apply方法是所有的动态节点都实现的接口：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SqlNode</span> &#123;<br><span class="hljs-built_in">bool</span>ean apply(DynamicContext context);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>对于实现该SqlSource接口的所有节点，就是整个组合模式树的各个节点：</strong></p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于TextSqlNode，因为它是最底层的叶子节点，所以直接将对应的内容append到SQL语句中：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public boolean apply(DynamicContext context) &#123;<br>GenericTokenParser parser = create<span class="hljs-constructor">Parser(<span class="hljs-params">new</span> BindingTokenParser(<span class="hljs-params">context</span>, <span class="hljs-params">injectionFilter</span>)</span>);<br>context.append<span class="hljs-constructor">Sql(<span class="hljs-params">parser</span>.<span class="hljs-params">parse</span>(<span class="hljs-params">text</span>)</span>);<br>return <span class="hljs-literal">true</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>但是对于IfSqlNode，就需要先做判断，如果判断通过，仍然会调用子元素的SqlNode，即contents.apply方法，实现递归的解析。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">DynamicContext context</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;<br>contents.apply(context);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="六、模板方法模式"><a href="#六、模板方法模式" class="headerlink" title="六、模板方法模式"></a>六、模板方法模式</h2><p>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。</p><p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。</p><p>模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>其中的BaseExecutor就采用了模板方法模式，它实现了大部分的SQL执行逻辑，然后把以下几个方法交给子类定制化完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> List&lt;BatchResult&gt; <span class="hljs-title">doFlushStatements</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds,</span></span><br><span class="hljs-function"><span class="hljs-params">ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>该模板方法类有几个子类的具体实现，使用了不同的策略：</strong></p><h3 id="1-简单SimpleExecutor"><a href="#1-简单SimpleExecutor" class="headerlink" title="1.简单SimpleExecutor"></a>1.简单SimpleExecutor</h3><p>每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。（可以是Statement或PrepareStatement对象）</p><h3 id="2-重用ReuseExecutor"><a href="#2-重用ReuseExecutor" class="headerlink" title="2.重用ReuseExecutor"></a>2.重用ReuseExecutor</h3><p>执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。（可以是Statement或PrepareStatement对象）</p><h3 id="3-批量BatchExecutor"><a href="#3-批量BatchExecutor" class="headerlink" title="3.批量BatchExecutor"></a>3.批量BatchExecutor</h3><p>执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理的；BatchExecutor相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是Statement或PrepareStatement对象）</p><p><strong>比如在SimpleExecutor中这样实现update方法：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>Statement stmt = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Configuration configuration = ms.getConfiguration();<br>StatementHandler <span class="hljs-keyword">handler</span> = configuration.newStatementHandler(<span class="hljs-keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">null</span>);<br>stmt = prepareStatement(<span class="hljs-keyword">handler</span>, ms.getStatementLog());<br><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">handler</span>.<span class="hljs-title">update</span><span class="hljs-params">(stmt)</span></span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>closeStatement(stmt);<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="七、适配器模式"><a href="#七、适配器模式" class="headerlink" title="七、适配器模式"></a>七、适配器模式</h2><p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6f7fcb8510047b0bc2e09172782ef02~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>在Mybatsi的logging包中，有一个Log接口：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> interface Log &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isDebugEnabled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTraceEnabled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s, Throwable e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>该接口定义了Mybatis直接使用的日志方法，而Log接口具体由谁来实现呢？Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df50a29785f432996b49e42d807ac60~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>比如对于Log4jImpl的实现来说，该实现持有了org.apache.log4j.Logger的实例，然后所有的日志方法，均委托该实例来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4jImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">Log</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> FQCN = Log4jImpl.class.getName();<br><br><span class="hljs-keyword">private</span> Logger log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Log4jImpl</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> clazz</span>)</span> &#123;<br>log = Logger.getLogger(clazz);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isDebugEnabled</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> log.isDebugEnabled();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isTraceEnabled</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> log.isTraceEnabled();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s, Throwable e</span>)</span> &#123;<br>log.log(FQCN, Level.ERROR, s, e);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.ERROR, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">debug</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.DEBUG, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">trace</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.TRACE, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">warn</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.WARN, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="八、装饰者模式"><a href="#八、装饰者模式" class="headerlink" title="八、装饰者模式"></a>八、装饰者模式</h2><p>装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46cf5d22d32b4882b35d19fdce820371~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>在mybatis中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对PerpetualCache永久缓存进行缓存策略等方便的控制。如下图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb8621391df348aab88431138a1d2d30~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>用于装饰PerpetualCache的标准装饰器共有8个（全部在org.apache.ibatis.cache.decorators包中）：</strong></p><h3 id="1-FifoCache："><a href="#1-FifoCache：" class="headerlink" title="1.FifoCache："></a>1.FifoCache：</h3><p>先进先出算法，缓存回收策略</p><h3 id="2-LoggingCache："><a href="#2-LoggingCache：" class="headerlink" title="2.LoggingCache："></a>2.LoggingCache：</h3><p>输出缓存命中的日志信息</p><h3 id="3-LruCache："><a href="#3-LruCache：" class="headerlink" title="3.LruCache："></a>3.LruCache：</h3><p>最近最少使用算法，缓存回收策略</p><h3 id="4-ScheduledCache："><a href="#4-ScheduledCache：" class="headerlink" title="4.ScheduledCache："></a>4.ScheduledCache：</h3><p>调度缓存，负责定时清空缓存</p><h3 id="5-SerializedCache："><a href="#5-SerializedCache：" class="headerlink" title="5.SerializedCache："></a>5.SerializedCache：</h3><p>缓存序列化和反序列化存储</p><h3 id="6-SoftCache："><a href="#6-SoftCache：" class="headerlink" title="6.SoftCache："></a>6.SoftCache：</h3><p>基于软引用实现的缓存管理策略</p><h3 id="7-SynchronizedCache："><a href="#7-SynchronizedCache：" class="headerlink" title="7.SynchronizedCache："></a>7.SynchronizedCache：</h3><p>同步的缓存装饰器，用于防止多线程并发访问</p><h3 id="8-WeakCache："><a href="#8-WeakCache：" class="headerlink" title="8.WeakCache："></a>8.WeakCache：</h3><p><strong>基于弱引用实现的缓存管理策略</strong></p><p>另外，还有一个特殊的装饰器TransactionalCache：事务性的缓存</p><p>正如大多数持久层框架一样，mybatis缓存同样分为一级缓存和二级缓存</p><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1.一级缓存"></a>1.一级缓存</h3><p>又叫本地缓存，是PerpetualCache类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在SqlSession（DefaultSqlSession）中，所以一级缓存的生命周期与SqlSession是相同的。</p><h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2.二级缓存"></a>2.二级缓存</h3><p>又叫自定义缓存，实现了Cache接口的类都可以作为二级缓存，所以可配置如encache等的第三方缓存。二级缓存以namespace名称空间为其唯一标识，被保存在Configuration核心配置对象中。</p><h3 id="3-二级缓存对象"><a href="#3-二级缓存对象" class="headerlink" title="3.二级缓存对象"></a>3.二级缓存对象</h3><p>默认类型为PerpetualCache，如果配置的缓存是默认类型，则mybatis会根据配置自动追加一系列装饰器。</p><p><strong>Cache对象之间的引用顺序为：</strong></p><p>SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p><h2 id="九、迭代器模式"><a href="#九、迭代器模式" class="headerlink" title="九、迭代器模式"></a>九、迭代器模式</h2><p>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1308f1e7c444af9ae7e66110668ccac~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>Java的Iterator就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>比如Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertyTokenizer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">PropertyTokenizer</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> indexedName;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> index;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> children;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PropertyTokenizer</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fullname</span>)</span> &#123;<br>int delim = fullname.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>name = fullname.substring(<span class="hljs-number">0</span>, delim);<br>children = fullname.substring(delim + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>name = fullname;<br>children = <span class="hljs-literal">null</span>;<br>&#125;<br>indexedName = name;<br>delim = name.indexOf(<span class="hljs-string">&#x27;[&#x27;</span>);<br><span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>index = name.substring(delim + <span class="hljs-number">1</span>, name.length() - <span class="hljs-number">1</span>);<br>name = name.substring(<span class="hljs-number">0</span>, delim);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getIndex</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getIndexedName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> indexedName;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getChildren</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> children;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> children != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PropertyTokenizer <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PropertyTokenizer(children);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<br><span class="hljs-string">&quot;Remove is not supported, as it has no meaning in the context of properties.&quot;</span>);<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>可以看到，这个类传入一个字符串到构造函数，然后提供了iterator方法对解析后的子串进行遍历，是一个很常用的方法类。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单点登录（SSO）</title>
    <link href="/blog/2021/01/01/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/"/>
    <url>/blog/2021/01/01/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单点登录又称之为Single Sign On，简称SSO，单点登录可以通过基于用户会话的共享，他分文两种，先来看第一种，那就是他的原理是分布式会话来实现。</p><p>比如说现在有个一级域名为 <a href="http://www.imooc.com/">www.imooc.com</a> ，是教育类网站，但是慕课网有其他的产品线，可以通过构建二级域名提供服务给用户访问，比如： music.imooc.com ， blog.imooc.com 等等，分别为慕课音乐以及慕课博客等，用户只需要在其中一个站点登录，那么其他站点也会随之而登录。</p><p>也就是说，用户自始至终只在某一个网站下登录后，那么他所产生的会话，就共享给了其他的网站，实现了单点网站登录后，同时间接登录了其他的网站，那么这个其实就是单点登录，他们的会话是共享的，都是同一个用户会话。</p><h2 id="Cookie-Redis-实现-SSO"><a href="#Cookie-Redis-实现-SSO" class="headerlink" title="Cookie + Redis 实现 SSO"></a>Cookie + Redis 实现 SSO</h2><p>那么之前我们所实现的分布式会话后端是基于redis的，如此会话可以流窜在后端的任意系统，都能获取到缓存中的用户数据信息，前端通过使用cookie，可以保证在同域名的一级二级下获取，那么这样一来，cookie中的信息userid和token是可以在发送请求的时候携带上的，这样从前端请求后端后是可以获取拿到的，这样一来，其实用户在某一端登录注册以后，其实cookie和redis中都会带有用户信息，只要用户不退出，那么就能在任意一个站点实现登录了。</p><p>那么这个原理主要也是cookie和网站的依赖关系，顶级域名 <a href="http://www.imooc.com/">www.imooc.com</a> 和 *.imooc.com的cookie值是可以共享的，可以被携带至后端的，比如设置为 .imooc.com，.t.mukewang.com，如此是OK的。<br> 二级域名自己的独立cookie是不能共享的，不能被其他二级域名获取，比如：music.imooc.com的cookie是不能被mtv.imooc.com共享，两者互不影响，要共享必须设置为.imooc.com。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/00e2afe7458740a8bec8c2326e3ab6b1~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h2 id="顶级域名不同怎么办"><a href="#顶级域名不同怎么办" class="headerlink" title="顶级域名不同怎么办?"></a>顶级域名不同怎么办?</h2><p>上一节单点登录是基于相同顶级域名做的，那么如果顶级域名都不一样，咋办？比如 <a href="http://www.imooc.com/">www.imooc.com</a> 要和<a href="http://www.mukewang.com/">www.mukewang.com</a> 的会话实现共享，这个时候又该如何？！如下图，这个时候的cookie由于顶级域名不同，就不能实现cookie跨域了，每个站点各自请求到服务端，cookie无法同步。比如，<a href="http://www.imooc.com/">www.imooc.com</a> 下的用户发起请求后会有cookie，但是他又访问了<a href="http://www.abc.com/">www.abc.com</a> ，由于cookie无法携带，所以会要你二次登录。<br> 那么遇到顶级域名不同却又要实现单点登录该如何实现呢？我们来参考下面一张图： <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/668be1732242402a8a8f83534b883774~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>如上图所示，多个系统之间的登录会通过一个独立的登录系统去做验证，它就相当于是一个中介公司，整合了所有人，你要看房经过中介允许拿钥匙就行，实现了统一的登录。那么这个就称之为CAS系统，CAS全称为Central Authentication Service即中央认证服务，是一个单点登录的解决方案，可以用于不同顶级域名之间的单点登录。</p><p>过程解析 <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/fe338ecce616416d868e91c8058ce0e1~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>用户首次登录时流程如下：</p><p>1)、用户浏览器访问系统A需登录受限资源，此时进行登录检查，发现未登录，然后进行获取票据操作，发现没有票据。</p><p>2)、系统A发现该请求需要登录，将请求重定向到认证中心，获取全局票据操作，没有，进行登录。</p><p>3)、认证中心呈现登录页面，用户登录，登录成功后，认证中心重定向请求到系统A，并附上认证通过令牌，此时认证中心同时生成了全局票据。</p><p>4)、此时再次进行登录检查，发现未登录，然后再次获取票据操作，此时可以获得票据(令牌)，系统A与认证中心通信，验证令牌有效,证明用户已登录。</p><p>5)、系统A将受限资源返给用户</p><p>已登录用户首次访问应用群中系统B时：</p><p>1)、浏览器访问另一应用B需登录受限资源，此时进行登录检查，发现未登录，然后进行获取票据操作，发现没有票据。</p><p>2)、系统B发现该请求需要登录，将请求重定向到认证中心，获取全局票据操作，获取全局票据，可以获得，认证中心发现已经登录。</p><p>3)、认证中心发放临时票据(令牌)，并携带该令牌重定向到系统B。</p><p>4)、此时再次进行登录检查，发现未登录，然后再次获取票据操作，此时可以获得票据(令牌)，系统B与认证中心通信，验证令牌有效,证明用户已登录。</p><p>5)、系统B将受限资源返回给客户端。</p><p>全局票据的意义就是判断用户是否已经在认证中心登陆过。<br> 临时票据的意义是签发给用户一个登陆的认证。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SSOController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisOperator redisOperator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TOKEN = <span class="hljs-string">&quot;redis_user_token&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TICKET = <span class="hljs-string">&quot;redis_user_ticket&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_TMP_TICKET = <span class="hljs-string">&quot;redis_tmp_ticket&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COOKIE_USER_TICKET = <span class="hljs-string">&quot;cookie_user_ticket&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String returnUrl,</span></span><br><span class="hljs-function"><span class="hljs-params">                        Model model,</span></span><br><span class="hljs-function"><span class="hljs-params">                        HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                        HttpServletResponse response)</span> </span>&#123;<br><br>        model.addAttribute(<span class="hljs-string">&quot;returnUrl&quot;</span>, returnUrl);<br><br>        <span class="hljs-comment">// 1. 获取userTicket门票，如果cookie中能够获取到，证明用户登录过，此时签发一个一次性的临时票据并且回跳</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br><br>        <span class="hljs-keyword">boolean</span> isVerified = verifyUserTicket(userTicket);<br>        <span class="hljs-keyword">if</span> (isVerified) &#123;<br>            String tmpTicket = createTmpTicket();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + returnUrl + <span class="hljs-string">&quot;?tmpTicket=&quot;</span> + tmpTicket;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 用户从未登录过，第一次进入则跳转到CAS的统一登录页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验CAS全局用户门票</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userTicket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifyUserTicket</span><span class="hljs-params">(String userTicket)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 0. 验证CAS门票不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userTicket)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 验证CAS门票是否有效</span><br>        String userId = redisOperator.get(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userId)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 验证门票对应的user会话是否存在</span><br>        String userRedis = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userRedis)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CAS的统一登录接口</span><br><span class="hljs-comment">     *      目的：</span><br><span class="hljs-comment">     *          1. 登录后创建用户的全局会话                 -&gt;  uniqueToken</span><br><span class="hljs-comment">     *          2. 创建用户全局门票，用以表示在CAS端是否登录  -&gt;  userTicket</span><br><span class="hljs-comment">     *          3. 创建用户的临时票据，用于回跳回传          -&gt;  tmpTicket</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/doLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLogin</span><span class="hljs-params">(String username,</span></span><br><span class="hljs-function"><span class="hljs-params">                          String password,</span></span><br><span class="hljs-function"><span class="hljs-params">                          String returnUrl,</span></span><br><span class="hljs-function"><span class="hljs-params">                          Model model,</span></span><br><span class="hljs-function"><span class="hljs-params">                          HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                          HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        model.addAttribute(<span class="hljs-string">&quot;returnUrl&quot;</span>, returnUrl);<br><br>        <span class="hljs-comment">// 0. 判断用户名和密码必须不为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(username) ||<br>                StringUtils.isBlank(password)) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;errmsg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 实现登录</span><br>        Users userResult = userService.queryUserForLogin(username,<br>                MD5Utils.getMD5Str(password));<br>        <span class="hljs-keyword">if</span> (userResult == <span class="hljs-keyword">null</span>) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;errmsg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 实现用户的redis会话</span><br>        String uniqueToken = UUID.randomUUID().toString().trim();<br>        UsersVO usersVO = <span class="hljs-keyword">new</span> UsersVO();<br>        BeanUtils.copyProperties(userResult, usersVO);<br>        usersVO.setUserUniqueToken(uniqueToken);<br>        redisOperator.set(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userResult.getId(),<br>                JsonUtils.objectToJson(usersVO));<br><br>        <span class="hljs-comment">// 3. 生成ticket门票，全局门票，代表用户在CAS端登录过</span><br>        String userTicket = UUID.randomUUID().toString().trim();<br><br>        <span class="hljs-comment">// 3.1 用户全局门票需要放入CAS端的cookie中</span><br>        setCookie(COOKIE_USER_TICKET, userTicket, response);<br><br>        <span class="hljs-comment">// 4. userTicket关联用户id，并且放入到redis中，代表这个用户有门票了，可以在各个景区游玩</span><br>        redisOperator.set(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket, userResult.getId());<br><br>        <span class="hljs-comment">// 5. 生成临时票据，回跳到调用端网站，是由CAS端所签发的一个一次性的临时ticket</span><br>        String tmpTicket = createTmpTicket();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * userTicket: 用于表示用户在CAS端的一个登录状态：已经登录</span><br><span class="hljs-comment">         * tmpTicket: 用于颁发给用户进行一次性的验证的票据，有时效性</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 举例：</span><br><span class="hljs-comment">         *      我们去动物园玩耍，大门口买了一张统一的门票，这个就是CAS系统的全局门票和用户全局会话。</span><br><span class="hljs-comment">         *      动物园里有一些小的景点，需要凭你的门票去领取一次性的票据，有了这张票据以后就能去一些小的景点游玩了。</span><br><span class="hljs-comment">         *      这样的一个个的小景点其实就是我们这里所对应的一个个的站点。</span><br><span class="hljs-comment">         *      当我们使用完毕这张临时票据以后，就需要销毁。</span><br><span class="hljs-comment">         */</span><br><br><span class="hljs-comment">//        return &quot;login&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + returnUrl + <span class="hljs-string">&quot;?tmpTicket=&quot;</span> + tmpTicket;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/verifyTmpTicket&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IMOOCJSONResult <span class="hljs-title">verifyTmpTicket</span><span class="hljs-params">(String tmpTicket,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 使用一次性临时票据来验证用户是否登录，如果登录过，把用户会话信息返回给站点</span><br>        <span class="hljs-comment">// 使用完毕后，需要销毁临时票据</span><br>        String tmpTicketValue = redisOperator.get(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(tmpTicketValue)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 0. 如果临时票据OK，则需要销毁，并且拿到CAS端cookie中的全局userTicket，以此再获取用户会话</span><br>        <span class="hljs-keyword">if</span> (!tmpTicketValue.equals(MD5Utils.getMD5Str(tmpTicket))) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 销毁临时票据</span><br>            redisOperator.del(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket);<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 验证并且获取用户的userTicket</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br>        String userId = redisOperator.get(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userId)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 验证门票对应的user会话是否存在</span><br>        String userRedis = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userRedis)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 验证成功，返回OK，携带用户会话</span><br>        <span class="hljs-keyword">return</span> IMOOCJSONResult.ok(JsonUtils.jsonToPojo(userRedis, UsersVO.class));<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IMOOCJSONResult <span class="hljs-title">logout</span><span class="hljs-params">(String userId,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 0. 获取CAS中的用户门票</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br><br>        <span class="hljs-comment">// 1. 清除userTicket票据，redis/cookie</span><br>        deleteCookie(COOKIE_USER_TICKET, response);<br>        redisOperator.del(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br><br>        <span class="hljs-comment">// 2. 清除用户全局会话（分布式会话）</span><br>        redisOperator.del(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br><br>        <span class="hljs-keyword">return</span> IMOOCJSONResult.ok();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建临时票据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">createTmpTicket</span><span class="hljs-params">()</span> </span>&#123;<br>        String tmpTicket = UUID.randomUUID().toString().trim();<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisOperator.set(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket,<br>                    MD5Utils.getMD5Str(tmpTicket), <span class="hljs-number">600</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmpTicket;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCookie</span><span class="hljs-params">(String key,</span></span><br><span class="hljs-function"><span class="hljs-params">                           String val,</span></span><br><span class="hljs-function"><span class="hljs-params">                           HttpServletResponse response)</span> </span>&#123;<br><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(key, val);<br>        cookie.setDomain(<span class="hljs-string">&quot;sso.com&quot;</span>);<br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteCookie</span><span class="hljs-params">(String key,</span></span><br><span class="hljs-function"><span class="hljs-params">                              HttpServletResponse response)</span> </span>&#123;<br><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(key, <span class="hljs-keyword">null</span>);<br>        cookie.setDomain(<span class="hljs-string">&quot;sso.com&quot;</span>);<br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        cookie.setMaxAge(-<span class="hljs-number">1</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getCookie</span><span class="hljs-params">(HttpServletRequest request, String key)</span> </span>&#123;<br><br>        Cookie[] cookieList = request.getCookies();<br>        <span class="hljs-keyword">if</span> (cookieList == <span class="hljs-keyword">null</span> || StringUtils.isBlank(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        String cookieValue = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; cookieList.length; i ++) &#123;<br>            <span class="hljs-keyword">if</span> (cookieList[i].getName().equals(key)) &#123;<br>                cookieValue = cookieList[i].getValue();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> cookieValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>单点登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>业务和技术</title>
    <link href="/blog/2020/12/28/%E4%B8%9A%E5%8A%A1%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    <url>/blog/2020/12/28/%E4%B8%9A%E5%8A%A1%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p> 身处业务的我们，技术上如何自拔？</p><p>文章目录概述自我回顾业务与技术的困扰带着问题思考什么是技术和业务业务技术技术和业务的关系业务与为解决业务而衍生的业务对待业务的态度因你在团队的角色不同而不同从所谓的业务代码中跳出如何轻松、漂亮的搞定业务……</p><p>看了网上的学习方法，也综合了一下他人的意见，总结下来，想来自我学习以及自我提升的方式，大抵就是如下三种了</p><ol><li> 从文字视图中学习</li><li> 向身边的人学习</li><li> 向自己学习</li></ol><p>其中向自己学习最为靠谱。</p><p>而向自己学习最有效的方法，就是自省。</p><p>“曾子曰: 吾日三省吾身，为人谋而不忠乎? 与朋友交而不信乎? 传不习乎?”</p><p>“古人诚不我欺”。总结，是自省反馈出来的一种结果。写这篇文章，希望不只是自己能够学到东西，进行成长，也希望能将自己的思考和经验传播出来，与大家共勉。</p><p>从年初到年末，从一个技术人员 仅 3 人的小手游公司到了如今开发团队近 200 人的中大型公司。</p><p>下面从工作和个人成长两个方面进行入手，剖析一下自己。</p><p>工作上，从一个人埋头干活，到主导跨 4，5 个小部门共同协作的技术经理以及现在作为一个小组的 leader，作为员工，如何在业务中继续成长下去以及如何在公司体现出自己的不可替代性（技术和业务上的），也让公司看到你的潜力（你的成长能为公司为团队带来的收益）；作为小组 leader，如何更好的带好自己的小组（这点在后面并没有讲到，明年见）；</p><p>另外，自己技术上的成长。也许我扯一大堆的技术名词，并不是很直观，简单粗暴的讲，就是从一个日流量不到万级的游戏到如今日流量亿级的项目以及其他大大小小高流量项目的开发。</p><p>稍微从技术层面说就是 Java 的单体 SpringBoot 项目发展到基于 Dubbo、SpringBoot 的，使用到分布式事务，分布式锁，分布式数据分片，负载、限流、熔断、降级、链路追踪、elasticsearch、消息队列、缓存 redis、自动化部署、apollo、Sentinel 等一大堆名词和技术搭建的高并发高可用服务化项目；</p><p>凭我这浅薄的知识，至少目前不可能用自己理解的概念来把上面列到的一些知识点的原理来进行讲解，自己对其也只是懂个大概，更不想误人子弟，仅仅讲点自己也似懂非懂的概念。自己目前对其理解的，就是很多开发所处的，调用接口使用的这个层次。原理知识，以后会慢慢道来。余生漫漫，请君勿急。</p><p>篇幅有限，开始想着能写很多，但是思考下来，关于技术和业务就能写一大篇的文字。</p><p>相信很多开发经常会被业务代码所困扰，绝大多数都是有梦想的程序猿，大家都有着一个想使用代码改变世界的梦，当初我选择软件工程这个专业，原因之一就是我觉得我哥使用代码开发一个网站出来是一件牛逼哄哄的事情。</p><p>现在倒是觉得，比如开发一个 GitHub 开源项目的 star 几千上万才是牛逼哄哄的事情了。</p><p>在工作中，天天写业务代码，自己如何在技术上进步？大家是不是也经常心生疑惑，我以前也困扰过（自己的老大在总结中点醒了我，对技术有追求，但是并没有很好的结合业务。自己也好好进行了反省，搜集了很多资料，也询问了另外的大佬，如何更好的处理业务和技术），现在倒是觉得贴合业务更加能够提升打磨自己的技术以及增加自己在公司的不可替代性。</p><p>看到有文章这样比喻业务与技术，写业务代码学习的技术就像游戏中升级打怪一样，开始打小怪，经验值很高，越到后面经验值越少，打小怪已经不能提升经验值了。这个时候就需要打一些更高级的怪，刷一些有挑战的副本了，没看到哪个游戏只要一直打小怪就能升到顶级的。 成为技术大牛的路也是类似的，你要不断的提升自己的水平，然后面临更大的挑战，通过应对这些挑战从而使自己水平更上一级，然后如此往复，最终达到技术大牛甚至业界大牛的境界，写业务代码只是这个打怪升级路上的一个挑战而已。业务代码都写不好的程序员肯定无法成为技术大牛，但只把业务代码写好的程序员也还不能成为技术大牛。对应自己所处的角色，更好的挖掘出自己的潜力与提升实力，创造出更多的价值。</p><p>再说一个现实中的问题，工作都是基于业务来驱动的，国内基本所有公司（抛开研究不讲，广义上来说，所有的技术都是为业务服务的）都是业务来驱动的。 阿里的中间件团队，也是业务驱动而成立的团队（为了解决阿里内部复杂的业务场景、飞速的业务增长、高并发的大促洪峰、层出不穷的稳定性问题而成立的团队），只是做的事情比我们的高大上（高分布式 RPC 服务框架、高可靠分布式消息中间件、分布式数据层、海量数据存储、实时计算、系统性能优化、架构高可用等），后面会介绍到因业务需要而衍生高深技术。</p><h2 id="带着问题思考"><a href="#带着问题思考" class="headerlink" title="带着问题思考"></a>带着问题思考</h2><p>作为开发人员，如何面对 “CRUD，天天写业务代码” 这个事情，可以思考下面的几个问题</p><ol><li> 什么是技术和业务</li><li> 业务和技术的关系</li><li> 业务与为解决业务而衍生的业务</li><li> 对待业务的态度因你在团队的角色不同而不同</li><li> 如何从所谓的业务代码中学习深入</li></ol><h3 id="什么是技术和业务"><a href="#什么是技术和业务" class="headerlink" title="什么是技术和业务"></a>什么是技术和业务</h3><p>接下来就从业务和技术来入手进行分析了。</p><p>回归到这两个词的定义。</p><p>维基百科是这么解释的：</p><h4 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h4><p><strong>业务是指某种有目的的工作或工作项目。</strong> 考虑到企业已经成为现代社会最常见的活动主体，故可为业务作现实定义，即企业运用科学方法和生产工艺生产出可交付用户使用的产品与服务，并以此为企业带来利益的行为。</p><p>不只是为企业，能为人类本身带来利益的需求，都可以称之为业务。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p><strong>技术可以指人类对机器、硬件或人造器皿的运用，但它也可以包含更广的架构，如系统、组织方法学和技巧</strong></p><p>它是知识进化的主体，由社会形塑或形塑社会。如电脑等新技术的增生使人们相信技术是社会进化的决定性力量，换句话说，它是驱动改变的自发性动力。</p><p>通过人为创造条件，让指定的事件能够按照人类的意愿发生，这就是技术。</p><p>比如取火，最早人类只能靠打雷等自然现象产生火。</p><p>取火其实就是一个业务目标，要解决的是人类自己的问题，这就是业务，实际就是人类的利益。这个时候人类并没有生火的技术，只能靠不断的加木材，保持火不熄灭。</p><p>后来人们发现了钻木取火：只要用一个干的木棍，在另一个干木表面快速的转动，就可以生火。这个办法让人类可以自行创造火源，就产生了钻木取火的技术。</p><p>但是双手快速转动木棍钻木取火，并不是所有人都能够做得到的，需要很多力量和速度，对人的要求太高。为了解决快速转动的问题，就有人采用弓弦来提升木棍转动的速度。</p><p>业务目标是为了取火，钻木取火这个技术的出现解决了这个问题。</p><p>钻木取火的效率不高，影响了业务（取火）的效率，就有了进一步改进的动机，改进转动木棍的方式，产生了弓弦转动木棍的技术。</p><p>再用比较现代化的业务来进行说明一下</p><p>比如取款就是一种业务，ATM 机内运转的软件，要解决的业务就是取款。（取款是为了交易，当初交易不方便，于是便有了移动支付，聚合支付等等） 比如买火车票也是业务，12306 这个网站就是为解决买车票的业务服务的。（春运买票不易，于是出现了抢票软件，加速软件等等）</p><p>实现软件 / 网站功能的系统，架构，框架等便是技术（而技术本身又可能是建立在其他技术之上的）。</p><p>从上面的定义以及例子中，可以知道，业务是具有强目的性的，比如说我的业务就是为了取款，而 12306 网站的业务就是为了解决买车票的业务服务，是为某个具体特定的问题而生的；但是业务就具有弱目的性，普遍性和通用性，比如前面实现取款的技术框架，可能在 12306 中的框架还能复用等等。</p><p>技术存在演变，也是为了更方便的服务于业务本身。</p><h3 id="技术和业务的关系"><a href="#技术和业务的关系" class="headerlink" title="技术和业务的关系"></a>技术和业务的关系</h3><p>接下来以取火为例吧。</p><p>前面说到最开始是通过雷电获取火源，接下来是火石、钻木取火，然后渐渐演变到弓弦加速转动木棍取火，随着科技的发展，渐渐的生成火源便成为了一种业务，并且可以出售带来另外的利益，这个时候，生成火柴、打火机便是业务。而其中业务中使用的剧烈氧化还原反应、汽油制作、物理化学知识、工业制作等便是技术。</p><p>简单的可以得出如下几个结论</p><ol><li> 技术是为了解决业务的问题而产生的，没有了业务，技术就没有了存在的前提</li><li> 有了更好的技术，效率更差的技术，就会慢慢的被淘汰，消失，一切都遵从人类的利益诉求 – 也就是业务</li></ol><p>有人会问，不用钻木取火了，但是弓弦加速转动木棍还可以用啊？ 没错，因为弓弦转动木棍这个技术，不是来生火的，是用来加速木棍转动的，所解决的问题不一样（引出了后面因解决业务而衍生出来的业务）。但是多种不同的技术，合理结合起来，会更好更有效率的解决业务问题。</p><p>所以技术与技术之间，有如下的两种关系：</p><ol><li> 在解决同一个业务问题的前提下，更高效，更低成本的技术，会淘汰低效，高成本的技术。这是人类利益诉求所决定的。</li><li> 一般刚开始解决根本问题的技术（钻木取火）的效率是比较低的，只是把不可能变成了可能（从这一点上来说，技术才是业务的 促成者）。然后就会有提高效率的需求出现，要求改进这个技术。这个技术的低效率部分就会被其他人（或者技术发明人自己）加以改进，这部分就会形成新的技术。</li></ol><p>当更好的技术发生的时候，必定会形成一个切分，新技术会通过某种方式和原有的技术连接在一起形成一个整体，让这个新的技术可以和原有技术共同工作，使得原有的技术可以用更高的效率解决问题。因为要解决的主要业务（生火）并没有发生改变，分拆所形成的是一个树状的结构。</p><p>这个时候其实已经产生了架构。也就是说，一般是先有技术，才会有架构。这些其他技术（弓弦拉动木棍、氧化还原反应生火等），是从直接解决问题的初始主要技术中分拆出来形成的，并通过树状结构和主要技术（钻木取火）组合在一起。在解决主要问题（生火）之后，再开始逐渐的分拆为更为细粒度的技术（弓弦转木棍）</p><p>而这个细粒度的技术（弓弦转动木棍）往往不会和业务的主要目标（生火）发生直接的关系。不同的技术，通过树状结构，组合在一起，形成了一个完整的架构解决方案，共同完成业务的目标。这就是技术，业务和架构之间的关系。（分析火柴与打火机原理生成火源类似）</p><p>很多人把这个过程称为架构的进化，我更愿意把这个过程称为技术的进步所导致的新的架构分拆，因为这个过程内在的动力，更多的是来自技术对解决业务问题的解决。</p><p>我们回到开发者身上来看，写业务代码多一些，还是所谓的技术代码多一些，没有高下之分，只有个人取向和组织分工的不同。</p><h3 id="业务与为解决业务而衍生的业务"><a href="#业务与为解决业务而衍生的业务" class="headerlink" title="业务与为解决业务而衍生的业务"></a>业务与为解决业务而衍生的业务</h3><p>打开淘宝首页，随便浏览一个商品详情页面。</p><p>是不是有人会第一眼觉得商品封面，优惠券等相关信息的代码是没有什么技术含量的，因为那些是业务代码。</p><p>是不是觉得写商品页面的框架，分布式架构，分布式缓存，JMQ，Redis 或者说是 等技术才是有技术含量的。</p><p>但实际上，所谓的业务代码和技术代码，它们的区别，仅仅是和业务的距离远近不同而已：业务代码离业务更近，技术代码离业务稍远。它们最终都是指向业务实现的。</p><p>而且，可以考虑换一种视角来看业务，就会发现，其实每一层代码，都服务于它的上一层代码，上一层代码，就是它的业务！</p><p>![](data:;base64,&lt;?xml version=)” alt=”img” data-src=”<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901f02baa8e24b23abc9cf09be674f41~tplv-k3u1fbpfcp-zoom-1.image&quot;">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901f02baa8e24b23abc9cf09be674f41~tplv-k3u1fbpfcp-zoom-1.image&quot;</a> data-width=”800” data-height=”600” /&gt;</p><p>比如详情页架构的第 2 层 “对外提供 API” 中的“商品介绍” ，它的服务对象，就是前端页面，要解决的业务，就是“响应前端页面的查询，提供商品介绍”</p><p>而第 2 层底部的前端数据集群（JIMDB），它的服务对象，就是商品介绍，要解决的业务，就是 “存储商品或代理商品介绍信息”。</p><p>简单说，每一层技术实现，都服务于上一层，都以上一层的需求为业务。 从这个角度讲，现实中的业务在被虚拟化的过程中，会在技术实现层面引发分层，产生中间性、对用户不可见的新业务。</p><p>但是为什么很多开发者又觉得所做的技术实现越接近现实业务越没技术含量呢？</p><p>这是因为，你越接近用户业务：</p><ol><li> 细节越多，繁琐度越高，越不容易做好，越容易因为一点小瑕疵而被否定，让人觉得自己的劳动没价值</li><li> 现实性越强，变化几率越高，越容易来回修改代码，越让人觉得自己的掌控感低下</li><li> 实现的代码可迁移性越差，劳动成果被复用的概率越低</li></ol><p>而当你远离用户业务时：</p><ol><li> 你用到的技术，多数都是被高度抽象过的、用来解决从用户业务衍生出的技术性业务的，它们比具体的用户业务稳定，它们的适用面更广，也更容易被迁移到其它的业务领域</li><li> 你的劳动成果因为具有抽象属性，被复用的概率会更高，你会更愿意打磨它，会更有成就感</li><li> 你受到压力，经过距离用户近的几层同事的传递，得到了衰减，没那么大</li><li> 你打交道的对象，多数时候是内部同事、是技术人群，更容易达成一致</li></ol><h3 id="对待业务的态度因你在团队的角色不同而不同"><a href="#对待业务的态度因你在团队的角色不同而不同" class="headerlink" title="对待业务的态度因你在团队的角色不同而不同"></a>对待业务的态度因你在团队的角色不同而不同</h3><p>你对业务的态度，会因你在团队中承担的角色不同而不同。这是由开发团队的组织结构和职责分工导致的。</p><p>下面是 “团队结构、能力与职责” 图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/7e6220e13c624ca3852ac1cad0528ec2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在一个开发团队中，架构师这个角色，会负责业务拆分和软件架构的工作，并且领导团队来实现满足业务的软件。</p><ul><li>  注 1 ：有的研发团队里有业务架构师和软件架构师两种角色，业务拆分由业务架构师或业务分析师完成。</li><li>  注 2 ：软件架构师和业务架构师这两个角色也可能由没有架构师头衔的研发经理兼任。 架构师一定是要以业务为导向的，要搞懂业务的。所以，在架构师这个阶段，在团队管理者这个阶段，业务的重要性，往往是高于技术的，在他们的眼中，业务统领技术，技术是用来实现业务的。</li></ul><p>当团队完成业务架构和软件架构之后，就会选择不同的开发者来负责不同功能模块的实现。</p><p>负责不同功能模块实现的开发者，必须能够理解业务，并且要熟悉某个技术栈，能够进行模块设计和任务拆分，我称这样的开发者为 “熟练开发者”。</p><p>熟练开发者会承接由架构师分派的子业务，负责模块设计和拆分，把拆分后的小任务，交给普通程序员来完成。</p><p>当你是一个熟练开发者时，业务和技术几乎同等重要，因为：</p><p>你不理解业务，就很难将子业务模块映射到软件实现上，也很难做进一步的业务拆分。</p><p>你不具备完整的技术栈和相应的知识体系，就很难找到合适的技术来实现业务，也很难做软件模块的拆分。</p><p>熟练开发者完成了子业务和软件模块的拆分，会形成一系列的叶子型任务，并把它们分派给具备特定专项技术能力的普通程序员。</p><p>普通程序员要做的事情比较简单，就是接受别人分派的任务，实现特定的业务细节。</p><p>注意当你是一个普通程序员的时候，团队要求你具备一定的专项技术能力，能够完成任务即可，你的角色，就拿把螺丝刀拧螺丝，拧好螺丝就 Ok 。</p><p>这个时候，你内心是痛苦的，对不停地写业务代码是拒绝的，因为你要再找工作时，别的组织看重你的专项技术能力甚于业务能力（他们有人做业务拆分，你过去了能拧螺丝即可），而你在现有组织中，却因为深陷业务代码的编写而无法持续淬炼你的技能能力。</p><p>而开发中普通程序员是占比最大的，所以经常能看到文章或者有人提问纠结写业务代码这件事！</p><p>那么，该如何才能解脱呢？</p><h3 id="从所谓的业务代码中跳出"><a href="#从所谓的业务代码中跳出" class="headerlink" title="从所谓的业务代码中跳出"></a>从所谓的业务代码中跳出</h3><p>首先，很遗憾的告诉各位，这不是一蹴而就的，是一个技术深度和业务层次积累的过程，这需要时间。</p><p>作为一名技术人员，一方面要认识到技术只是用来解决特定问题的工具，所以一定要从问题出发，提出解决方案，而不能一味的追求技术的完美。</p><p>另一方面，也要认识到技术本身也可能成为一项业务，只要它足够通用，能够给其他人、组织提供有价值的解决方案。</p><p>但是，公司业务代码太多，总是 “沉迷业务无法自拔”，如何更好的提升自己，让自己发光发亮，能够提供更多有价值的东西。</p><p>也看到很多文章说的是，需要自己挤出时间出来进行学习，也就是在工作之余进行提升，自己认真的想一想，在业务上真的是无法提升自己吗？ 当我们轻松、漂亮的搞定业务后，能不能再从下面的方面入手进行思考呢。 例如</p><ul><li>  熟悉业务相关的更多业务和代码，不管业务是不是你负责的，不管代码是不是你写的；这样的好处太多，不列举，有兴趣的可以搜索</li><li>  这个业务有没有优化的点；</li><li>  重复代码太多，是不是可以考虑使用设计模式进行优化</li><li>  系统中业务是不是庞大，能不能进行解耦成几个服务或者模块</li><li>  开源框架中的一些功能正好能够用到，可不可以引进</li><li>  代码中性能有没有需要优化的地方</li><li>  在高并发情况下，有没有潜在 Bug</li><li>  能不能使用缓存，减少数据库压力，增加访问性能</li><li>  思考一下这个系统的架构，该系统使用了些什么技术，我还有哪些不知道的</li><li>  系统为什么使用这个技术，为什么使用这种架构</li><li>  下次类似的业务，我能不能抽出相关代码，进行复用，或者直接开发成服务，暴露出来</li><li>  … …</li></ul><p>很多普通程序员天天抱怨老写业务代码没长进，可手上的任务却总是敷衍了事，完成得凑凑合合，甚至还出现频现线上 Bug，那是很难摆重复简单业务任务的泥沼的。</p><h4 id="如何轻松、漂亮的搞定业务"><a href="#如何轻松、漂亮的搞定业务" class="headerlink" title="如何轻松、漂亮的搞定业务"></a>如何轻松、漂亮的搞定业务</h4><p>可以从这四方面进行入手：</p><ol><li> 在深度（研究领域中非常具有代表性的某几个框架的原理链）和广度（开源的框架这么多，至少要认识吧）两个方面提升技术能力（如果当下任务繁重，就利用业余时间练习）</li><li> 把自己的做的事情放在全局理解，提升业务理解能力</li><li> 培养好的工作习惯，比如计划、回顾、总结等</li><li> 做好汇报和展示，让领导知道你的能力</li></ol><p>当你慢慢做了上面 4 点之后，每次拿到任务，都能轻松又漂亮地搞定，超出领导的预期，还有未发挥完的火力，那团队就一定会给你复杂一点的任务。</p><p>如果你还能轻松、漂亮地搞定并且还有余力，那团队就会给你复杂度再高一些的任务。</p><p>往复循环，你就可以跳出最简单的业务代码编写，做越来越重要的事情，你的不可替代性也变得越来越强。</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署到gitee</title>
    <link href="/blog/2020/12/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee/"/>
    <url>/blog/2020/12/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee/</url>
    
    <content type="html"><![CDATA[<p>因为服务器和域名，即将到期，所以准备关闭自建博客，将博客迁移到码云上，用免费的域名和存储。</p><p>首先选择哪个git平台，我尝试了使用github pages，但很难受，我只能在FAN QIANG状态下正常访问，而且速度偏慢，改了hosts也没啥用，而且文章数如果多了起来，更新网站的速度更是慢得不行，所以还是选择国内的一些git平台比较好，比如码云(gitee)，Coding等。</p><p>然后是博客系统的选择，我首先尝试的是Gridea，界面可以，挺好看的，但就是只支持github pages和coding pages，还有个人服务器搭建。github pages不用说，速度慢，我失败了无数次。coding我也试了很多次，实在是找不出问题所在(基本都是连不上的问题，没法解决)。如果想尝试的小伙伴可以去官网看看<a href="https://links.jianshu.com/go?to=https://gridea.dev/">https://gridea.dev/</a>，上面有搭建方法。</p><p>这里我使用的是hexo+gitee。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>首先要下载<a href="https://links.jianshu.com/go?to=http://nodejs.cn/">Node.js</a>，然后安装<a href="https://links.jianshu.com/go?to=https://git-scm.com/downloads">Git</a>，接着注册<a href="https://links.jianshu.com/go?to=https://gitee.com/">码云</a>，最后安装Hexo，Hexo安装命令行(cmd 或 gitbash):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>速度慢可以先改一下安装源:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">npm config <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20201227123923753.png" alt="image-20201227123923753"></p><p>如果遇到上面的情况，就需要进行如下操作，一般在mac才会遇到这种。</p><p>1、vim ~/.bash_profile 编辑文件。</p><p>2、在最后追加下面三行代码。</p><p>alias ll=‘ls -alF’</p><p>alias la=‘ls -A’</p><p>alias l=‘ls -CF’</p><p>3、刷新配置文件，source ~/.bash_profile 。</p><p>后面如果还遇到，直接刷新配置文件即可，和maven在mac所遇到的问题一样，还未找到解决方案。</p><p>在想要存放博客的目录里右键打开控制台，然后输入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>接着生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo g<br></code></pre></td></tr></table></figure><p>然后启动本地服务，查看界面是否生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo s<br></code></pre></td></tr></table></figure><p>将<code>http://localhost:4000</code>复制到浏览器查看，默认主题为<code>landscape</code>。(在下面的每次配置中，对根目录的<code>_config.yml</code>修改后都要重新执行<code>hexo g</code>，同时可以不断刷新本地服务查看效果)</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>这里我选的这一款主题，当然也可以去官网选择，配置方法都差不多。<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a>  这里我用的第二种部署方式。</p><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>创建一个新的文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;测试&#x27;新增文章&quot;</span><br></code></pre></td></tr></table></figure><p>编写就自己用本地编辑器，打开即可。</p><h1 id="配置码云"><a href="#配置码云" class="headerlink" title="配置码云"></a>配置码云</h1><p>打开根目录 _config.yml</p><p>1、修改语言，language: zh-CN。</p><p>2、修改部署到码云的访问地址，</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20201227125538853.png" alt="image-20201227125538853"></p><p>url: <a href="https://gitee.com/cuixiaoyan/blog/">https://gitee.com/cuixiaoyan/blog/</a><br>root: /blog/</p><p>3、码云仓库地址，</p><p>deploy:<br>  type: git<br>  repo: <a href="https://gitee.com/cuixiaoyan/blog.git">https://gitee.com/cuixiaoyan/blog.git</a><br>  branch: master</p><p>4、提交步骤。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span><br>hexo g<br>hexo d<br>然后刷新上方，gitee pages 才行，注意，仓库的地址，和文章的路径是不同的。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
