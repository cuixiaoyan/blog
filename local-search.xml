<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js实现下雪特效</title>
    <link href="/blog/2021/01/06/js%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%AA%E7%89%B9%E6%95%88/"/>
    <url>/blog/2021/01/06/js%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%AA%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>直接上代码 放到你的script 标签中 具体效果参考博客页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)</span>&#123;<br>$.fn.snow = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)</span>&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).html(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-built_in">document</span>).height(),<br>documentWidth= $(<span class="hljs-built_in">document</span>).width(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.extend(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-built_in">Math</span>.random() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-built_in">Math</span>.random(),<br>sizeFlake = options.minSize + <span class="hljs-built_in">Math</span>.random() * options.maxSize,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">5000</span>;<br>$flake.clone().appendTo(<span class="hljs-string">&#x27;body&#x27;</span>).css(&#123;<br>left: startPositionLeft,<br>opacity: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br>color: options.flakeColor<br>&#125;).animate(&#123;<br>top: endPositionTop,<br>left: endPositionLeft,<br>opacity: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>$(<span class="hljs-built_in">this</span>).remove()<br>&#125;);<br>&#125;, options.newOn);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.fn.snow(&#123; <br>    minSize: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    maxSize: <span class="hljs-number">30</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    newOn: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装redis</title>
    <link href="/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85redis/"/>
    <url>/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85redis/</url>
    
    <content type="html"><![CDATA[<p>在CentOS和Red Hat系统中，首先添加EPEL仓库，然后更新yum源：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo yum install epel-<span class="hljs-keyword">release</span><br>sudo yum <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>然后安装Redis数据库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum -y <span class="hljs-keyword">install</span> redis<br></code></pre></td></tr></table></figure><p>安装好后启动Redis服务即可：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo systemctl <span class="hljs-literal">start</span> redis<br></code></pre></td></tr></table></figure><p>这里同样可以使用redis-cli进入Redis命令行模式操作。</p><p>另外，为了可以使Redis能被远程连接，需要修改配置文件，路径为/etc/redis.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>redis.conf<br></code></pre></td></tr></table></figure><p>需要修改的地方： 直接搜索 requirepass</p><p>首先，注释这一行： 另外，推荐给Redis设置密码，取消注释这一行：</p><p>#requirepass foobared</p><p>foobared即当前密码，可以自行修改为 这里我设置成root</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#bind 127.0.0.1</span><br> <br><span class="hljs-attribute">requirepass</span> root <br></code></pre></td></tr></table></figure><p>然后重启Redis服务，使用的命令如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart redis</span><br></code></pre></td></tr></table></figure><p>ps: 其他命令</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gauss">systemctl start redis.service <span class="hljs-meta">#启动redis服务器</span><br> <br>systemctl <span class="hljs-keyword">stop</span> redis.service <span class="hljs-meta">#停止redis服务器</span><br> <br>systemctl restart redis.service <span class="hljs-meta">#重新启动redis服务器</span><br> <br>systemctl status redis.service <span class="hljs-meta">#获取redis服务器的运行状态</span><br> <br>systemctl <span class="hljs-keyword">enable</span> redis.service <span class="hljs-meta">#开机启动redis服务器</span><br> <br>systemctl <span class="hljs-keyword">disable</span> redis.service <span class="hljs-meta">#开机禁用redis服务器</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Nginx</title>
    <link href="/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-是C语言开发的-所以要安装gcc编译器。"><a href="#Nginx-是C语言开发的-所以要安装gcc编译器。" class="headerlink" title="Nginx 是C语言开发的,所以要安装gcc编译器。"></a>Nginx 是C语言开发的,所以要安装gcc编译器。</h1><ol><li>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">yum</span> <span class="hljs-comment">install</span> <span class="hljs-literal">-</span><span class="hljs-comment">y</span> <span class="hljs-comment">gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span>++<br></code></pre></td></tr></table></figure><ol><li>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y pcre pcre-devel<br></code></pre></td></tr></table></figure><p>3.zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum install -y <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel<br></code></pre></td></tr></table></figure><p>4.OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y openssl openssl-devel<br></code></pre></td></tr></table></figure><p>下载nginx 到一个自己创建到文件夹中 随意</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载 wget https:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.13</span>.<span class="hljs-number">0</span>.tar.gz<br>解压 tar -zxvf nginx-<span class="hljs-number">1.10</span>.<span class="hljs-number">1</span>.tar.gz<br>进入 cd nginx-<span class="hljs-number">1.10</span>.<span class="hljs-number">1</span><br>配置 ./configure<br>编译 make<br>安装 make install<br>一次完成也可以 .<span class="hljs-regexp">/configure --prefix=/</span>opt<span class="hljs-regexp">/software/</span>nginx &amp;&amp; make install<br>配置环境变量：（注意是sbin不是bin） <br>echo <span class="hljs-string">&#x27;export PATH=$PATH:/opt/software/nginx/sbin&#x27;</span> &gt; <span class="hljs-regexp">/etc/</span>profile.d/nginx.sh<br></code></pre></td></tr></table></figure><p>环境变量生效 source /etc/profile 查看安装路径 whereis nginx</p><p>前提进入安装路径里面 sbin 目录下 cd /opt/software/nginx/sbin/ 启动 ./nginx 查看进程 ps aux|grep nginx 重启 先停止再启动（推荐）：</p><p>./nginx -s quit ./nginx</p><p>有很多时候只改配置 不用重启了就 当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，即可将配置信息在 nginx 中生效，如下：</p><p>./nginx -s reload</p><p>默认端口为80 不用加 直接外部IP 访问 就能访问到页面</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装mysql5.7</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85mysql/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="先检查系统是否装有mysql"><a href="#先检查系统是否装有mysql" class="headerlink" title="先检查系统是否装有mysql"></a>先检查系统是否装有mysql</h2><p>rpm -qa | grep mysql 这里执行安装命令是无效的，因为centos-7默认是Mariadb，所以执行以下命令只是更新Mariadb数据库 yum install mysql 删除 yum remove mysql</p><h2 id="下载mysql的repo源"><a href="#下载mysql的repo源" class="headerlink" title="下载mysql的repo源"></a>下载mysql的repo源</h2><p>wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></p><h2 id="安装mysql-community-release-el7-5-noarch-rpm包"><a href="#安装mysql-community-release-el7-5-noarch-rpm包" class="headerlink" title="安装mysql-community-release-el7-5.noarch.rpm包"></a>安装mysql-community-release-el7-5.noarch.rpm包</h2><p>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>sudo yum install mysql-server</p><h3 id="这里可能会报错-请注意"><a href="#这里可能会报错-请注意" class="headerlink" title="这里可能会报错 请注意"></a>这里可能会报错 请注意</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Package: mysql-community-libs<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: systemd<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-client<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br> You could try using --skip-broken to work around the problem<br> You could try running: rpm -Va --nofiles --nodigest<br> <br></code></pre></td></tr></table></figure><h3 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h3><p>yum install glibc.i686 yum list libstdc++*</p><p>然后登陆 没有密码直接回车跳过 mysql -u root -p</p><h3 id="登录时有可能报这样的错：ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2-，原因是-var-lib-mysql的访问权限问题。下面的命令把-var-lib-mysql的拥有者改为当前用户："><a href="#登录时有可能报这样的错：ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2-，原因是-var-lib-mysql的访问权限问题。下面的命令把-var-lib-mysql的拥有者改为当前用户：" class="headerlink" title="登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户："></a>登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户：</h3><p>sudo chown -R openscanner:openscanner /var/lib/mysql</p><p>重启mysql service mysqld restart</p><p>这里密码设置的为root</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysql &gt; use mysql;<br>mysql &gt; update user set password=password(<span class="hljs-string">&#x27;root&#x27;</span>) where user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql &gt; <span class="hljs-keyword">exit</span>;<br> <br></code></pre></td></tr></table></figure><p>再重启 登陆mysql 加上远程访问权限 为root添加远程连接的能力。链接密码为 “root”（不包括双引号）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> root@&quot;%&quot; IDENTIFIED <span class="hljs-keyword">BY</span> &quot;root&quot;;　　<br></code></pre></td></tr></table></figure><h1 id="最后最后-非常重要-查询不区分大小写表名"><a href="#最后最后-非常重要-查询不区分大小写表名" class="headerlink" title="最后最后 非常重要 查询不区分大小写表名"></a>最后最后 非常重要 查询不区分大小写表名</h1><p>vim /etc/my.cnf 在[mysqld]节点下，加入一行： lower_case_table_names=1<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190710-151220@2x_1562742772778.png" alt="WX20190710-151220@2x">重启数据库 连接工具测试连接<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/5E7E7FBB-4F4B-4C82-83E0-F98203469C7A_1562742912107.png" alt="5E7E7FBB-4F4B-4C82-83E0-F98203469C7A"></p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装tomcat9</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85tomcat9/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85tomcat9/</url>
    
    <content type="html"><![CDATA[<h2 id="首先检查是否安装好jdk-和配置好运行环境-还有就是名字和路径"><a href="#首先检查是否安装好jdk-和配置好运行环境-还有就是名字和路径" class="headerlink" title="首先检查是否安装好jdk 和配置好运行环境 还有就是名字和路径"></a>首先检查是否安装好jdk 和配置好运行环境 还有就是名字和路径</h2><p>输入命令：Java -version，如果显示JDK版本号，则证明已经安装了JDK。</p><p>输入命令：echo $JAVA_HOME，如果显示路径，则证明配置了环境变量。</p><p>如果没有参考 <a href="http://47.100.236.144:888/archives/centos7-jdk">安装jdk</a> tomcat 下载地址 [tomcat9]( <a href="https://pan.baidu.com/s/171M_rXvsyKNI5jAY8nwd1Q">https://pan.baidu.com/s/171M_rXvsyKNI5jAY8nwd1Q</a> 提取码: 3r8q )</p><ol><li>cd /usr/local/ 进入此目录下面 创建 mkdir tomcat</li><li>进入tomcat 文件夹下面 将云盘安装包放入 解压</li><li>tar -zxvf apache-tomcat-9.0.21.tar.gz</li><li>再进入 cd apache-tomcat-9.0.21/bin/startup.sh 启动tomcat</li><li>启动 /usr/local/tomcat/apache-tomcat-9.0.21/bin/startup.sh</li><li>关闭 /usr/local/tomcat/apache-tomcat-9.0.21/bin/shutdown.sh</li><li>重启 建议 ps -ef | grep tomcat 查询 tomcat 占用的pid</li><li>kill -9 pid 再启动</li><li>ip 加端口能访问到 就成功了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装jdk</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85jdk/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85jdk/</url>
    
    <content type="html"><![CDATA[<p>请注意版本和文件名 是否一致 按照你的地址来!</p><ol><li>先进入 cd /usr/local/</li><li>创建一个放jdk的文件夹 mkdir java</li><li>进入 cd java</li><li>通过工具 finalshell 直接把安装包放到Java文件夹下</li><li>tar -zxv -f jdk-8u211-linux-x64.tar.gz 解压出来 [jdk 下载地址](链接: <a href="https://pan.baidu.com/s/1KjBBvHRxj4QHWkAnsIQGbQ">https://pan.baidu.com/s/1KjBBvHRxj4QHWkAnsIQGbQ</a> 提取码: n1bp 复制这段内容后打开百度网盘手机App，操作更方便哦)</li></ol><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1562571285905_1562571317802.jpg" alt="1562571285905"></p><h2 id="上面步骤已经安装完成了-下面配置环境变量"><a href="#上面步骤已经安装完成了-下面配置环境变量" class="headerlink" title="上面步骤已经安装完成了 下面配置环境变量"></a>上面步骤已经安装完成了 下面配置环境变量</h2><p>vim /etc/profile 打开之后按键盘【i】键进入编辑模式，将下面的内容复制到底部：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_211<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext:$JAVA_HOME/</span>lib/tools.jar<br>export PATH JAVA_HOME CLASSPATH<br> <br></code></pre></td></tr></table></figure><p>配置完成后，最重要的一步就是使文件立即生效。命令如下： source /etc/profile</p><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>java -version echo $JAVA_HOME<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190708-154036@2x_1562571647150.png" alt="WX20190708-154036@2x">说明安装成功，环境变量也配置成功！</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器</title>
    <link href="/blog/2021/01/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/blog/2021/01/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>24岁以下自动获取学生身份 所以入手一年用来部署自己的博客和项目 经过比较几个大厂的vps 推荐阿里云 <a href="https://promotion.aliyun.com/ntms/act/campus2018.html">购买地址</a></p><p>这里我买的是第二款<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-140757@2x_1562479700993.png" alt="WX20190707-140757@2x">购买完成之后在控制台 查看自己的ECS 云服务器<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141000@2x_1562479814153.png" alt="WX20190707-141000@2x">在网络与安全中 安全组 配置 下面还需要添加安全组 用来后面在外部访问各种端口 这里我比较懒 就直接将全部端口开放 当然这是不太安全的<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141206@2x_1562480012754.png" alt="WX20190707-141206@2x"></p><p>再回到实例 加入安全组<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141549@2x_1562480182400.png" alt="WX20190707-141549@2x"></p><p>最后用远程连接工具连接上之后 就开始云服务之旅啦</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis经典9种设计模式</title>
    <link href="/blog/2021/01/04/Mybatis%E7%BB%8F%E5%85%B89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/01/04/Mybatis%E7%BB%8F%E5%85%B89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。</p><h2 id="Mybatis至少遇到了以下的设计模式的使用"><a href="#Mybatis至少遇到了以下的设计模式的使用" class="headerlink" title="Mybatis至少遇到了以下的设计模式的使用"></a>Mybatis至少遇到了以下的设计模式的使用</h2><h2 id="1、Builder模式"><a href="#1、Builder模式" class="headerlink" title="1、Builder模式"></a>1、Builder模式</h2><p>例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder。</p><h2 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h2><p>例如SqlSessionFactory、ObjectFactory、MapperProxyFactory。</p><h2 id="3、单例模式"><a href="#3、单例模式" class="headerlink" title="3、单例模式"></a>3、单例模式</h2><p>例如ErrorContext和LogFactory。</p><h2 id="4、代理模式"><a href="#4、代理模式" class="headerlink" title="4、代理模式"></a>4、代理模式</h2><p>Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果。</p><h2 id="5、组合模式"><a href="#5、组合模式" class="headerlink" title="5、组合模式"></a>5、组合模式</h2><p>例如SqlNode和各个子类ChooseSqlNode等。</p><h2 id="6、模板方法模式"><a href="#6、模板方法模式" class="headerlink" title="6、模板方法模式"></a>6、模板方法模式</h2><p>例如BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler。</p><h2 id="7、适配器模式"><a href="#7、适配器模式" class="headerlink" title="7、适配器模式"></a>7、适配器模式</h2><p>例如Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现。</p><h2 id="8、装饰者模式"><a href="#8、装饰者模式" class="headerlink" title="8、装饰者模式"></a>8、装饰者模式</h2><p>例如Cache包中的cache.decorators子包中等各个装饰者的实现。</p><h2 id="9、迭代器模式"><a href="#9、迭代器模式" class="headerlink" title="9、迭代器模式"></a>9、迭代器模式</h2><p>例如迭代器模式PropertyTokenizer。</p><p><strong>接下来挨个模式进行解读，先介绍模式自身的知识，然后解读在Mybatis中怎样应用了该模式。</strong></p><h2 id="一、Builder模式"><a href="#一、Builder模式" class="headerlink" title="一、Builder模式"></a>一、Builder模式</h2><p>Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis环境的初始化过程中，SqlSessionFactoryBuilder会调用XMLConfigBuilder读取所有的MybatisMapConfig.xml和所有的Mapper.xml文件，构建Mybatis运行的核心对象Configuration对象，然后将该Configuration对象作为参数构建一个SqlSessionFactory对象。</p><p>其中XMLConfigBuilder在构建Configuration对象时，也会调用XMLMapperBuilder用于读取*Mapper文件，而XMLMapperBuilder会使用XMLStatementBuilder来读取和build所有的SQL语句。</p><p>在这个过程中，有一个相似的特点，就是这些Builder会读取文件或者配置，然后做大量的XpathParser解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。</p><p><strong>对于builder的具体类，方法都大都用build*开头，比如SqlSessionFactoryBuilder为例，它包含以下方法：</strong></p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>即根据不同的输入参数来构建SqlSessionFactory这个工厂对象。</p><h2 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h2><p>在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</p><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>SqlSession可以认为是一个Mybatis工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。</p><p><strong>在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,<br><span class="hljs-keyword">boolean</span> autoCommit) &#123;<br>Transaction tx = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">final</span> Environment environment = configuration.getEnvironment();<br><span class="hljs-keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br>tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br><span class="hljs-keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>closeTransaction(tx); <span class="hljs-comment">// may have fetched a connection so lets call</span><br><span class="hljs-comment">// close()</span><br><span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>ErrorContext.instance().reset();<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。</p><p>在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。</p><p><strong>而对于LogFactory，它的实现代码：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> final <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Constructor&lt;? <span class="hljs-keyword">extends</span> Log&gt; logConstructor;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">LogFactory</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-comment">// disable construction</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-function"><span class="hljs-title">getLog</span>(<span class="hljs-params">Class&lt;?&gt; aClass</span>)</span> &#123;<br><span class="hljs-keyword">return</span> getLog(aClass.getName());<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>这里有个特别的地方，是Log变量的的类型是Constructor&lt;? extends Log&gt;，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。</p><h2 id="三、单例模式"><a href="#三、单例模式" class="headerlink" title="三、单例模式"></a>三、单例模式</h2><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。</p><p><strong>ErrorContext的单例实现代码：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ErrorContext</span> &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">ErrorContext</span>&gt; LOCAL</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;ErrorContext&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ErrorContext</span>(<span class="hljs-params"></span>)</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ErrorContext <span class="hljs-title">instance</span>(<span class="hljs-params"></span>)</span> &#123;<br>ErrorContext context = LOCAL.<span class="hljs-keyword">get</span>();<br><span class="hljs-keyword">if</span> (context == <span class="hljs-literal">null</span>) &#123;<br>context = <span class="hljs-keyword">new</span> ErrorContext();<br>LOCAL.<span class="hljs-keyword">set</span>(context);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>构造函数是private修饰，具有一个static的局部instance变量和一个获取instance变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。</p><p>只是这里有个有趣的地方是，LOCAL的静态实例变量使用了ThreadLocal修饰，也就是说它属于每个线程各自的数据，而在instance()方法中，先获取本线程的该实例，如果没有就创建该线程独有的ErrorContext。</p><h2 id="四、代理模式"><a href="#四、代理模式" class="headerlink" title="四、代理模式"></a>四、代理模式</h2><p>代理模式可以认为是Mybatis的核心使用的模式，正是由于这个模式，我们只需要编写Mapper.java接口，不需要实现，由Mybatis后台帮我们完成具体SQL的执行。</p><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p><p><strong>代理模式包含如下角色：</strong></p><h3 id="1-Subject"><a href="#1-Subject" class="headerlink" title="1.Subject:"></a>1.Subject:</h3><p>抽象主题角色</p><h3 id="2-Proxy"><a href="#2-Proxy" class="headerlink" title="2.Proxy:"></a>2.Proxy:</h3><p>代理主题角色</p><h3 id="3-RealSubject"><a href="#3-RealSubject" class="headerlink" title="3.RealSubject:"></a>3.RealSubject:</h3><p>真实主题角色</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务； 当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author </span>Lasse Voss</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxyFactory</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> final Class&lt;T&gt; mapperInterface;<br><span class="hljs-keyword">private</span> final <span class="hljs-built_in">Map</span>&lt;Method, MapperMethod&gt; methodCache = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;Method, MapperMethod&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">MapperProxyFactory</span>(<span class="hljs-params">Class&lt;T&gt; mapperInterface</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.mapperInterface = mapperInterface;<br>&#125;<br><br><span class="hljs-keyword">public</span> Class&lt;T&gt; <span class="hljs-function"><span class="hljs-title">getMapperInterface</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> mapperInterface;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;Method, MapperMethod&gt; <span class="hljs-function"><span class="hljs-title">getMethodCache</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> methodCache;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">&quot;unchecked&quot;</span>)<br><span class="hljs-keyword">protected</span> T <span class="hljs-function"><span class="hljs-title">newInstance</span>(<span class="hljs-params">MapperProxy&lt;T&gt; mapperProxy</span>)</span> &#123;<br><span class="hljs-keyword">return</span> (T) <span class="hljs-built_in">Proxy</span>.newProxyInstance(mapperInterface.getClassLoader(), <span class="hljs-keyword">new</span> Class[] &#123; mapperInterface &#125;,<br>mapperProxy);<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-function"><span class="hljs-title">newInstance</span>(<span class="hljs-params">SqlSession sqlSession</span>)</span> &#123;<br>final MapperProxy&lt;T&gt; mapperProxy = <span class="hljs-keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);<br><span class="hljs-keyword">return</span> newInstance(mapperProxy);<br>&#125;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>在这里，先通过T newInstance(SqlSession sqlSession)方法会得到一个MapperProxy对象，然后调用T newInstance(MapperProxymapperProxy)生成代理对象然后返回。</p><p><strong>而查看MapperProxy的代码，可以看到如下内容：</strong></p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxy</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span>, <span class="hljs-title">Serializable</span> &#123;</span><br><br>@Override<br><span class="hljs-keyword">public</span> Object invoke(Object proxy, <span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">method</span>, <span class="hljs-title">Object</span>[] <span class="hljs-title">args</span>) <span class="hljs-title">throws</span> <span class="hljs-title">Throwable</span> &#123;</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br><span class="hljs-keyword">return</span> method.invoke(this, args);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDefaultMethod(<span class="hljs-function"><span class="hljs-keyword">method</span>)) &#123;</span><br><span class="hljs-keyword">return</span> invokeDefaultMethod(proxy, <span class="hljs-function"><span class="hljs-keyword">method</span>, <span class="hljs-title">args</span>);</span><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br><span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>&#125;<br><span class="hljs-keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(<span class="hljs-function"><span class="hljs-keyword">method</span>);</span><br><span class="hljs-keyword">return</span> mapperMethod.execute(sqlSession, args);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>非常典型的，该MapperProxy类实现了InvocationHandler接口，并且实现了该接口的invoke方法。</p><p>通过这种方式，我们只需要编写Mapper.java接口类，当真正执行一个Mapper接口的时候，就会转发给MapperProxy.invoke方法，而该方法则会调用后续的sqlSession.cud&gt;executor.execute&gt;prepareStatement等一系列方法，完成SQL的执行和返回。</p><h2 id="五、组合模式"><a href="#五、组合模式" class="headerlink" title="五、组合模式"></a>五、组合模式</h2><p>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。</p><p>组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。</p><p>在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fce4762c12a74809aacc0143f05a2ce7~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>Mybatis支持动态SQL的强大功能，比如下面的这个SQL：</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;org.format.dynamicproxy.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="xml">    UPDATE users</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            , age = #</span><span class="hljs-template-variable">&#123;age&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;birthday != null and birthday != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            , birthday = #</span><span class="hljs-template-variable">&#123;birthday&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">    where id = $</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br><span class="xml">复制代码</span><br></code></pre></td></tr></table></figure><p>在这里面使用到了trim、if等动态元素，可以根据条件来生成不同情况下的SQL；</p><p>在DynamicSqlSource.getBoundSql方法里，调用了rootSqlNode.apply(context)方法，apply方法是所有的动态节点都实现的接口：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SqlNode</span> &#123;<br><span class="hljs-built_in">bool</span>ean apply(DynamicContext context);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>对于实现该SqlSource接口的所有节点，就是整个组合模式树的各个节点：</strong></p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于TextSqlNode，因为它是最底层的叶子节点，所以直接将对应的内容append到SQL语句中：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public boolean apply(DynamicContext context) &#123;<br>GenericTokenParser parser = create<span class="hljs-constructor">Parser(<span class="hljs-params">new</span> BindingTokenParser(<span class="hljs-params">context</span>, <span class="hljs-params">injectionFilter</span>)</span>);<br>context.append<span class="hljs-constructor">Sql(<span class="hljs-params">parser</span>.<span class="hljs-params">parse</span>(<span class="hljs-params">text</span>)</span>);<br>return <span class="hljs-literal">true</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>但是对于IfSqlNode，就需要先做判断，如果判断通过，仍然会调用子元素的SqlNode，即contents.apply方法，实现递归的解析。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">DynamicContext context</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;<br>contents.apply(context);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="六、模板方法模式"><a href="#六、模板方法模式" class="headerlink" title="六、模板方法模式"></a>六、模板方法模式</h2><p>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。</p><p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。</p><p>模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>其中的BaseExecutor就采用了模板方法模式，它实现了大部分的SQL执行逻辑，然后把以下几个方法交给子类定制化完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> List&lt;BatchResult&gt; <span class="hljs-title">doFlushStatements</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds,</span></span><br><span class="hljs-function"><span class="hljs-params">ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>该模板方法类有几个子类的具体实现，使用了不同的策略：</strong></p><h3 id="1-简单SimpleExecutor"><a href="#1-简单SimpleExecutor" class="headerlink" title="1.简单SimpleExecutor"></a>1.简单SimpleExecutor</h3><p>每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。（可以是Statement或PrepareStatement对象）</p><h3 id="2-重用ReuseExecutor"><a href="#2-重用ReuseExecutor" class="headerlink" title="2.重用ReuseExecutor"></a>2.重用ReuseExecutor</h3><p>执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。（可以是Statement或PrepareStatement对象）</p><h3 id="3-批量BatchExecutor"><a href="#3-批量BatchExecutor" class="headerlink" title="3.批量BatchExecutor"></a>3.批量BatchExecutor</h3><p>执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理的；BatchExecutor相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是Statement或PrepareStatement对象）</p><p><strong>比如在SimpleExecutor中这样实现update方法：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>Statement stmt = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Configuration configuration = ms.getConfiguration();<br>StatementHandler <span class="hljs-keyword">handler</span> = configuration.newStatementHandler(<span class="hljs-keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">null</span>);<br>stmt = prepareStatement(<span class="hljs-keyword">handler</span>, ms.getStatementLog());<br><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">handler</span>.<span class="hljs-title">update</span><span class="hljs-params">(stmt)</span></span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>closeStatement(stmt);<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="七、适配器模式"><a href="#七、适配器模式" class="headerlink" title="七、适配器模式"></a>七、适配器模式</h2><p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6f7fcb8510047b0bc2e09172782ef02~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>在Mybatsi的logging包中，有一个Log接口：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> interface Log &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isDebugEnabled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTraceEnabled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s, Throwable e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>该接口定义了Mybatis直接使用的日志方法，而Log接口具体由谁来实现呢？Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df50a29785f432996b49e42d807ac60~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>比如对于Log4jImpl的实现来说，该实现持有了org.apache.log4j.Logger的实例，然后所有的日志方法，均委托该实例来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4jImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">Log</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> FQCN = Log4jImpl.class.getName();<br><br><span class="hljs-keyword">private</span> Logger log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Log4jImpl</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> clazz</span>)</span> &#123;<br>log = Logger.getLogger(clazz);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isDebugEnabled</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> log.isDebugEnabled();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isTraceEnabled</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> log.isTraceEnabled();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s, Throwable e</span>)</span> &#123;<br>log.log(FQCN, Level.ERROR, s, e);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.ERROR, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">debug</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.DEBUG, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">trace</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.TRACE, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">warn</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.WARN, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="八、装饰者模式"><a href="#八、装饰者模式" class="headerlink" title="八、装饰者模式"></a>八、装饰者模式</h2><p>装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46cf5d22d32b4882b35d19fdce820371~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>在mybatis中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对PerpetualCache永久缓存进行缓存策略等方便的控制。如下图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb8621391df348aab88431138a1d2d30~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>用于装饰PerpetualCache的标准装饰器共有8个（全部在org.apache.ibatis.cache.decorators包中）：</strong></p><h3 id="1-FifoCache："><a href="#1-FifoCache：" class="headerlink" title="1.FifoCache："></a>1.FifoCache：</h3><p>先进先出算法，缓存回收策略</p><h3 id="2-LoggingCache："><a href="#2-LoggingCache：" class="headerlink" title="2.LoggingCache："></a>2.LoggingCache：</h3><p>输出缓存命中的日志信息</p><h3 id="3-LruCache："><a href="#3-LruCache：" class="headerlink" title="3.LruCache："></a>3.LruCache：</h3><p>最近最少使用算法，缓存回收策略</p><h3 id="4-ScheduledCache："><a href="#4-ScheduledCache：" class="headerlink" title="4.ScheduledCache："></a>4.ScheduledCache：</h3><p>调度缓存，负责定时清空缓存</p><h3 id="5-SerializedCache："><a href="#5-SerializedCache：" class="headerlink" title="5.SerializedCache："></a>5.SerializedCache：</h3><p>缓存序列化和反序列化存储</p><h3 id="6-SoftCache："><a href="#6-SoftCache：" class="headerlink" title="6.SoftCache："></a>6.SoftCache：</h3><p>基于软引用实现的缓存管理策略</p><h3 id="7-SynchronizedCache："><a href="#7-SynchronizedCache：" class="headerlink" title="7.SynchronizedCache："></a>7.SynchronizedCache：</h3><p>同步的缓存装饰器，用于防止多线程并发访问</p><h3 id="8-WeakCache："><a href="#8-WeakCache：" class="headerlink" title="8.WeakCache："></a>8.WeakCache：</h3><p><strong>基于弱引用实现的缓存管理策略</strong></p><p>另外，还有一个特殊的装饰器TransactionalCache：事务性的缓存</p><p>正如大多数持久层框架一样，mybatis缓存同样分为一级缓存和二级缓存</p><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1.一级缓存"></a>1.一级缓存</h3><p>又叫本地缓存，是PerpetualCache类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在SqlSession（DefaultSqlSession）中，所以一级缓存的生命周期与SqlSession是相同的。</p><h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2.二级缓存"></a>2.二级缓存</h3><p>又叫自定义缓存，实现了Cache接口的类都可以作为二级缓存，所以可配置如encache等的第三方缓存。二级缓存以namespace名称空间为其唯一标识，被保存在Configuration核心配置对象中。</p><h3 id="3-二级缓存对象"><a href="#3-二级缓存对象" class="headerlink" title="3.二级缓存对象"></a>3.二级缓存对象</h3><p>默认类型为PerpetualCache，如果配置的缓存是默认类型，则mybatis会根据配置自动追加一系列装饰器。</p><p><strong>Cache对象之间的引用顺序为：</strong></p><p>SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p><h2 id="九、迭代器模式"><a href="#九、迭代器模式" class="headerlink" title="九、迭代器模式"></a>九、迭代器模式</h2><p>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1308f1e7c444af9ae7e66110668ccac~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>Java的Iterator就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>比如Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertyTokenizer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">PropertyTokenizer</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> indexedName;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> index;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> children;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PropertyTokenizer</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fullname</span>)</span> &#123;<br>int delim = fullname.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>name = fullname.substring(<span class="hljs-number">0</span>, delim);<br>children = fullname.substring(delim + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>name = fullname;<br>children = <span class="hljs-literal">null</span>;<br>&#125;<br>indexedName = name;<br>delim = name.indexOf(<span class="hljs-string">&#x27;[&#x27;</span>);<br><span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>index = name.substring(delim + <span class="hljs-number">1</span>, name.length() - <span class="hljs-number">1</span>);<br>name = name.substring(<span class="hljs-number">0</span>, delim);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getIndex</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getIndexedName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> indexedName;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getChildren</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> children;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> children != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PropertyTokenizer <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PropertyTokenizer(children);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<br><span class="hljs-string">&quot;Remove is not supported, as it has no meaning in the context of properties.&quot;</span>);<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>可以看到，这个类传入一个字符串到构造函数，然后提供了iterator方法对解析后的子串进行遍历，是一个很常用的方法类。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单点登录（SSO）</title>
    <link href="/blog/2021/01/01/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/"/>
    <url>/blog/2021/01/01/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单点登录又称之为Single Sign On，简称SSO，单点登录可以通过基于用户会话的共享，他分文两种，先来看第一种，那就是他的原理是分布式会话来实现。</p><p>比如说现在有个一级域名为 <a href="http://www.imooc.com/">www.imooc.com</a> ，是教育类网站，但是慕课网有其他的产品线，可以通过构建二级域名提供服务给用户访问，比如： music.imooc.com ， blog.imooc.com 等等，分别为慕课音乐以及慕课博客等，用户只需要在其中一个站点登录，那么其他站点也会随之而登录。</p><p>也就是说，用户自始至终只在某一个网站下登录后，那么他所产生的会话，就共享给了其他的网站，实现了单点网站登录后，同时间接登录了其他的网站，那么这个其实就是单点登录，他们的会话是共享的，都是同一个用户会话。</p><h2 id="Cookie-Redis-实现-SSO"><a href="#Cookie-Redis-实现-SSO" class="headerlink" title="Cookie + Redis 实现 SSO"></a>Cookie + Redis 实现 SSO</h2><p>那么之前我们所实现的分布式会话后端是基于redis的，如此会话可以流窜在后端的任意系统，都能获取到缓存中的用户数据信息，前端通过使用cookie，可以保证在同域名的一级二级下获取，那么这样一来，cookie中的信息userid和token是可以在发送请求的时候携带上的，这样从前端请求后端后是可以获取拿到的，这样一来，其实用户在某一端登录注册以后，其实cookie和redis中都会带有用户信息，只要用户不退出，那么就能在任意一个站点实现登录了。</p><p>那么这个原理主要也是cookie和网站的依赖关系，顶级域名 <a href="http://www.imooc.com/">www.imooc.com</a> 和 *.imooc.com的cookie值是可以共享的，可以被携带至后端的，比如设置为 .imooc.com，.t.mukewang.com，如此是OK的。<br> 二级域名自己的独立cookie是不能共享的，不能被其他二级域名获取，比如：music.imooc.com的cookie是不能被mtv.imooc.com共享，两者互不影响，要共享必须设置为.imooc.com。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/00e2afe7458740a8bec8c2326e3ab6b1~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h2 id="顶级域名不同怎么办"><a href="#顶级域名不同怎么办" class="headerlink" title="顶级域名不同怎么办?"></a>顶级域名不同怎么办?</h2><p>上一节单点登录是基于相同顶级域名做的，那么如果顶级域名都不一样，咋办？比如 <a href="http://www.imooc.com/">www.imooc.com</a> 要和<a href="http://www.mukewang.com/">www.mukewang.com</a> 的会话实现共享，这个时候又该如何？！如下图，这个时候的cookie由于顶级域名不同，就不能实现cookie跨域了，每个站点各自请求到服务端，cookie无法同步。比如，<a href="http://www.imooc.com/">www.imooc.com</a> 下的用户发起请求后会有cookie，但是他又访问了<a href="http://www.abc.com/">www.abc.com</a> ，由于cookie无法携带，所以会要你二次登录。<br> 那么遇到顶级域名不同却又要实现单点登录该如何实现呢？我们来参考下面一张图： <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/668be1732242402a8a8f83534b883774~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>如上图所示，多个系统之间的登录会通过一个独立的登录系统去做验证，它就相当于是一个中介公司，整合了所有人，你要看房经过中介允许拿钥匙就行，实现了统一的登录。那么这个就称之为CAS系统，CAS全称为Central Authentication Service即中央认证服务，是一个单点登录的解决方案，可以用于不同顶级域名之间的单点登录。</p><p>过程解析 <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/fe338ecce616416d868e91c8058ce0e1~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>用户首次登录时流程如下：</p><p>1)、用户浏览器访问系统A需登录受限资源，此时进行登录检查，发现未登录，然后进行获取票据操作，发现没有票据。</p><p>2)、系统A发现该请求需要登录，将请求重定向到认证中心，获取全局票据操作，没有，进行登录。</p><p>3)、认证中心呈现登录页面，用户登录，登录成功后，认证中心重定向请求到系统A，并附上认证通过令牌，此时认证中心同时生成了全局票据。</p><p>4)、此时再次进行登录检查，发现未登录，然后再次获取票据操作，此时可以获得票据(令牌)，系统A与认证中心通信，验证令牌有效,证明用户已登录。</p><p>5)、系统A将受限资源返给用户</p><p>已登录用户首次访问应用群中系统B时：</p><p>1)、浏览器访问另一应用B需登录受限资源，此时进行登录检查，发现未登录，然后进行获取票据操作，发现没有票据。</p><p>2)、系统B发现该请求需要登录，将请求重定向到认证中心，获取全局票据操作，获取全局票据，可以获得，认证中心发现已经登录。</p><p>3)、认证中心发放临时票据(令牌)，并携带该令牌重定向到系统B。</p><p>4)、此时再次进行登录检查，发现未登录，然后再次获取票据操作，此时可以获得票据(令牌)，系统B与认证中心通信，验证令牌有效,证明用户已登录。</p><p>5)、系统B将受限资源返回给客户端。</p><p>全局票据的意义就是判断用户是否已经在认证中心登陆过。<br> 临时票据的意义是签发给用户一个登陆的认证。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SSOController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisOperator redisOperator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TOKEN = <span class="hljs-string">&quot;redis_user_token&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TICKET = <span class="hljs-string">&quot;redis_user_ticket&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_TMP_TICKET = <span class="hljs-string">&quot;redis_tmp_ticket&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COOKIE_USER_TICKET = <span class="hljs-string">&quot;cookie_user_ticket&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String returnUrl,</span></span><br><span class="hljs-function"><span class="hljs-params">                        Model model,</span></span><br><span class="hljs-function"><span class="hljs-params">                        HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                        HttpServletResponse response)</span> </span>&#123;<br><br>        model.addAttribute(<span class="hljs-string">&quot;returnUrl&quot;</span>, returnUrl);<br><br>        <span class="hljs-comment">// 1. 获取userTicket门票，如果cookie中能够获取到，证明用户登录过，此时签发一个一次性的临时票据并且回跳</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br><br>        <span class="hljs-keyword">boolean</span> isVerified = verifyUserTicket(userTicket);<br>        <span class="hljs-keyword">if</span> (isVerified) &#123;<br>            String tmpTicket = createTmpTicket();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + returnUrl + <span class="hljs-string">&quot;?tmpTicket=&quot;</span> + tmpTicket;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 用户从未登录过，第一次进入则跳转到CAS的统一登录页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验CAS全局用户门票</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userTicket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifyUserTicket</span><span class="hljs-params">(String userTicket)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 0. 验证CAS门票不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userTicket)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 验证CAS门票是否有效</span><br>        String userId = redisOperator.get(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userId)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 验证门票对应的user会话是否存在</span><br>        String userRedis = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userRedis)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CAS的统一登录接口</span><br><span class="hljs-comment">     *      目的：</span><br><span class="hljs-comment">     *          1. 登录后创建用户的全局会话                 -&gt;  uniqueToken</span><br><span class="hljs-comment">     *          2. 创建用户全局门票，用以表示在CAS端是否登录  -&gt;  userTicket</span><br><span class="hljs-comment">     *          3. 创建用户的临时票据，用于回跳回传          -&gt;  tmpTicket</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/doLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLogin</span><span class="hljs-params">(String username,</span></span><br><span class="hljs-function"><span class="hljs-params">                          String password,</span></span><br><span class="hljs-function"><span class="hljs-params">                          String returnUrl,</span></span><br><span class="hljs-function"><span class="hljs-params">                          Model model,</span></span><br><span class="hljs-function"><span class="hljs-params">                          HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                          HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        model.addAttribute(<span class="hljs-string">&quot;returnUrl&quot;</span>, returnUrl);<br><br>        <span class="hljs-comment">// 0. 判断用户名和密码必须不为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(username) ||<br>                StringUtils.isBlank(password)) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;errmsg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 实现登录</span><br>        Users userResult = userService.queryUserForLogin(username,<br>                MD5Utils.getMD5Str(password));<br>        <span class="hljs-keyword">if</span> (userResult == <span class="hljs-keyword">null</span>) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;errmsg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 实现用户的redis会话</span><br>        String uniqueToken = UUID.randomUUID().toString().trim();<br>        UsersVO usersVO = <span class="hljs-keyword">new</span> UsersVO();<br>        BeanUtils.copyProperties(userResult, usersVO);<br>        usersVO.setUserUniqueToken(uniqueToken);<br>        redisOperator.set(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userResult.getId(),<br>                JsonUtils.objectToJson(usersVO));<br><br>        <span class="hljs-comment">// 3. 生成ticket门票，全局门票，代表用户在CAS端登录过</span><br>        String userTicket = UUID.randomUUID().toString().trim();<br><br>        <span class="hljs-comment">// 3.1 用户全局门票需要放入CAS端的cookie中</span><br>        setCookie(COOKIE_USER_TICKET, userTicket, response);<br><br>        <span class="hljs-comment">// 4. userTicket关联用户id，并且放入到redis中，代表这个用户有门票了，可以在各个景区游玩</span><br>        redisOperator.set(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket, userResult.getId());<br><br>        <span class="hljs-comment">// 5. 生成临时票据，回跳到调用端网站，是由CAS端所签发的一个一次性的临时ticket</span><br>        String tmpTicket = createTmpTicket();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * userTicket: 用于表示用户在CAS端的一个登录状态：已经登录</span><br><span class="hljs-comment">         * tmpTicket: 用于颁发给用户进行一次性的验证的票据，有时效性</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 举例：</span><br><span class="hljs-comment">         *      我们去动物园玩耍，大门口买了一张统一的门票，这个就是CAS系统的全局门票和用户全局会话。</span><br><span class="hljs-comment">         *      动物园里有一些小的景点，需要凭你的门票去领取一次性的票据，有了这张票据以后就能去一些小的景点游玩了。</span><br><span class="hljs-comment">         *      这样的一个个的小景点其实就是我们这里所对应的一个个的站点。</span><br><span class="hljs-comment">         *      当我们使用完毕这张临时票据以后，就需要销毁。</span><br><span class="hljs-comment">         */</span><br><br><span class="hljs-comment">//        return &quot;login&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + returnUrl + <span class="hljs-string">&quot;?tmpTicket=&quot;</span> + tmpTicket;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/verifyTmpTicket&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IMOOCJSONResult <span class="hljs-title">verifyTmpTicket</span><span class="hljs-params">(String tmpTicket,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 使用一次性临时票据来验证用户是否登录，如果登录过，把用户会话信息返回给站点</span><br>        <span class="hljs-comment">// 使用完毕后，需要销毁临时票据</span><br>        String tmpTicketValue = redisOperator.get(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(tmpTicketValue)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 0. 如果临时票据OK，则需要销毁，并且拿到CAS端cookie中的全局userTicket，以此再获取用户会话</span><br>        <span class="hljs-keyword">if</span> (!tmpTicketValue.equals(MD5Utils.getMD5Str(tmpTicket))) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 销毁临时票据</span><br>            redisOperator.del(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket);<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 验证并且获取用户的userTicket</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br>        String userId = redisOperator.get(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userId)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 验证门票对应的user会话是否存在</span><br>        String userRedis = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userRedis)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 验证成功，返回OK，携带用户会话</span><br>        <span class="hljs-keyword">return</span> IMOOCJSONResult.ok(JsonUtils.jsonToPojo(userRedis, UsersVO.class));<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IMOOCJSONResult <span class="hljs-title">logout</span><span class="hljs-params">(String userId,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 0. 获取CAS中的用户门票</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br><br>        <span class="hljs-comment">// 1. 清除userTicket票据，redis/cookie</span><br>        deleteCookie(COOKIE_USER_TICKET, response);<br>        redisOperator.del(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br><br>        <span class="hljs-comment">// 2. 清除用户全局会话（分布式会话）</span><br>        redisOperator.del(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br><br>        <span class="hljs-keyword">return</span> IMOOCJSONResult.ok();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建临时票据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">createTmpTicket</span><span class="hljs-params">()</span> </span>&#123;<br>        String tmpTicket = UUID.randomUUID().toString().trim();<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisOperator.set(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket,<br>                    MD5Utils.getMD5Str(tmpTicket), <span class="hljs-number">600</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmpTicket;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCookie</span><span class="hljs-params">(String key,</span></span><br><span class="hljs-function"><span class="hljs-params">                           String val,</span></span><br><span class="hljs-function"><span class="hljs-params">                           HttpServletResponse response)</span> </span>&#123;<br><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(key, val);<br>        cookie.setDomain(<span class="hljs-string">&quot;sso.com&quot;</span>);<br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteCookie</span><span class="hljs-params">(String key,</span></span><br><span class="hljs-function"><span class="hljs-params">                              HttpServletResponse response)</span> </span>&#123;<br><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(key, <span class="hljs-keyword">null</span>);<br>        cookie.setDomain(<span class="hljs-string">&quot;sso.com&quot;</span>);<br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        cookie.setMaxAge(-<span class="hljs-number">1</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getCookie</span><span class="hljs-params">(HttpServletRequest request, String key)</span> </span>&#123;<br><br>        Cookie[] cookieList = request.getCookies();<br>        <span class="hljs-keyword">if</span> (cookieList == <span class="hljs-keyword">null</span> || StringUtils.isBlank(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        String cookieValue = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; cookieList.length; i ++) &#123;<br>            <span class="hljs-keyword">if</span> (cookieList[i].getName().equals(key)) &#123;<br>                cookieValue = cookieList[i].getValue();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> cookieValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>单点登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>业务和技术</title>
    <link href="/blog/2020/12/28/%E4%B8%9A%E5%8A%A1%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    <url>/blog/2020/12/28/%E4%B8%9A%E5%8A%A1%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p> 身处业务的我们，技术上如何自拔？</p><p>文章目录概述自我回顾业务与技术的困扰带着问题思考什么是技术和业务业务技术技术和业务的关系业务与为解决业务而衍生的业务对待业务的态度因你在团队的角色不同而不同从所谓的业务代码中跳出如何轻松、漂亮的搞定业务……</p><p>看了网上的学习方法，也综合了一下他人的意见，总结下来，想来自我学习以及自我提升的方式，大抵就是如下三种了</p><ol><li> 从文字视图中学习</li><li> 向身边的人学习</li><li> 向自己学习</li></ol><p>其中向自己学习最为靠谱。</p><p>而向自己学习最有效的方法，就是自省。</p><p>“曾子曰: 吾日三省吾身，为人谋而不忠乎? 与朋友交而不信乎? 传不习乎?”</p><p>“古人诚不我欺”。总结，是自省反馈出来的一种结果。写这篇文章，希望不只是自己能够学到东西，进行成长，也希望能将自己的思考和经验传播出来，与大家共勉。</p><p>从年初到年末，从一个技术人员 仅 3 人的小手游公司到了如今开发团队近 200 人的中大型公司。</p><p>下面从工作和个人成长两个方面进行入手，剖析一下自己。</p><p>工作上，从一个人埋头干活，到主导跨 4，5 个小部门共同协作的技术经理以及现在作为一个小组的 leader，作为员工，如何在业务中继续成长下去以及如何在公司体现出自己的不可替代性（技术和业务上的），也让公司看到你的潜力（你的成长能为公司为团队带来的收益）；作为小组 leader，如何更好的带好自己的小组（这点在后面并没有讲到，明年见）；</p><p>另外，自己技术上的成长。也许我扯一大堆的技术名词，并不是很直观，简单粗暴的讲，就是从一个日流量不到万级的游戏到如今日流量亿级的项目以及其他大大小小高流量项目的开发。</p><p>稍微从技术层面说就是 Java 的单体 SpringBoot 项目发展到基于 Dubbo、SpringBoot 的，使用到分布式事务，分布式锁，分布式数据分片，负载、限流、熔断、降级、链路追踪、elasticsearch、消息队列、缓存 redis、自动化部署、apollo、Sentinel 等一大堆名词和技术搭建的高并发高可用服务化项目；</p><p>凭我这浅薄的知识，至少目前不可能用自己理解的概念来把上面列到的一些知识点的原理来进行讲解，自己对其也只是懂个大概，更不想误人子弟，仅仅讲点自己也似懂非懂的概念。自己目前对其理解的，就是很多开发所处的，调用接口使用的这个层次。原理知识，以后会慢慢道来。余生漫漫，请君勿急。</p><p>篇幅有限，开始想着能写很多，但是思考下来，关于技术和业务就能写一大篇的文字。</p><p>相信很多开发经常会被业务代码所困扰，绝大多数都是有梦想的程序猿，大家都有着一个想使用代码改变世界的梦，当初我选择软件工程这个专业，原因之一就是我觉得我哥使用代码开发一个网站出来是一件牛逼哄哄的事情。</p><p>现在倒是觉得，比如开发一个 GitHub 开源项目的 star 几千上万才是牛逼哄哄的事情了。</p><p>在工作中，天天写业务代码，自己如何在技术上进步？大家是不是也经常心生疑惑，我以前也困扰过（自己的老大在总结中点醒了我，对技术有追求，但是并没有很好的结合业务。自己也好好进行了反省，搜集了很多资料，也询问了另外的大佬，如何更好的处理业务和技术），现在倒是觉得贴合业务更加能够提升打磨自己的技术以及增加自己在公司的不可替代性。</p><p>看到有文章这样比喻业务与技术，写业务代码学习的技术就像游戏中升级打怪一样，开始打小怪，经验值很高，越到后面经验值越少，打小怪已经不能提升经验值了。这个时候就需要打一些更高级的怪，刷一些有挑战的副本了，没看到哪个游戏只要一直打小怪就能升到顶级的。 成为技术大牛的路也是类似的，你要不断的提升自己的水平，然后面临更大的挑战，通过应对这些挑战从而使自己水平更上一级，然后如此往复，最终达到技术大牛甚至业界大牛的境界，写业务代码只是这个打怪升级路上的一个挑战而已。业务代码都写不好的程序员肯定无法成为技术大牛，但只把业务代码写好的程序员也还不能成为技术大牛。对应自己所处的角色，更好的挖掘出自己的潜力与提升实力，创造出更多的价值。</p><p>再说一个现实中的问题，工作都是基于业务来驱动的，国内基本所有公司（抛开研究不讲，广义上来说，所有的技术都是为业务服务的）都是业务来驱动的。 阿里的中间件团队，也是业务驱动而成立的团队（为了解决阿里内部复杂的业务场景、飞速的业务增长、高并发的大促洪峰、层出不穷的稳定性问题而成立的团队），只是做的事情比我们的高大上（高分布式 RPC 服务框架、高可靠分布式消息中间件、分布式数据层、海量数据存储、实时计算、系统性能优化、架构高可用等），后面会介绍到因业务需要而衍生高深技术。</p><h2 id="带着问题思考"><a href="#带着问题思考" class="headerlink" title="带着问题思考"></a>带着问题思考</h2><p>作为开发人员，如何面对 “CRUD，天天写业务代码” 这个事情，可以思考下面的几个问题</p><ol><li> 什么是技术和业务</li><li> 业务和技术的关系</li><li> 业务与为解决业务而衍生的业务</li><li> 对待业务的态度因你在团队的角色不同而不同</li><li> 如何从所谓的业务代码中学习深入</li></ol><h3 id="什么是技术和业务"><a href="#什么是技术和业务" class="headerlink" title="什么是技术和业务"></a>什么是技术和业务</h3><p>接下来就从业务和技术来入手进行分析了。</p><p>回归到这两个词的定义。</p><p>维基百科是这么解释的：</p><h4 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h4><p><strong>业务是指某种有目的的工作或工作项目。</strong> 考虑到企业已经成为现代社会最常见的活动主体，故可为业务作现实定义，即企业运用科学方法和生产工艺生产出可交付用户使用的产品与服务，并以此为企业带来利益的行为。</p><p>不只是为企业，能为人类本身带来利益的需求，都可以称之为业务。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p><strong>技术可以指人类对机器、硬件或人造器皿的运用，但它也可以包含更广的架构，如系统、组织方法学和技巧</strong></p><p>它是知识进化的主体，由社会形塑或形塑社会。如电脑等新技术的增生使人们相信技术是社会进化的决定性力量，换句话说，它是驱动改变的自发性动力。</p><p>通过人为创造条件，让指定的事件能够按照人类的意愿发生，这就是技术。</p><p>比如取火，最早人类只能靠打雷等自然现象产生火。</p><p>取火其实就是一个业务目标，要解决的是人类自己的问题，这就是业务，实际就是人类的利益。这个时候人类并没有生火的技术，只能靠不断的加木材，保持火不熄灭。</p><p>后来人们发现了钻木取火：只要用一个干的木棍，在另一个干木表面快速的转动，就可以生火。这个办法让人类可以自行创造火源，就产生了钻木取火的技术。</p><p>但是双手快速转动木棍钻木取火，并不是所有人都能够做得到的，需要很多力量和速度，对人的要求太高。为了解决快速转动的问题，就有人采用弓弦来提升木棍转动的速度。</p><p>业务目标是为了取火，钻木取火这个技术的出现解决了这个问题。</p><p>钻木取火的效率不高，影响了业务（取火）的效率，就有了进一步改进的动机，改进转动木棍的方式，产生了弓弦转动木棍的技术。</p><p>再用比较现代化的业务来进行说明一下</p><p>比如取款就是一种业务，ATM 机内运转的软件，要解决的业务就是取款。（取款是为了交易，当初交易不方便，于是便有了移动支付，聚合支付等等） 比如买火车票也是业务，12306 这个网站就是为解决买车票的业务服务的。（春运买票不易，于是出现了抢票软件，加速软件等等）</p><p>实现软件 / 网站功能的系统，架构，框架等便是技术（而技术本身又可能是建立在其他技术之上的）。</p><p>从上面的定义以及例子中，可以知道，业务是具有强目的性的，比如说我的业务就是为了取款，而 12306 网站的业务就是为了解决买车票的业务服务，是为某个具体特定的问题而生的；但是业务就具有弱目的性，普遍性和通用性，比如前面实现取款的技术框架，可能在 12306 中的框架还能复用等等。</p><p>技术存在演变，也是为了更方便的服务于业务本身。</p><h3 id="技术和业务的关系"><a href="#技术和业务的关系" class="headerlink" title="技术和业务的关系"></a>技术和业务的关系</h3><p>接下来以取火为例吧。</p><p>前面说到最开始是通过雷电获取火源，接下来是火石、钻木取火，然后渐渐演变到弓弦加速转动木棍取火，随着科技的发展，渐渐的生成火源便成为了一种业务，并且可以出售带来另外的利益，这个时候，生成火柴、打火机便是业务。而其中业务中使用的剧烈氧化还原反应、汽油制作、物理化学知识、工业制作等便是技术。</p><p>简单的可以得出如下几个结论</p><ol><li> 技术是为了解决业务的问题而产生的，没有了业务，技术就没有了存在的前提</li><li> 有了更好的技术，效率更差的技术，就会慢慢的被淘汰，消失，一切都遵从人类的利益诉求 – 也就是业务</li></ol><p>有人会问，不用钻木取火了，但是弓弦加速转动木棍还可以用啊？ 没错，因为弓弦转动木棍这个技术，不是来生火的，是用来加速木棍转动的，所解决的问题不一样（引出了后面因解决业务而衍生出来的业务）。但是多种不同的技术，合理结合起来，会更好更有效率的解决业务问题。</p><p>所以技术与技术之间，有如下的两种关系：</p><ol><li> 在解决同一个业务问题的前提下，更高效，更低成本的技术，会淘汰低效，高成本的技术。这是人类利益诉求所决定的。</li><li> 一般刚开始解决根本问题的技术（钻木取火）的效率是比较低的，只是把不可能变成了可能（从这一点上来说，技术才是业务的 促成者）。然后就会有提高效率的需求出现，要求改进这个技术。这个技术的低效率部分就会被其他人（或者技术发明人自己）加以改进，这部分就会形成新的技术。</li></ol><p>当更好的技术发生的时候，必定会形成一个切分，新技术会通过某种方式和原有的技术连接在一起形成一个整体，让这个新的技术可以和原有技术共同工作，使得原有的技术可以用更高的效率解决问题。因为要解决的主要业务（生火）并没有发生改变，分拆所形成的是一个树状的结构。</p><p>这个时候其实已经产生了架构。也就是说，一般是先有技术，才会有架构。这些其他技术（弓弦拉动木棍、氧化还原反应生火等），是从直接解决问题的初始主要技术中分拆出来形成的，并通过树状结构和主要技术（钻木取火）组合在一起。在解决主要问题（生火）之后，再开始逐渐的分拆为更为细粒度的技术（弓弦转木棍）</p><p>而这个细粒度的技术（弓弦转动木棍）往往不会和业务的主要目标（生火）发生直接的关系。不同的技术，通过树状结构，组合在一起，形成了一个完整的架构解决方案，共同完成业务的目标。这就是技术，业务和架构之间的关系。（分析火柴与打火机原理生成火源类似）</p><p>很多人把这个过程称为架构的进化，我更愿意把这个过程称为技术的进步所导致的新的架构分拆，因为这个过程内在的动力，更多的是来自技术对解决业务问题的解决。</p><p>我们回到开发者身上来看，写业务代码多一些，还是所谓的技术代码多一些，没有高下之分，只有个人取向和组织分工的不同。</p><h3 id="业务与为解决业务而衍生的业务"><a href="#业务与为解决业务而衍生的业务" class="headerlink" title="业务与为解决业务而衍生的业务"></a>业务与为解决业务而衍生的业务</h3><p>打开淘宝首页，随便浏览一个商品详情页面。</p><p>是不是有人会第一眼觉得商品封面，优惠券等相关信息的代码是没有什么技术含量的，因为那些是业务代码。</p><p>是不是觉得写商品页面的框架，分布式架构，分布式缓存，JMQ，Redis 或者说是 等技术才是有技术含量的。</p><p>但实际上，所谓的业务代码和技术代码，它们的区别，仅仅是和业务的距离远近不同而已：业务代码离业务更近，技术代码离业务稍远。它们最终都是指向业务实现的。</p><p>而且，可以考虑换一种视角来看业务，就会发现，其实每一层代码，都服务于它的上一层代码，上一层代码，就是它的业务！</p><p>![](data:;base64,&lt;?xml version=)” alt=”img” data-src=”<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901f02baa8e24b23abc9cf09be674f41~tplv-k3u1fbpfcp-zoom-1.image&quot;">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901f02baa8e24b23abc9cf09be674f41~tplv-k3u1fbpfcp-zoom-1.image&quot;</a> data-width=”800” data-height=”600” /&gt;</p><p>比如详情页架构的第 2 层 “对外提供 API” 中的“商品介绍” ，它的服务对象，就是前端页面，要解决的业务，就是“响应前端页面的查询，提供商品介绍”</p><p>而第 2 层底部的前端数据集群（JIMDB），它的服务对象，就是商品介绍，要解决的业务，就是 “存储商品或代理商品介绍信息”。</p><p>简单说，每一层技术实现，都服务于上一层，都以上一层的需求为业务。 从这个角度讲，现实中的业务在被虚拟化的过程中，会在技术实现层面引发分层，产生中间性、对用户不可见的新业务。</p><p>但是为什么很多开发者又觉得所做的技术实现越接近现实业务越没技术含量呢？</p><p>这是因为，你越接近用户业务：</p><ol><li> 细节越多，繁琐度越高，越不容易做好，越容易因为一点小瑕疵而被否定，让人觉得自己的劳动没价值</li><li> 现实性越强，变化几率越高，越容易来回修改代码，越让人觉得自己的掌控感低下</li><li> 实现的代码可迁移性越差，劳动成果被复用的概率越低</li></ol><p>而当你远离用户业务时：</p><ol><li> 你用到的技术，多数都是被高度抽象过的、用来解决从用户业务衍生出的技术性业务的，它们比具体的用户业务稳定，它们的适用面更广，也更容易被迁移到其它的业务领域</li><li> 你的劳动成果因为具有抽象属性，被复用的概率会更高，你会更愿意打磨它，会更有成就感</li><li> 你受到压力，经过距离用户近的几层同事的传递，得到了衰减，没那么大</li><li> 你打交道的对象，多数时候是内部同事、是技术人群，更容易达成一致</li></ol><h3 id="对待业务的态度因你在团队的角色不同而不同"><a href="#对待业务的态度因你在团队的角色不同而不同" class="headerlink" title="对待业务的态度因你在团队的角色不同而不同"></a>对待业务的态度因你在团队的角色不同而不同</h3><p>你对业务的态度，会因你在团队中承担的角色不同而不同。这是由开发团队的组织结构和职责分工导致的。</p><p>下面是 “团队结构、能力与职责” 图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/7e6220e13c624ca3852ac1cad0528ec2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在一个开发团队中，架构师这个角色，会负责业务拆分和软件架构的工作，并且领导团队来实现满足业务的软件。</p><ul><li>  注 1 ：有的研发团队里有业务架构师和软件架构师两种角色，业务拆分由业务架构师或业务分析师完成。</li><li>  注 2 ：软件架构师和业务架构师这两个角色也可能由没有架构师头衔的研发经理兼任。 架构师一定是要以业务为导向的，要搞懂业务的。所以，在架构师这个阶段，在团队管理者这个阶段，业务的重要性，往往是高于技术的，在他们的眼中，业务统领技术，技术是用来实现业务的。</li></ul><p>当团队完成业务架构和软件架构之后，就会选择不同的开发者来负责不同功能模块的实现。</p><p>负责不同功能模块实现的开发者，必须能够理解业务，并且要熟悉某个技术栈，能够进行模块设计和任务拆分，我称这样的开发者为 “熟练开发者”。</p><p>熟练开发者会承接由架构师分派的子业务，负责模块设计和拆分，把拆分后的小任务，交给普通程序员来完成。</p><p>当你是一个熟练开发者时，业务和技术几乎同等重要，因为：</p><p>你不理解业务，就很难将子业务模块映射到软件实现上，也很难做进一步的业务拆分。</p><p>你不具备完整的技术栈和相应的知识体系，就很难找到合适的技术来实现业务，也很难做软件模块的拆分。</p><p>熟练开发者完成了子业务和软件模块的拆分，会形成一系列的叶子型任务，并把它们分派给具备特定专项技术能力的普通程序员。</p><p>普通程序员要做的事情比较简单，就是接受别人分派的任务，实现特定的业务细节。</p><p>注意当你是一个普通程序员的时候，团队要求你具备一定的专项技术能力，能够完成任务即可，你的角色，就拿把螺丝刀拧螺丝，拧好螺丝就 Ok 。</p><p>这个时候，你内心是痛苦的，对不停地写业务代码是拒绝的，因为你要再找工作时，别的组织看重你的专项技术能力甚于业务能力（他们有人做业务拆分，你过去了能拧螺丝即可），而你在现有组织中，却因为深陷业务代码的编写而无法持续淬炼你的技能能力。</p><p>而开发中普通程序员是占比最大的，所以经常能看到文章或者有人提问纠结写业务代码这件事！</p><p>那么，该如何才能解脱呢？</p><h3 id="从所谓的业务代码中跳出"><a href="#从所谓的业务代码中跳出" class="headerlink" title="从所谓的业务代码中跳出"></a>从所谓的业务代码中跳出</h3><p>首先，很遗憾的告诉各位，这不是一蹴而就的，是一个技术深度和业务层次积累的过程，这需要时间。</p><p>作为一名技术人员，一方面要认识到技术只是用来解决特定问题的工具，所以一定要从问题出发，提出解决方案，而不能一味的追求技术的完美。</p><p>另一方面，也要认识到技术本身也可能成为一项业务，只要它足够通用，能够给其他人、组织提供有价值的解决方案。</p><p>但是，公司业务代码太多，总是 “沉迷业务无法自拔”，如何更好的提升自己，让自己发光发亮，能够提供更多有价值的东西。</p><p>也看到很多文章说的是，需要自己挤出时间出来进行学习，也就是在工作之余进行提升，自己认真的想一想，在业务上真的是无法提升自己吗？ 当我们轻松、漂亮的搞定业务后，能不能再从下面的方面入手进行思考呢。 例如</p><ul><li>  熟悉业务相关的更多业务和代码，不管业务是不是你负责的，不管代码是不是你写的；这样的好处太多，不列举，有兴趣的可以搜索</li><li>  这个业务有没有优化的点；</li><li>  重复代码太多，是不是可以考虑使用设计模式进行优化</li><li>  系统中业务是不是庞大，能不能进行解耦成几个服务或者模块</li><li>  开源框架中的一些功能正好能够用到，可不可以引进</li><li>  代码中性能有没有需要优化的地方</li><li>  在高并发情况下，有没有潜在 Bug</li><li>  能不能使用缓存，减少数据库压力，增加访问性能</li><li>  思考一下这个系统的架构，该系统使用了些什么技术，我还有哪些不知道的</li><li>  系统为什么使用这个技术，为什么使用这种架构</li><li>  下次类似的业务，我能不能抽出相关代码，进行复用，或者直接开发成服务，暴露出来</li><li>  … …</li></ul><p>很多普通程序员天天抱怨老写业务代码没长进，可手上的任务却总是敷衍了事，完成得凑凑合合，甚至还出现频现线上 Bug，那是很难摆重复简单业务任务的泥沼的。</p><h4 id="如何轻松、漂亮的搞定业务"><a href="#如何轻松、漂亮的搞定业务" class="headerlink" title="如何轻松、漂亮的搞定业务"></a>如何轻松、漂亮的搞定业务</h4><p>可以从这四方面进行入手：</p><ol><li> 在深度（研究领域中非常具有代表性的某几个框架的原理链）和广度（开源的框架这么多，至少要认识吧）两个方面提升技术能力（如果当下任务繁重，就利用业余时间练习）</li><li> 把自己的做的事情放在全局理解，提升业务理解能力</li><li> 培养好的工作习惯，比如计划、回顾、总结等</li><li> 做好汇报和展示，让领导知道你的能力</li></ol><p>当你慢慢做了上面 4 点之后，每次拿到任务，都能轻松又漂亮地搞定，超出领导的预期，还有未发挥完的火力，那团队就一定会给你复杂一点的任务。</p><p>如果你还能轻松、漂亮地搞定并且还有余力，那团队就会给你复杂度再高一些的任务。</p><p>往复循环，你就可以跳出最简单的业务代码编写，做越来越重要的事情，你的不可替代性也变得越来越强。</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署到gitee</title>
    <link href="/blog/2020/12/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee/"/>
    <url>/blog/2020/12/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee/</url>
    
    <content type="html"><![CDATA[<p>因为服务器和域名，即将到期，所以准备关闭自建博客，将博客迁移到码云上，用免费的域名和存储。</p><p>首先选择哪个git平台，我尝试了使用github pages，但很难受，我只能在FAN QIANG状态下正常访问，而且速度偏慢，改了hosts也没啥用，而且文章数如果多了起来，更新网站的速度更是慢得不行，所以还是选择国内的一些git平台比较好，比如码云(gitee)，Coding等。</p><p>然后是博客系统的选择，我首先尝试的是Gridea，界面可以，挺好看的，但就是只支持github pages和coding pages，还有个人服务器搭建。github pages不用说，速度慢，我失败了无数次。coding我也试了很多次，实在是找不出问题所在(基本都是连不上的问题，没法解决)。如果想尝试的小伙伴可以去官网看看<a href="https://links.jianshu.com/go?to=https://gridea.dev/">https://gridea.dev/</a>，上面有搭建方法。</p><p>这里我使用的是hexo+gitee。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>首先要下载<a href="https://links.jianshu.com/go?to=http://nodejs.cn/">Node.js</a>，然后安装<a href="https://links.jianshu.com/go?to=https://git-scm.com/downloads">Git</a>，接着注册<a href="https://links.jianshu.com/go?to=https://gitee.com/">码云</a>，最后安装Hexo，Hexo安装命令行(cmd 或 gitbash):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>速度慢可以先改一下安装源:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">npm config <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20201227123923753.png" alt="image-20201227123923753"></p><p>如果遇到上面的情况，就需要进行如下操作，一般在mac才会遇到这种。</p><p>1、vim ~/.bash_profile 编辑文件。</p><p>2、在最后追加下面三行代码。</p><p>alias ll=‘ls -alF’</p><p>alias la=‘ls -A’</p><p>alias l=‘ls -CF’</p><p>3、刷新配置文件，source ~/.bash_profile 。</p><p>后面如果还遇到，直接刷新配置文件即可，和maven在mac所遇到的问题一样，还未找到解决方案。</p><p>在想要存放博客的目录里右键打开控制台，然后输入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>接着生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo g<br></code></pre></td></tr></table></figure><p>然后启动本地服务，查看界面是否生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo s<br></code></pre></td></tr></table></figure><p>将<code>http://localhost:4000</code>复制到浏览器查看，默认主题为<code>landscape</code>。(在下面的每次配置中，对根目录的<code>_config.yml</code>修改后都要重新执行<code>hexo g</code>，同时可以不断刷新本地服务查看效果)</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>这里我选的这一款主题，当然也可以去官网选择，配置方法都差不多。<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a>  这里我用的第二种部署方式。</p><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>创建一个新的文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;测试&#x27;新增文章&quot;</span><br></code></pre></td></tr></table></figure><p>编写就自己用本地编辑器，打开即可。</p><h1 id="配置码云"><a href="#配置码云" class="headerlink" title="配置码云"></a>配置码云</h1><p>打开根目录 _config.yml</p><p>1、修改语言，language: zh-CN。</p><p>2、修改部署到码云的访问地址，</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20201227125538853.png" alt="image-20201227125538853"></p><p>url: <a href="https://gitee.com/cuixiaoyan/blog/">https://gitee.com/cuixiaoyan/blog/</a><br>root: /blog/</p><p>3、码云仓库地址，</p><p>deploy:<br>  type: git<br>  repo: <a href="https://gitee.com/cuixiaoyan/blog.git">https://gitee.com/cuixiaoyan/blog.git</a><br>  branch: master</p><p>4、提交步骤。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span><br>hexo g<br>hexo d<br>然后刷新上方，gitee pages 才行，注意，仓库的地址，和文章的路径是不同的。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
