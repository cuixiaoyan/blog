<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Sentinel快速入门</title>
    <link href="/blog/2021/05/09/Sentinel%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/blog/2021/05/09/Sentinel%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Sentinel-简介"><a href="#Sentinel-简介" class="headerlink" title="Sentinel 简介"></a>Sentinel 简介</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel 具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的主要特性：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/9b9449c803b4467c9421f31d7f9c3420~tplv-k3u1fbpfcp-watermark.image" alt="sentinel 特征.png"></p><p>Sentinel 的开源生态：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/ac27750628f7401794375fef32c34652~tplv-k3u1fbpfcp-watermark.image" alt="sentinel 生态.png"></p><p>Sentinel 分为两个部分:</p><ul><li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><h1 id="Sentinel、Hystrix、resilience4j-对比"><a href="#Sentinel、Hystrix、resilience4j-对比" class="headerlink" title="Sentinel、Hystrix、resilience4j 对比"></a>Sentinel、Hystrix、resilience4j 对比</h1><p>功能对比</p><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发控制）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例、异常比例、异常数</td><td>基于异常比例</td><td>基于异常比例、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式与匀速排队控制效果</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>多语言支持</td><td>Java/Go/C++</td><td>Java</td><td>Java</td></tr><tr><td>Service Mesh 支持</td><td>支持 Envoy/Istio</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h1 id="Sentinel-名词"><a href="#Sentinel-名词" class="headerlink" title="Sentinel 名词"></a>Sentinel 名词</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h3 id="什么是流量控制"><a href="#什么是流量控制" class="headerlink" title="什么是流量控制"></a>什么是流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/17f3ea9e95b64e8eba33d46f19e6b12a~tplv-k3u1fbpfcp-watermark.image" alt="sentinel 流控.gif"></p><h3 id="流量控制设计理念"><a href="#流量控制设计理念" class="headerlink" title="流量控制设计理念"></a>流量控制设计理念</h3><p>流量控制有以下几个角度:</p><ul><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li><li>运行指标，例如 QPS、线程池、系统负载等；</li><li>控制的效果，例如直接限流、冷启动、排队等。</li></ul><p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><h3 id="什么是熔断降级"><a href="#什么是熔断降级" class="headerlink" title="什么是熔断降级"></a>什么是熔断降级</h3><p>除了流量控制以外，及时对调用链路中的不稳定因素进行熔断也是 Sentinel 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，可能会导致请求发生堆积，进而导致级联错误。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/d6094c417c7f4ffeaf856b0ab0a396c4~tplv-k3u1fbpfcp-watermark.image" alt="sentinel 熔断降级.png"></p><p>Sentinel 和 Hystrix 的原则是一致的: 当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。</p><h3 id="熔断降级设计理念"><a href="#熔断降级设计理念" class="headerlink" title="熔断降级设计理念"></a>熔断降级设计理念</h3><p>在限制的手段上，Sentinel 和 Hystrix 采取了完全不一样的方法。</p><p>Hystrix 通过 <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#benefits-of-thread-pools">线程池隔离</a> 的方式，来对依赖（在 Sentinel 的概念中对应 <em>资源</em>）进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本（过多的线程池导致线程数目过多），还需要预先给各个资源做线程池大小的分配。</p><p>Sentinel 对这个问题采取了两种手段:</p><ul><li>通过并发线程数进行限制</li></ul><p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p><ul><li>通过响应时间对资源进行降级</li></ul><p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p><h2 id="系统自适应保护"><a href="#系统自适应保护" class="headerlink" title="系统自适应保护"></a>系统自适应保护</h2><p>Sentinel 同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p><p>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p><h1 id="Sentinel-原理"><a href="#Sentinel-原理" class="headerlink" title="Sentinel 原理"></a>Sentinel 原理</h1><p>Sentinel 的主要工作机制如下：</p><ul><li>对主流框架提供适配或者显示的 API，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li><li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，Sentinel 提供开放的接口，方便您定义及改变规则。</li><li>Sentinel 提供实时的监控系统，方便您快速了解目前系统的状态。</li></ul><h1 id="Sentinel-使用"><a href="#Sentinel-使用" class="headerlink" title="Sentinel 使用"></a>Sentinel 使用</h1><h2 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h2><ol><li>如果应用使用 pom 工程，则在 <code>pom.xml</code> 文件中加入以下代码即可：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol><li>接下来，我们把需要控制流量的代码用 Sentinel API <code>SphU.entry(&quot;HelloWorld&quot;)</code> 和 <code>entry.exit()</code> 包围起来即可。在下面的例子中，我们将 <code>System.out.println(&quot;hello world&quot;);</code> 这端代码作为资源，用 API 包围起来（埋点）。参考代码如下:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>  Entry entry = <span class="hljs-keyword">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    entry = SphU.entry(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>    <span class="hljs-comment">/*您的业务逻辑 - 开始*/</span><br>    System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">/*您的业务逻辑 - 结束*/</span><br>  &#125; <span class="hljs-keyword">catch</span> (BlockException e1) &#123;<br>    <span class="hljs-comment">/*流控逻辑处理 - 开始*/</span><br>    System.out.println(<span class="hljs-string">&quot;block!&quot;</span>);<br>    <span class="hljs-comment">/*流控逻辑处理 - 结束*/</span><br>  &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (entry != <span class="hljs-keyword">null</span>) &#123;<br>      entry.exit();<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>接下来，通过规则来指定允许该资源通过的请求次数，例如下面的代码定义了资源 <code>HelloWorld</code> 每秒最多只能通过 20 个请求。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 规则配置</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initFlowRules</span><span class="hljs-params">()</span> </span>&#123;<br>  List&lt;FlowRule&gt; rules = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>  FlowRule rule = <span class="hljs-keyword">new</span> FlowRule();<br>  rule.setResource(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>  rule.setGrade(RuleConstant.FLOW_GRADE_QPS);<br>  <span class="hljs-comment">// Set limit QPS to 20.</span><br>  rule.setCount(<span class="hljs-number">20</span>);<br>  rules.add(rule);<br>  FlowRuleManager.loadRules(rules);<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>Demo 运行之后，我们可以在日志 <code>~/logs/csp/$&#123;appName&#125;-metrics.log.xxx</code> 里看到下面的输出:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">|--timestamp-|------date time----|-resource-|p |block|s |e|rt<br>1619954886000|2021-05-02 19:28:06|HelloWorld|20|1|20|0|12|0|0|0<br>1619954887000|2021-05-02 19:28:07|HelloWorld|20|3197|20|0|11|0|0|0<br>1619954888000|2021-05-02 19:28:08|HelloWorld|20|2857|20|0|11|0|0|0<br><br></code></pre></td></tr></table></figure><p>其中 <code>p</code> 代表通过的请求, <code>block</code> 代表被阻止的请求, <code>s</code> 代表成功执行完成的请求个数, <code>e</code> 代表用户自定义的异常, <code>rt</code> 代表平均响应时长。</p><p>可以看到，这个程序每秒稳定输出 “hello world” 20 次，和规则中预先设定的阈值是一样的。</p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><ol><li>Sentinel 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 AspectJ 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-annotation-aspectj">Sentinel Annotation AspectJ Extension</a> 的时候需要引入以下依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.y.z<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol><li>示例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对应的 `handleException` 函数需要位于 `ExceptionUtil` 类中，并且必须为 public static 函数.</span><br><span class="hljs-comment">// 对应的返回值也需要和当前方法一样</span><br><span class="hljs-meta">@SentinelResource(value = &quot;createOrder&quot;,</span><br><span class="hljs-meta">                  blockHandler = &quot;blockHandler&quot;,</span><br><span class="hljs-meta">                  blockHandlerClass = &#123;ExceptionUtils.class&#125;)</span><br><span class="hljs-meta">@GetMapping(&quot;/createOrder&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> OrderDto <span class="hljs-title">createOrder</span><span class="hljs-params">(OrderDto dto)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OrderDto();<br>&#125;<br><br><span class="hljs-comment">// ExceptionUtils</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionUtils</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OrderDto <span class="hljs-title">blockHandler</span><span class="hljs-params">(OrderDto dto, BlockException ex)</span> </span>&#123;<br>    ex.printStackTrace();<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="SentinelResource-注解"><a href="#SentinelResource-注解" class="headerlink" title="@SentinelResource 注解"></a>@SentinelResource 注解</h2><blockquote><p>注意：注解方式埋点不支持 private 方法。</p></blockquote><p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。 @SentinelResource 注解包含以下属性：</p><ul><li>value：资源名称，必需项（不能为空）</li><li>entryType：entry 类型，可选项（默认为 EntryType.OUT）</li><li>blockHandler / blockHandlerClass: blockHandler 对应处理 BlockException 的函数名称，可选项。blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</li><li>fallback / fallbackClass：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</li><li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li>defaultFallback（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要为空，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</li><li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li>exceptionsToIgnore（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。 1.8.0 版本开始，defaultFallback 支持在类级别进行配置。</li></ul><blockquote><p>注：1.6.0 之前的版本 fallback 函数只针对降级异常（DegradeException）进行处理，不能针对业务异常进行处理。</p></blockquote><p>特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 BlockException 时只会进入 blockHandler 处理逻辑。若未配置 blockHandler、fallback 和 defaultFallback，则被限流降级时会将 BlockException 直接抛出（若方法本身未定义 throws BlockException 则会被 JVM 包装一层 UndeclaredThrowableException）。</p><h2 id="Sentinel-控制台"><a href="#Sentinel-控制台" class="headerlink" title="Sentinel 控制台"></a>Sentinel 控制台</h2><ol><li>下载控制台程序地址：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/alibaba/</span>Sentinel<span class="hljs-regexp">/releases/</span>tag/<span class="hljs-number">1.8</span>.<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><ol><li>启动命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Dserver.port=8089 -Dcsp.sentinel.dashboard.server=127.0.0.1:8089 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.1.jar<br><br></code></pre></td></tr></table></figure><ol><li>登录账号，默认的登录帐号和密码都是：sentinel</li><li>登录控制台后我们可以通过右侧菜单对我们的服务进行配置</li></ol><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1746e587b48a47ed9538c277a5b1fed8~tplv-k3u1fbpfcp-watermark.image" alt="sentinel 监控.png"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Sentinel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA2021首个大版本发布</title>
    <link href="/blog/2021/05/08/IDEA2021%E9%A6%96%E4%B8%AA%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/"/>
    <url>/blog/2021/05/08/IDEA2021%E9%A6%96%E4%B8%AA%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器！</p><p>就在不久之前，Java领域的开发神器<code>IntelliJ IDEA</code>终于迎来2021年的一个重要的大版本更新：<code>IntelliJ IDEA 2021.1</code>。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/0d5b436c8f7b4d19b4a2c53f6d3abc23~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>现如今大量的Java开发者深度依赖着这款开发软件，正如网上的段子所言：“可以毫不夸张地说，多少Java程序员离开了IDEA就不会写代码了（狗头）”，由此可见其使用的广泛程度。</p><p>新版本一出来，我也迫不及待地想尝试一番。当然，主力开发机我是不敢乱升级的，所以这两天，我在一台平时用来做测试的老开发本子上更新了全新的IDEA。</p><p>软件启动界面打开的那一瞬间，我就知道事情并不简单。</p><h1 id="全新的启动页面"><a href="#全新的启动页面" class="headerlink" title="全新的启动页面"></a>全新的启动页面</h1><p>更新后，全新的启动页面更加花里胡哨了。</p><p>软件启动速度也是非常之快，就我这多年苦练的火箭般手速，都差点没截来下面这张启动页面图。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/0fbf04b10731427898ba772d5b975a05~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><hr><h1 id="Space集成"><a href="#Space集成" class="headerlink" title="Space集成"></a>Space集成</h1><p>JetBrains提供的Space这个功能不知道大家有没有听说过，讲白了就是一套集成的团队协作环境，可以提供包括构建交付、聊天协作、团队管理以及项目管理等在内的一整套协作一体化解决方案。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/da4834e6c4a5462f81fc8111ff057fef~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>最新的IDEA 2021.1把Space环境给无缝地集成进来了，现在属于开箱即用的状态，软件的右上角就有快捷入口：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/53a7139bcaba476382779037c3ec2135~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><hr><h1 id="支持WSL-2"><a href="#支持WSL-2" class="headerlink" title="支持WSL 2"></a>支持WSL 2</h1><p>这个功能相信对于很多依赖Windows系统以及WSL功能的用户来说，简直是喜大普奔！</p><p>以前WSL就算再好用，但是你的IDE并没有和它打通，多少总是一个遗憾。</p><p>这下好了，二者直接打通了，IDEA支持WSL 2。你可以直接在新版IDEA 2021.1中运行并开发WSL 2中的Java项目，包括Gradle类型项目和Maven类型等项目均支持。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/11e7a616543745b094f518e0833e0a23~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/8d07b172800a46278435e57f24f8d900~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><hr><h1 id="Run-Targets"><a href="#Run-Targets" class="headerlink" title="Run Targets"></a>Run Targets</h1><p>Run Targets这个功能的意思有点类似于上面刚聊过的WSL 2。它允许开发者直接在远程主机甚至在Docker容器上运行和调试项目。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/108245aa90ec4f52bba265fcc6f804a5~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>所以到目前为止，新版IDEA 2021允许开发者可以在本地、WSL 2、SSH远程主机、Docker等目标上运行项目，可以说贼香了！</p><hr><h1 id="支持Java-16"><a href="#支持Java-16" class="headerlink" title="支持Java 16"></a>支持Java 16</h1><p>这也算是一个比较重磅的更新。</p><p>近两年来，Java版本的发布速度也是快如老狗，我还在用Java 8，它都淦到Java 16了。</p><p>关于Java 16的新特性，我还准备写篇文章来详细聊一聊呢，包括比如：</p><ul><li>Records特性转正</li><li>instanceof模式匹配转正</li><li>jpackage转正</li><li>Unix域套接字通道</li><li>弹性Metaspace</li><li>ZGC</li><li>矢量API</li><li>外部链接API</li><li>…</li></ul><p>这次IDEA 2021版的一个很重要的更新就是加入了对Java 16的基本支持，注意是基本支持。</p><p>除此之外IDEA还新增了几项检查机制，典型比如更加智能的数据流分析检查。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/77576024e84240a88339f60125f9bd01~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>链式构造方式的优化格式设置等等。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/5e9e57afa1114abaa70e646582f049d8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>目的都是为了帮助提升可读性，进一步提升用户体验。</p><hr><h1 id="Code-With-Me"><a href="#Code-With-Me" class="headerlink" title="Code With Me"></a>Code With Me</h1><p>Code With Me是一项用于协作开发与结对编程的服务，可以实现<code>Host-Guest</code>模式的“手摸手”（滑稽）结对编程和群体编程。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/bb9e5d49651b4c7ea0ff903b713cb15d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>目前，新版IDEA开箱即用地支持了Code With Me功能，同时它还具有音频通话和视频通话功能，可以满足随时随地的沟通需求，这操作简直骚到爆。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/975a2fe19c2c4ff192a4dfd38536b47a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/0487f917947149cf804fd11c8c33645e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><hr><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/e5412ac81ee54d50824776bc8c1871c7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>版本控制这一块目前做了不少的更新，包括可以更快地完成PR的创建提交，支持PR模板。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/001caf51fe2a41e2b7d02e21ff134962~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>变更提交至代码库前的自定义代码检查配置。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/08ff5332c8664ffe98e9dad0190613c6~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>以及支持自定义Git提交模板等等。</p><hr><h1 id="其他用户体验提升"><a href="#其他用户体验提升" class="headerlink" title="其他用户体验提升"></a>其他用户体验提升</h1><h2 id="IDEA内置HTML网页预览"><a href="#IDEA内置HTML网页预览" class="headerlink" title="IDEA内置HTML网页预览"></a>IDEA内置HTML网页预览</h2><p>以前在IDEA中预览网页得跳到外部浏览器，而现如今IDE的编辑器内部就支持<code>Built-in</code>级别的网页预览，只需要在右上角点那个IDEA小图标即可激活，而且可以编辑网页源码时做到同步更新和预览。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/e9e57262a6a646798a34ea5bbe73af61~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="Windows版本任务栏增强"><a href="#Windows版本任务栏增强" class="headerlink" title="Windows版本任务栏增强"></a>Windows版本任务栏增强</h2><p>在Windows平台的新版IDEA上，可直接在任务栏（或开始菜单）上右键快捷呼出最近使用的项目。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/d38cc8879aa34c41b24806d750c1425c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="搜索时自定义外部依赖项"><a href="#搜索时自定义外部依赖项" class="headerlink" title="搜索时自定义外部依赖项"></a>搜索时自定义外部依赖项</h2><p>讲白了，就是使搜索范围更易于自定义，我们可以直接在设置中进行Scope定义，自行选择External Dependencies的范围是否包含。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/b114d1f88ad848c789108dab8cc837a8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="窗口拆分优化"><a href="#窗口拆分优化" class="headerlink" title="窗口拆分优化"></a>窗口拆分优化</h2><p>当你对编辑器里的多个文件进行垂直窗口拆分时，双击某个Tab就可以将当前文件窗口最大化，再次双击Tab则会还原。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/69ccfa7fb5bf4638acee50b8237b973c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><hr><p>当然除了这些之外，新版IDEA还新增了很多更新和增强，比如：对Kotlin、Scala、JavaScript等语言的开发优化、对常见框架与技术的优化和支持、对Kubernetes和Docker的更新支持和改进、数据库工具的更新支持等等，由于时间有限，在此就不一一赘述了，有需要的可以按需细究。</p><p>最后，让我们一起大喊一句：“IDEA，yyds！”</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/69e06fcd540e4009b7b75987e2498d76~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>作者：CodeSheep<br>链接：<a href="https://juejin.cn/post/6959729508786110494">https://juejin.cn/post/6959729508786110494</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>IDEA2021</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么不推荐使用BeanUtils属性转换工具</title>
    <link href="/blog/2021/05/07/BeanUtils%E5%B1%9E%E6%80%A7%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
    <url>/blog/2021/05/07/BeanUtils%E5%B1%9E%E6%80%A7%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>之前在专栏中讲过“不推荐使用属性拷贝工具”，推荐直接定义转换类和方法使用 IDEA 插件自动填充 get / set 函数。</p><p><strong>不推荐的主要理由是：</strong></p><p>有些属性拷贝工具性能有点差 有些属性拷贝工具有“BUG” 使用属性拷贝工具容易存在一些隐患（后面例子会讲到）</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h2><p>首先公司内部就遇到过 commons 包的 BeanUtils 进行属性拷贝性能较差的真实案例，然后该同事换成了 Spring 的 BeanUtils 性能好了很多，感兴趣大家可以使用性能测试框架或者基准测试框架去对比，这里就不对比了。</p><p>接下来我们看 Spring 的 BeanUtils 的属性拷贝会存在啥问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">`<span class="hljs-keyword">import</span> lombok.Data;`<br>`<span class="hljs-keyword">import</span> java.util.List;`<br>`<span class="hljs-meta">@Data</span>`<br>`<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;`<br> `<span class="hljs-keyword">private</span> String name;`<br> `<span class="hljs-keyword">private</span> List&lt;Integer&gt; ids;`<br>`&#125;`<br>`<span class="hljs-meta">@Data</span>`<br>`<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;`<br> `<span class="hljs-keyword">private</span> String name;`<br> `<span class="hljs-keyword">private</span> List&lt;String&gt; ids;`<br>`&#125;`<br>复制代码<br>`<span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;`<br>`<span class="hljs-keyword">import</span> java.util.Arrays;`<br>`<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanUtilDemo</span> </span>&#123;`<br> `<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;`<br> `A first = <span class="hljs-keyword">new</span> A();`<br> `first.setName(<span class="hljs-string">&quot;demo&quot;</span>);`<br> `first.setIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));`<br> `B second = <span class="hljs-keyword">new</span> B();`<br> `BeanUtils.copyProperties(first, second);`<br> `<span class="hljs-comment">// 类型转换异常`</span><br> `<span class="hljs-keyword">for</span> (String each : second.getIds()) &#123;`<br> `System.out.println(each);`<br> `&#125;`<br> `&#125;`<br>`&#125;`<br><br></code></pre></td></tr></table></figure><p>大家运行上述示例时，会发生类型转换异常。</p><p>打断点可以看到，属性拷贝之后 B 类型的 second 对象中 ids 仍然为 Integer 类型：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/cb821056275d46f48b3db29947f9c884~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>如果不转换为字符串，直接进行打印，并不会报错。</p><p>使用CGlib 在不定义Converter 的情况下也会遇到类似问题：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`import org.easymock.cglib.beans.BeanCopier<span class="hljs-comment">;`</span><br>`import java.util.Arrays<span class="hljs-comment">;`</span><br>`public class BeanUtilDemo &#123;`<br> `public static void main(String[] args) &#123;`<br> `A first = <span class="hljs-keyword">new</span> A()<span class="hljs-comment">;`</span><br> `first.setName(<span class="hljs-string">&quot;demo&quot;</span>)<span class="hljs-comment">;`</span><br> `first.setIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<span class="hljs-comment">;`</span><br> `B second = <span class="hljs-keyword">new</span> B()<span class="hljs-comment">;`</span><br> `final BeanCopier beanCopier = BeanCopier.create(A.class, B.class, <span class="hljs-literal">false</span>)<span class="hljs-comment">;`</span><br> `beanCopier.copy(first,second,null)<span class="hljs-comment">;`</span><br><span class="hljs-title"> `for (String each :</span> second.getIds()) &#123;// 类型转换异常`<br> `System.out.println(each)<span class="hljs-comment">;`</span><br> `&#125;`<br> `&#125;`<br>`&#125;`<br><br></code></pre></td></tr></table></figure><p>同样，问题在运行时才暴露出来。</p><p>接下来我们看下 mapstruct：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`import org.mapstruct.Mapper<span class="hljs-comment">;`</span><br>`import org.mapstruct.factory.Mappers<span class="hljs-comment">;`</span><br>`@Mapper`<br>`public interface Converter &#123;`<br> `Converter INSTANCE = Mappers.getMapper(Converter.class)<span class="hljs-comment">;`</span><br> `B aToB(A car)<span class="hljs-comment">;`</span><br>`&#125;`<br>`import java.util.Arrays<span class="hljs-comment">;`</span><br>`public class BeanUtilDemo &#123;`<br> `public static void main(String[] args) &#123;`<br> `A first = <span class="hljs-keyword">new</span> A()<span class="hljs-comment">;`</span><br> `first.setName(<span class="hljs-string">&quot;demo&quot;</span>)<span class="hljs-comment">;`</span><br> `first.setIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<span class="hljs-comment">;`</span><br> `B second = Converter.INSTANCE.aToB(first)<span class="hljs-comment">;`</span><br><span class="hljs-title"> `for (String each :</span> second.getIds()) &#123;// 正常`<br> `System.out.println(each)<span class="hljs-comment">;`</span><br> `&#125;`<br> `&#125;`<br>`&#125;`<br><br></code></pre></td></tr></table></figure><p>可以成功的将 A 中 List转为 B 中的 List类型。</p><p>我们看下编译生成的 Converter 实现类：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`import java.util.ArrayList<span class="hljs-comment">;`</span><br>`import java.util.List<span class="hljs-comment">;`</span><br>`import javax.annotation.Generated<span class="hljs-comment">;`</span><br>`import org.springframework.stereotype.Component<span class="hljs-comment">;`</span><br>`@Generated(`<br> `value = <span class="hljs-string">&quot;org.mapstruct.ap.MappingProcessor&quot;</span>,`<br> `comments = <span class="hljs-string">&quot;version: 1.3.1.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)&quot;</span>`<br>`)`<br>`@Component`<br>`public class ConverterImpl implements Converter &#123;`<br> `@Override`<br> `public B aToB(A car) &#123;`<br> `if ( car == null ) &#123;`<br> `return null<span class="hljs-comment">;`</span><br> `&#125;`<br> `B b = <span class="hljs-keyword">new</span> B()<span class="hljs-comment">;`</span><br> `b.setName( car.getName() )<span class="hljs-comment">;`</span><br> `b.setIds( integerListToStringList( car.getIds() ) )<span class="hljs-comment">;`</span><br> `return b<span class="hljs-comment">;`</span><br> `&#125;`<br> `protected List&lt;String&gt; integerListToStringList(List&lt;Integer&gt; list) &#123;`<br> `if ( list == null ) &#123;`<br> `return null<span class="hljs-comment">;`</span><br> `&#125;`<br> `List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;( list.size() )<span class="hljs-comment">;`</span><br><span class="hljs-title"> `for ( Integer integer :</span> list ) &#123;`<br> `list1.add( String.valueOf( integer ) )<span class="hljs-comment">;`</span><br> `&#125;`<br> `return list1<span class="hljs-comment">;`</span><br> `&#125;`<br>`&#125;`<br><br></code></pre></td></tr></table></figure><p>自动帮我们进行了转换，我们可能没有意识到类型并不一致。</p><p>如果我们在 A 类中添加一个 String number 属性，在 B 类中添加一个 Long number 属性，使用 mapstruect 当 number 设置为非数字类型时就会报 .NumberFormatException。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`@Override`<br>`public B aToB(A car) &#123;`<br> `if ( car == null ) &#123;`<br> `return null<span class="hljs-comment">;`</span><br> `&#125;`<br> `B b = <span class="hljs-keyword">new</span> B()<span class="hljs-comment">;`</span><br> `b.setName( car.getName() )<span class="hljs-comment">;`</span><br> `if ( car.getNumber() != null ) &#123; // 问题出在这里`<br> `b.setNumber( Long.parseLong( car.getNumber() ) )<span class="hljs-comment">;`</span><br> `&#125;`<br> `b.setIds( integerListToStringList( car.getIds() ) )<span class="hljs-comment">;`</span><br> `return b<span class="hljs-comment">;`</span><br>`&#125;`<br><br></code></pre></td></tr></table></figure><p>使用 cglib 默认则不会映射 number 属性，B 中的 number 为 null。</p><p>如果手动定义转换器，使用 IDEA 插件(如 generateO2O)自动转换：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`public final class A2BConverter &#123;`<br> `public static B from(A first) &#123;`<br> `B b = <span class="hljs-keyword">new</span> B()<span class="hljs-comment">;`</span><br> `b.setName(first.getName())<span class="hljs-comment">;`</span><br> `b.setIds(first.getIds())<span class="hljs-comment">;`</span><br> `return b<span class="hljs-comment">;`</span><br> `&#125;`<br>`&#125;`<br><br></code></pre></td></tr></table></figure><p>在编码阶段就可以非常明确地发现这个问题：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/eee57aceb1ae42599cf03fff6d8d5fee~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="3-结论"><a href="#3-结论" class="headerlink" title="3 结论"></a>3 结论</h2><p>由于 Java 的泛型其实是编译期检查，编译后泛型擦除，导致运行时 List和 List都是 List 类型，可以正常赋值。这就导致在使用很多属性映射工具时，编译时不容易明显的错误。</p><p>mapstruct 自定义了注解处理器，在编译阶段可以读取映射双方的泛型类型，进而进行映射。但是这种映射也很可怕，有时候我们由于粗心等原因定义错了类型，自动帮助我们进行了转换，会带了很多副作用。</p><p>之前对各种属性映射工具的性能进行了简单的对比，结果如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/01dbea76a40048e9a81d277c391d6a92~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>因此慎用属性转换工具，如果可能建议自定义转换类，使用IDEA插件自动填充，效率也挺高， A 或 B 中任何属性类型不匹配，甚至删除一个属性，编译阶段即可报错，而且直接调用 get set 的效率也是非常高的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>BeanUtils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何准确判断什么时候可以给大表加索引</title>
    <link href="/blog/2021/05/06/%E5%A6%82%E4%BD%95%E5%87%86%E7%A1%AE%E5%88%A4%E6%96%AD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E4%BB%A5%E7%BB%99%E5%A4%A7%E8%A1%A8%E5%8A%A0%E7%B4%A2%E5%BC%95/"/>
    <url>/blog/2021/05/06/%E5%A6%82%E4%BD%95%E5%87%86%E7%A1%AE%E5%88%A4%E6%96%AD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E4%BB%A5%E7%BB%99%E5%A4%A7%E8%A1%A8%E5%8A%A0%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h4 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h4><p>以社交平台的用户表为例，随着业务的快速增长，用户表user单表数据量越来越大，此时，如果我们想给user表添加索引，数据规模对添加过程的影响势必要考虑在内，但是，单表数据规模对添加索引会产生什么样的影响呢，我们在什么样的数据库请求状态下给大表添加索引比较好呢？</p><blockquote><p>今天，我就详细回答一下上面两个问题：</p><ol><li>单表数据规模对添加索引会产生什么样的业务影响？</li><li>在什么样的数据库请求状态下给大表添加索引比较好？</li></ol></blockquote><p>我们先来看下第一个问题，当我们回答了第一个问题，那么，第二个问题的答案也就浮出水面了。</p><h4 id="Row-Log"><a href="#Row-Log" class="headerlink" title="Row Log"></a>Row Log</h4><p>我们先来看一个结构，它叫<code>Row Log</code>，用于在DDL过程中记录DML操作的日志文件。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/13ee77835ae4471e96c3a5828df3749f~tplv-k3u1fbpfcp-watermark.image" alt="image-20210102173304826.png"></p><p>我以user表为例，讲解一下<code>Row Log</code>。它有如下特点：</p><ol><li>每个索引对应一个Row Log，如上图为user表的索引<code>index_age_birth</code>对应的Row Log。</li></ol><p>Row Log在逻辑上由多个Block组成，每个Block可以存储多个DML操作、一个DML操作也会落在多个Block中。如上图中的Log代表DML操作：</p><ol><li>最前面两个Log存在第二个Block中</li><li>第3个Log和第4个Log的前半部分存在第三个Block中</li><li>第4个Log的后半部分和第5个Log存在最后一个Block中</li></ol><p>在物理存储上<code>Row Log</code>分为两部分：</p><ol><li>内存日志：内存中会存放一个总大小等于<code>inndob_sort_buffer_size</code>的Block，用于写入DML操作</li><li>文件日志：当内存中的Block写满，也就是大小大于<code>innodb_sort_buffer_size</code>，且小于<code>innodb_online_alter_log_max_size</code>时，写满的Block会刷到磁盘上，空出内存中的Block给后续的Log写入，日志文件中，所有Block总大小如果超过<code>innodb_online_alter_log_max_size</code>，写入就会报错</li></ol><p><code>Row Log</code>的核心结构如下：</p><ol><li>Log：表示DML操作日志，它的结构为<code>操作flag + 事务id + 操作记录</code>，其中，操作flag包含两种：<code>INSERT和DELETE，UPDATE看作是先DELETE，再INSERT</code>。比如，上图第一个Log中包含一条记录<code>&lt;0x61 + 1234 + &lt;25, 1998-01-02, 1&gt;&gt;</code>，其中，<code>0x61</code>代表这是一个插入操作，<code>1234</code>表示这个操作的事务id，<code>&lt;25, 1998-01-02, 1&gt;</code>表示操作的记录。</li><li>head：这是用于将Block中的Log回放到索引树时，用来扫描Block中Log的指针，扫完一个Log，head指针向后移到下一个Log。如上图，因为从Block的头部开始扫描，head指针在回放前处在Block的第一个Log的位置。</li><li>tail：这是用于将DML操作写入一个Block时，用来定位Block中Log插入位置的指针，插入完一个Log，tail指针向后移动到新插入的Log。如上图，因为从Block的头部开始插入Log，所以，tail指针在插入前处在Block的第一个Log的位置。</li><li>blocks：无论是head还是tail指针，都包含一个blocks字段，表示Row Log日志文件中包含的Block数量</li></ol><h4 id="Row-Log追加"><a href="#Row-Log追加" class="headerlink" title="Row Log追加"></a>Row Log追加</h4><p>下面我们再来看下Log是如何追加到Row Log的？我以user表的<code>index_age_birth</code>索引的Row Log为例来说明：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/e4ed81de7ab54c4885b4e60350e52e33~tplv-k3u1fbpfcp-watermark.image" alt="image-20210102173453682.png"></p><p>见上图，从上到下，我们来看下这个追加的过程：</p><ol><li><p>如果内存中没有Block，创建一个<code>innodb_sort_buffer_size</code>大小的Block，tail指针指向Block中的第一个Log，如果有Block，tail指针指向Block中最后一个Log。如上图，内存中有Block，tail指向Block中最后一个Log，也就是虚线框前面那个Log</p></li><li><p>根据即将插入的DML操作日志大小，得到Block中下一个Log相对最后一个Log的偏移量。如上图中的offset，这里分两种情况：</p><p>(1) 如果<code>DML操作日志大小 &gt;= innodb_sort_buffer_size - 当前Block中已有Log的总大小，则偏移量为innodb_sort_buffer_size - 当前Block中已有Log的总大小</code></p><p>(2) 如果<code>DML操作日志大小 &lt; innodb_sort_buffer_size - 当前Block中已有Log的总大小，则偏移量为DML操作日志大小</code></p></li><li><p>根据tail指针和偏移量，将插入的DML操作日志拷贝到内存的Block。这里同样分两种情况：</p><p>(1) 全拷贝</p><ul><li>如果<code>DML操作日志大小 &lt; innodb_sort_buffer_size - 当前Block中已有Log的总大小</code>，将DML操作日志全部拷贝到Block中末尾Log。如上图，全拷贝最右侧，将DML日志<code>&lt;0x61 + 3355 + &lt;25, 1998-01-02, 1&gt;&gt;</code>完整拷贝到末尾Log，然后，将tail移到被拷贝的Log上</li></ul><p>(2) 半拷贝</p><ul><li>如果<code>DML操作日志大小 &gt;= innodb_sort_buffer_size - 当前Block中已有Log的总大小</code>，拷贝DML操作日志的前面部分到tail后面偏移量大小的空间。如上图半拷贝里的上半部分，将DML日志<code>&lt;0x61 + 3355 + &lt;25, 1998-01-02, 1&gt;&gt;</code>的前半部分拷贝到末尾Log，然后，将tail移到被拷贝的Log上</li><li>将内存中整个Block写入Row Log日志文件。如上图，半拷贝里上半部分大括号包含了整个Block，同时将该Block通过箭头，写入<code>row_log_file</code></li><li>重新将tail移到内存空Block的头部，将DML操作的后半部分拷贝到tail后面偏移量大小的空间。如上图半拷贝里的下半部分，将DML日志<code>&lt;0x61 + 3355 + &lt;25, 1998-01-02, 1&gt;&gt;</code>的后半部分拷贝到Block的头部</li><li>如上图，tail.blocks + 1，代表Row Log日志文件中新增了一个Block。</li></ul></li></ol><h4 id="Row-Log回放"><a href="#Row-Log回放" class="headerlink" title="Row Log回放"></a>Row Log回放</h4><p>MySQL将DML日志写到Row Log只是为了在执行DDL期间，可以并行执行DML，最后，这些DML日志还是要更新(回放)到索引树上的，所以，同样以索引<code>index_age_birth</code>为例，我们再来看下Row Log中的日志是如何更新到索引树的？</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/b3ecf4add8134aa8a9a1192f5bea16c0~tplv-k3u1fbpfcp-watermark.image" alt="image-20210102173617242.png"></p><p>从上到下，我们来看上面这张图：</p><ol><li><p>MySQL先扫描磁盘上的Row Log文件，遍历文件中的Block，如上图，文件扫描部分为一个Block的遍历：</p><p>(1) head指针指向Block的头部Log，从该Log开始，将头部Log写入索引树。如上图，文件扫描中的最上面部分，将DML日志<code>0x61 + 3355 + &lt;25, 1998-01-02, 1&gt;&gt;</code>中的记录写入索引树<code>index_age_birth</code>的第一个叶子节点。</p><p>(2) 头部Log清空，将head指针移到后面一个Log。如上图，文件扫描中的第二块长方框。</p><p>(3) 重复(1)和(2)两步，直到head指针移到Block中最后一个Log，然后，将该Log中的记录写入索引树<code>index_age_birth</code>。如上图，文件扫描中的第三个长方框及方框中最后一个Log中的记录写入索引树<code>index_age_birth</code>的第二个叶子节点。。</p></li><li><p>重复步骤1，将Row Log文件中所有Block内的Log全部写入索引树<code>index_age_birth</code>，至此，Row Log文件清空。如上图，文件扫描中最后一个虚线长方框，表示Row Log文件清空。</p></li><li><p>由于DML日志写Row Log和DDL同时进行，结合《Row Log追加》中的过程，我们会发现大部分Block写入了Row Log文件，但是，还会存在小部分DML日志留存在内存的Block中，所以，MySQL需要将这部分留存的Log再写入索引树中，具体过程如下：</p><p>(1) 对数据字典加排它锁，禁止新的DML操作，<strong>ps：如果不加锁，会导致内存中Block不断更新，无法判断DML操作何时结束</strong>。</p><p>(2) 执行步骤1，将内存Block中的Log全部写入索引树<code>index_age_birth</code>，如上图，内存扫描部分。</p></li></ol><h4 id="Bulk-Load"><a href="#Bulk-Load" class="headerlink" title="Bulk Load"></a>Bulk Load</h4><p>在讲解添加索引的过程之前，还有一个概念再讲解一下，这就是<code>Bulk Load</code>，在添加索引的过程中，会将已排序的记录批量插入索引树的叶子节点中，这个批量插入的过程就叫做<code>Bulk Load</code>，我以索引<code>index_age_birth</code>为例，讲解一下这个过程，见下图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/f91e90d283084d53bd4d815f705c3048~tplv-k3u1fbpfcp-watermark.image" alt="image-20210102173655135.png"></p><ol><li>从已排序的记录集中分多批写入内存的bulk中。如上图，MySQL将最左边已排序的记录集拆分成两批写入2个bulk中，上面的bulk包含<code>15, 2008-02-03, 2</code>和<code>15, 2008-02-06, 5</code>两条记录，下面的bulk包含<code>16, 2007-06-06, 6</code>、<code>17, 2006-03-03, 4</code>和<code>18, 2002-06-07, 3</code> 三条记录。</li><li>以bulk为单位，将bulk中的记录集一次插入索引树中。如上图，上面的bulk记录集插入到索引树<code>index_age_birth</code>的第三个叶子节点，下面的bulk记录集插入到索引树<code>index_age_birth</code>的倒数第二个叶子节点。</li></ol><h4 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h4><p>Row Log的追加和回放，以及Bulk Load是添加索引过程中的核心步骤，讲完这三个步骤，下面我再来看一下InnoDB引擎中MySQL添加索引的过程就比较容易理解了，该过程主要分三个阶段，我以user表为例详细讲解一下：</p><p><strong>Prepare阶段</strong>：</p><ol><li>根据旧表user的表结构文件frm，创建一个副本表结构frm文件，将新索引添加到副本中</li><li>获得MDL排他锁，禁止读写数据字典及旧user表，关于MDL锁，我会在《MySQL锁全解析》详细讲解</li><li>根据alter类型，确定执行方式，一共两种执行方式：COPY、INPLACE</li><li>更新内存中的数据字典，标记user表所有索引<code>online_status</code>为<code>ONLINE_INDEX_CREATION</code>，表示该表索引都处在在线DDL状态。关于数据字典的结构，我在《我们可以干预MySQL选择正确的执行计划吗？》中有讲解过。</li><li>根据旧表user的ibd文件，创建副本ibd文件</li></ol><p><strong>DDL执行阶段：</strong></p><ol><li><p>降级MDL锁为共享锁，允许读写数据字典及旧user表</p></li><li><p>扫描旧表user的聚集索引中叶子节点每一条记录</p><p>(1) 申请一个<code>sort_buffer</code>，大小为<code>innodb_sort_buffer_size/索引叶子节点中最小的记录的大小</code></p><p>(2) 将每一条记录写入<code>sort_buffer</code></p><p>(3) <code>sort_buffer</code>写满后对里面的记录进行升序排序</p><p>(4) <code>sort_buffer</code>写满了，如果临时文件不存在，就创建一个临时文件</p><p>(5) 遍历<code>sort_buffer</code>记录，将<code>sort_buffer</code>中的记录写入文件中</p><p>​     a. 生成一个block，将记录添加到block</p><p>(6) 将block写入临时文件</p></li><li><p>遍历旧表聚簇索引的记录完成后，临时文件中就包含多个block，每个block包含已排序的记录</p></li><li><p>使用归并排序对临时文件中的block内记录进行排序</p></li><li><p>遍历副本frm中的聚集索引和辅助索引</p><p>(1) 搜索索引树，定位到树种最右边的叶子节点</p><p>(2) 判断该节点是否可以有足够空间批量插入记录，如果没有就创建一个新的叶子节点，执行步骤(3)，否则，执行步骤(4)</p><p>(3) 将新节点接到索引树的右下角，执行步骤(4)</p><p>(4) 遍历临时文件中的记录，将记录通过bulk load方式写入叶子节点</p><p>(5) 调整插入记录的叶子节点内记录的slot信息，关于slot，我在《InnoDB是顺序查找B-Tree叶子节点的吗？》中详细讲解过。</p></li><li><p>在这个阶段，与此同时，user表的所有DML操作日志写入Row Log，即《Row Log追加》中讲解的过程</p></li><li><p>重放该阶段产生的user表的Row Log日志到索引中，直到Row Log中的最后一个block，即《Row Log回放》中讲解的过程。</p></li></ol><p><strong>Commit阶段</strong>：</p><ol><li>升级MDL锁为排它锁，禁止读写数据字典及旧user表</li><li>将Row Log中最后一个block，即内存中Block对应的DML日志插入索引树，过程参见<strong>DDL执行阶段</strong>中的步骤(7)</li><li>更新内存中的数据字典，关于数据字典的结构，我在《我们可以干预MySQL选择正确的执行计划吗？》中有讲解过。</li><li>将DDL执行操作记录redo日志</li><li>rename副本ibd文件和frm文件为旧表名，即原user表的frm和ibd文件名</li></ol><p>在讲解完添加索引的过程后，我们发现影响业务DML操作的环节包含：</p><ol><li>循环遍历旧表聚簇索引叶子节点的所有记录，如果表记录非常多，非常消耗CPU，如果DDL长时间占用CPU资源，势必会影响MySQL的连接数，导致MySQL处理DML操作的并发请求数下降</li><li>归并排序使用的磁盘临时文件做记录排序，如果文件中的已排序记录集非常多，那么，归并排序过程中产生大量的磁盘IO，在MySQL处理查询时，如果内存中没有查询的结果，此时，<code>buffer pool</code>又满了，触发刷脏行为，这时就会出现查询请求等待刷脏结束，查询响应变慢。</li></ol><p>可能这时候你会问，Prepare阶段和Commit阶段都加了排它锁，为什么这两个环节不影响DML操作呢？因为虽然这两个阶段都加了排它锁，但是，加锁后的操作都是小数据规模的操作，所以，加锁时间很短，对DML的影响不大，所以，可以忽略不计。</p><blockquote><p>那么，我们看看上面两个问题怎么解决呢？</p><p>针对第一个问题，由于表中的原有记录的数量是由业务发展决定的，业务发展快，记录数就会多，这点我们无法控制，所以，针对表数据量大导致扫描聚簇索引变慢，我们只能规避DDL带来的风险，规避方法如下：</p><ol><li>评估表中的数据量</li><li>观察MySQL的CPU使用率</li></ol><p>结合上面两个因素，如果数据量不大，那么，只要在非极端高峰期执行DDL，对DML的 影响是不大的。如果数据量很大，建议找到MySQL的CPU使用率比较低的情况下做DDL，保证不影响DML操作.。</p><p>针对第二个问题，我们可以通过调整参数<code>innodb_sort_buffer_size</code>，将其调大，使归并排序来源的临时文件中已排序的block数量尽可能少，减少大量block的合并，从而降低磁盘IO</p></blockquote><h4 id="主从模式下的问题"><a href="#主从模式下的问题" class="headerlink" title="主从模式下的问题"></a>主从模式下的问题</h4><p>平时我们用的最多的MySQL架构就是主从模式，所以，我们来看一下在这种模式下，在线DDL的过程是怎么样的呢？</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/3403ff7b515b482c8eac458b6127353d~tplv-k3u1fbpfcp-watermark.image" alt="image-20210102165130582.png"></p><ol><li>结合《添加索引》中的过程，我们知道DDL和DML并行阶段，DDL一边执行，DML一边写入Row Log。如上图，左边在master中，DDL和INSERT，以及UPDATE并行执行，DDL在执行的同时，INSERT和UPDATE并行写入Row Log</li><li>DDL和DML并行过程中，将DDL操作和并行的DML按序写入binlog。如上图，左边master将DDL和INSERT、UPDATE操作按序写入binlog，DDL第一、其次是INSERT，最后是UPDATE</li><li>DDL执行结束，将master的binlog同步到slave上。如上图，将左边master的binlog中的三条操作同步到slave上</li><li>在slave上依次回放DDL和DML。如上图，右边在slave中依次执行DDL、INSERT和UPDATE</li></ol><p>通过上面这个过程，你应该已经想到，在DDL和DML并行的阶段，如果产生大量的DML操作，那么，在slave端回放这些DML操作会耗费大量的时间，会影响从库读的数据一致性。所以，这就是主从模式下，在线DDL的问题和风险。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过本章的讲解，我想你应该对MySQL的在线DDL的机制有了清晰的认识，同时，通过在线DDL机制的讲解，我们也发现了一些优化的方法：</p><table><thead><tr><th>目的</th><th>解决方法</th></tr></thead><tbody><tr><td>减少业务影响</td><td>调大<code>innodb_sort_buffer_size</code>，降低磁盘IO</td></tr><tr><td>避免DDL过程中写Row Log溢出</td><td>调大<code>innodb_online_alter_log_max_size</code></td></tr><tr><td>一定要在高峰期做DDL</td><td>建议使用第三方工具，比如，gh-ost，它是通过binlog完成DDL的，避免了扫描聚簇索引带来的CPU开销</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 设计模式之单例模式</title>
    <link href="/blog/2021/05/05/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/05/05/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/61076ca4e6e542f78055b8e1db68effc~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</p></blockquote><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h2><p>单例模式有 3 个特点：</p><ol><li>单例类只有一个实例对象；</li><li>该单例对象必须由单例类自行创建；</li><li>单例类对外提供一个访问该单例的全局访问点。</li></ol><p>一般来说，系统中只需要有一个实例就能满足系统需要时，那么就可以设计成单例模式。</p><p>比如 Windows 的回收站，数据库的连接池，系统中的日志对象等等。（当然，如果你非要设计成多个，我也没有办法是不是）</p><h2 id="2-优点和缺点"><a href="#2-优点和缺点" class="headerlink" title="2. 优点和缺点"></a>2. 优点和缺点</h2><p>单例模式的优点：</p><ol><li>单例模式可以保证内存里只有一个实例，减少了内存的开销。</li><li>可以避免对资源的多重占用。</li><li>单例模式设置全局访问点，可以优化和共享资源的访问。</li></ol><p>单例模式的缺点：</p><ol><li>单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li><li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li><li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li></ol><h2 id="3-结构"><a href="#3-结构" class="headerlink" title="3. 结构"></a>3. 结构</h2><p>单例模式的 UML 类图如下图所示，非常简单，只有一个类。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/930e26b803944d9e8caffffb94e2e2f1~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>上述类图很好地体现了单例模式的3个特点。</p><ol><li>一个私有实例常量 <code>INSTANCE</code>，保证只有一个实例对象；</li><li>一个私有的构造器 <code>private Singleton()&#123;&#125;</code> 保证外部无法实例化，只能由自身创建；</li><li>通过公共的 <code>getInstance()</code> 方法提供一个访问该单例的全局访问点。</li></ol><h2 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h2><p>单例模式可以按不同维度对其进行分类：</p><ul><li>线程安全维度：线程安全的单例模式、线程不安全的单例模式</li><li>对象创建时机：饿汉式的单例模式、懒汉式的单例模式<ul><li>饿汉式 - 第一次调用前（或说类被 JVM 加载时）就已经被实例化了。</li><li>懒汉式 - 只有在第一次调用的时候才会被实例化。</li></ul></li></ul><h3 id="4-1-枚举类单例"><a href="#4-1-枚举类单例" class="headerlink" title="4.1 枚举类单例"></a>4.1 枚举类单例</h3><p>因为 Java 保证枚举类的每个枚举都是单例，所以我们只需要编写一个只有一个枚举的类即可，而且它是<strong>线程安全</strong>的。</p><p>枚举类也完全可以像其他类那样定义自己的字段、方法，如下方实例代码中的 <code>name</code> 参数，<code>getName()</code> 及 <code>setName()</code> 方法等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枚举的单例实现 - 线程安全</span><br><span class="hljs-comment"> * 绝对防止多实例化，即使是在面反序列化和反射攻击时</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">EnumSingleton</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 唯一实例</span><br><span class="hljs-comment">     */</span><br>    INSTANCE;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果没有初始化的内容，可删除此方法</span><br><span class="hljs-comment">     */</span><br>    EnumSingleton() &#123;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，内存地址为：&quot;</span> + hashCode());<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;莫语&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>Effective Java</code> 书中也推荐使用这种单例模式。因为它足够简单，线程安全，且天然可以防止多实例化，即使是在面反序列化和反射攻击时。</p></blockquote><p>如果需要在单例中做初始化操作，可以使用构造方法实现，否则是不需要构造方法的。使用时可以直接用 <code>EnumSingleton.INSTANCE.getName()</code> 来调用单例中的方法。</p><p>在类中添加一个 <code>main()</code> 方法测试一下看看，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">EnumSingleton</span> </span>&#123;<br>    INSTANCE;<br><br>    <span class="hljs-comment">// ... 省略其他代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 延迟加载测试</span><br>        System.out.println(<span class="hljs-string">&quot;测试代码启动&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// 方法调用测试</span><br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + EnumSingleton.INSTANCE.getName());<br>        EnumSingleton.INSTANCE.setName(<span class="hljs-string">&quot;junmoyu.com&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + EnumSingleton.INSTANCE.getName());<br><br>        <span class="hljs-comment">// 反射测试</span><br>        <span class="hljs-comment">// 枚举天然防止反射攻击</span><br>        Class&lt;EnumSingleton&gt; clazz = (Class&lt;EnumSingleton&gt;) Class.forName(<span class="hljs-string">&quot;com.junmoyu.singleton.EnumSingleton&quot;</span>);<br>        Constructor&lt;EnumSingleton&gt; constructor = clazz.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 这里将直接抛出异常</span><br>        EnumSingleton singleton = constructor.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.EnumSingleton</span> 被实例化，<span class="hljs-selector-tag">hashCode</span>：460141958<br>代码启动<br><span class="hljs-selector-tag">name</span>: 莫语<br><span class="hljs-selector-tag">name</span>: <span class="hljs-selector-tag">junmoyu</span><span class="hljs-selector-class">.com</span><br><span class="hljs-selector-tag">Exception</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">thread</span> &quot;<span class="hljs-selector-tag">main</span>&quot; <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NoSuchMethodException</span>: <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.EnumSingleton</span>.&lt;<span class="hljs-selector-tag">init</span>&gt;()<br><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Class</span><span class="hljs-selector-class">.getConstructor0</span>(<span class="hljs-selector-tag">Class</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:3082)</span><br><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Class</span><span class="hljs-selector-class">.getDeclaredConstructor</span>(<span class="hljs-selector-tag">Class</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:2178)</span><br><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.EnumSingleton</span><span class="hljs-selector-class">.main</span>(<span class="hljs-selector-tag">EnumSingleton</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:51)</span><br></code></pre></td></tr></table></figure><p>从结果中可以看出，枚举类的单例模式不是延迟加载的，且可以防止反射创建多个实例。关于反射的话题会在后面的章节专门讲解。</p><h3 id="4-2-饿汉式单例"><a href="#4-2-饿汉式单例" class="headerlink" title="4.2 饿汉式单例"></a>4.2 饿汉式单例</h3><p>饿汉式单例，其创建对象的时机是在第一次调用之前，在类被 JVM 加载时就会被创建。其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 饿汉式单例模式 - 线程安全</span><br><span class="hljs-comment"> * 该类在程序加载时就已经初始化完成了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerlySingleton</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化静态实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> EagerlySingleton INSTANCE = <span class="hljs-keyword">new</span> EagerlySingleton();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有构造函数，保证无法从外部进行实例化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EagerlySingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可被用户调用以获取类的实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EagerlySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 延迟加载测试</span><br>        System.out.println(<span class="hljs-string">&quot;测试代码启动&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// 多线程测试</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; System.out.println(<span class="hljs-string">&quot;多线程测试：hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + EagerlySingleton.getInstance().hashCode())).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>饿汉式单例</strong>提供了已被实例化的静态实例 <code>INSTANCE</code>，所以不存在多个线程创建多个实例的情况，所以它是<strong>线程安全</strong>的。</p><p>这种单例模式的缺点是即使单例没有被使用，对象也会被创建，占用资源（但其实并不会占用太多资源，视具体业务情况而定）。运行<code>main()</code>方法测试一下。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">com</span>.junmoyu.singleton.EagerlySingleton 被实例化，hashCode：<span class="hljs-number">460141958</span><br>测试代码启动<br>多线程测试：hashCode：<span class="hljs-subst">@460141958</span><br>多线程测试：hashCode：<span class="hljs-subst">@460141958</span><br>多线程测试：hashCode：<span class="hljs-subst">@460141958</span><br>多线程测试：hashCode：<span class="hljs-subst">@460141958</span><br>多线程测试：hashCode：<span class="hljs-subst">@460141958</span><br></code></pre></td></tr></table></figure><p>可以看到<strong>饿汉式单例</strong>的确是<strong>延迟加载</strong>的，而且<strong>线程安全</strong>。其实线程安全问题比较难以测试，因为此类的确是线程安全的，所以仅做演示，后面会出现线程安全问题的单例方式会着重说明。反射的问题后面也会有专门的章节进行说明。</p><h3 id="4-3-静态内部类单例"><a href="#4-3-静态内部类单例" class="headerlink" title="4.3 静态内部类单例"></a>4.3 静态内部类单例</h3><p>静态内部类实现的单例与上面的饿汉式单例有点相似，这种单例模式也是 <strong>线程安全</strong>的，但它却是延迟加载的，所以对于一些需要延迟加载的单例来说，这种方式是一种非常不错的选择。其代码实现如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态内部类 - 线程安全，延迟加载</span><br><span class="hljs-comment"> * 写法简单，且可延迟加载，较推荐此种实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticInnerClassSingleton</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用静态内部类来实现延迟加载</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelperHolder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> StaticInnerClassSingleton INSTANCE = <span class="hljs-keyword">new</span> StaticInnerClassSingleton();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有构造方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">StaticInnerClassSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取单例实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StaticInnerClassSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> HelperHolder.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 延迟加载测试</span><br>        System.out.println(<span class="hljs-string">&quot;测试代码启动&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// 多线程测试</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; System.out.println(<span class="hljs-string">&quot;多线程测试：hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + StaticInnerClassSingleton.getInstance().hashCode())).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与饿汉式单例不同的是，静态内部类单例是延迟加载的，对于一些占用资源多且使用频率不高的单例来说是个非常不错的实现，而且它也是线程安全的，如果你的业务需要线程安全且延迟加载的单例模式，那么静态内部类是个非常不错的选择。同样运行 <code>main()</code> 进行测试，结果如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">测试代码启动<br><span class="hljs-keyword">com</span>.junmoyu.singleton.StaticInnerClassSingleton 被实例化，hashCode：<span class="hljs-number">1251394951</span><br>多线程测试：hashCode：<span class="hljs-subst">@1251394951</span><br>多线程测试：hashCode：<span class="hljs-subst">@1251394951</span><br>多线程测试：hashCode：<span class="hljs-subst">@1251394951</span><br>多线程测试：hashCode：<span class="hljs-subst">@1251394951</span><br>多线程测试：hashCode：<span class="hljs-subst">@1251394951</span><br></code></pre></td></tr></table></figure><p>通过日志可以明显发现，当主线程 <code>main()</code>启动之后，且睡眠等待一分钟，在调用了 <code>StaticInnerClassSingleton.getInstance().hashCode()</code> 方法时该类才被实例化，且在多线程中，仅被实例化了一次。</p><h3 id="4-4-懒汉式单例-线程不安全"><a href="#4-4-懒汉式单例-线程不安全" class="headerlink" title="4.4 懒汉式单例 - 线程不安全"></a>4.4 懒汉式单例 - 线程不安全</h3><p>懒汉式的特点就是<strong>延迟加载</strong>，即对象会在第一次调用时才会被实例化，避免资源消耗。</p><p>如下方代码所示，这是最简单的一种写法，但这是 <strong>线程不安全</strong> 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式 - 线程不安全</span><br><span class="hljs-comment"> * 非常不推荐使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadUnsafeLazyLoadedSingleton</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadUnsafeLazyLoadedSingleton INSTANCE = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有构造方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ThreadUnsafeLazyLoadedSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可被用户调用以获取类的实例 - 线程不安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadUnsafeLazyLoadedSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>            INSTANCE = <span class="hljs-keyword">new</span> ThreadUnsafeLazyLoadedSingleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 延迟加载测试</span><br>        System.out.println(<span class="hljs-string">&quot;测试代码启动&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// 多线程测试</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; System.out.println(<span class="hljs-string">&quot;多线程测试：hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + ThreadUnsafeLazyLoadedSingleton.getInstance().hashCode())).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接运行 <code>main()</code> 测试一下，结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">测试代码启动<br>com<span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.ThreadUnsafeLazyLoadedSingleton</span> 被实例化，hashCode：<span class="hljs-number">847507483</span><br>多线程测试：hashCode：@<span class="hljs-number">847507483</span><br>com<span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.ThreadUnsafeLazyLoadedSingleton</span> 被实例化，hashCode：<span class="hljs-number">319699154</span><br>多线程测试：hashCode：@<span class="hljs-number">319699154</span><br>com<span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.ThreadUnsafeLazyLoadedSingleton</span> 被实例化，hashCode：<span class="hljs-number">758108352</span><br>多线程测试：hashCode：@<span class="hljs-number">758108352</span><br>多线程测试：hashCode：@<span class="hljs-number">847507483</span><br>多线程测试：hashCode：@<span class="hljs-number">847507483</span><br>复制代码<br></code></pre></td></tr></table></figure><p>从结果可以明显的看到，该类虽然是延迟加载的，但是在多线程中，被实例化多次，这是线程不安全，非常不推荐使用！</p><h3 id="4-5-懒汉式单例-线程安全"><a href="#4-5-懒汉式单例-线程安全" class="headerlink" title="4.5 懒汉式单例 - 线程安全"></a>4.5 懒汉式单例 - 线程安全</h3><p>既然上一种方式是线程不安全的，那么基于上面的写法，做一些修改，让它线程安全不就可以嘛。比较简单的一种做法是在<code>getInstance()</code>方法上加锁，添加 <code>synchronized</code> 关键字即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式 - 线程安全，延迟加载</span><br><span class="hljs-comment"> * 但因为 getInstance() 方法加锁，导致多线程下性能较差，不推荐使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSafeLazyLoadedSingleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadSafeLazyLoadedSingleton INSTANCE = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有构造方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ThreadSafeLazyLoadedSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可被用户调用以获取类的实例 - 线程安全</span><br><span class="hljs-comment">     * 使用 synchronized 加锁以实现线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> ThreadSafeLazyLoadedSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>            INSTANCE = <span class="hljs-keyword">new</span> ThreadSafeLazyLoadedSingleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过加锁，每次只有一个线程允许访问 <code>getInstance()</code>，实例化对象，当实例化完成后，这个线程才会解锁，其他线程就没办法创建实例了，也就实现了线程安全。</p><p>但是这种方式有一个很大的缺点，就是每次使用时都会因为<strong>锁</strong>而非常消耗性能，因为每次调用 <code>getInstance()</code> 都只有一个线程可以访问，其他线程只能干等着。所以这种方式也是不推荐的。测试代码大家可自己运行看看结果。</p><h3 id="4-6-懒汉式单例-双重校验锁"><a href="#4-6-懒汉式单例-双重校验锁" class="headerlink" title="4.6 懒汉式单例 - 双重校验锁"></a>4.6 懒汉式单例 - 双重校验锁</h3><p>到这里，我们可以看到以上两种懒汉式单例都有非常明显的缺陷，那么怎么解决呢？</p><p>基于上一种方式的代码，既然在方法上加锁会影响性能，那么我们把锁加在方法里面，加锁之前先判断一下是否已经实例化了是不是就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSafeLazyLoadedSingleton</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadSafeLazyLoadedSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 1 号位置</span><br>            <span class="hljs-keyword">synchronized</span> (ThreadSafeLazyLoadedSingleton.class) &#123;<br>                <span class="hljs-comment">// 2 号位置</span><br>                INSTANCE = <span class="hljs-keyword">new</span> ThreadSafeLazyLoadedSingleton();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上方代码所示，这样就不会出现每次调用 <code>getInstance()</code>都只能有一个线程访问导致性能问题了是不是。</p><p>但是仔细想一想上面是不是在多线程的环境下还是会有问题呢？比如此时有线程A和线程B两个线程，两个线程同时访问 <code>getInstance()</code>方法，同时到达 <strong>1 号位置</strong>，此时他们会争抢锁，因为只能有一个线程进入下面的代码块。</p><p>假设线程A此时抢到了锁，线程B未抢到锁，在1号位置等待。当线程A在 <strong>2 号位置</strong> 创建完实例，返回之后解锁，此时对象已经被实例化了。解锁之后，线程B就可以获取锁了，获取锁之后，线程B也可以再创建一个实例。</p><p>针对上面这种情况，还需要再进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSafeLazyLoadedSingleton</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadSafeLazyLoadedSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 1 号位置</span><br>            <span class="hljs-keyword">synchronized</span> (ThreadSafeLazyLoadedSingleton.class) &#123;<br>                <span class="hljs-comment">// 2 号位置</span><br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>                    INSTANCE = <span class="hljs-keyword">new</span> ThreadSafeLazyLoadedSingleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <strong>2 号位置</strong> 同样加上非空判断，这样即使出现上述的情况，当实例化之后，其他线程获取锁，进入到 <strong>2 号位置</strong>，也无法再创建实例了。这种方式就是懒汉式单例的最终解决方案：<strong>双重校验锁</strong>。</p><p>至于为什么要双重校验，答案就在上面的那个例子里面了。<strong>双重校验锁</strong> 单例模式完整的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式最终解决方案 - 线程安全，延迟加载</span><br><span class="hljs-comment"> * 也叫双重校验锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleCheckLockingSingleton</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加入 volatile 保证线程可见性，防止指令重排导致实例被多次实例化</span><br><span class="hljs-comment">     * 否则线程不安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> DoubleCheckLockingSingleton INSTANCE = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有构造方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DoubleCheckLockingSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程安全的实例获取，使用双重检查，避免每次获取实例时都加锁</span><br><span class="hljs-comment">     * 但这种模式依然是有隐患的，INSTANCE 常量必须添加 volatile 关键字才能避免指令重排，保持线程可见性</span><br><span class="hljs-comment">     * 而 volatile 在 JDK 1.5 之后才支持</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DoubleCheckLockingSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (DoubleCheckLockingSingleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>) &#123;<br>                    INSTANCE = <span class="hljs-keyword">new</span> DoubleCheckLockingSingleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试方法与之前一样，在此就不演示了。</p><p>要注意的事，这种实现方式，<code>INSTANCE</code> 常量是必须要加上 <code>volatile</code> 关键字的，不然还是不能保证完全的线程安全，不加 <code>volatile</code>  可能会因为 JVM 指令重排而出现问题。具体原因在下一个章节详细说明。</p><h2 id="5-进阶"><a href="#5-进阶" class="headerlink" title="5. 进阶"></a>5. 进阶</h2><h3 id="5-1-volatile-关键字解析"><a href="#5-1-volatile-关键字解析" class="headerlink" title="5.1 volatile 关键字解析"></a>5.1 volatile 关键字解析</h3><p>首先来看一下 <strong>双重校验锁</strong> 会出现什么问题。我们先要了解对象的创建过程(new 关键字)，它简单的分为三个阶段:</p><p>1.分配对象内存空间。 2.初始化对象。 3.设置对象指向内存空间。</p><p>但是实际上第二步和第三步的顺序是可以互换的，在 JVM 的优化中存在一种指令重排序的机制，可以加快 JVM 的运行速度。</p><p>那么现在我们来做个实验，运行 <code>DoubleCheckLockingSingleton.main()</code> 方法后，在 <code>target</code> 目录下找到它的 <code>DoubleCheckLockingSingleton.class</code> 文件，然后使用 <code>javap -c DoubleCheckLockingSingleton.class &gt; DCL.txt</code> 来生成字节码文件。</p><p>打开文件可以在 <code>public static com.junmoyu.singleton.DoubleCheckLockingSingleton getInstance();</code> 下方看到 <code>getInstance()</code> 方法整个字节码执行过程。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">17</span>: <span class="hljs-keyword">new</span>           <span class="hljs-meta">#9      <span class="hljs-comment">// class com/junmoyu/singleton/ThreadSafeLazyLoadedSingleton</span></span><br><span class="hljs-number">20</span>: dup<br><span class="hljs-number">21</span>: invokespecial <span class="hljs-meta">#10     <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-number">24</span>: putstatic     <span class="hljs-meta">#5      <span class="hljs-comment">// Field INSTANCE:Lcom/junmoyu/singleton/ThreadSafeLazyLoadedSingleton;</span></span><br></code></pre></td></tr></table></figure><p>上面四个步骤是节选了 <code>new DoubleCheckLockingSingleton()</code> 的执行过程。</p><ul><li>17 : new 指令在 java 堆上为 ThreadSafeLazyLoadedSingleton 对象分配内存空间，并将地址压入操作栈顶</li><li>20 : dup 指令为复制操作栈顶值，并将其压入栈顶，这时操作栈上有连续相同的两个对象地址</li><li>21 : 调用实例的构造函数，实例化对象，这一步会弹出一个之前入栈的对象地址</li><li>24 : 将对象地址赋值给常量 <code>INSTANCE</code></li></ul><p>由上可看到创建一个对象并非原子操作，而是分成了多个步骤，如果 JVM 重排序后，21 在 24 之后，此时分配完了对象的内存空间，且把内存地址复制给了常量 <code>INSTANCE</code>，那么此时 <code>INSTANCE != null</code>。</p><p>如果此时有另外一个线程调用 <code>getInstance()</code> 就会直接返回 <code>INSTANCE</code> 常量，然而对象其实还没有实例化完成，返回的将是一个空的对象。执行过程如下：</p><table><thead><tr><th>执行步骤</th><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>step1</td><td>分配对象内存空间</td><td></td></tr><tr><td>step2</td><td>将对象内存地址赋值给常量 INSTANCE</td><td></td></tr><tr><td>step3</td><td></td><td>判断对象是否为 null</td></tr><tr><td>step4</td><td></td><td>对象不为 null, 返回 INSTANCE</td></tr><tr><td>step5</td><td></td><td>访问 INSTANCE 对象</td></tr><tr><td>step6</td><td>初始化对象</td><td></td></tr></tbody></table><p>如果出现上表所示的情况，那么线程2将获取到一个空的对象，访问对象的参数或方法都将出现异常。所以需要加上 <strong>volatile</strong> 关键字。<strong>volatile</strong> 关键字有两个作用：</p><ol><li>保证对象的可见性。</li><li>防止指令重排序。</li></ol><blockquote><p>对象的创建可能发生指令的重排序，使用 volatile 可以禁止指令的重排序，保证多线程环境下的线程安全。</p></blockquote><p>那么至此，相信你对 <strong>双重校验锁</strong> 的单例为什么要使用 volatile 关键字的原因已经了解清楚了。</p><p>但是你可能还有一个疑惑，为什么之前在 <code>public static synchronized LazyLoadedSingleton getInstance()</code> 方法上加锁时并未提到需要加 volatile 关键字呢。</p><p>其实原因也很简单，因为这里锁的是方法，即使出现了指令重排，其他的线程在调用 <code>getInstance()</code> 时也无法获取实例，因为方法被加锁了，自然也不会出现问题，只是方法加锁性能损耗较大而已。</p><p>在 <code>Spring</code> 源码中也可以看到类似的例子，如 <code>org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver</code> 类中的 <code>private volatile Map&lt;String, Object&gt; handlerMappings;</code> 参数与 <code>private Map&lt;String, Object&gt; getHandlerMappings()</code> 方法就是使用 <strong>双重校验锁</strong> 的方式编写的。感兴趣的可以自行查看。</p><h3 id="5-2-反射会导致单例失效嘛？"><a href="#5-2-反射会导致单例失效嘛？" class="headerlink" title="5.2 反射会导致单例失效嘛？"></a>5.2 反射会导致单例失效嘛？</h3><p>至于反射会不会导致单例失效，我们不妨测试一下。在各个单例类的 <code>main()</code> 方法中添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerlySingleton</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 反射测试</span><br>        <span class="hljs-comment">// 通过反射的方式直接调用私有构造器（通过在构造器里抛出异常可以解决此问题）</span><br>        Class&lt;EagerlySingleton&gt; clazz = (Class&lt;EagerlySingleton&gt;) Class.forName(<span class="hljs-string">&quot;com.junmoyu.singleton.EagerlySingleton&quot;</span>);<br>        Constructor&lt;EagerlySingleton&gt; constructor = clazz.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br><br>        EagerlySingleton singleton1 = constructor.newInstance();<br>        EagerlySingleton singleton2 = constructor.newInstance();<br><br>        System.out.println(<span class="hljs-string">&quot;反射测试：singleton1 hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + singleton1.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;反射测试：singleton2 hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + singleton2.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后查看日志可以发现，两个对象的 hashCode 是不一样的。除了枚举实现的单例模式外，其他拥有私有构造器的实现方式均可通过反射来创建多个实例。</p><p>要解决的话也很简单。饿汉式单例模式的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 饿汉式单例模式 - 线程安全</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerlySingleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> EagerlySingleton INSTANCE = <span class="hljs-keyword">new</span> EagerlySingleton();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EagerlySingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 防止通过反射进行实例化从而破坏单例</span><br>        <span class="hljs-comment">// 最好放在开头，如不需要删除即可</span><br>        <span class="hljs-keyword">if</span> (INSTANCE != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Already initialized.&quot;</span>);<br>        &#125;<br>        System.out.println(getClass().getCanonicalName() + <span class="hljs-string">&quot; 被实例化，hashCode：&quot;</span> + hashCode());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EagerlySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他方式实现的单例和饿汉式单例一样，在此就不一一说明了。再次运行 <code>main()</code> 方法测试反射。可以打印日志如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">...<br><span class="hljs-selector-tag">Caused</span> <span class="hljs-selector-tag">by</span>: <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalStateException</span>: <span class="hljs-selector-tag">Already</span> <span class="hljs-selector-tag">initialized</span>.<br><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.StaticInnerClassSingleton</span>.&lt;<span class="hljs-selector-tag">init</span>&gt;(<span class="hljs-selector-tag">StaticInnerClassSingleton</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:27)</span><br>... 5 <span class="hljs-selector-tag">more</span><br></code></pre></td></tr></table></figure><p>可以看到想要通过反射实例化的时候，直接抛出了异常，并没有进行实例化的操作。</p><h3 id="5-3-反序列化问题"><a href="#5-3-反序列化问题" class="headerlink" title="5.3 反序列化问题"></a>5.3 反序列化问题</h3><p>除了反射以外，使用反序列化也同样会破坏单例。</p><p>还是以 <code>EagerlySingleton</code> 类来测试，先让其实现 <code>Serializable</code> 接口，然后在 <code>main()</code> 方法里面添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.junmoyu.singleton.serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerlySingleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> EagerlySingleton INSTANCE = <span class="hljs-keyword">new</span> EagerlySingleton();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EagerlySingleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EagerlySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 反序列化测试</span><br>        <span class="hljs-comment">// 将对象写入文件</span><br>        ObjectOutputStream os = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;tempFile&quot;</span>));<br>        EagerlySingleton osInstance = EagerlySingleton.getInstance();<br>        System.out.println(<span class="hljs-string">&quot;反序列化测试：osInstance hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + osInstance.hashCode());<br>        os.writeObject(osInstance);<br><br>        <span class="hljs-comment">// 从文件中读取对象</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;tempFile&quot;</span>);<br>        ObjectInputStream is = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(file));<br>        EagerlySingleton isInstance = (EagerlySingleton) is.readObject();<br>        <span class="hljs-comment">// 查看 hashCode 是否相同</span><br>        System.out.println(<span class="hljs-string">&quot;反序列化测试：isInstance hashCode：&quot;</span> + <span class="hljs-string">&quot;@&quot;</span> + isInstance.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行 <code>main()</code>方法测试一下，查看日志结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.serializable</span><span class="hljs-selector-class">.DoubleCheckLockingSingleton</span> 被实例化，<span class="hljs-selector-tag">hashCode</span>：460141958<br>反序列化测试：<span class="hljs-selector-tag">osInstance</span> <span class="hljs-selector-tag">hashCode</span>：<span class="hljs-keyword">@460141958</span><br>反序列化测试：isInstance hashCode：@<span class="hljs-number">81628611</span><br></code></pre></td></tr></table></figure><p>可以看到序列化对象和反序列化之后的对象 hashCode 并不相同。</p><p>想要解决反序列化的问题，只需要添加一个 <code>readResolve()</code> 方法即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerlySingleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果有序列化需求，需要添加此方法以防止反序列化时重新创建新实例</span><br><span class="hljs-comment">     * 如无序列化需求可不加，同时去除 implements Serializable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行 <code>main()</code>方法测试一下，查看日志结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.junmoyu</span><span class="hljs-selector-class">.singleton</span><span class="hljs-selector-class">.serializable</span><span class="hljs-selector-class">.EagerlySingleton</span> 被实例化，<span class="hljs-selector-tag">hashCode</span>：460141958<br>反序列化测试：<span class="hljs-selector-tag">osInstance</span> <span class="hljs-selector-tag">hashCode</span>：<span class="hljs-keyword">@460141958</span><br>反序列化测试：isInstance hashCode：@<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p>可以发现两个对象的 hashCode 已经是一致的了。</p><blockquote><p>枚举类的单例，是天然可以绝对防止多实例化的，反射及反序列化都无效。</p></blockquote><p>至于为什么加了 <code>readResolve()</code>就可以防止反序列化重新创建实例，就要深入源码解析了。这里就不详细叙述了，简单说一下。</p><p>反序列化的对象获取是通过方法 ObjectInputStream#readObject()，进入源码，可以看到 <code>Object obj = readObject0(false);</code> 这行代码最终返回的对象。继续进入源码，在 ObjectInputStream#readObject0()方法中可以看到一个 switch 选择器，找到下面这块重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InputStream</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectInput</span>, <span class="hljs-title">ObjectStreamConstants</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">readObject0</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> unshared)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">switch</span> (tc) &#123;<br>                <span class="hljs-comment">// ...</span><br>                <span class="hljs-keyword">case</span> TC_ENUM:<br>                    <span class="hljs-comment">// 单例中为什么枚举最安全，感兴趣的同学可以看一下这里的实现</span><br>                    <span class="hljs-keyword">return</span> checkResolve(readEnum(unshared));<br>                <span class="hljs-keyword">case</span> TC_OBJECT:<br>                    <span class="hljs-comment">// 这里的 readOrdinaryObject 就是读取对象的方法了</span><br>                    <span class="hljs-keyword">return</span> checkResolve(readOrdinaryObject(unshared));<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        &#125;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p>进入 <code>readOrdinaryObject()</code> 方法，最终的答案都在这里了。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/6c7edce20db04cf587705a5f3a731994~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这个方法里面，最重要的两块代码，我圈出来了。第一块其实就是我们在没有加入 <code>readResolve()</code> 方法时，它通过反射创建了一个新的实例，在第二块代码的判断里 <code>desc.hasReadResolveMethod() == false</code> 将不会执行 if 里面的语句。它返回就是之前创建的新实例了。</p><p>if 中的代码其实就是调用 <code>readResolve()</code> 方法，然后将获取到的对象替换掉第一块代码里面创建的新实例，而<code>readResolve()</code> 方法不正是返回了单例的实例嘛。所以如果加了这个方法，就会执行 if 里面的代码，用单例的实例去替换掉反射创建的实例。</p><p>所以现在你知道为什么加入 <code>readResolve()</code> 方法就可以防止反序列化了吧。</p><h3 id="5-4-你以为这就结束了？"><a href="#5-4-你以为这就结束了？" class="headerlink" title="5.4 你以为这就结束了？"></a>5.4 你以为这就结束了？</h3><p>虽然不想再啰嗦了（对不住了！），但是还有一个<strong>重点</strong>！</p><p>如果有两个类加载器（class loader）的存在，那是两个类加载器可能各自创建自己的单例模式。</p><p>因为每个类加载器都定义了一个命名空间，如果有两个或以上的类加载器，不同的类加载器可能会加载同一个类，那么从整个程序来看，同一个类就被加载多次了。也就是会有多个单例的实例并存。</p><p>所以，如果你的程序有多个类加载器又同时使用了单例模式，那么就要小心了。有一个解决方法就是<strong>你可以自行指定类加载器，并指定同一个类加载器。</strong></p><h2 id="6-拓展"><a href="#6-拓展" class="headerlink" title="6. 拓展"></a>6. 拓展</h2><p>另外其实还有一种稍微特殊一点的 “单例” 模式，可以称之为 <strong>线程单例</strong>，那就是使用 ThreadLocal 使每一个线程拥有自己的单例。</p><p>比如 mybatis 3.5.x 版本中的 <code>org.apache.ibatis.executor.ErrorContext</code> 类，就是使用了此种方式实现的，感兴趣的可以自行研究，在此不再赘述。简单贴下代码感受下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.ibatis.executor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorContext</span> </span>&#123;<br>    <span class="hljs-comment">// 这里使用了函数式接口 Supplier&lt;T&gt;，更优雅的初始化 ThreadLocal</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL = ThreadLocal.withInitial(ErrorContext::<span class="hljs-keyword">new</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ErrorContext</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ErrorContext <span class="hljs-title">instance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> LOCAL.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>至此，我们讨论了六种单例模式的实现方式。</p><ol><li>枚举实现 - 线程安全</li><li>饿汉式单例 - 线程安全</li><li>静态内部类实现 - 线程安全、延迟加载</li><li>普通懒汉式 - 线程不安全、延迟加载</li><li>方法加锁懒汉式 - 线程安全、延迟加载，但性能差</li><li>双重校验锁懒汉式 - 线程安全、延迟加载</li></ol><p>且除了枚举实现的单例外，其他均有反射及序列化会破坏单例的情况。那么综合来看的话，枚举实现的单例是最优的方案，也是 <code>Effective Java</code> 书中推荐的方案。然而在 Java 及一些框架的源码中使用枚举单例的例子很少，不知道是为什么，可能是我看的源码还不够多吧。</p><p>因为枚举实现的单例模式其实也属于饿汉式，所以如果在实例化时需要执行耗时操作的话，则不建议使用。</p><p>那么除此之外较好的单例实现还有<strong>静态内部类</strong>的实现，以及<strong>双重校验锁</strong>的实现，可以根据自己的业务需要灵活选择。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql优化groupBy</title>
    <link href="/blog/2021/05/03/mysql%E4%BC%98%E5%8C%96groupBy/"/>
    <url>/blog/2021/05/03/mysql%E4%BC%98%E5%8C%96groupBy/</url>
    
    <content type="html"><![CDATA[<p>当我们交友平台在线上运行一段时间后，为了给平台用户在搜索好友时，在搜索结果中推荐并置顶他感兴趣的好友，这时候，我们会对用户的行为做数据分析，根据分析结果给他推荐其感兴趣的好友。</p><blockquote><p>这里，我采用最简单的SQL分析法：对用户过去查看好友的性别和年龄进行统计，按照年龄进行分组得到统计结果。依据该结果，给用户推荐计数最高的某个性别及年龄的好友。</p></blockquote><p>那么，假设我们现在有一张用户浏览好友记录的明细表<code>t_user_view</code>，该表的表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user_view` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;自增id&#x27;</span>,<br>  `user_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>  `viewed_user_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;被查看用户id&#x27;</span>,<br>  `viewed_user_sex` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;被查看用户性别&#x27;</span>,<br>  `viewed_user_age` <span class="hljs-type">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;被查看用户年龄&#x27;</span>,<br>  `create_time` datetime(<span class="hljs-number">3</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>(<span class="hljs-number">3</span>),<br>  `update_time` datetime(<span class="hljs-number">3</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>(<span class="hljs-number">3</span>),<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `idx_user_viewed_user` (`user_id`,`viewed_user_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br></code></pre></td></tr></table></figure><p>为了方便使用SQL统计，见上面的表结构，我冗余了被查看用户的性别和年龄字段。</p><p>我们再来看看这张表里的记录：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/95ce656e6ade41e992f24f54974e209c~tplv-k3u1fbpfcp-watermark.image" alt="image-20210321202431004.png"></p><p>现在结合上面的表结构和表记录，我以<code>user_id=1</code>的用户为例，分组统计该用户查看的年龄在18 ~ 22之间的女性用户的数量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> viewed_user_age <span class="hljs-keyword">as</span> age, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num <span class="hljs-keyword">FROM</span> t_user_view <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> viewed_user_age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">22</span> <span class="hljs-keyword">AND</span> viewed_user_sex <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> viewed_user_age<br><br></code></pre></td></tr></table></figure><p>得到统计结果如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/a99d2932bcdb464a842f8bcfd98e0682~tplv-k3u1fbpfcp-watermark.image" alt="image-20210321172324495.png"></p><p>可见：</p><ul><li>该用户查看年龄为18的女性用户数为2</li><li>该用户查看年龄为19的女性用户数为1</li><li>该用户查看年龄为20的女性用户数为3</li></ul><p>所以，<code>user_id=1</code>的用户对年龄为20的女性用户更感兴趣，可以更多推荐20岁的女性用户给他。</p><blockquote><p>如果此时，<code>t_user_view</code>这张表的记录数达到千万规模，想必这条SQL的查询效率会直线下降，为什么呢？有什么办法优化呢？</p></blockquote><p>想要知道原因，不得不先看一下这条SQL执行的过程是怎样的？</p><h3 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h3><p>我们先用<code>explain</code>看一下这条SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> viewed_user_age <span class="hljs-keyword">as</span> age, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num <span class="hljs-keyword">FROM</span> t_user_view <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> viewed_user_age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">22</span> <span class="hljs-keyword">AND</span> viewed_user_sex <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> viewed_user_age<br><br></code></pre></td></tr></table></figure><p>执行完上面的<code>explain</code>语句，我们得到如下结果：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/6488bd6356e240f9b47040261a6798c4~tplv-k3u1fbpfcp-watermark.image" alt="image-20210321200747868.png"></p><p>在<code>Extra</code>这一列中出现了三个<code>Using</code>，这3个<code>Using</code>代表了《导读》中的<code>groupBy</code>语句分别经历了3个执行阶段：</p><ol><li>Using where：通过搜索可能的<code>idx_user_viewed_user</code>索引树定位到满足部分条件的<code>viewed_user_id</code>，然后，回表继续查找满足其他条件的记录</li><li>Using temporary：使用临时表暂存待<code>groupBy</code>分组及统计字段信息</li><li>Using filesort：使用<code>sort_buffer</code>对分组字段进行排序</li></ol><p>这3个阶段中出现了一个名词：<code>临时表</code>。这个名词我在《MySQL分表时机：100w？300w？500w？都对也都不对！》一文中有讲到，这是MySQL连接线程可以独立访问和处理的内存区域，那么，这个临时表长什么样呢？</p><blockquote><p>下面我就先讲讲这张MySQL的临时表，然后，结合上面提到的3个阶段，详细讲解《导读》中SQL的执行过程。</p></blockquote><h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3><p>我们还是先看看《导读》中的这条包含<code>groupBy</code>语句的SQL，其中包含一个分组字段<code>viewed_user_age</code>和一个统计字段<code>count(*)</code>，这两个字段是这条SQL中统计所需的部分，如果我们要做这样一个统计和分组，并把结果固化下来，肯定是需要一个内存或磁盘区域落下第一次统计的结果，然后，以这个结果做下一次的统计，因此，像这种存储中间结果，并以此结果做进一步处理的区域，MySQL叫它<code>临时表</code>。</p><p>刚刚提到既可以将中间结果落在内存，也可以将这个结果落在磁盘，因此，在MySQL中就出现了两种临时表：<code>内存临时表</code>和<code>磁盘临时表</code>。</p><h4 id="内存临时表"><a href="#内存临时表" class="headerlink" title="内存临时表"></a>内存临时表</h4><p>什么是内存临时表？在早期数据量不是很大的时候，以存储分组及统计字段为例，那么，基本上内存就可以完全存放下分组及统计字段对应的所有值，这个存放大小由<code>tmp_table_size</code>参数决定。这时候，这个存放值的内存区域，MySQL就叫它内存临时表。</p><p>此时，或许你已经觉得MySQL将中间结果存放在内存临时表，性能已经有了保障，但是，在《MySQL分表时机：100w？300w？500w？都对也都不对！》中，我提到过内存频繁的存取会产生碎片，为此，MySQL设计了一套新的内存分配和释放机制，可以减少甚至避免临时表内存碎片，提升内存临时表的利用率。</p><blockquote><p>此时，你可能会想，在《为什么我调大了sort_buffer_size，并发量一大，查询排序慢成狗？》一文中，我讲了用户态的内存分配器：<code>ptmalloc</code>和<code>tcmalloc</code>，无论是哪个分配器，它的作用就是避免用户进程频繁向Linux内核申请内存空间，造成<code>CPU</code>在用户态和内核态之间频繁切换，从而影响内存存取的效率。用它们就可以解决内存利用率的问题，为什么MySQL还要自己搞一套？</p></blockquote><p>或许MySQL的作者觉得无论哪个内存分配器，它的实现都过于复杂，这些复杂性会影响MySQL对于内存处理的性能，因此，MySQL自身又实现了一套内存分配机制：<code>MEM_ROOT</code>。它的内存处理机制相对比较简单，内存临时表的分配就是采用这样一种方式。</p><p>下面，我就以《导读》中的SQL为例，详细讲解一下分组统计是如何使用<code>MEM_ROOT</code>内存分配和释放机制的？</p><h5 id="MEM-ROOT"><a href="#MEM-ROOT" class="headerlink" title="MEM_ROOT"></a>MEM_ROOT</h5><p>我们先看看<code>MEM_ROOT</code>的结构，<code>MEM_ROOT</code>设计比较简单，主要包含这几部分，如下图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/2a4a62d15071443a9ecfdd816a410da7~tplv-k3u1fbpfcp-watermark.image" alt="image-20210322205718291.png"></p><p>free：一个单向链表，链表中每一个单元叫<code>block</code>，<code>block</code>中存放的是空闲的内存区，每个<code>block</code>包含3个元素：</p><ul><li>left：<code>block</code>中剩余的内存大小</li><li>size：<code>block</code>对应内存的大小</li><li>next：指向下一个<code>block</code>的指针</li></ul><p>如上图，<code>free</code>所在的行就是一个<code>free</code>链表，链表中每个箭头相连的部分就是<code>block</code>，<code>block</code>中有<code>left</code>和            <code>size</code>，每个<code>block</code>之间的箭头就是<code>next</code>指针</p><p>used：一个单向链表，链表中每一个单元叫<code>block</code>，<code>block</code>中存放已使用的内存区，同样，每个<code>block</code>包含上面3            个元素</p><p>min_malloc：控制一个 <code>block</code> 剩余空间还有多少的时候从<code>free</code>链表移除，加入到<code>used</code>链表中</p><p>block_size：<code>block</code>对应内存的大小</p><p>block_num：<code>MEM_ROOT</code> 管理的<code>block</code>数量</p><p>first_block_usage：<code>free</code>链表中第一个<code>block</code>不满足申请空间大小的次数</p><p>pre_alloc：当释放整个<code>MEM_ROOT</code>的时候可以通过参数控制，选择保留<code>pre_alloc</code>指向的<code>block</code></p><p>下面我就以《导读》中的分组统计SQL为例，看一下<code>MEM_ROOT</code>是如何分配内存的？</p><h6 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h6><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/ccf3e23603a54fb1a3b820835ead6bd7~tplv-k3u1fbpfcp-watermark.image" alt="image-20210326002410273.png"></p><ol><li><p>初始化<code>MEM_ROOT</code>，见上图：</p><p><code>min_malloc = 32</code></p><p><code>block_num = 4</code></p><p><code>first_block_usage = 0</code></p><p><code>pre_alloc = 0</code></p><p><code>block_size = 1000</code></p><p><code>err_handler = 0</code></p><p><code>free = 0</code></p><p><code>used = 0</code></p></li><li><p>申请内存，见上图：</p><p>由于初始化<code>MEM_ROOT</code>时，<code>free = 0</code>，说明<code>free</code>链表不存在，故向Linux内核申请4个大小为<code>1000/4=250</code>的<code>block</code>，构造一个<code>free</code>链表，如上图，链表中包含4个<code>block</code> ，结合前面<code>free</code>链表结构的说明，每个<code>block</code>中<code>size</code>为250，<code>left</code>也为250</p></li><li><p>分配内存，见上图：</p><p>(1) 遍历<code>free</code>链表，从<code>free</code>链表头部取出第一个<code>block</code>，如上图向下的箭头</p><p>(2) 从取出的<code>block</code>中划分<code>220</code>大小的内存区，如上图向右的箭头上面<code>-220</code>，<code>block</code>中的<code>left</code>从<code>250</code>变成<code>30</code></p><p>(3) 将划分的<code>220</code>大小的内存区分配给SQL中的<code>groupby</code>字段<code>viewed_user_age</code>和统计字段<code>count(*)</code>，用于后面的统计分组数据收集到该内存区</p><p>(4) 由于第(2)步中，分配后的<code>block</code>中的<code>left</code>变成<code>30</code>，<code>30 &lt; 32</code>，即小于第(1)步中初始化的<code>min_malloc</code>，所以，结合上面<code>min_malloc</code>的含义的讲解，该<code>block</code>将插入<code>used</code>链表尾部，如上图底部，由于<code>used</code>链表在第(1)步初始化时为0，所以，该<code>block</code>插入<code>used</code>链表的尾部，即插入头部</p></li></ol><h6 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h6><p>下面还是以《导读》中的分组统计为例，我们再来看一下<code>MEM_ROOT</code>是如何释放内存的？</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/b6569d6768e14a68a647161c0e6bea2c~tplv-k3u1fbpfcp-watermark.image" alt="image-20210323233158459.png"></p><p>如上图，<code>MEM_ROOT</code>释放内存的过程如下：</p><ol><li>遍历<code>used</code>链表中，找到需要释放的<code>block</code>，如上图，<code>block(30,250)</code>为之前已分配给分组统计用的<code>block</code></li><li>将<code>block(30,250)</code>中的<code>left + 220</code>，即<code>30 + 220 = 250</code>，释放该<code>block</code>已使用的<code>220</code>大小的内存区，得到释放后的<code>block(250,250)</code></li><li>将<code>block(250,250)</code>插入<code>free</code>链表尾部，如上图曲线箭头部分</li></ol><p>通过<code>MEM_ROOT</code>内存分配和释放的讲解，我们发现<code>MEM_ROOT</code>的内存管理方式是在每个<code>Block</code>上连续分配，内部碎片基本在每个<code>Block</code>的尾部，由<code>min_malloc</code>成员变量控制，但是<code>min_malloc</code>的值是在代码中写死的，有点不够灵活。所以，对一个<code>block</code>来说，当<code>left</code>小于<code>min_malloc</code>，从其申请的内存越大，那么<code>block</code>中的<code>left</code>值越小，那么，该<code>block</code>的内存利用率越高，碎片越少，反之，碎片越多。这个写死是MySQL的内存分配的一个缺陷。</p><h4 id="磁盘临时表"><a href="#磁盘临时表" class="headerlink" title="磁盘临时表"></a>磁盘临时表</h4><p>当分组及统计字段对应的所有值大小超过<code>tmp_table_size</code>决定的值，那么，MySQL将使用磁盘来存储这些值。这个存放值的磁盘区域，MySQL叫它磁盘临时表。</p><p>我们都知道磁盘存取的性能一定比内存存取的性能差很多，因为会产生磁盘IO，所以，一旦分组及统计字段不得不写入磁盘，那性能相对是很差的，所以，我们尽量调大参数<code>tmp_table_size</code>，使得组及统计字段可以在内存临时表中处理。</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>无论是使用内存临时表，还是磁盘临时表，临时表对组及统计字段的处理的方式都是一样的。《导读》中我提到想要优化《导读》中的那条SQL，就需要知道SQL执行的原理，所以，下面我就结合上面讲解的临时表的概念，详细讲讲这条SQL的执行过程，见下图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/3598cf4798b84fa0ad04348bc69db486~tplv-k3u1fbpfcp-watermark.image" alt="image-20210326002155314.png"></p><ol><li><p>创建临时表<code>temporary</code>，表里有两个字段<code>viewed_user_age</code>和<code>count(*)</code>，主键是<code>viewed_user_age</code>，如上图，倒数第二个框<code>temporary</code>表示临时表，框中包含两个字段<code>viewed_user_age</code>和<code>count(*)</code>，框内就是这两个字段对应的值，其中<code>viewed_user_age</code>就是这张临时表的主键</p></li><li><p>扫描表辅助索引树<code>idx_user_viewed_user</code>，依次取出叶子节点上的<code>id</code>值，即从索引树叶子节点中取到表的主键id。如上图中的<code>idx_user_viewed_user</code>框就是索引树，框右侧的箭头表示取到表的主键id</p></li><li><p>根据主键id到聚簇索引<code>cluster_index</code>的叶子节点中查找记录，即扫描<code>cluster_index</code>叶子节点：</p><p>(1) 得到一条记录，然后取到记录中的<code>viewed_user_age</code>字段值。如上图，<code>cluster_index</code>框，框中最右边的一列就是<code>viewed_user_age</code>字段的值</p><p>(2) 如果临时表中没有主键为<code>viewed_user_age</code>的行，就插入一条记录 (<code>viewed_user_age</code>, 1)。如上图的<code>temporary</code>框，其左侧箭头表示将<code>cluster_index</code>框中的<code>viewed_user_age</code>字段值写入<code>temporary</code>临时表</p><p>(3) 如果临时表中有主键为<code>viewed_user_age</code>的行，就将<code>viewed_user_age</code>这一行的<code>count(*)</code>值加 1。如上图的<code>temporary</code>框</p></li><li><p>遍历完成后，再根据字段<code>viewed_user_age</code>在<code>sort_buffer</code>中做排序，得到结果集返回给客户端。如上图中的最右边的箭头，表示将<code>temporary</code>框中的<code>viewed_user_age</code>和<code>count(*)</code>的值写入<code>sort_buffer</code>，然后，在<code>sort_buffer</code>中按<code>viewed_user_age</code>字段进行排序</p></li></ol><blockquote><p>通过《导读》中的SQL的执行过程的讲解，我们发现该过程经历了4个部分：<code>idx_user_viewed_user</code>、<code>cluster_index</code>、<code>temporary</code>和<code>sort_buffer</code>，对比上面<code>explain</code>的结果，其中前2个就对应结果中的<code>Using where</code>，<code>temporary</code>对应的是<code>Using temporary</code>，<code>sort_buffer</code>对应的是<code>Using filesort</code>。</p></blockquote><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>此时，我们有什么办法优化这条SQL呢？</p><blockquote><p>既然这条SQL执行需要经历4个部分，那么，我们可不可以去掉最后两部分呢，即去掉<code>temporary</code>和<code>sort_buffer</code>？</p></blockquote><p>答案是可以的，我们只要给SQL中的表<code>t_user_view</code>添加如下索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `t_user_view` <span class="hljs-keyword">ADD</span> INDEX `idx_user_age_sex` (`user_id`, `viewed_user_age`, `viewed_user_sex`);<br><br></code></pre></td></tr></table></figure><p>你可以自己尝试一下哦！用<code>explain</code>康康有什么改变！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本章围绕《导读》中的分组统计SQL，通过<code>explain</code>分析SQL的执行阶段，结合临时表的结构，进一步剖析了SQL的详细执行过程，最后，引出优化方案：<strong>新增索引，避免临时表对分组字段的统计，及<code>sort_buffer</code>对分组和统计字段排序</strong>。</p><p>当然，如果实在无法避免使用临时表，那么，<strong>尽量调大<code>tmp_table_size</code>，避免使用磁盘临时表统计分组字段。</strong></p><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><p>为什么新增了索引<code>idx_user_age_sex</code>可以避免临时表对分组字段的统计，及<code>sort_buffer</code>对分组和统计字段排序？</p><p>提示：结合索引查找的原理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在项目中实现多数据源切换</title>
    <link href="/blog/2021/04/24/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    <url>/blog/2021/04/24/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一）场景"><a href="#一）场景" class="headerlink" title="(一）场景"></a>(一）场景</h1><p>在实际的应用场景中，我们经常会遇到一个系统要调用多个数据源的情况。可能是同一个mysql的不同库，也有可能是从不同的mysql中调用数据进行使用。这里提供一种十分高效的多数据源切换框架—<strong>dynamicdatasource</strong></p><h1 id="（二）介绍一下这个框架"><a href="#（二）介绍一下这个框架" class="headerlink" title="（二）介绍一下这个框架"></a>（二）介绍一下这个框架</h1><p>dynamicdatasource其实是Mybatis-plus生态圈中的其中一个框架，来自码云知名开源项目 Mybatis-Plus 运营组织，这个组织还有个奇怪的名字叫做苞米豆。这是个挺有传奇色彩的组织，大家有兴趣可以了解一下。</p><h1 id="（三）开始使用"><a href="#（三）开始使用" class="headerlink" title="（三）开始使用"></a>（三）开始使用</h1><h2 id="3-1-搭建项目"><a href="#3-1-搭建项目" class="headerlink" title="3.1 搭建项目"></a>3.1 搭建项目</h2><p>这一步就不需要多提了，搭建一个Springboot项目即可，引入基础的web依赖。</p><h2 id="3-2-引入依赖"><a href="#3-2-引入依赖" class="headerlink" title="3.2 引入依赖"></a>3.2 引入依赖</h2><p>动态数据源的核心依赖是下面这个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;3.1.0&lt;/version&gt;<br>&lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure><p>我们自己再引入JDBC三件套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span><br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;2.1.3&lt;/version&gt;<br>&lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure><h2 id="3-3-配置文件编写"><a href="#3-3-配置文件编写" class="headerlink" title="3.3 配置文件编写"></a>3.3 配置文件编写</h2><p>在以前使用Mybatis的时候，我们只能配置一个数据源，现在可以通过动态数据源的方式配置多个数据源。</p><p>其中primary表示默认的数据源，strict表示设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候会抛出异常,不启动则使用默认数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  datasource:<br>    dynamic:<br>      primary: master<br>      strict: <span class="hljs-keyword">false</span><br>      datasource:<br>        master:<br>          url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/student</span><br>          username: root<br>          password: <span class="hljs-number">123456</span><br>          driver-class-name: com.mysql.jdbc.Driver<br>        slave:<br>          url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/books</span><br>          username: root<br>          password: <span class="hljs-number">123456</span><br>          driver-class-name: com.mysql.jdbc.Driver<br><br></code></pre></td></tr></table></figure><h2 id="3-4-代码中切换数据源"><a href="#3-4-代码中切换数据源" class="headerlink" title="3.4 代码中切换数据源"></a>3.4 代码中切换数据源</h2><p>通过一个注解就可以轻松切换数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@DS(&quot;master&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired(required = false)</span><br>    <span class="hljs-keyword">private</span> BookMapper bookMapper;<br>    <span class="hljs-meta">@Autowired(required = false)</span><br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> studentMapper.getNameById(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@DS(&quot;slave&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBookName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.getBookNameById(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>首先，我们可以给一个方法设置数据源，在内部的方法中也可以通过DS注解切换数据源，不用担心嵌套的问题。</p><h1 id="（四）完整项目"><a href="#（四）完整项目" class="headerlink" title="（四）完整项目"></a>（四）完整项目</h1><p>首先我建了两个库，一个叫student、另一个叫books</p><p>student库中有个student表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `grade` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br></code></pre></td></tr></table></figure><p>books库中有个book表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `book` (<br>  `ID` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `BOOKISBN` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `BOOKNAME` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `AUTHOR` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `PRICE` <span class="hljs-keyword">double</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `TYPEID` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `PUBLISHER` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (`ID`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB  <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br></code></pre></td></tr></table></figure><p>项目结构很简单： <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/10af7580387444c48cba879449bc7475~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>首先是两个Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select bookname from book where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">getBookNameById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> String id)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>StudentMapper ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select name from student where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">String <span class="hljs-title">getNameById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> String id)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后是一个service</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-variable">@Service</span><br><span class="hljs-variable">@DS</span>(&quot;master&quot;)<br>public class TestService &#123;<br>    <span class="hljs-variable">@Autowired</span>(required <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>)<br>    private BookMapper bookMapper;<br>    <span class="hljs-variable">@Autowired</span>(required <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>)<br>    private StudentMapper studentMapper;<br>    public String getName()&#123;<br>        <span class="hljs-keyword">return</span> studentMapper.getNameById(&quot;1&quot;);<br>    &#125;<br>    <span class="hljs-variable">@DS</span>(&quot;slave&quot;)<br>    public String getBookName()&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.getBookNameById(&quot;1&quot;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后controller调用一下Service</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-variable">@RestController</span><br>public class IndexController &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    private TestService testService;<br>    <span class="hljs-variable">@GetMapping</span>(&quot;index&quot;)<br>    public String index()&#123;<br>        String studentName <span class="hljs-operator">=</span> testService.getName();<br>        String bookName <span class="hljs-operator">=</span> testService.getBookName();<br>        <span class="hljs-keyword">return</span> studentName<span class="hljs-operator">+</span>bookName;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>启动类中扫描一下Mapper</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@MapperScan</span>(&quot;com.javayz.mybatisplus.mapper&quot;)<br>public class MybatisplusApplication &#123;<br>    public static void main(String[] args) &#123;<br>        SpringApplication.run(MybatisplusApplication.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样一个简单的项目就搭建完成了，访问一下/index，就可以发现两个数据源中的数据都被提取出来了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>多数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8中的Lambda表达式</title>
    <link href="/blog/2021/04/17/Java8%E4%B8%AD%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/blog/2021/04/17/Java8%E4%B8%AD%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Lambda表达式是一个可传递的代码块，可以在以后执行一次或多次；</p><p>下面贴个对比代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java8之前：旧的写法</span><br>Runnable runnable = <span class="hljs-keyword">new</span> Runnable() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;old run&quot;</span>);<br>  &#125;<br>&#125;;<br>Thread t = <span class="hljs-keyword">new</span> Thread(runnable);<br><br><span class="hljs-comment">// Java8之后：新的写法</span><br>Runnable runnable1 = ()-&gt;&#123;<br>  System.out.println(<span class="hljs-string">&quot;lambda run&quot;</span>);<br>&#125;;<br>Thread t1 = <span class="hljs-keyword">new</span> Thread(runnable1);<br><br></code></pre></td></tr></table></figure><p>可以看到，有了lambda，代码变得简洁多了</p><p>你可以把lambda当作一个语法糖</p><p>下面让我们一起来探索lambda的美好世界吧</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>下面列出本文的目录</p><ul><li>lambda的语法</li><li>为啥引入lambda</li><li>什么是函数式接口</li><li>什么是行为参数化</li><li>手写一个函数式接口</li><li>常用的函数式接口</li><li>什么是方法引用</li><li>什么是构造引用</li><li>lambda的组合操作</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-lambda的语法"><a href="#1-lambda的语法" class="headerlink" title="1. lambda的语法"></a>1. lambda的语法</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/4af8cc96a8b940c78d041f470e4da014~tplv-k3u1fbpfcp-zoom-1.image" alt="lambda语法"></p><p>下面分别说下语法中的三个组成部分</p><ul><li><p>参数: </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">( Dog dog )<br></code></pre></td></tr></table></figure><ul><li>参数类型可省略（当编译器可以自动推导时），比如<code>Comparator&lt;String&gt; comparatorTest = (a, b)-&gt;a.length()-b.length();</code>,可以推导出a,b都为String</li><li>当参数类型可省略，且只有一个参数时，括弧也可以省略（但是个人习惯保留）</li></ul></li><li><p>符号： <code>-&gt;</code></p></li><li><p>主体：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;javalover&quot;); &#125;<br></code></pre></td></tr></table></figure><ul><li>如果是一条语句，则需要加大括号和分号<code>&#123;;&#125;</code>（比如上图所示）</li><li>如果是一个表达式，则直接写，啥也不加（比如<code>a.length()- b.length()</code>）</li></ul></li></ul><h3 id="2-为啥引入lambda"><a href="#2-为啥引入lambda" class="headerlink" title="2. 为啥引入lambda"></a>2. 为啥引入lambda</h3><p>为了简化代码</p><p>因为Java是面向对象语言，所以在lambda出现之前，我们需要先构造一个对象，然后在对象的方法中实现具体的内容，再把构造的对象传递给某个对象或方法</p><p>但是有了lambda以后，我们可以直接将代码块传递给对象或方法</p><p>现在再回头看下开头的例子</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/ca93fa395a2e4015a4b202e55ce7c357~tplv-k3u1fbpfcp-zoom-1.image" alt="lambda减少了模板代码"></p><p>可以看到，用了lambda表达式后，少了很多模板代码，只剩下一个代码块（最核心的部分）</p><h3 id="3-什么是函数式接口"><a href="#3-什么是函数式接口" class="headerlink" title="3. 什么是函数式接口"></a>3. 什么是函数式接口</h3><p>就是只定义了一个抽象方法的接口</p><ul><li>正例：有多个<a href="https://mp.weixin.qq.com/s/NAO8W8YbnxWZpNEDh1xskQ">默认方法</a>，但是如果只有一个抽象方法，那它就是函数式接口，示例代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FunctionInterfaceDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">abstractFun</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;fun1&quot;</span>);    <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;fun2&quot;</span>);<br>    &#125;   <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>这里的注解@FunctionalInterface可以省略，但是建议加上，就是为了告诉编译器，这是一个函数式接口，此时如果该接口有多个抽象方法，那么编译器就会报错</p></blockquote><ul><li>反例：比如A extends B，A和B各有一个抽象方法，那么A就不是函数式接口，示例代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编译器会报错，Multiple non-overriding abstract methods found in XXX</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NoFunctionInterfaceDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FunctionInterfaceDemo</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">abstractFun2</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>上面的父接口FunctionInterfaceDemo中已经有了一个抽象方法，此时NoFunctionInterfaceDemo又定义了一个抽象方法，结果编译器就提示了：存在多个抽象方法</p></blockquote><p>在Java8之前，其实我们已经接触过函数式接口</p><p>比如Runnable 和 Comparable</p><p>只是没有注解@FunctionalInterface。</p><blockquote><p>那这个函数式接口要怎么用呢？</p></blockquote><p>配合lambda食用，效果最佳（就是把lambda传递给函数式接口），示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Thread(() -&gt; System.out.println(<span class="hljs-string">&quot;run&quot;</span>)).start();<br>复制代码<br></code></pre></td></tr></table></figure><p>其中用到的函数式接口是<code>Runnable</code></p><h3 id="4-什么是行为参数化"><a href="#4-什么是行为参数化" class="headerlink" title="4. 什么是行为参数化"></a>4. 什么是行为参数化</h3><p>就是把<strong>行为</strong>定义成<strong>参数</strong>，行为就是<strong>函数式接口</strong></p><p>类似<a href="https://mp.weixin.qq.com/s/NgqWzRbrHmO9iTBAQM-7zw">泛型</a>中的类型参数化<code>&lt;T&gt;</code>，类型参数化是把<strong>类型</strong>定义成<strong>参数</strong></p><p>行为参数化，通俗点来说：</p><ul><li>就是用<strong>函数式接口</strong>做<strong>形参</strong></li><li>然后传入接口的各种实现内容（即<strong>lambda表达式</strong>）作为<strong>实参</strong></li><li>最后在lambda内<strong>实现各种行为</strong>（好像又回到<a href="">多态</a>的那一节了？这也是为啥多态是Java的三大特性的原因之一，应用太广泛了）</li></ul><p>这样来看的话，<strong>行为参数化</strong>和设计模式中的<strong>策略模式</strong>有点像了（后面章节会分别讲常用的几种设计模式）</p><p>下面我们手写一个函数式接口来加深理解吧</p><h3 id="5-手写一个函数式接口"><a href="#5-手写一个函数式接口" class="headerlink" title="5. 手写一个函数式接口"></a>5. 手写一个函数式接口</h3><p>下面我们循序渐进，先从简单的需求开始</p><ul><li>第一步：比如我们想要<strong>读取某个文件</strong>，那可以有如下方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">processFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// Java7新增的语法，try()&#123;&#125;，可自动关闭资源，减少了代码的臃肿</span><br>    <span class="hljs-keyword">try</span>( BufferedReader bufferedReader = <br>        <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span>  FileReader(<span class="hljs-string">&quot;D:\\JavaProject\\JavaBasicDemo\\test.txt&quot;</span>)))&#123;<br>        <span class="hljs-keyword">return</span> bufferedReader.readLine();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，核心的行为动作就是 <code>return bufferedReader.readLine();</code>，表示读取第一行的数据并返回</p><p>那如果我们想要读取两行呢？三行？</p><ul><li>第二步：这时就需要用到上面的<strong>函数式接口</strong>了，下面就是我们自己编写的函数式接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FileReadInterface</span></span>&#123;<br>  <span class="hljs-comment">// 这里接受一个BufferedReader对象，返回一个String对象</span><br>    <span class="hljs-function">String <span class="hljs-title">process</span><span class="hljs-params">(BufferedReader reader)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，只有一个抽象方法<code>process() </code>，它就是用来处理第一步中的核心动作（读取文件内容）</p><p>至于想读取多少内容，那就需要我们在lambda表达式中定义了</p><ul><li>第三步：接下来我们定义多个<strong>lambda表达式</strong>，用来<strong>传递</strong>给<strong>函数式接口</strong>，其中每个lambda表达式就代表了一种不同的行为，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 读取一行</span><br>FileReadInterface fileReadInterface = reader -&gt; reader.readLine();<br><span class="hljs-comment">// 读取两行</span><br>FileReadInterface fileReadInterface2 = reader -&gt; reader.readLine() + reader.readLine();<br><br><br></code></pre></td></tr></table></figure><ul><li>第四步：我们需要修改第一步的<code>processFile()</code>，让其接受一个函数式接口，并调用其中的抽象方法，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参数为第二步我们自己手写的函数式接口</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">processFile</span><span class="hljs-params">(FileReadInterface fileReadInterface)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span>( BufferedReader bufferedReader =<br>                 <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;./test.txt&quot;</span>)))&#123;<br><span class="hljs-comment">// 这里我们不再自己定义行为，而是交给函数式接口的抽象方法来处理，然后通过lambda表达式的传入来实现多个行为</span><br>          <span class="hljs-keyword">return</span> fileReadInterface.process(bufferedReader);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><ul><li>第五步：拼接后，完整代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileReaderDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 第三步： </span><br>      <span class="hljs-comment">// lambda表达式1 传给 函数式接口：只读取一行</span><br>      FileReadInterface fileReadInterface = reader -&gt; reader.readLine();<br><span class="hljs-comment">// lambda表达式2 传给 函数式接口：只读取两行</span><br>      FileReadInterface fileReadInterface2 = reader -&gt; reader.readLine() + reader.readLine();<br>      <span class="hljs-comment">// 最后一步： 不同的函数式接口的实现，表现出不同的行为</span><br>        String str1 = processFile(fileReadInterface);<br>        String str2 = processFile(fileReadInterface2);<br>        System.out.println(str1);<br>        System.out.println(str2);<br>    &#125;<br>  <span class="hljs-comment">// 第四步： 读取文件方法，接受函数式接口作为参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">processFile</span><span class="hljs-params">(FileReadInterface fileReadInterface)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span>( BufferedReader bufferedReader =<br>                 <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;./test.txt&quot;</span>)))&#123;<br><span class="hljs-comment">// 调用函数式接口中的抽象方法来处理数据</span><br>          <span class="hljs-keyword">return</span> fileReadInterface.process(bufferedReader);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 第一步：</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">processFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span>( BufferedReader bufferedReader =<br>                 <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;./test.txt&quot;</span>)))&#123;<br>          <span class="hljs-keyword">return</span> bufferReader.readLine();<br>        &#125;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// 第二步： 我们手写的函数式接口</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FileReadInterface</span></span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">process</span><span class="hljs-params">(BufferedReader reader)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>其实你会发现，我们手写的这个函数式接口，其实就是<code>Function&lt;T&gt;</code>去除泛型化后的接口，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Function</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">R</span>&gt; </span>&#123;<br><span class="hljs-comment">// 都是接受一个参数，返回另一个参数</span><br>  <span class="hljs-function">R <span class="hljs-title">apply</span><span class="hljs-params">(T t)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面我们列出Java中常用的一些函数式接口，你会发现自带的已经够用了，基本不会需要我们自己去写</p><p>这里的手写只是为了自己实现一遍，可以加深理解程度</p><h3 id="6-常用的函数式接口"><a href="#6-常用的函数式接口" class="headerlink" title="6. 常用的函数式接口"></a>6. 常用的函数式接口</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/4fb3fca88fc74b7a9d97a549ba183037~tplv-k3u1fbpfcp-zoom-1.image" alt="常用的函数式接口"></p><h3 id="7-什么是方法引用"><a href="#7-什么是方法引用" class="headerlink" title="7. 什么是方法引用"></a>7. 什么是方法引用</h3><p>我们先看一个例子</p><p>前面我们写的lambda表达式，其实还可以简化，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 简化前</span><br>Function&lt;Cat, Integer&gt; function = c-&gt;c.getAge();<br><span class="hljs-comment">// 简化后</span><br>Function&lt;Cat, Integer&gt; function2 = Cat::getAge;<br><br></code></pre></td></tr></table></figure><p>其中简化后的<code>Cat::getAge</code>，我们就叫做<strong>方法引用</strong></p><p><strong>方法引用就是引用类或对象的方法</strong>；</p><p>下面我们列出方法引用的三种情况：</p><ol><li>Object::instanceMethod（对象的实例方法）</li><li>Class::staticMethod（类的静态方法）</li><li>Class::instanceMethod（类的实例方法）</li></ol><p>像我们上面举的例子就是第三种：类的实例方法</p><p>下面我们用代码演示上面的三种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReferenceDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 第一种:引用对象的实例方法</span><br>        Cat cat = <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>);<br>        Function&lt;Cat, Integer&gt; methodRef1 = cat::getSum; <br>        <span class="hljs-comment">// 第二种:引用类的静态方法</span><br>        Supplier&lt;Integer&gt; methodRef2 = Cat::getAverageAge;<br>        <span class="hljs-comment">// 第三种：引用类的实例方法</span><br>        Function&lt;Cat, Integer&gt; methodRef3 = Cat::getAge;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取猫的平均年龄</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAverageAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取两只猫的年龄总和</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(Cat cat)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> cat.getAge() + <span class="hljs-keyword">this</span>.getAge();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>为啥要用这个方法引用呢？</p></blockquote><p>方法引用好比lambda表达式的语法糖，语法更加简洁，清晰</p><p>一看就知道是调用哪个类或对象的哪个方法</p><h3 id="8-什么是构造引用"><a href="#8-什么是构造引用" class="headerlink" title="8. 什么是构造引用"></a>8. 什么是构造引用</h3><p>上面介绍了方法引用，就是直接引用某个方法</p><p>这里的构造引用同理可得，就是引用某个类的构造方法</p><p>构造引用的表达式为：<code>Class::new</code>，仅此一种</p><p>如果你有多个构造函数，那编译器会自己进行推断参数（你看看，多好，多简洁）</p><p>比如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里调用 new Cat()</span><br>Supplier&lt;Cat&gt; constructRef1 = Cat::<span class="hljs-keyword">new</span>;<br><span class="hljs-comment">// 这里调用 new Cat(Integer)</span><br>Function&lt;Integer, Cat&gt; constructRef2 = Cat::<span class="hljs-keyword">new</span>;<br><br></code></pre></td></tr></table></figure><h3 id="9-lambda表达式中引入外部变量的限制"><a href="#9-lambda表达式中引入外部变量的限制" class="headerlink" title="9. lambda表达式中引入外部变量的限制"></a>9. lambda表达式中引入外部变量的限制</h3><p>要求引入lambda表达式中的变量，必须是最终变量，即该变量不会再被修改</p><p>比如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>  String str = <span class="hljs-string">&quot;javalover.cc&quot;</span>;<br>  Runnable runnable = ()-&gt;&#123;<br>    str = <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">// 这里会报错，因为修改了str引用的指向</span><br>    System.out.println(str);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，lambda表达式引用了外面的str引用，但是又在表达式内部做了修改，结果就报错了</p><blockquote><p>为啥要有这个限制呢？</p></blockquote><p>为了线程安全，因为lambda表达式有一个好处就是只在需要的时候才会执行，而不是调用后立马执行</p><p>这样就会存在多个线程同时执行的并发问题</p><p>所以Java就从根源上解决：不让变量被修改，都是只读的</p><blockquote><p>那你可能好奇，我不把str的修改代码放到表达式内部可以吗？</p></blockquote><p>也不行，道理是一样的，只要lambda有用到这个变量，那这个变量不管是在哪里被修改，都是不允许的</p><p>不然的话，我这边先执行了一次lambda表达式，结果你就改了变量值，那我第二次执行lambda，不就乱了吗</p><h3 id="10-lambda的组合操作"><a href="#10-lambda的组合操作" class="headerlink" title="10. lambda的组合操作"></a>10. lambda的组合操作</h3><p>最后是lambda的必杀技：<strong>组合操作</strong></p><p>在这里叫组合或者复合都可以</p><blockquote><p>概述：组合操作就是先用一个lambda表达式，然后再在后面组合另一个lambda表达式，然后再在后面组合另另一个lambda表达式，然后。。。有点像是链式操作</p></blockquote><p>学过JS的都知道Promise，里面的链式操作就和这里的组合操作很像</p><p>用过Lombok的朋友，应该很熟悉@Builder注解，其实就是构造者模式</p><p>下面我们用代码演示下组合操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重点代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComposeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Dog&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> Dog(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>), <span class="hljs-keyword">new</span> Dog(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// 1. 先按年龄排序（默认递增）</span><br>      <span class="hljs-comment">// Dog::getAge, 上面介绍的方法引用</span><br>      <span class="hljs-comment">// comparingInt, 是Comparator的一个静态方法，返回Comparator&lt;T&gt;</span><br>      Comparator&lt;Dog&gt; comparableAge = Comparator.comparingInt(Dog::getAge);<br>        <span class="hljs-comment">// 2. 如果有相同的年龄，则年龄相同的再按体重排序（如果年龄已经比较出大小，则下面的体重就不会再去比较）</span><br>        Comparator&lt;Dog&gt; comparableWeight = Comparator.comparingInt(Dog::getWeight);;<br>        <span class="hljs-comment">// 3. 调用list对象的sort方法排序，参数是Comparator&lt;? super Dog&gt;</span><br>        list.sort(comparableAge.thenComparing(comparableWeight));<br>        System.out.println(list);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 非重点代码</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出：<code>[Dog&#123;age=1, weight=1&#125;, Dog&#123;age=1, weight=2&#125;]</code></p><p>比较的流程如下所示：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/95d889dd6f084a11982c9e5986621e30~tplv-k3u1fbpfcp-zoom-1.image" alt="组合操作"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>lambda的语法:  参数+符合+表达式或语句，比如<code>(a,b)-&gt;&#123;System.out.println(&quot;javalover.cc&quot;);&#125;</code></li><li>函数式接口：只有一个抽象方法，最好加@FunctionalInterface，这样编译器可及时发现错误，javadoc也说明这是一个函数式接口（可读性）</li><li>行为参数化：就是函数式接口作为参数，然后再将lambda表达式传给函数式接口，通过不同的lambda内容实现不同的行为</li><li>方法引用：lambda的语法糖，总共有三种:<ul><li>Object::instanceMethod（对象的实例方法）</li><li>Class::staticMethod（类的静态方法）</li><li>Class::instanceMethod（类的实例方法）</li></ul></li><li>构造引用：就一种，编译器自己可判断是哪个构造函数，语法为<code>Class::new</code></li><li>在lambda中引入外部变量，必须保证这个变量是最终变量，即不再被修改</li><li>lambda的组合操作，就是链式操作，组合是通过函数式接口的静态方法来组合（静态方法会返回另一个函数式接口的对象）</li></ol><p>比如<code>list.sort(comparableAge.thenComparing(comparableWeight));</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java8</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring奇技淫巧之扩展点的应用</title>
    <link href="/blog/2021/04/10/Spring%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E6%89%A9%E5%B1%95%E7%82%B9%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/blog/2021/04/10/Spring%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E6%89%A9%E5%B1%95%E7%82%B9%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>首先先介绍下Bean的生命周期」</strong></p><p>我们知道Bean的生命周期分为几个主干流程</p><ul><li>Bean（单例非懒加载）的实例化阶段</li><li>Bean的属性注入阶段</li><li>Bean的初始化阶段</li><li>Bean的销毁阶段</li></ul><p>下面是整个Spring容器的启动流程，可以看到除了上述几个主干流程外，Spring还提供了很多扩展点</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/94786824dcf94545862fdd0dfa6d5407~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>下面详细介绍下Spring的常见的扩展点</p><h1 id="Spring常见扩展点"><a href="#Spring常见扩展点" class="headerlink" title="Spring常见扩展点"></a>Spring常见扩展点</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/fc8a26e6e5334f5d92d36d9acdf65026~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><strong>「BeanFactoryPostProcessor#postProcessBeanFactory」</strong></p><p>有时候整个项目工程中bean的数量有上百个，而大部分单测依赖都是整个工程的xml，导致单测执行时需要很长时间（大部分时间耗费在xml中数百个单例非懒加载的bean的实例化及初始化过程）</p><p>解决方法：利用Spring提供的扩展点将xml中的bean设置为懒加载模式，省去了Bean的实例化与初始化时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyBeanFactoryProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanFactoryPostProcessor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        DefaultListableBeanFactory fac = (DefaultListableBeanFactory) beanFactory;<br>        Map&lt;String, AbstractBeanDefinition&gt; map = (Map&lt;String, AbstractBeanDefinition&gt;) ReflectionTestUtils.getField(fac, <span class="hljs-string">&quot;beanDefinitionMap&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, AbstractBeanDefinition&gt; entry : map.entrySet()) &#123;<br>            <span class="hljs-comment">//设置为懒加载</span><br>            entry.getValue().setLazyInit(<span class="hljs-keyword">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>「InstantiationAwareBeanPostProcessor#postProcessPropertyValues」</strong></p><p>非常规的配置项比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.zhou&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>Spring提供了与之对应的特殊解析器</p><p>正是通过这些特殊的解析器才使得对应的配置项能够生效</p><p>而针对这个特殊配置的解析器为 ComponentScanBeanDefinitionParser</p><p>在这个解析器的解析方法中，注册了很多特殊的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> BeanDefinition <span class="hljs-title">parse</span><span class="hljs-params">(Element element, ParserContext parserContext)</span> </span>&#123;<br>  <span class="hljs-comment">//...</span><br>  registerComponents(parserContext.getReaderContext(), beanDefinitions, element);<br>    <span class="hljs-comment">//...</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>复制代码<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title">registerAnnotationConfigProcessors</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">   BeanDefinitionRegistry registry, Object source)</span> </span>&#123;<br><br>  Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="hljs-keyword">new</span> LinkedHashSet&lt;BeanDefinitionHolder&gt;(<span class="hljs-number">4</span>);<br>  <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">//@Autowire</span><br>  <span class="hljs-keyword">if</span> (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;<br>   RootBeanDefinition def = <span class="hljs-keyword">new</span> RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);<br>   def.setSource(source);<br>   beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));<br>  &#125;<br><br>  <span class="hljs-comment">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span><br>   <span class="hljs-comment">//@Resource</span><br>  <span class="hljs-keyword">if</span> (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;<br>      <span class="hljs-comment">//特殊的Bean</span><br>   RootBeanDefinition def = <span class="hljs-keyword">new</span> RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);<br>   def.setSource(source);<br>   beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));<br>  &#125;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-keyword">return</span> beanDefs;<br> &#125;<br></code></pre></td></tr></table></figure><p>以@Resource为例，看看这个特殊的bean做了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonAnnotationBeanPostProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InitDestroyAnnotationBeanPostProcessor</span></span><br><span class="hljs-class">  <span class="hljs-keyword">implements</span> <span class="hljs-title">InstantiationAwareBeanPostProcessor</span>, <span class="hljs-title">BeanFactoryAware</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br>     <br>      <span class="hljs-function"><span class="hljs-keyword">public</span> PropertyValues <span class="hljs-title">postProcessPropertyValues</span><span class="hljs-params">(PropertyValues pvs, PropertyDescriptor[] pds, </span></span><br><span class="hljs-function"><span class="hljs-params">      Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>          InjectionMetadata metadata = findResourceMetadata(beanName, bean.getClass());<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//属性注入</span><br>            metadata.inject(bean, beanName, pvs);<br>          &#125;<br>          <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(beanName, <span class="hljs-string">&quot;Injection of resource dependencies failed&quot;</span>, ex);<br>          &#125;<br>          <span class="hljs-keyword">return</span> pvs;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到在postProcessPropertyValues方法中，进行了属性注入</p><p><strong>「invokeAware」</strong></p><p>实现BeanFactoryAware接口的类，会由容器执行setBeanFactory方法将当前的容器BeanFactory注入到类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanFactoryHolder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanFactoryAware</span></span>&#123;<br>   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BeanFactory beanFactory;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        <span class="hljs-keyword">this</span>.beanFactory = beanFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>「BeanPostProcessor#postProcessBeforeInitialization」</strong></p><p>实现ApplicationContextAware接口的类，会由容器执行setApplicationContext方法将当前的容器applicationContext注入到类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextAwareProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConfigurableApplicationContext applicationContext;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApplicationContextAwareProcessor</span><span class="hljs-params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>      <span class="hljs-comment">//...</span><br>      invokeAwareInterfaces(bean);<br>      <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeAwareInterfaces</span><span class="hljs-params">(Object bean)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ApplicationContextAware) &#123;<br>          ((ApplicationContextAware) bean).setApplicationContext(<span class="hljs-keyword">this</span>.applicationContext);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到是在BeanPostProcessor的postProcessBeforeInitialization中进行了setApplicationContext方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextHolder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationContextAware</span></span>&#123;<br>   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        <span class="hljs-keyword">this</span>.applicationContext = applicationContext;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>「afterPropertySet()和init-method」</strong></p><p>目前很多Java中间件都是基本Spring Framework搭建的，而这些中间件经常把入口放到afterPropertySet或者自定义的init中</p><p><strong>「BeanPostProcessor#postProcessAfterInitialization」</strong></p><p>熟悉aop的同学应该知道，aop底层是通过动态代理实现的</p><p>当配置了<code>&lt;aop:aspectj-autoproxy/&gt;</code>时候，默认开启aop功能，相应地调用方需要被aop织入的对象也需要替换为动态代理对象</p><p>不知道大家有没有思考过动态代理是如何<strong>「在调用方无感知情况下替换原始对象」</strong>的？</p><blockquote><p>❝</p><p>根据上文的讲解，我们知道：</p><p>❞</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;aop:aspectj-autoproxy/&gt;<br></code></pre></td></tr></table></figure><p>Spring也提供了特殊的解析器，和其他的解析器类似，在核心的parse方法中注册了特殊的bean</p><p>这里是一个BeanPostProcessor类型的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AspectJAutoProxyBeanDefinitionParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanDefinitionParser</span> </span>&#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> BeanDefinition <span class="hljs-title">parse</span><span class="hljs-params">(Element element, ParserContext parserContext)</span> </span>&#123;<br>    <span class="hljs-comment">//注册特殊的bean</span><br>  AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);<br>  extendBeanDefinition(element, parserContext);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将于当前bean对应的动态代理对象返回即可，该过程对调用方全部透明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationAwareAspectJAutoProxyCreator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AspectJAwareAdvisorAutoProxyCreator</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-keyword">null</span>) &#123;<br>          Object cacheKey = getCacheKey(bean.getClass(), beanName);<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.earlyProxyReferences.containsKey(cacheKey)) &#123;<br>            <span class="hljs-comment">//如果该类需要被代理，返回动态代理对象；反之，返回原对象</span><br>            <span class="hljs-keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正是利用Spring的这个扩展点实现了动态代理对象的替换</p><p><strong>「destroy()和destroy-method」</strong></p><p>bean生命周期的最后一个扩展点，该方法用于执行一些bean销毁前的准备工作，比如将当前bean持有的一些资源释放掉</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作四年，分享50个让你代码更好的小建议</title>
    <link href="/blog/2021/04/04/%E5%88%86%E4%BA%AB50%E4%B8%AA%E8%AE%A9%E4%BD%A0%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%B0%8F%E5%BB%BA%E8%AE%AE/"/>
    <url>/blog/2021/04/04/%E5%88%86%E4%BA%AB50%E4%B8%AA%E8%AE%A9%E4%BD%A0%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%B0%8F%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="1-仅是判断是否存在时，select-count-比-select-具体的列，更好。"><a href="#1-仅是判断是否存在时，select-count-比-select-具体的列，更好。" class="headerlink" title="1. 仅是判断是否存在时，select count 比 select 具体的列，更好。"></a>1. 仅是判断是否存在时，select count 比 select 具体的列，更好。</h3><p>我们经常遇到类似的业务场景，如，判断某个用户<code>userId</code>是否是会员。</p><p><strong>（反例）：</strong>  一些小伙伴会这样实现，先查从用户信息表查出用户记录，然后再去判断是否是会员:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;selectUserByUserId&quot;</span> resultMap=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;<br>     selct user_id , vip_flag <span class="hljs-keyword">from</span>  user_info <span class="hljs-keyword">where</span> user_id =<span class="hljs-meta">#&#123;userId&#125;;</span><br> &lt;/<span class="hljs-keyword">select</span>&gt;<br><br><span class="hljs-function">boolean <span class="hljs-title">isVip</span> (<span class="hljs-params">String userId</span>)</span>&#123;<br>  UserInfo userInfo = userInfoDAp.selectUserByUserId(userId);<br>  <span class="hljs-keyword">return</span> UserInfo!=<span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-string">&quot;Y&quot;</span>.<span class="hljs-keyword">equals</span>(userInfo.getVipFlag())<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>（正例）：</strong> 针对这种业务场景，其实更好的实现，是直接<code>select count</code>一下，如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;countVipUserByUserId&quot;</span> resultType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;<br>     selct <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span>  user_info <span class="hljs-keyword">where</span> user_id =#&#123;userId&#125; <span class="hljs-keyword">and</span> vip_flag =<span class="hljs-string">&#x27;Y&#x27;</span>;<br> &lt;/<span class="hljs-keyword">select</span>&gt;<br> <br> <span class="hljs-keyword">boolean</span> isVip (<span class="hljs-keyword">String</span> userId)&#123;<br>  int vipNum = userInfoDAp.countVipUserByUserId(userId);<br>  return vipNum&gt;0<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="2-复杂的if逻辑条件，可以调整顺序，让程序更高效"><a href="#2-复杂的if逻辑条件，可以调整顺序，让程序更高效" class="headerlink" title="2. 复杂的if逻辑条件，可以调整顺序，让程序更高效"></a>2. 复杂的if逻辑条件，可以调整顺序，让程序更高效</h3><p>假设业务需求是这样：如果用户是会员，并且第一次登陆时，需要发一条通知的短信。假如没有经过思考，代码很可能直接这样写了。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-variable">isUserVip</span> &amp;&amp; <span class="hljs-variable">isFirstLogin</span>)&#123;</span><br><span class="hljs-function">    <span class="hljs-title">sendMsgNotify</span>();</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function">复制代码</span><br></code></pre></td></tr></table></figure><p>假设总共有5个请求进来，isUserVip通过的有3个请求，isFirstLogin通过的有1个请求。 那么以上代码，isUserVip执行的次数为5次，isFirstLogin执行的次数也是3次，如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/b30c2899d10f4258bf1fc94a9ebf324c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如果调整一下isUserVip和isFirstLogin的顺序呢？</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-variable">isFirstLogin</span> &amp;&amp; <span class="hljs-variable">isUserVip</span> )&#123;</span><br><span class="hljs-function">    <span class="hljs-title">sendMsg</span>();</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function">复制代码</span><br></code></pre></td></tr></table></figure><p>isFirstLogin执行的次数是5次，isUserVip执行的次数是1次，如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/103a20c642e04ea899d74c4cb8187b28~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如果你的isFirstLogin，判断逻辑只是select count 一下数据库表，isUserVip也是select count 一下数据库表的话，显然，把isFirstLogin放在前面更高效。</p><h3 id="3-写查询Sql的时候，只查你需要用到的字段，还有通用的字段，拒绝反手的select"><a href="#3-写查询Sql的时候，只查你需要用到的字段，还有通用的字段，拒绝反手的select" class="headerlink" title="3. 写查询Sql的时候，只查你需要用到的字段，还有通用的字段，拒绝反手的select *"></a>3. 写查询Sql的时候，只查你需要用到的字段，还有通用的字段，拒绝反手的select *</h3><p><strong>反例：</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_info <span class="hljs-keyword">where</span> user_id =<span class="hljs-meta">#&#123;userId&#125;;</span><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"> selct user_id , vip_flag <span class="hljs-keyword">from</span>  user_info <span class="hljs-keyword">where</span> user_id =<span class="hljs-comment">#&#123;userId&#125;;</span><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>理由：</strong></p><ul><li>节省资源、减少网络开销。</li><li>可能用到覆盖索引，减少回表，提高查询效率。</li></ul><h3 id="4-优化你的程序，拒绝创建不必要的对象"><a href="#4-优化你的程序，拒绝创建不必要的对象" class="headerlink" title="4. 优化你的程序，拒绝创建不必要的对象"></a>4. 优化你的程序，拒绝创建不必要的对象</h3><p>如果你的变量，后面的逻辑判断，一定会被赋值；或者说，只是一个字符串变量，直接初始化字符串常量就可以了，没有必要愣是要new String().</p><p>反例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">String</span> s = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span> (<span class="hljs-string">&quot;欢迎关注公众号：捡田螺的小男孩&quot;</span>);<br>复制代码<br></code></pre></td></tr></table></figure><p>正例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">String s=  <span class="hljs-string">&quot;欢迎关注公众号：捡田螺的小男孩 ”;</span><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="5-初始化集合时，指定容量"><a href="#5-初始化集合时，指定容量" class="headerlink" title="5. 初始化集合时，指定容量"></a>5. 初始化集合时，指定容量</h3><p>阿里的开发手册，也明确提到这个点： </p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20210404075408639.png" alt="image-20210404075408639"></p><p>假设你的map要存储的元素个数是15个左右，最优写法如下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"> <span class="hljs-comment">//initialCapacity = 15/0.75+1=21</span><br> <span class="hljs-built_in">Map</span> <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> HashMap(<span class="hljs-number">21</span>);<br> 又因为hashMap的容量跟<span class="hljs-number">2</span>的幂有关，所以可以取<span class="hljs-number">32</span>的容量<br> <span class="hljs-built_in">Map</span> <span class="hljs-built_in">map</span> = <span class="hljs-literal">new</span> HashMap(<span class="hljs-number">32</span>);<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="6-catch了异常，需要打印出具体的exception，方便更好定位问题"><a href="#6-catch了异常，需要打印出具体的exception，方便更好定位问题" class="headerlink" title="6.catch了异常，需要打印出具体的exception，方便更好定位问题"></a>6.catch了异常，需要打印出具体的exception，方便更好定位问题</h3><p><strong>反例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// do something</span><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;捡田螺的小男孩，你的程序有异常啦&quot;</span>);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// do something</span><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;捡田螺的小男孩，你的程序有异常啦：&quot;</span>,e); <span class="hljs-comment">//把exception打印出来</span><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>理由：</strong></p><ul><li>反例中，并没有把exception出来，到时候排查问题就不好查了啦，到底是SQl写错的异常还是IO异常，还是其他呢？所以应该把exception打印到日志中哦~</li></ul><h3 id="7-打印日志的时候，对象没有覆盖Object的toString的方法，直接把类名打印出来了。"><a href="#7-打印日志的时候，对象没有覆盖Object的toString的方法，直接把类名打印出来了。" class="headerlink" title="7. 打印日志的时候，对象没有覆盖Object的toString的方法，直接把类名打印出来了。"></a>7. 打印日志的时候，对象没有覆盖Object的toString的方法，直接把类名打印出来了。</h3><p>我们在打印日志的时候，经常想看下一个请求参数对象request是什么。于是很容易有类似以下这些代码：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">publick <span class="hljs-built_in">Response</span> dealWithRequest(<span class="hljs-built_in">Request</span> <span class="hljs-built_in">request</span>)&#123;<br>   log.info(<span class="hljs-string">&quot;请求参数是：&quot;</span>.<span class="hljs-built_in">request</span>.toString)<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">请求参数是：<span class="hljs-keyword">local</span>.Request<span class="hljs-symbol">@49476842</span><br>复制代码<br></code></pre></td></tr></table></figure><p>这是因为对象的toString方法，默认的实现是“类名@散列码的无符号十六进制”。所以你看吧，这样子打印日志就没啥意思啦，你都不知道打印的是什么内容。</p><p>所以一般对象(尤其作为传参的对象），<strong>都覆盖重写toString()方法</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Request</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> age;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Request&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&#x27;&quot;</span> + age + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br>publick Response <span class="hljs-function"><span class="hljs-title">dealWithRequest</span>(<span class="hljs-params">Request request</span>)</span>&#123;<br>   log.info(<span class="hljs-string">&quot;请求参数是：&quot;</span>.request.toString)<br>&#125;<br><br><br>复制代码<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">请求参数是：Request&#123;<span class="hljs-attribute">age</span>=<span class="hljs-string">&#x27;26&#x27;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;公众号：捡田螺的小男孩&#x27;</span>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="8-一个方法，拒绝过长的参数列表。"><a href="#8-一个方法，拒绝过长的参数列表。" class="headerlink" title="8. 一个方法，拒绝过长的参数列表。"></a>8. 一个方法，拒绝过长的参数列表。</h3><p>假设有这么一个公有方法，形参有四个。。。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> getUserInfo（<span class="hljs-keyword">String</span> name,<span class="hljs-keyword">String</span> age,<span class="hljs-keyword">String</span> sex,<span class="hljs-keyword">String</span> mobile)&#123;<br>  <span class="hljs-comment">// do something ...</span><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果现在需要多传一个version参数进来，并且你的公有方法是类似dubbo这种对外提供的接口的话，那么你的接口是不是需要兼容老版本啦？</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> getUserInfo（<span class="hljs-keyword">String</span> name,<span class="hljs-keyword">String</span> age,<span class="hljs-keyword">String</span> sex,<span class="hljs-keyword">String</span> mobile)&#123;<br>  <span class="hljs-comment">// do something ...</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新接口调这里</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> getNewUserInfo（<span class="hljs-keyword">String</span> name,<span class="hljs-keyword">String</span> age,<span class="hljs-keyword">String</span> sex,<span class="hljs-keyword">String</span> mobile，<span class="hljs-keyword">String</span> version)&#123;<br>  <span class="hljs-comment">// do something ...</span><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>所以呢，一般一个方法的参数，一般不宜过长。过长的参数列表，不仅看起来不优雅，并且接口升级时，可能还要考虑新老版本兼容。如果参数实在是多怎么办呢？可以用个DTO对象包装一下这些参数呢~如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> getUserInfo（UserInfoParamDTO userInfoParamDTO)&#123;<br>  <span class="hljs-comment">// do something ...</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfoParamDTO</span>&#123;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> age; <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> sex;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> mobile;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>用个DTO对象包装一下，即使后面有参数变动，也可以不用动对外接口了，好处杠杠的。</p><h3 id="9-使用缓冲流，减少IO操作"><a href="#9-使用缓冲流，减少IO操作" class="headerlink" title="9. 使用缓冲流，减少IO操作"></a>9. 使用缓冲流，减少IO操作</h3><p><strong>反例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  公众号：捡田螺的小男孩</span><br><span class="hljs-comment"> *  @desc: 复制一张图片文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws FileNotFoundException </span>&#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-built_in">begin</span> = System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (FileInputStream input = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:/456.png&quot;</span>);<br>             FileOutputStream output = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:/789.png&quot;</span>)) &#123;<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> i;<br>            <span class="hljs-keyword">while</span> ((i = input.<span class="hljs-built_in">read</span>(bytes)) != <span class="hljs-number">-1</span>) &#123;<br>                output.<span class="hljs-built_in">write</span>(bytes,<span class="hljs-number">0</span>,i);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-built_in">log</span>.error(<span class="hljs-string">&quot;复制文件发生异常&quot;</span>,e);<br>        &#125;<br>        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;常规流读写，总共耗时ms：&quot;</span>+(System.currentTimeMillis() - <span class="hljs-built_in">begin</span>));<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">常规流读写，总共耗时<span class="hljs-selector-tag">ms</span><span class="hljs-selector-pseudo">:52</span><br>复制代码<br></code></pre></td></tr></table></figure><p>使用<code>FileInputStream</code>、<code>FileOutputStream</code>实现文件读写功能，是没有什么问题的。但是呢，可以使用缓冲流<code>BufferedReader</code>、<code>BufferedWriter</code>、<code>BufferedInputStream</code>、<code>BufferedOutputStream</code>等，减少IO次数，提高读写效率。</p><blockquote><p>如果是不带缓冲的流，读取到一个字节或者字符的，就会直接输出数据了。而带缓冲的流，读取到一个字节或者字符时，先不输出，而是等达到缓冲区的最大容量，才一次性输出。</p></blockquote><p><strong>正例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  公众号：捡田螺的小男孩</span><br><span class="hljs-comment"> *  @desc: 复制一张图片文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws FileNotFoundException </span>&#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-built_in">begin</span> = System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (BufferedInputStream bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:/456.png&quot;</span>));<br>        BufferedOutputStream  bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:/789.png&quot;</span>))) &#123;<br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> i;<br>            <span class="hljs-keyword">while</span> ((i = input.<span class="hljs-built_in">read</span>(bytes)) != <span class="hljs-number">-1</span>) &#123;<br>                output.<span class="hljs-built_in">write</span>(bytes,<span class="hljs-number">0</span>,i);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-built_in">log</span>.error(<span class="hljs-string">&quot;复制文件发生异常&quot;</span>,e);<br>        &#125;<br>        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;总共耗时ms&quot;</span>+(System.currentTimeMillis() - <span class="hljs-built_in">begin</span>));<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">缓冲流读写，总共耗时<span class="hljs-selector-tag">ms</span><span class="hljs-selector-pseudo">:12</span><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="10-优化你的程序逻辑，比如前面已经查到的数据，在后面的方法也用到的话，是可以把往下传参的，减少方法调用-查表"><a href="#10-优化你的程序逻辑，比如前面已经查到的数据，在后面的方法也用到的话，是可以把往下传参的，减少方法调用-查表" class="headerlink" title="10. 优化你的程序逻辑，比如前面已经查到的数据，在后面的方法也用到的话，是可以把往下传参的，减少方法调用/查表"></a>10. 优化你的程序逻辑，比如前面已经查到的数据，在后面的方法也用到的话，是可以把往下传参的，减少方法调用/查表</h3><p><strong>反例：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public Response deal<span class="hljs-constructor">Request(Request <span class="hljs-params">request</span>)</span>&#123;<br>    <br>    UserInfo userInfo = userInfoDao.select<span class="hljs-constructor">UserByUserId(<span class="hljs-params">request</span>.<span class="hljs-params">getUserId</span>)</span>;<br>     <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Objects</span>.</span></span>is<span class="hljs-constructor">Null(<span class="hljs-params">request</span>)</span>)&#123;<br>       return ;<br>     &#125;<br>   <br>    insert<span class="hljs-constructor">UserVip(<span class="hljs-params">request</span>.<span class="hljs-params">getUserId</span>)</span>;<br>   <br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> insertUserVip（String userId）&#123;<br>      <span class="hljs-comment">//又查了一次 </span><br>      UserInfo userInfo = userInfoDao.select<span class="hljs-constructor">UserByUserId(<span class="hljs-params">request</span>.<span class="hljs-params">getUserId</span>)</span>;<br>      <span class="hljs-comment">//插入用户vip流水</span><br>      insert<span class="hljs-constructor">UserVipFlow(<span class="hljs-params">userInfo</span>)</span>;<br>      ....<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>很显然，以上程序代码，已经查到 userInfo，然后又把userId传下去，又查多了一次。。。实际上，可以把userInfo传下去的，这样可以省去一次查表操作，程序更高效。</p><p><strong>正例：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public Response deal<span class="hljs-constructor">Request(Request <span class="hljs-params">request</span>)</span>&#123;<br>    <br>    UserInfo userInfo = userInfoDao.select<span class="hljs-constructor">UserByUserId(<span class="hljs-params">request</span>.<span class="hljs-params">getUserId</span>)</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Objects</span>.</span></span>is<span class="hljs-constructor">Null(<span class="hljs-params">request</span>)</span>)&#123;<br>       return ;<br>     &#125;<br>   <br>    insert<span class="hljs-constructor">UserVip(<span class="hljs-params">userInfo</span>)</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> insertUserVip（UserInfo userInfo）&#123;<br>      <span class="hljs-comment">//插入用户vip流水</span><br>      insert<span class="hljs-constructor">UserVipFlow(<span class="hljs-params">userInfo</span>)</span>;<br>      ....<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="11-不要为了方便，直接在代码中使用0-1等魔法值，应该要用enum枚举代替。"><a href="#11-不要为了方便，直接在代码中使用0-1等魔法值，应该要用enum枚举代替。" class="headerlink" title="11. 不要为了方便，直接在代码中使用0,1等魔法值，应该要用enum枚举代替。"></a>11. 不要为了方便，直接在代码中使用0,1等魔法值，应该要用enum枚举代替。</h3><p><strong>反例：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;0&quot;</span>.equals(userInfo.getVipFlag))&#123;<br>    <span class="hljs-regexp">//</span>非会员，提示去开通会员<br>    tipOpenVip(userInfo);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(userInfo.getVipFlag))&#123;<br>    <span class="hljs-regexp">//</span>会员，加勋章返回<br>    addMedal（userInfo）;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserVipEnum</span>.</span><span class="hljs-module"><span class="hljs-identifier">NOT_VIP</span>.</span></span>getCode.equals(userInfo.getVipFlag))&#123;<br>    <span class="hljs-comment">//非会员，提示去开通会员</span><br>    tip<span class="hljs-constructor">OpenVip(<span class="hljs-params">userInfo</span>)</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserVipEnum</span>.</span><span class="hljs-module"><span class="hljs-identifier">VIP</span>.</span></span>getCode.equals(userInfo.getVipFlag))&#123;<br>    <span class="hljs-comment">//会员，加勋章返回</span><br>    addMedal（userInfo）;<br>&#125;<br><br>public enum UserVipEnum &#123;<br><br>    <span class="hljs-constructor">VIP(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;会员&quot;</span>)</span>,<br>    <span class="hljs-constructor">NOT_VIP(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;非会员&quot;</span>)</span>,:;<br><br>    <span class="hljs-keyword">private</span> String code; <br>    <span class="hljs-keyword">private</span> String desc;<br><br>    <span class="hljs-constructor">UserVipEnum(String <span class="hljs-params">code</span>, String <span class="hljs-params">desc</span>)</span> &#123;<br>        this.code = code;<br>        this.desc = desc;<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>写代码的时候，不要一时兴起，就直接使用魔法值哈。使用魔法值，维护代码起来很难受的。</p><h3 id="12-当成员变量值不会改变时，优先定义为静态常量"><a href="#12-当成员变量值不会改变时，优先定义为静态常量" class="headerlink" title="12. 当成员变量值不会改变时，优先定义为静态常量"></a>12. 当成员变量值不会改变时，优先定义为静态常量</h3><p><strong>反例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Task</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> long timeout = <span class="hljs-number">10</span>L;<br>    ...<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> &#123;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> TIMEOUT = <span class="hljs-number">10L</span>;<br>    ...<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><blockquote><p>因为如果定义为static，即类静态常量，在每个实例对象中，它只有一份副本。如果是成员变量，每个实例对象中，都各有一份副本。显然，如果这个变量不会变的话，定义为静态常量更好一些。</p></blockquote><h3 id="13-注意检验空指针，不要轻易相信业务，说正常逻辑某个参数不可能为空。"><a href="#13-注意检验空指针，不要轻易相信业务，说正常逻辑某个参数不可能为空。" class="headerlink" title="13. 注意检验空指针，不要轻易相信业务，说正常逻辑某个参数不可能为空。"></a>13. 注意检验空指针，不要轻易相信业务，说正常逻辑某个参数不可能为空。</h3><p>NullPointerException 在我们日常开发中非常常见，我们代码开发过程中，一定要对空指针保持灵敏的嗅觉。</p><p>主要有这几类空指针问题：</p><ul><li>包装类型的空指针问题</li><li>级联调用的空指针问题</li><li>Equals方法左边的空指针问题</li><li>ConcurrentHashMap 类似容器不支持 k-v为 null。</li><li>集合，数组直接获取元素</li><li>对象直接获取属性</li></ul><p><strong>反例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NullPointTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;666&quot;</span>)) &#123; <span class="hljs-comment">//s可能为空，会导致空指针问题</span><br>            System.out.println(<span class="hljs-string">&quot;公众号：捡田螺的小男孩，干货满满&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="14，捕获到的异常，不能忽略它，至少打点日志。"><a href="#14，捕获到的异常，不能忽略它，至少打点日志。" class="headerlink" title="14，捕获到的异常，不能忽略它，至少打点日志。"></a>14，捕获到的异常，不能忽略它，至少打点日志。</h3><p><strong>反例：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testIgnoreException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;       <br>        <span class="hljs-comment">// 搞事情</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;    <br>        <span class="hljs-comment">//捕获了异常，啥事情不做，日志也不打？？</span><br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">testIgnoreException</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 搞事情</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;     <br>        log.error(<span class="hljs-string">&quot;异常了，联系开发小哥哥看看哈&quot;</span>,e); <br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="15-采用Lambda表达式替换内部匿名类，使代码更优雅"><a href="#15-采用Lambda表达式替换内部匿名类，使代码更优雅" class="headerlink" title="15. 采用Lambda表达式替换内部匿名类，使代码更优雅"></a>15. 采用Lambda表达式替换内部匿名类，使代码更优雅</h3><p>JDK8出现了新特性-Lambda表达式。Lambda表达式不仅比匿名内部类更加优雅，并且在大多数虚拟机中，都是采用invokeDynamic指令实现，相对于匿名内部类，效率也更高</p><p><strong>反例：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sortUserInfoList</span><span class="hljs-params">(List&lt;UserInfo&gt; userInfoList)</span></span>&#123;<br>      userInfoList.sort(<span class="hljs-keyword">new</span> Comparator&lt;UserInfo&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(UserInfo user1, UserInfo user2)</span> </span>&#123;<br>              Long userId1 = user1.getUserId();<br>              Long userId2 = user2.getUserId();<br>              <span class="hljs-function"><span class="hljs-keyword">return</span> userId1.<span class="hljs-title">compareTo</span><span class="hljs-params">(userId2)</span></span>;<br>          &#125;&#125;);<br>      &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">   public <span class="hljs-literal">void</span> sortUserInfoList(List&lt;UserInfo&gt; userInfoList)&#123;<br>       userInfoList.sort<span class="hljs-function"><span class="hljs-params">((user1, user2) -&gt; &#123;</span></span><br><span class="hljs-function"><span class="hljs-params">           Long userId1 = user1.getUserId();</span></span><br><span class="hljs-function"><span class="hljs-params">           Long userId2 = user2.getUserId();</span></span><br><span class="hljs-function"><span class="hljs-params">           <span class="hljs-keyword">return</span> userId1.compareTo(userId2);</span></span><br><span class="hljs-function"><span class="hljs-params">       &#125;)</span>;</span><br><span class="hljs-function">   &#125;</span><br><span class="hljs-function">复制代码</span><br></code></pre></td></tr></table></figure><h3 id="16-通知类（如发邮件，有短信）的代码，建议异步处理。"><a href="#16-通知类（如发邮件，有短信）的代码，建议异步处理。" class="headerlink" title="16. 通知类（如发邮件，有短信）的代码，建议异步处理。"></a>16. 通知类（如发邮件，有短信）的代码，建议异步处理。</h3><p>假设业务流程这样：需要在用户登陆时，添加个短信通知它的粉丝。 很容易想到的实现流程如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20210404075450152.png" alt="image-20210404075450152"></p><p>假设提供sendMsgNotify服务的系统挂了，或者调用sendMsgNotify失败了，那么用户登陆就失败了。。。 一个通知功能导致了登陆主流程不可用，明显的捡了芝麻丢西瓜。那么有没有鱼鱼熊掌兼得的方法呢？有的，给发短信接口捕获异常处理，或者另开线程异步处理，如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20210404075509515.png" alt="image-20210404075509515"></p><p>因此，添加通知类等不是非主要，可降级的接口时，应该静下心来考虑是否会影响主要流程，思考怎么处理最好。</p><h3 id="17-处理Java日期时，当心YYYY格式设置的问题。"><a href="#17-处理Java日期时，当心YYYY格式设置的问题。" class="headerlink" title="17. 处理Java日期时，当心YYYY格式设置的问题。"></a>17. 处理Java日期时，当心YYYY格式设置的问题。</h3><p>日常开发中，我们经常需要处理日期。我们要当时日期格式化的时候，年份是大写<code>YYYY</code>的坑。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Calendar calendar = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>calendar.set(<span class="hljs-number">2019</span>, Calendar.DECEMBER, <span class="hljs-number">31</span>);<br><br>Date testDate = calendar.get<span class="hljs-constructor">Time()</span>;<br><br>SimpleDateFormat dtf = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;YYYY-MM-dd&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;2019-12-31 转 YYYY-MM-dd 格式后 &quot;</span> + dtf.format(testDate));<br>复制代码<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2019<span class="hljs-string">-12</span><span class="hljs-string">-31</span> 转 YYYY-MM-dd 格式后 2020<span class="hljs-string">-12</span><span class="hljs-string">-31</span><br>复制代码<br></code></pre></td></tr></table></figure><blockquote><p>为什么明明是2019年12月31号，就转了一下格式，就变成了2020年12月31号了？因为YYYY是基于周来计算年的，它指向当天所在周属于的年份，一周从周日开始算起，周六结束，只要本周跨年，那么这一周就算下一年的了。正确姿势是使用yyyy格式。</p></blockquote><p><img src="/Users/cuixiaoyan/Library/Application%20Support/typora-user-images/image-20210404075903220.png" alt="image-20210404075903220"></p><h3 id="18-如果一个类确定不会被继承，不会拿来搞AOP骚操作，可以指定final修饰符，如用final修饰一个工具类。"><a href="#18-如果一个类确定不会被继承，不会拿来搞AOP骚操作，可以指定final修饰符，如用final修饰一个工具类。" class="headerlink" title="18. 如果一个类确定不会被继承，不会拿来搞AOP骚操作，可以指定final修饰符，如用final修饰一个工具类。"></a>18. 如果一个类确定不会被继承，不会拿来搞AOP骚操作，可以指定final修饰符，如用final修饰一个工具类。</h3><p><strong>正例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFinal</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;工具类方法&quot;</span>);<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>一个类指定了final修饰符，它不会被继承了，并且其所有方法都是final的了。Java编译器会找机会内联所有的final方法，提升了Java运行效率。</p><h3 id="19-static静态变量不要依赖spring实例化变量，可能会导致初始化出错"><a href="#19-static静态变量不要依赖spring实例化变量，可能会导致初始化出错" class="headerlink" title="19. static静态变量不要依赖spring实例化变量，可能会导致初始化出错"></a>19. static静态变量不要依赖spring实例化变量，可能会导致初始化出错</h3><p>之前看到项目有类似的代码。静态变量依赖于spring容器的bean。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-keyword">private</span> static SmsService smsService = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpringContextUtils</span>.</span></span>get<span class="hljs-constructor">Bean(SmsService.<span class="hljs-params">class</span>)</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p>这个静态的smsService有可能获取不到的，因为类加载顺序不是确定的，而以上的代码，静态的smsService初始化强制依赖spring容器的实例了。正确的写法可以这样，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SmsService  smsService =<span class="hljs-literal">null</span>;<br> <br> <span class="hljs-comment">//使用到的时候采取获取</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SmsService <span class="hljs-function"><span class="hljs-title">getSmsService</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-keyword">if</span>(smsService==<span class="hljs-literal">null</span>)&#123;<br>      smsService = SpringContextUtils.getBean(SmsService.class);<br>   &#125;<br>   <span class="hljs-keyword">return</span> smsService;<br> &#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="20-与类成员变量无关的方法，应当声明成静态方法"><a href="#20-与类成员变量无关的方法，应当声明成静态方法" class="headerlink" title="20. 与类成员变量无关的方法，应当声明成静态方法"></a>20. 与类成员变量无关的方法，应当声明成静态方法</h3><p>有些方法，与实例成员变量无关，就可以声明为静态方法。这一点，工具类用得很多。<strong>反例如下</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BigDecimal的工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigDecimalUtils</span> </span>&#123;<br> <br>    <span class="hljs-keyword">public</span>  BigDecimal <span class="hljs-function"><span class="hljs-title">ifNullSetZERO</span>(<span class="hljs-params">BigDecimal <span class="hljs-keyword">in</span></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">in</span> != <span class="hljs-literal">null</span> ？ <span class="hljs-keyword">in</span> : BigDecimal.ZERO;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params">BigDecimal ...<span class="hljs-keyword">in</span></span>)</span>&#123;<br>        BigDecimal result = BigDecimal.ZERO;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">in</span>.length; i++)&#123;<br>            result = result.add(ifNullSetZERO(<span class="hljs-keyword">in</span>[i]));<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>因为BigDecimalUtils工具类的方法都没有static修饰，所以，你要使用的时候，每次都要new一下啦,那不就耗资源去<strong>反复创建对象</strong>了嘛！！</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BigDecimalUtils </span><span class="hljs-keyword">bigDecimalUtils </span>= new <span class="hljs-keyword">BigDecimalUtils（）;</span><br><span class="hljs-keyword">bigDecimalUtils.sum(a,b);</span><br><span class="hljs-keyword">复制代码</span><br></code></pre></td></tr></table></figure><p>所以可以声明成静态变量，使用的时候，直接<code>类名.方法</code>调用即可，正例如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BigDecimal的工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigDecimalUtils</span> </span>&#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  BigDecimal <span class="hljs-function"><span class="hljs-title">ifNullSetZERO</span>(<span class="hljs-params">BigDecimal <span class="hljs-keyword">in</span></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">in</span> != <span class="hljs-literal">null</span> ？ <span class="hljs-keyword">in</span> : BigDecimal.ZERO;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BigDecimal <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params">BigDecimal ...<span class="hljs-keyword">in</span></span>)</span>&#123;<br>        BigDecimal result = BigDecimal.ZERO;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">in</span>.length; i++)&#123;<br>            result = result.add(ifNullSetZERO(<span class="hljs-keyword">in</span>[i]));<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="21-不要用一个Exception捕捉所有可能的异常。"><a href="#21-不要用一个Exception捕捉所有可能的异常。" class="headerlink" title="21. 不要用一个Exception捕捉所有可能的异常。"></a>21. 不要用一个Exception捕捉所有可能的异常。</h3><p><strong>反例:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test()&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//…抛出 IOException 的代码调用</span><br>        <span class="hljs-comment">//…抛出 SQLException 的代码调用</span><br>    &#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> e)&#123;<br>        <span class="hljs-comment">//用基类 Exception 捕捉的所有可能的异常，如果多个层次都这样捕捉，会丢失原始异常的有效信息哦</span><br>        log.info(“<span class="hljs-built_in">Exception</span> in test,<span class="hljs-built_in">exception</span>:&#123;&#125;”, e);<br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">test</span>()&#123;<br>    <span class="hljs-selector-tag">try</span>&#123;<br>        <span class="hljs-comment">//…抛出 IOException 的代码调用</span><br>        <span class="hljs-comment">//…抛出 SQLException 的代码调用</span><br>    &#125;<span class="hljs-selector-tag">catch</span>(IOException e)&#123;<br>        <span class="hljs-comment">//仅仅捕捉 IOException</span><br>        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(“IOException in test,<span class="hljs-attribute">exception</span>:&#123;&#125;”, e);<br>    &#125;<span class="hljs-selector-tag">catch</span>(SQLException e)&#123;<br>        <span class="hljs-comment">//仅仅捕捉 SQLException</span><br>        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(“SQLException in test,<span class="hljs-attribute">exception</span>:&#123;&#125;”, e);<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="22-函数不要过度封装，言简意赅即可。"><a href="#22-函数不要过度封装，言简意赅即可。" class="headerlink" title="22. 函数不要过度封装，言简意赅即可。"></a>22. 函数不要过度封装，言简意赅即可。</h3><p><strong>反例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 函数封装</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isUserVip</span>(<span class="hljs-params"><span class="hljs-built_in">Boolean</span> isVip</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Boolean</span>.TRUE.equals(isVip);<br>&#125;<br><br><span class="hljs-comment">// 使用代码</span><br><span class="hljs-built_in">boolean</span> isVip = isVip(user.getUserVip());<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">boolean</span> isVip = <span class="hljs-built_in">Boolean</span>.<span class="hljs-literal">TRUE</span>.<span class="hljs-keyword">equals</span>(user.getUserVip());<br>复制代码<br></code></pre></td></tr></table></figure><p>函数不要过度封装，把意思表达清楚即可。并且，方法调用会引起入栈和出栈，导致消耗更多的CPU和内存，过度封装，会损耗性能的！</p><h3 id="23-如果变量的初值一定会被覆盖，就没有必要给变量赋初值。"><a href="#23-如果变量的初值一定会被覆盖，就没有必要给变量赋初值。" class="headerlink" title="23. 如果变量的初值一定会被覆盖，就没有必要给变量赋初值。"></a>23. 如果变量的初值一定会被覆盖，就没有必要给变量赋初值。</h3><p><strong>反例:</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">List<span class="hljs-variable">&lt;UserInfo&gt;</span> <span class="hljs-keyword">user</span>List = new ArrayList<span class="hljs-variable">&lt;&gt;</span>();<br>if (isAll) &#123;<br>    <span class="hljs-keyword">user</span>List = <span class="hljs-keyword">user</span>InfoDAO.queryAll();<br>&#125; else &#123;<br>    <span class="hljs-keyword">user</span>List = <span class="hljs-keyword">user</span>InfoDAO.queryActive();<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">List<span class="hljs-variable">&lt;UserInfo&gt;</span> <span class="hljs-keyword">user</span>List ;<br>if (isAll) &#123;<br>    <span class="hljs-keyword">user</span>List = <span class="hljs-keyword">user</span>InfoDAO.queryAll();<br>&#125; else &#123;<br>    <span class="hljs-keyword">user</span>List = <span class="hljs-keyword">user</span>InfoDAO.queryActive();<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="24-金额数值计算要使用BigDecimal"><a href="#24-金额数值计算要使用BigDecimal" class="headerlink" title="24.金额数值计算要使用BigDecimal"></a>24.金额数值计算要使用BigDecimal</h3><p>看下这个浮点数计算的例子吧：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> DoubleTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">0.1</span>+<span class="hljs-number">0.2</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">1.0</span><span class="hljs-number">-0.8</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">4.015</span>*<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">123.3</span>/<span class="hljs-number">100</span>);<br><br>        <span class="hljs-type">double</span> amount1 = <span class="hljs-number">3.15</span>;<br>        <span class="hljs-type">double</span> amount2 = <span class="hljs-number">2.10</span>;<br>        <span class="hljs-keyword">if</span> (amount1 - amount2 == <span class="hljs-number">1.05</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;OK&quot;);<br>        &#125;<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">0.30000000000000004<br>0.19999999999999996<br>401.49999999999994<br>1.2329999999999999<br>复制代码<br></code></pre></td></tr></table></figure><blockquote><p>因为计算机是以二进制存储数值的，对于浮点数也是。对于计算机而言，0.1无法精确表达，这就是为什么浮点数会导致精确度缺失的。因此，金额计算，一般都是用BigDecimal 类型</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(0.1)</span>.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(0.2)</span>));<br><span class="hljs-comment">//output:</span><br><span class="hljs-number">0.3000000000000000166533453693773481063544750213623046875</span><br>复制代码<br></code></pre></td></tr></table></figure><p>其实，使用 BigDecimal 表示和计算浮点数，必须使用字符串的构造方法来初始化 BigDecimal，并且，还要关注BigDecimal的几位小数点，它有八种舍入模式等</p><h3 id="25-注意Arrays-asList的几个坑"><a href="#25-注意Arrays-asList的几个坑" class="headerlink" title="25.  注意Arrays.asList的几个坑"></a>25.  注意Arrays.asList的几个坑</h3><ul><li><strong>基本类型不能作为 Arrays.asList方法的参数，否则会被当做一个参数。</strong></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayAsListTest</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] <span class="hljs-built_in">array</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        List <span class="hljs-built_in">list</span> = Arrays.asList(<span class="hljs-built_in">array</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">list</span>.<span class="hljs-built_in">size</span>());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//运行结果</span><br><span class="hljs-number">1</span><br>复制代码<br></code></pre></td></tr></table></figure><ul><li><strong>Arrays.asList 返回的 List 不支持增删操作。</strong></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ArrayAsListTest &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        String<span class="hljs-literal">[]</span> <span class="hljs-built_in">array</span> = &#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;;<br>        List <span class="hljs-built_in">list</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">array</span>)</span>;<br>        <span class="hljs-built_in">list</span>.add(<span class="hljs-string">&quot;5&quot;</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>.size<span class="hljs-literal">()</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 运行结果</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.lang.UnsupportedOperationException<br>at java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractList</span>.</span></span>add(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractList</span>.</span></span>java:<span class="hljs-number">148</span>)<br>at java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractList</span>.</span></span>add(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractList</span>.</span></span>java:<span class="hljs-number">108</span>)<br>at <span class="hljs-keyword">object</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ArrayAsListTest</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ArrayAsListTest</span>.</span></span>java:<span class="hljs-number">11</span>)<br><br>复制代码<br></code></pre></td></tr></table></figure><p>Arrays.asList 返回的 List 并不是我们期望的 java.util.ArrayList，而是 Arrays 的内部类ArrayList。内部类的ArrayList没有实现add方法，而是父类的add方法的实现，是会抛出异常的呢。</p><ul><li><strong>使用Arrays.asLis的时候，对原始数组的修改会影响到我们获得的那个List</strong></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ArrayAsListTest &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        String<span class="hljs-literal">[]</span> arr = &#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;;<br>        List <span class="hljs-built_in">list</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arr</span>)</span>;<br>        arr<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> = <span class="hljs-string">&quot;4&quot;</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;原始数组&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">arr</span>)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;list数组&quot;</span> + <span class="hljs-built_in">list</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//运行结果</span><br>原始数组<span class="hljs-literal">[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]</span><br><span class="hljs-built_in">list</span>数组<span class="hljs-literal">[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]</span><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="26，及时关闭IO资源流"><a href="#26，及时关闭IO资源流" class="headerlink" title="26，及时关闭IO资源流"></a>26，及时关闭IO资源流</h3><p>应该大家都有过这样的经历，windows系统桌面如果打开太多文件或者系统软件，就会觉得电脑很卡。当然，我们linux服务器也一样，平时操作文件，或者数据库连接，IO资源流如果没关闭，那么这个IO资源就会被它占着，这样别人就没有办法用了，这就造成资源浪费。</p><p>所以使用完IO流，记得关闭哈。可以使用try-with-resource关闭的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 关注公众号，捡田螺的小男孩</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">try</span> (FileInputStream inputStream = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">FileInputStream</span>(<span class="hljs-params"><span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;jay.txt&quot;</span>)</span>)</span> &#123;<br>    <span class="hljs-comment">// use resources   </span><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    log.error(e);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    log.error(e);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="27-尽量使用函数内的基本类型临时变量"><a href="#27-尽量使用函数内的基本类型临时变量" class="headerlink" title="27. 尽量使用函数内的基本类型临时变量"></a>27. 尽量使用函数内的基本类型临时变量</h3><blockquote><ul><li>在方法函数内，基本类型参数以及临时变量，都是保存在栈中的，访问速度比较快。</li><li>对象类型的参数和临时变量的引用都保存在栈中，内容都保存在堆中，访问速度较慢。</li><li>在类中，任何类型的成员变量都保存在堆（Heap）中，访问速度较慢。</li></ul></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccumulatorUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> result = <span class="hljs-number">0.0</span>D;<br>    <span class="hljs-comment">//反例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> addAllOne( <span class="hljs-built_in">double</span>[] values) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">double</span> value : values) &#123;<br>            result += value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//正例，先在方法内声明一个局部临时变量，累加完后，再赋值给方法外的成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> addAll1Two(<span class="hljs-built_in">double</span>[] values) &#123;<br>        <span class="hljs-built_in">double</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0.0</span>D;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">double</span> value : values) &#123;<br>            <span class="hljs-keyword">sum</span> += value;<br>        &#125;<br>        result += <span class="hljs-keyword">sum</span>;<br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="28-如果数据库一次查询的数量过多，建议分页处理。"><a href="#28-如果数据库一次查询的数量过多，建议分页处理。" class="headerlink" title="28. 如果数据库一次查询的数量过多，建议分页处理。"></a>28. 如果数据库一次查询的数量过多，建议分页处理。</h3><p>如果你的Sql一次性查出来的数据量比较多，建议分页处理。</p><p><strong>反例：</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> user_id,name,age <span class="hljs-keyword">from</span> user_info ;<br><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> user_id,name,age <span class="hljs-keyword">from</span> user_info <span class="hljs-keyword">limit</span> #&#123;<span class="hljs-keyword">offset</span>&#125;,#&#123;pageSize&#125;;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果偏移量特别大的时候，查询效率就变得低下。可以这接种方式优化：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//方案一 ：返回上次查询的最大记录(偏移量)<br><span class="hljs-keyword">select</span> id，<span class="hljs-type">name</span> <span class="hljs-keyword">from</span> user_info <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">10000</span> <span class="hljs-keyword">limit</span> #&#123;pageSize&#125;.<br><br>//方案二：<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> + 索引<br><span class="hljs-keyword">select</span> id，<span class="hljs-type">name</span> <span class="hljs-keyword">from</span> user_info <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id  <span class="hljs-keyword">limit</span> #&#123;<span class="hljs-keyword">offset</span>&#125;,#&#123;pageSize&#125;<br><br>//方案三：在业务允许的情况下限制页数：<br><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="29-尽量减少对变量的重复计算"><a href="#29-尽量减少对变量的重复计算" class="headerlink" title="29. 尽量减少对变量的重复计算"></a>29. 尽量减少对变量的重复计算</h3><p>一般我们写代码的时候，会以以下的方式实现遍历：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>.<span class="hljs-built_in">size</span>; i++)&#123;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果list数据量比较小那还好。如果list比较大时，可以优化成这样：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> <span class="hljs-built_in">length</span> = list.size; i &lt; <span class="hljs-built_in">length</span>; i++)&#123;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>理由：</p><ul><li>对方法的调用，即使是只有一个语句，也是有有消耗的，比如创建栈帧。如果list比较大时，多次调用list.size也是会有资源消耗的。</li></ul><h3 id="30-修改对外老接口的时候，思考接口的兼容性。"><a href="#30-修改对外老接口的时候，思考接口的兼容性。" class="headerlink" title="30. 修改对外老接口的时候，思考接口的兼容性。"></a>30. 修改对外老接口的时候，思考接口的兼容性。</h3><p>很多bug都是因为修改了对外老接口，但是却不做兼容导致的。关键这个问题多数是比较严重的，可能直接导致系统发版失败的。新手程序员很容易就犯这个错误了哦~</p><p>所以，如果你的需求是在原来接口上修改，，尤其这个接口是对外提供服务的话，一定要考虑接口兼容。举个例子吧，比如dubbo接口，原本是只接收A，B参数，现在你加了一个参数C，就可以考虑这样处理。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//老接口</span><br>void old<span class="hljs-constructor">Service(A,B)</span>;&#123;<br>  <span class="hljs-comment">//兼容新接口，传个null代替C</span><br>  <span class="hljs-keyword">new</span><span class="hljs-constructor">Service(A,B,<span class="hljs-params">null</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">//新接口，暂时不能删掉老接口，需要做兼容。</span><br>void <span class="hljs-keyword">new</span><span class="hljs-constructor">Service(A,B,C)</span>;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="31-代码采取措施避免运行时错误（如数组边界溢出，被零除等）"><a href="#31-代码采取措施避免运行时错误（如数组边界溢出，被零除等）" class="headerlink" title="31 代码采取措施避免运行时错误（如数组边界溢出，被零除等）"></a>31 代码采取措施避免运行时错误（如数组边界溢出，被零除等）</h3><p>日常开发中，我们需要采取措施规避数组边界溢出，被零整除，空指针等运行时错误。</p><p>类似代码比较常见:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">String</span> name = <span class="hljs-built_in">list</span>.<span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>).getName(); <span class="hljs-comment">//list可能越界，因为不一定有2个元素哈</span><br>复制代码<br></code></pre></td></tr></table></figure><p>所以，应该采取措施，预防一下数组边界溢出，<strong>正例：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionsUtil</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">list</span>)</span>&amp;&amp; <span class="hljs-built_in">list</span>.size<span class="hljs-literal">()</span>&gt;<span class="hljs-number">1</span>)&#123;<br>  String name = <span class="hljs-built_in">list</span>.get(<span class="hljs-number">1</span>).get<span class="hljs-constructor">Name()</span>; <br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="32-注意-ArrayList-toArray-强转的坑"><a href="#32-注意-ArrayList-toArray-强转的坑" class="headerlink" title="32. 注意 ArrayList.toArray() 强转的坑"></a>32. 注意 ArrayList.toArray() 强转的坑</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        List&lt;<span class="hljs-built_in">String</span>&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-string">&quot;公众号：捡田螺的小男孩&quot;</span>);<br>        <span class="hljs-built_in">String</span>[] array21 = (<span class="hljs-built_in">String</span>[])list.toArray();<span class="hljs-comment">//类型转换异常</span><br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>因为返回的是Object类型，Object类型数组强转String数组，会发生ClassCastException。解决方案是，使用toArray()重载方法toArray(T[] a)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">String</span>[] array1 = <span class="hljs-built_in">list</span>.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[<span class="hljs-number">0</span>]);<span class="hljs-comment">//可以正常运行</span><br>复制代码<br></code></pre></td></tr></table></figure><h3 id="33-尽量不在循环里远程调用、或者数据库操作，优先考虑批量进行。"><a href="#33-尽量不在循环里远程调用、或者数据库操作，优先考虑批量进行。" class="headerlink" title="33. 尽量不在循环里远程调用、或者数据库操作，优先考虑批量进行。"></a>33. 尽量不在循环里远程调用、或者数据库操作，优先考虑批量进行。</h3><p>程操作或者数据库操作都是比较耗网络、IO资源的，所以尽量不在循环里远程调用、不在循环里操作数据库，能批量一次性查回来尽量不要循环多次去查。（但是呢，也不要一次性查太多数据哈，要分批500一次酱紫）</p><p><strong>正例：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">remote<span class="hljs-constructor">BatchQuery(<span class="hljs-params">param</span>)</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>反例：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-variable">int</span> <span class="hljs-variable">i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">i</span>&lt;<span class="hljs-variable">n</span>;<span class="hljs-variable">i</span>++)&#123;</span><br><span class="hljs-function">  <span class="hljs-title">remoteSingleQuery</span>(<span class="hljs-variable">param</span>)</span><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="34-写完代码，脑洞一下多线程执行会怎样，注意并发一致性问题"><a href="#34-写完代码，脑洞一下多线程执行会怎样，注意并发一致性问题" class="headerlink" title="34. 写完代码，脑洞一下多线程执行会怎样，注意并发一致性问题"></a>34. 写完代码，脑洞一下多线程执行会怎样，注意并发一致性问题</h3><p>我们经常见的一些业务场景，就是先查下有没有记录，再进行对应的操作（比如修改）。但是呢，(查询+修改)合在一起不是原子操作哦，脑洞下多线程，就会发现有问题了，</p><p><strong>反例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-function"><span class="hljs-title">isAvailable</span>(<span class="hljs-params">ticketId</span>)</span>&#123;  <span class="hljs-comment">//非原子操作</span><br>    <span class="hljs-number">1</span>、给现金增加操作<br>    <span class="hljs-number">2</span>、deleteTicketById(ticketId)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;没有可用现金券&quot;</span>;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>为了更容易理解它，看这个流程图吧：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20210404075941431.png" alt="image-20210404075941431"></p><ul><li>1.线程A加现金</li><li>2.线程B加现金</li><li>3.线程A删除票标志</li><li>4.线程B删除票标志</li></ul><p>显然这样存在并发问题，正例应该利用数据库删除操作的原子性，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(deleteAvailableTicketById(ticketId)</span></span> == <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//原子操作</span><br>    <span class="hljs-number">1</span>、给现金增加操作<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    return “没有可用现金券”<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="35-多线程异步优先考虑恰当的线程池，而不是new-thread-同时考虑线程池是否隔离"><a href="#35-多线程异步优先考虑恰当的线程池，而不是new-thread-同时考虑线程池是否隔离" class="headerlink" title="35 多线程异步优先考虑恰当的线程池，而不是new thread,同时考虑线程池是否隔离"></a>35 多线程异步优先考虑恰当的线程池，而不是new thread,同时考虑线程池是否隔离</h3><p>为什么优先使用线程池？使用线程池有这几点好处呀</p><ul><li>它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。</li><li>提高响应速度。</li><li>重复利用。</li></ul><p>同时呢，尽量不要所有业务都共用一个线程池，需要考虑线程池隔离。就是不同的关键业务，分配不同的线程池，然后线程池参数也要考虑恰当哈。之前写过几篇线程池的，觉得还不错，有兴趣的朋友可以看一下哈</p><h3 id="36-优化程序结构，尽量减少方法的重复调用"><a href="#36-优化程序结构，尽量减少方法的重复调用" class="headerlink" title="36. 优化程序结构，尽量减少方法的重复调用"></a>36. 优化程序结构，尽量减少方法的重复调用</h3><p><strong>反例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listDetail</span><span class="hljs-params">(List&lt;UserInfo&gt; userInfoList)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; userInfoList.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-comment">//重复调用userList.size()方法了</span><br>        &#125;<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listDetail</span><span class="hljs-params">(List&lt;UserInfo&gt; userInfoList)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = userInfoList.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-comment">//减少调用userList.size()方法，只在length变量调了一次。</span><br>        &#125;<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="37，直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题"><a href="#37，直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题" class="headerlink" title="37，直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题"></a>37，直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题</h3><p>如果一次性把大文件或者数据库太多数据达到内存，是会导致OOM的。所以，为什么查询DB数据库，一般都建议分批。</p><p>读取文件的话，一般文件不会太大，才使用Files.readAllLines()。为什么呢？因为它是直接把文件都读到内存的，预估下不会OOM才使用这个吧，可以看下它的源码：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;<span class="hljs-keyword">String</span>&gt; readAllLines(Path path, Charset cs) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-keyword">BufferedReader</span> reader = newBufferedReader(path, cs)) &#123;<br>        List&lt;<span class="hljs-keyword">String</span>&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span> = reader.readLine();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">line</span> == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">break</span>;<br>            result.<span class="hljs-built_in">add</span>(<span class="hljs-built_in">line</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果是太大的文件，可以使用Files.line()按需读取，当时读取文件这些，一般是使用完需要关闭资源流的哈。</p><h3 id="38-调用第三方接口，需要考虑异常处理，安全性，超时重试这几个点。"><a href="#38-调用第三方接口，需要考虑异常处理，安全性，超时重试这几个点。" class="headerlink" title="38. 调用第三方接口，需要考虑异常处理，安全性，超时重试这几个点。"></a>38. 调用第三方接口，需要考虑异常处理，安全性，超时重试这几个点。</h3><p>日常开发中，经常需要调用第三方服务，或者分布式远程服务的的话，需要考虑：</p><ul><li>异常处理（比如，你调别人的接口，如果异常了，怎么处理，是重试还是当做失败）</li><li>超时（没法预估对方接口一般多久返回，一般设置个超时断开时间，以保护你的接口）</li><li>重试次数（你的接口调失败，需不需要重试，需要站在业务上角度思考这个问题）</li></ul><blockquote><p>简单一个例子，你一个http请求调别人的服务，需要考虑设置connect-time，和retry次数。</p></blockquote><h3 id="39-不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合"><a href="#39-不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合" class="headerlink" title="39 不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合"></a>39 不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合</h3><blockquote><ul><li>JDK提供原生API方法，可以直接指定集合的容量，避免多次扩容损耗性能。</li><li>这些方法的底层调用System.arraycopy方法实现，进行数据的批量拷贝效率更高。</li></ul></blockquote><p><strong>反例：</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf">public List<span class="hljs-variable">&lt;UserInfo&gt;</span> copyMergeList(List<span class="hljs-variable">&lt;UserInfo&gt;</span> user1List, List<span class="hljs-variable">&lt;UserInfo&gt;</span> user2List) &#123;<br>     List<span class="hljs-variable">&lt;UserInfo&gt;</span> <span class="hljs-keyword">user</span>List = new ArrayList<span class="hljs-variable">&lt;&gt;</span>(user1List.size() + user2List.size());<br>     <span class="hljs-keyword">for</span> (UserInfo <span class="hljs-keyword">user</span> : user1List) &#123;<br>         <span class="hljs-keyword">user</span>List.add(<span class="hljs-keyword">user</span>);<br>     &#125;<br>     <span class="hljs-keyword">for</span> (UserInfo <span class="hljs-keyword">user</span> : user2List) &#123;<br>         <span class="hljs-keyword">user</span>List.add(<span class="hljs-keyword">user</span>);<br>     &#125;<br><br>     return user1List;<br> &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf">public List<span class="hljs-variable">&lt;UserInfo&gt;</span> copyMergeList(List<span class="hljs-variable">&lt;UserInfo&gt;</span> user1List, List<span class="hljs-variable">&lt;UserInfo&gt;</span> user2List) &#123;<br>     List<span class="hljs-variable">&lt;UserInfo&gt;</span> <span class="hljs-keyword">user</span>List = new ArrayList<span class="hljs-variable">&lt;&gt;</span>(user1List.size() + user2List.size());<br>     <span class="hljs-keyword">user</span>List.addAll(user1List);<br>     <span class="hljs-keyword">user</span>List.addAll(user2List);<br>     return user1List;<br> &#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="40-对于复杂的代码逻辑，添加清楚的注释"><a href="#40-对于复杂的代码逻辑，添加清楚的注释" class="headerlink" title="40. 对于复杂的代码逻辑，添加清楚的注释"></a>40. 对于复杂的代码逻辑，添加清楚的注释</h3><p>写代码的时候，是没有必要写太多的注释的，好的方法变量命名就是最好的注释。但是，如果是业务逻辑很复杂的代码，真的非常有必要写清楚注释。清楚的注释，更有利于后面的维护。</p><h3 id="41-多线程情况下，考虑线性安全问题"><a href="#41-多线程情况下，考虑线性安全问题" class="headerlink" title="41. 多线程情况下，考虑线性安全问题"></a>41. 多线程情况下，考虑线性安全问题</h3><p>在高并发情况下，HashMap可能会出现死循环。因为它是非线性安全的，可以考虑使用ConcurrentHashMap。 所以这个也尽量养成习惯，不要上来反手就是一个new HashMap();</p><ul><li>Hashmap、Arraylist、LinkedList、TreeMap等都是线性不安全的；</li><li>Vector、Hashtable、ConcurrentHashMap等都是线性安全的</li></ul><h3 id="42-使用spring事务功能时，注意这几个事务未生效的坑"><a href="#42-使用spring事务功能时，注意这几个事务未生效的坑" class="headerlink" title="42. 使用spring事务功能时，注意这几个事务未生效的坑"></a>42. 使用spring事务功能时，注意这几个事务未生效的坑</h3><p>日常业务开发中，我们经常跟事务打交道，事务失效主要有以下几个场景：</p><ul><li>底层数据库引擎不支持事务</li><li>在非public修饰的方法使用</li><li>rollbackFor属性设置错误</li><li>本类方法直接调用</li><li>异常被try…catch吃了，导致事务失效。</li></ul><p><strong>反例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransactionTest</span></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">A</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//插入一条数据</span><br>    <span class="hljs-comment">//调用方法B (本地的类调用，事务失效了)</span><br>    B();<br>  &#125;<br>  <br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">B</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//插入数据</span><br>  &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>注解的事务方法给本类方法直接调用，事务失效</strong></p><h3 id="43-使用Executors声明线程池，newFixedThreadPool的OOM问题"><a href="#43-使用Executors声明线程池，newFixedThreadPool的OOM问题" class="headerlink" title="43. 使用Executors声明线程池，newFixedThreadPool的OOM问题"></a>43. 使用Executors声明线程池，newFixedThreadPool的OOM问题</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> ExecutorService executor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(10)</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;<br>            executor.execute(<span class="hljs-literal">()</span> -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10000</span>);<br>                &#125; catch (InterruptedException e) &#123;<br>                    <span class="hljs-comment">//do nothing</span><br>                &#125;<br>            &#125;);<br>        &#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>IDE指定JVM参数：-Xmx8m -Xms8m :</p><p><img src="/Users/cuixiaoyan/Library/Application%20Support/typora-user-images/image-20210404080311614.png" alt="image-20210404080311614"></p><p>运行结果：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20210404080325825.png" alt="image-20210404080325825"></p><p>我们看下源码，其实newFixedThreadPool使用的是无界队列！</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-keyword">new</span><span class="hljs-type">FixedThreadPool</span>(int nThreads) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                  <span class="hljs-number">0</span>L, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedBlockingQueue</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">AbstractQueue</span></span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class">        <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">BlockingQueue</span></span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    ...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a &#123;@code LinkedBlockingQueue&#125; with a capacity of</span><br><span class="hljs-comment">     * &#123;@link Integer#MAX_VALUE&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> LinkedBlockingQueue() &#123;<br>        <span class="hljs-built_in">this</span>(Integer.MAX_VALUE);<br>    &#125;<br>...<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><blockquote><p>newFixedThreadPool线程池的核心线程数是固定的，它使用了近乎于无界的LinkedBlockingQueue阻塞队列。当核心线程用完后，任务会入队到阻塞队列，如果任务执行的时间比较长，没有释放，会导致越来越多的任务堆积到阻塞队列，最后导致机器的内存使用不停的飙升，造成JVM OOM。</p></blockquote><h3 id="44-catch住异常后，尽量不要使用e-printStackTrace-而是使用log打印。"><a href="#44-catch住异常后，尽量不要使用e-printStackTrace-而是使用log打印。" class="headerlink" title="44. catch住异常后，尽量不要使用e.printStackTrace(),而是使用log打印。"></a>44. catch住异常后，尽量不要使用e.printStackTrace(),而是使用log打印。</h3><p><strong>反例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// do what you want  </span><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  e.printStackTrace();<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// do what you want  </span><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;你的程序有异常啦&quot;</span>,e);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="45-接口需要考虑幂等性"><a href="#45-接口需要考虑幂等性" class="headerlink" title="45. 接口需要考虑幂等性"></a>45. 接口需要考虑幂等性</h3><p>接口是需要考虑幂等性的，尤其抢红包、转账这些重要接口。最直观的业务场景，就是用户连着点两次，你的接口有没有hold住。</p><p>一般幂等技术方案有这几种:</p><ul><li>查询操作</li><li>唯一索引</li><li>token机制，防止重复提交</li><li>数据库的delete/update操作</li><li>乐观锁</li><li>悲观锁</li><li>Redis、zookeeper 分布式锁（以前抢红包需求，用了Redis分布式锁）</li><li>状态机幂等</li></ul><h3 id="46-对于行数比较多的函数，建议划分小函数，增强可读性。"><a href="#46-对于行数比较多的函数，建议划分小函数，增强可读性。" class="headerlink" title="46. 对于行数比较多的函数，建议划分小函数，增强可读性。"></a>46. 对于行数比较多的函数，建议划分小函数，增强可读性。</h3><p><strong>反例：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    private String <span class="hljs-type">name</span>;<br>    private Vector&lt;<span class="hljs-keyword">Order</span>&gt; orders = <span class="hljs-built_in">new</span> Vector&lt;<span class="hljs-keyword">Order</span>&gt;();<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> printOwing() &#123;<br>        //print banner<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;****************&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;*****customer Owes *****&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;****************&quot;);<br><br>        //calculate totalAmount<br>        Enumeration env = orders.elements();<br>        <span class="hljs-type">double</span> totalAmount = <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">while</span> (env.hasMoreElements()) &#123;<br>            <span class="hljs-keyword">Order</span> <span class="hljs-keyword">order</span> = (<span class="hljs-keyword">Order</span>) env.nextElement();<br>            totalAmount += <span class="hljs-keyword">order</span>.getAmout();<br>        &#125;<br><br>        //print details<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;name:&quot; + <span class="hljs-type">name</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;amount:&quot; + totalAmount);<br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    private String <span class="hljs-type">name</span>;<br>    private Vector&lt;<span class="hljs-keyword">Order</span>&gt; orders = <span class="hljs-built_in">new</span> Vector&lt;<span class="hljs-keyword">Order</span>&gt;();<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> printOwing() &#123;<br><br>        //print banner<br>        printBanner();<br>        //calculate totalAmount<br>        <span class="hljs-type">double</span> totalAmount = getTotalAmount();<br>        //print details<br>        printDetail(totalAmount);<br>    &#125;<br><br>    <span class="hljs-type">void</span> printBanner()&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;****************&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;*****customer Owes *****&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;****************&quot;);<br>    &#125;<br><br>    <span class="hljs-type">double</span> getTotalAmount()&#123;<br>        Enumeration env = orders.elements();<br>        <span class="hljs-type">double</span> totalAmount = <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">while</span> (env.hasMoreElements()) &#123;<br>            <span class="hljs-keyword">Order</span> <span class="hljs-keyword">order</span> = (<span class="hljs-keyword">Order</span>) env.nextElement();<br>            totalAmount += <span class="hljs-keyword">order</span>.getAmout();<br>        &#125;<br>        <span class="hljs-keyword">return</span> totalAmount;<br>    &#125;<br><br>    <span class="hljs-type">void</span> printDetail(<span class="hljs-type">double</span> totalAmount)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;name:&quot; + <span class="hljs-type">name</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;amount:&quot; + totalAmount);<br>    &#125;<br>    <br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>一个过于冗长的函数或者一段需要注释才能让人理解用途的代码，可以考虑把它切分成一个功能明确的函数单元，并定义清晰简短的函数名，这样会让代码变得更加优雅。</p><h3 id="47-你的关键业务代码，一般建议搞点日志保驾护航。"><a href="#47-你的关键业务代码，一般建议搞点日志保驾护航。" class="headerlink" title="47. 你的关键业务代码，一般建议搞点日志保驾护航。"></a>47. 你的关键业务代码，一般建议搞点日志保驾护航。</h3><p>关键业务代码无论身处何地，都应该有足够的日志保驾护航。</p><blockquote><p>比如：你实现转账业务，转个几百万，然后转失败了，接着客户投诉，然后你还没有打印到日志，想想那种水深火热的困境下，你却毫无办法。。。</p></blockquote><p>那么，你的转账业务都需要那些日志信息呢？至少，方法调用前，入参需要打印需要吧，接口调用后，需要捕获一下异常吧，同时打印异常相关日志吧，如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(TransferDTO transferDTO)</span></span>&#123;<br>    <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;invoke tranfer begin&quot;</span>);<br>    <span class="hljs-comment">//打印入参</span><br>    <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;invoke tranfer,paramters:&#123;&#125;&quot;</span>,transferDTO);<br>    <span class="hljs-keyword">try</span> &#123;<br>      res=  transferService.<span class="hljs-built_in">transfer</span>(transferDTO);<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>     <span class="hljs-built_in">log</span>.error(<span class="hljs-string">&quot;transfer fail,cifno:&#123;&#125;，account：&#123;&#125;&quot;</span>,transferDTO.getCifno（），<br>     transferDTO.getaccount（）)<br>     <span class="hljs-built_in">log</span>.error(<span class="hljs-string">&quot;transfer fail,exception:&#123;&#125;&quot;</span>,e);<br>    &#125;<br>    <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;invoke tranfer end&quot;</span>);<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>除了打印足够的日志，我们还需要注意一点是，日志级别别混淆使用，别本该打印info的日志，你却打印成error级别，告警半夜三更催你起来排查问题就不好了。</p><h3 id="48-某些可变因素，如红包皮肤等等，做成配置化是否会更好呢。"><a href="#48-某些可变因素，如红包皮肤等等，做成配置化是否会更好呢。" class="headerlink" title="48. 某些可变因素，如红包皮肤等等，做成配置化是否会更好呢。"></a>48. 某些可变因素，如红包皮肤等等，做成配置化是否会更好呢。</h3><p>假如产品提了个红包需求，圣诞节的时候，红包皮肤为圣诞节相关的，春节的时候，红包皮肤等。</p><p>反例:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">if</span>(duringChristmas)&#123;<br>   img = redPacketChristmasSkin;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(duringSpringFestival)&#123;<br>   img =  redSpringFestivalSkin;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果到了元宵节的时候，运营小姐姐突然又有想法，红包皮肤换成灯笼相关的，这时候，是不是要去修改代码了，重新发布了？从一开始，实现一张红包皮肤的配置表，将红包皮肤做成配置化呢？更换红包皮肤，只需修改一下表数据就好了。</p><h3 id="49，-直接迭代需要使用的集合-无须在额外操作"><a href="#49，-直接迭代需要使用的集合-无须在额外操作" class="headerlink" title="49，.直接迭代需要使用的集合,无须在额外操作"></a>49，.直接迭代需要使用的集合,无须在额外操作</h3><p>直接迭代需要使用的集合，无需通过其它操作获取数据，比较典型就是Map的迭代遍历：</p><p><strong>反例：</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">Map<span class="hljs-variable">&lt;Long, UserDO&gt;</span> <span class="hljs-keyword">user</span>Map = ...;<br><span class="hljs-keyword">for</span> (Long <span class="hljs-keyword">user</span>Id : <span class="hljs-keyword">user</span>Map.keySet()) &#123;<br>    UserDO <span class="hljs-keyword">user</span> = <span class="hljs-keyword">user</span>Map.get(<span class="hljs-keyword">user</span>Id);<br>    ...<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf">Map<span class="hljs-variable">&lt;Long, UserDO&gt;</span> <span class="hljs-keyword">user</span>Map = ...;<br><span class="hljs-keyword">for</span> (Map.Entry<span class="hljs-variable">&lt;Long, UserDO&gt;</span> <span class="hljs-keyword">user</span>Entry : <span class="hljs-keyword">user</span>Map.entrySet()) &#123;<br>    Long <span class="hljs-keyword">user</span>Id = <span class="hljs-keyword">user</span>Entry.getKey();<br>    UserDO <span class="hljs-keyword">user</span> = <span class="hljs-keyword">user</span>Entry.getValue();<br>    ...<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="50-策略模式-工厂方法优化冗余的if-else"><a href="#50-策略模式-工厂方法优化冗余的if-else" class="headerlink" title="50. 策略模式+工厂方法优化冗余的if else"></a>50. 策略模式+工厂方法优化冗余的if else</h3><p>反例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">    String medalType = <span class="hljs-string">&quot;guest&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;guest&quot;</span>.<span class="hljs-keyword">equals</span>(medalType)) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;嘉宾勋章&quot;</span>);<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;vip&quot;</span>.<span class="hljs-keyword">equals</span>(medalType)) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;会员勋章&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;guard&quot;</span>.<span class="hljs-keyword">equals</span>(medalType)) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;展示守护勋章&quot;</span>);<br>    &#125;<br>    ...<br><br>复制代码<br></code></pre></td></tr></table></figure><p>首先，我们把每个条件逻辑代码块，抽象成一个公共的接口，我们根据每个逻辑条件，定义相对应的策略实现类，可得以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//勋章接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IMedalService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showMedal</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//守护勋章策略实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuardMedalServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IMedalService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMedal</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;展示守护勋章&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//嘉宾勋章策略实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuestMedalServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IMedalService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMedal</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;嘉宾勋章&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//VIP勋章策略实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VipMedalServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IMedalService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMedal</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;会员勋章&quot;</span>);<br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>接下来，我们再定义策略工厂类，用来管理这些勋章实现策略类，如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//勋章服务工产类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MedalServicesFactory</span> &#123;</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;<span class="hljs-keyword">String</span>, IMedalService&gt; <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;guard&quot;</span>, <span class="hljs-keyword">new</span> GuardMedalServiceImpl());<br>        <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;vip&quot;</span>, <span class="hljs-keyword">new</span> VipMedalServiceImpl());<br>        <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;guest&quot;</span>, <span class="hljs-keyword">new</span> GuestMedalServiceImpl());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IMedalService <span class="hljs-title">getMedalService</span><span class="hljs-params">(<span class="hljs-keyword">String</span> medalType)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(medalType);<br>    &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><p>优化后，正例如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript">ublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> medalType = <span class="hljs-string">&quot;guest&quot;</span>;<br>        IMedalService medalService = MedalServicesFactory.getMedalService(medalType);<br>        medalService.showMedal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/blog/2021/03/28/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/03/28/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>这里虚拟一个业务需求，让大家容易理解。假设有一个订单系统，里面的一个功能是根据订单的不同类型作出不同的处理。</p><p>订单实体：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/dd35d29f4a5c41b5bd8b03679bfcc0bf~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>service接口：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/6ff1cd688d7c42d0a739a0bfacad449f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h4 id="传统实现"><a href="#传统实现" class="headerlink" title="传统实现"></a>传统实现</h4><p>根据订单类型写一堆的if else：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><h4 id="策略模式实现"><a href="#策略模式实现" class="headerlink" title="策略模式实现"></a>策略模式实现</h4><p>利用策略模式，只需要两行即可实现业务逻辑：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>可以看到上面的方法中注入了HandlerContext，这是一个处理器上下文，用来保存不同的业务处理器，具体在下文会讲解。我们从中获取一个抽象的处理器AbstractHandler，调用其方法实现业务逻辑。</p><p>现在可以了解到，我们主要的业务逻辑是在处理器中实现的，因此有多少个订单类型，就对应有多少个处理器。以后需求变化，增加了订单类型，只需要添加相应的处理器就可以，上述OrderServiceV2Impl完全不需改动。</p><p>我们先看看业务处理器的写法：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/e0f051a781254871b99822b8201a934e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>首先每个处理器都必须添加到spring容器中，因此需要加上@Component注解，其次需要加上一个自定义注解@HandlerType，用于标识该处理器对应哪个订单类型，最后就是继承AbstractHandler，实现自己的业务逻辑。</p><p>自定义注解 @HandlerType：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/8032c90d458e48ec8af53cd379df9e97~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>抽象处理器 AbstractHandler：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/886e68e0466645b6a474a675c29cc872~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>自定义注解和抽象处理器都很简单，那么如何将处理器注册到spring容器中呢？</p><p><strong>具体思路是：</strong></p><p>1、扫描指定包中标有@HandlerType的类；</p><p>2、将注解中的类型值作为key，对应的类作为value，保存在Map中；</p><p>3、以上面的map作为构造函数参数，初始化HandlerContext，将其注册到spring容器中；</p><p>我们将核心的功能封装在HandlerProcessor类中，完成上面的功能。</p><p>HandlerProcessor：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><h3 id="ClassScanner：扫描工具类源码"><a href="#ClassScanner：扫描工具类源码" class="headerlink" title="ClassScanner：扫描工具类源码"></a>ClassScanner：扫描工具类源码</h3><p>HandlerProcessor需要实现BeanFactoryPostProcessor，在spring处理bean前，将自定义的bean注册到容器中。</p><p>核心工作已经完成，现在看看HandlerContext如何获取对应的处理器：</p><p>HandlerContext：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/2ca36049758a4e3cb87d2ce13c45f5f9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>BeanTool：获取bean工具类</p><p><code>#getInstance</code> 方法根据类型获取对应的class，然后根据class类型获取注册到spring中的bean。</p><p>最后请注意一点，HandlerProcessor和BeanTool必须能被扫描到，或者通过@Bean的方式显式的注册，才能在项目启动时发挥作用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>利用策略模式可以简化繁杂的if else代码，方便维护，而利用自定义注解和自注册的方式，可以方便应对需求的变更。本文只是提供一个大致的思路，还有很多细节可以灵活变化，例如使用枚举类型、或者静态常量，作为订单的类型，相信你能想到更多更好的方法。</p>]]></content>
    
    
    
    <tags>
      
      <tag>策略模式</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通俗讲解分布式锁</title>
    <link href="/blog/2021/03/26/%E9%80%9A%E4%BF%97%E8%AE%B2%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/blog/2021/03/26/%E9%80%9A%E4%BF%97%E8%AE%B2%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>首先，分布式锁和我们平常讲到的锁原理基本一样，目的就是确保在多个线程并发时，只有一个线程在同一刻操作这个业务或者说方法、变量。</p><p>在一个进程中，也就是一个 jvm 或者说应用中，我们很容易去处理控制，在 jdk java.util 并发包中已经为我们提供了这些方法去加锁，比如 synchronized 关键字或者 Lock 锁，都可以处理。</p><p>但是我们现在的应用程序如果只部署一台服务器，那并发量是很差的，如果同时有上万的请求，很有可能造成服务器压力过大而瘫痪。想想双十一和大年三十晚上十点，瓜分支付宝红包等业务场景，自然需要用到多台服务器去同时处理这些业务，这些服务可能会有上百台同时处理。</p><p>但是我们想一想，如果有 100 台服务器要处理分红包的业务，现在假设有 1 亿的红包，1 千万个人分，金额随机，那么这个业务场景下，是不是必须确保这 1 千万个人最后分的红包金额总和等于 1 亿？</p><p>如果处理不好每人分到 100 万，那马云爸爸估计大年初一，就得宣布破产了</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/c7867412524a41bfa8f8ad3ff471f99a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="一、常规锁会造成什么情况？"><a href="#一、常规锁会造成什么情况？" class="headerlink" title="一、常规锁会造成什么情况？"></a>一、常规锁会造成什么情况？</h3><p>首先说一下我们为什么要搞集群。</p><p>简单理解就是，需求量（请求并发量）变大了，一个工人处理能力有限，那就多招一些工人来一起处理。</p><p>假设 1 千万个请求平均分配到 100 台服务器上，每个服务器接收 10w 的请求。这 10w 个请求并不是在同一秒中来的，可能是在 1,2 个小时内，可以联想下我们三十晚上开红包，等到 10：20 开始，有的人立马开了，有的人等到 12 点才想起来。</p><p>那这样的话，平均到每一秒上的请求也就不到 1 千个，这种压力一般的服务器还是可以承受的。</p><ul><li>第一个用户来分，请求到来后，需要在 1 亿里面给他分一部分钱，金额随机，假设第一个人分到了 100，那就要在这 1 亿中减去 100 块，剩下 99999900 块~</li><li>第二个用户再来分，金额随机，这次分 200 块，那就需要在剩下的 99999900 块中再减去 200 块，剩下 99999700 块。</li><li>等到第 10w 个用户来，一看还有 1000w，那这 1000w 全成他的了。</li></ul><p>等于是在每个服务器中去分 1 亿，也就是 10w 个用户分了一个亿，最后总计有 100 个服务器，要分 100 亿。</p><p>如果真这样了，虽说马云爸爸不会破产（据最新统计马云有 2300 亿人民币），那分红包的开发项目组，以及产品经理，可以 GG 了~</p><p>简化结构图如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/9b9bc469743c480aa3985bb95baa0ddf~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="二、分布式锁怎么去处理？"><a href="#二、分布式锁怎么去处理？" class="headerlink" title="二、分布式锁怎么去处理？"></a>二、分布式锁怎么去处理？</h3><p>那么为了解决这个问题，让 1000 万用户只分 1 亿，而不是 100 亿，这个时候分布式锁就派上用处了。</p><p>分布式锁可以把整个集群就当作是一个应用一样去处理，那么也就需要这个锁独立于每一个服务之外，而不是在服务里面。</p><p>假设第一个服务器接收到用户 1 的请求后，不能只在自己的应用中去判断还有多少钱可以分了，而需要去外部请求专门负责管理这 1 亿红包的人（服务），问他：哎，我这里要分 100 块，给我 100。</p><p>管理红包的妹子（服务）一看，还有 1 个亿，那好，给你 100 块，然后剩下 99999900 块。</p><p>第二个请求到来后，被服务器 2 获取，继续去询问，管理红包的妹子，我这边要分 10 块，管理红包的妹子先查了下还有 99999900，那就说：好，给你 10 块。那就剩下 99999890 块。</p><p>等到第 1000w 个请求到来后，服务器 100 拿到请求，继续去询问，管理红包的妹子，我要 100，妹子翻了翻白眼，对你说，就剩 1 块了，爱要不要，那这个时候就只能给你 1 块了（1 块也是钱啊，买根辣条还是可以的）。</p><p>这些请求编号 1,2 不代表执行的先后顺序，正式的场景下，应该是 100 台服务器每个服务器持有一个请求去访问负责管理红包的妹子（服务），那在管红包的妹子那里同时会接收到 100 个请求，这个时候就需要在负责红包的妹子那里加个锁就可以了（抛绣球），你们 100 个服务器谁拿到锁（抢到绣球），谁就进来和我谈，我给你分，其他人就等着去吧。</p><p>经过上面的分布式锁的处理后，马云爸爸终于放心了，决定给红包团队每人加一个鸡腿。</p><p>简化的结构图如下：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/ded345e3baf24d21a402418bc78ac2c0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="三、分布式锁的实现有哪些？"><a href="#三、分布式锁的实现有哪些？" class="headerlink" title="三、分布式锁的实现有哪些？"></a>三、分布式锁的实现有哪些？</h3><p>说到分布式锁的实现，还是有很多的，有数据库方式的，有 Redis 分布式锁，有 Zookeeper 分布式锁等等。</p><p>我们如果采用 Redis 作为分布式锁，那么上图中负 “责红包的妹子（服务）”，就可以替换成 Redis，请自行脑补。</p><p><strong>1、为什么 Redis 可以实现分布式锁？</strong></p><p>首先 Redis 是单线程的，这里的单线程指的是网络请求模块使用了一个线程（所以不需考虑并发安全性），即一个线程处理所有网络请求，其他模块仍用了多个线程。</p><p>在实际的操作中过程大致是这样子的：</p><p>服务器 1 要去访问发红包的妹子，也就是 Redis，那么他会在 Redis 中通过 “setnx key value” 操作设置一个 key 进去，value 是啥不重要，重要的是要有一个 key，也就是一个标记，而且这个 key 你爱叫啥叫啥，只要所有的服务器设置的 key 相同就可以。</p><p>假设我们设置一个，如下图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/ba01791955c4422d8d83124405591598~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>那么我们可以看到会返回一个 1，那就代表了成功。</p><p>如果再来一个请求去设置同样的 key，如下图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/32b815d1f0f94cd9a563bd678a3dabc5~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这个时候会返回 0，那就代表失败了。</p><p>那么我们就可以通过这个操作去判断是不是当前可以拿到锁，或者说可以去访问 “负责发红包的妹子”，如果返回 1，那我就开始去执行后面的逻辑，如果返回 0，那就说明已经被人占用了，我就要继续等待。</p><p>当服务器 1 拿到锁之后，进行了业务处理，完成后，还需要释放锁，如下图所示：</p><p>删除成功返回 1，那么其他的服务器就可以继续重复上面的步骤去设置这个 key，以达到获取锁的目的。</p><p>当然以上的操作是在 Redis 客户端直接进行的，通过程序调用的话，肯定就不能这么写，比如 java 就需要通过 jedis 去调用，但是整个处理逻辑基本都是一样的。</p><p>通过上面的方式，我们好像是解决了分布式锁的问题，但是想想还有没有什么问题呢？</p><p>对，问题还是有的，可能会有死锁的问题发生，比如服务器 1 设置完之后，获取了锁之后，忽然发生了宕机。</p><p>那后续的删除 key 操作就没法执行，这个 key 会一直在 Redis 中存在，其他服务器每次去检查，都会返回 0，他们都会认为有人在使用锁，我需要等。</p><p>为了解决这个死锁的问题，我们就需要给 key 设置有效期了。</p><p>设置的方式有 2 种：</p><ul><li>第一种就是在 set 完 key 之后，直接设置 key 的有效期 “expire key timeout” ，为 key 设置一个超时时间，单位为 second，超过这个时间锁会自动释放，避免死锁。</li></ul><p>这种方式相当于，把锁持有的有效期，交给了 Redis 去控制。如果时间到了，你还没有给我删除 key，那 Redis 就直接给你删了，其他服务器就可以继续去 setnx 获取锁。</p><ul><li>第二种方式，就是把删除 key 权利交给其他的服务器，那这个时候就需要用到 value 值了，比如服务器 1，设置了 value 也就是 timeout 为当前时间 + 1 秒 ，这个时候服务器 2 通过 get 发现时间已经超过系统当前时间了，那就说明服务器 1 没有释放锁，服务器 1 可能出问题了，服务器 2 就开始执行删除 key 操作，并且继续执行 setnx 操作。</li></ul><p>但是这块有一个问题，也就是不光你服务器 2 可能会发现服务器 1 超时了，服务器 3 也可能会发现，如果刚好服务器 2 setnx 操作完成，服务器 3 就接着删除，是不是服务器 3 也可以 setnx 成功了？</p><p>那就等于是服务器 2 和服务器 3 都拿到锁了，那就问题大了。这个时候怎么办呢？</p><p>这个时候需要用到 “GETSET  key value” 命令了。这个命令的意思就是获取当前 key 的值，并且设置新的值。</p><p>假设服务器 2 发现 key 过期了，开始调用 getset 命令，然后用获取的时间判断是否过期，如果获取的时间仍然是过期的，那就说明拿到锁了。</p><p>如果没有，则说明在服务 2 执行 getset 之前，服务器 3 可能也发现锁过期了，并且在服务器 2 之前执行了 getset 操作，重新设置了过期时间。</p><p>那么服务器 2 就需要放弃后续的操作，继续等待服务器 3 释放锁或者去监测 key 的有效期是否过期。</p><p>这块其实有一个小问题是，服务器 3 已经修改了有效期，拿到锁之后，服务器 2 也修改了有效期，但是没能拿到锁，但是这个有效期的时间已经被在服务器 3 的基础上有增加一些，但是这种影响其实还是很小的，几乎可以忽略不计。</p><p><strong>2、为什么 Zookeeper 可实现分布式锁？</strong></p><p>百度百科是这么介绍的：ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 Google 的 Chubby 一个开源的实现，是 Hadoop 和 Hbase 的重要组件。</p><p>那对于我们初次认识的人，可以理解成 ZooKeeper 就像是我们的电脑文件系统，我们可以在 d 盘中创建文件夹 a，并且可以继续在文件夹 a 中创建文件夹 a1，a2。</p><p>那我们的文件系统有什么特点？那就是同一个目录下文件名称不能重复，同样 ZooKeeper 也是这样的。</p><p>在 ZooKeeper 所有的节点，也就是文件夹称作 Znode，而且这个 Znode 节点是可以存储数据的。</p><p>我们可以通过 “create /zkjjj nice” 来创建一个节点，这个命令就表示，在跟目录下创建一个 zkjjj 的节点，值是 nice。同样这里的值，和我在前面说的 Redis 中的一样，没什么意义，你随便给。</p><p>另外 ZooKeeper 可以创建 4 种类型的节点，分别是：</p><ul><li>持久性节点</li><li>持久性顺序节点</li><li>临时性节点</li><li>临时性顺序节点</li></ul><p>首先说下持久性节点和临时性节点的区别：</p><ul><li>持久性节点表示只要你创建了这个节点，那不管你 ZooKeeper 的客户端是否断开连接，ZooKeeper 的服务端都会记录这个节点；</li><li>临时性节点刚好相反，一旦你 ZooKeeper 客户端断开了连接，那 ZooKeeper 服务端就不再保存这个节点；</li><li>顺便也说下顺序性节点，顺序性节点是指，在创建节点的时候，ZooKeeper 会自动给节点编号比如 0000001，0000002 这种的。</li></ul><p>Zookeeper 有一个监听机制，客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）等，Zookeeper 会通知客户端。</p><h3 id="四、在-Zookeeper-中如何加锁？"><a href="#四、在-Zookeeper-中如何加锁？" class="headerlink" title="四、在 Zookeeper 中如何加锁？"></a>四、在 Zookeeper 中如何加锁？</h3><p>下面我们继续结合我们上面的分红包场景，描述下在 Zookeeper 中如何加锁。</p><p>假设服务器 1，创建了一个节点 /zkjjj，成功了，那服务器 1 就获取了锁，服务器 2 再去创建相同的锁，就会失败，这个时候就只能监听这个节点的变化。</p><p>等到服务器 1 处理完业务，删除了节点后，他就会得到通知，然后去创建同样的节点，获取锁处理业务，再删除节点，后续的 100 台服务器与之类似。</p><p>注意这里的 100 台服务器并不是挨个去执行上面的创建节点的操作，而是并发的，当服务器 1 创建成功，那么剩下的 99 个就都会注册监听这个节点，等通知，以此类推。</p><p>但是大家有没有注意到，这里还是有问题的，还是会有死锁的情况存在，对不对？</p><p>当服务器 1 创建了节点后挂了，没能删除，那其他 99 台服务器就会一直等通知，那就完蛋了。。。</p><p>这个时候就需要用到临时性节点了，我们前面说过了，临时性节点的特点是客户端一旦断开，就会丢失，也就是当服务器 1 创建了节点后，如果挂了，那这个节点会自动被删除，这样后续的其他服务器，就可以继续去创建节点，获取锁了。</p><p>但是我们可能还需要注意到一点，就是惊群效应：举一个很简单的例子，当你往一群鸽子中间扔一块食物，虽然最终只有一个鸽子抢到食物，但所有鸽子都会被惊动来争夺，没有抢到…</p><p>就是当服务器 1 节点有变化，会通知其余的 99 个服务器，但是最终只有 1 个服务器会创建成功，这样 98 还是需要等待监听，那么为了处理这种情况，就需要用到临时顺序性节点。大致意思就是，之前是所有 99 个服务器都监听一个节点，现在就是每一个服务器监听自己前面的一个节点。</p><p>假设 100 个服务器同时发来请求，这个时候会在 / zkjjj 节点下创建 100 个临时顺序性节点<code>/zkjjj/000000001</code>，<code>/zkjjj/000000002</code>，一直到<code>/zkjjj/000000100</code>，这个编号就等于是已经给他们设置了获取锁的先后顺序了。</p><p>当 001 节点处理完毕，删除节点后，002 收到通知，去获取锁，开始执行，执行完毕，删除节点，通知 003~ 以此类推</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口调用失败的退避策略</title>
    <link href="/blog/2021/03/25/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%80%80%E9%81%BF%E7%AD%96%E7%95%A5/"/>
    <url>/blog/2021/03/25/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%80%80%E9%81%BF%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="退避策略简介"><a href="#退避策略简介" class="headerlink" title="退避策略简介"></a>退避策略简介</h2><p>在开发过程中我们经常会遇到调用接口失败的情况。遇到这种情况，我们有时候需要重试机制，常用的重试（退避）策略有：</p><ol><li>固定的时间间隔重试一次，最多重试N次：比如我现在一个接口调用失败了，不是立马返回失败，而是hold住线程，每隔2秒重新调下接口，最多调5次，只要其中一次成功了就直接返回。如果5次都没成功，接口返回失败。</li><li>指数时间间隔尝试策略：和上面策略一样，接口调用失败后也不是直接返回，但是重试的时间间隔呈指数增加。比如第一次时间间隔是2s，第二次次4s，依次增加。当然你也可以设置最大的尝试次数和最大的尝试时间。</li></ol><h3 id="Spring中的退避策略工具类"><a href="#Spring中的退避策略工具类" class="headerlink" title="Spring中的退避策略工具类"></a>Spring中的退避策略工具类</h3><h4 id="FixedBackOff"><a href="#FixedBackOff" class="headerlink" title="FixedBackOff"></a>FixedBackOff</h4><p>FixedBackOff是Spring自带的支持固定时间退避策略的工具类。这个类使用起来非常简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> interval = <span class="hljs-number">1000</span>;   <span class="hljs-comment">//重试间隔    1s重试一次</span><br><span class="hljs-keyword">long</span> maxAttempts = <span class="hljs-number">10</span>;  <span class="hljs-comment">//最大重试次数 最多重试10次</span><br>BackOff backOff = <span class="hljs-keyword">new</span> FixedBackOff(interval, maxAttempts);<br>BackOffExecution execution = backOff.start();<br> <br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>    <span class="hljs-keyword">long</span> value = execution.nextBackOff();<br>    <span class="hljs-keyword">if</span>(value == BackOffExecution.STOP)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//在这里写你的重试逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ExponentialBackOff"><a href="#ExponentialBackOff" class="headerlink" title="ExponentialBackOff"></a>ExponentialBackOff</h4><p>ExponentialBackOff是支持尝试间隔呈指数增加的工具类，使用方式和上面类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> initialInterval = <span class="hljs-number">100</span>;           <span class="hljs-comment">//初始间隔</span><br><span class="hljs-keyword">double</span> multiplier = <span class="hljs-number">2.0</span>;              <span class="hljs-comment">//递增倍数</span><br><span class="hljs-keyword">long</span> maxInterval = <span class="hljs-number">5</span> * <span class="hljs-number">1000L</span>;         <span class="hljs-comment">//最大间隔</span><br><span class="hljs-keyword">long</span> maxElapsedTime = <span class="hljs-number">50</span> * <span class="hljs-number">1000L</span>;     <span class="hljs-comment">//累计最大的时间间隔</span><br> <br>ExponentialBackOff backOff = <span class="hljs-keyword">new</span> ExponentialBackOff(initialInterval, multiplier);<br>backOff.setMaxInterval(maxInterval);<br>backOff.setMaxElapsedTime(maxElapsedTime);<br> <br>BackOffExecution execution = backOff.start();<br> <br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>    <span class="hljs-keyword">long</span> value = execution.nextBackOff();<br>    <span class="hljs-keyword">if</span>(value == BackOffExecution.STOP)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//在这里写你的重试逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义退避策略"><a href="#自定义退避策略" class="headerlink" title="自定义退避策略"></a>自定义退避策略</h4><p>如果你想要实现自己的退避策略，也非常简单。参考上面两个类中对于BackOffExecution接口的实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>接口调用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python利用random生成一个列表内的随机数</title>
    <link href="/blog/2021/03/25/Python%E5%88%A9%E7%94%A8random%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%88%97%E8%A1%A8%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/blog/2021/03/25/Python%E5%88%A9%E7%94%A8random%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%88%97%E8%A1%A8%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>首先,需要导入random模块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br></code></pre></td></tr></table></figure><p>随机取1-33之间的1个随机数，可能重复:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">random.choice(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">34</span>))<br></code></pre></td></tr></table></figure><p>print得到一系列随机数,执行一次得到一个随机数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(random.choice(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">34</span>)))<br></code></pre></td></tr></table></figure><p>随机取1-33之间的6个随机数，可能重复:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">random.choices(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">34</span>),k=<span class="hljs-number">6</span>,weights=<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">34</span>))<br></code></pre></td></tr></table></figure><p>其权重值表示该数或该范围内的数输出概率大,输出结果为列表 随机取1-33之间的6个随机数，不重复:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">random.sample(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">34</span>),<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>得到一个无序列表</p><p>random.uniform(a,b) 生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限</p><p>random.randint(a,b) 生成一个指定范围内的整数。其中参数a是下限，参数b是上限 PS:python 随机选取列表中的元素</p><p>使用random模块中的sample函数 功能：</p><p>random.sample(seq, k)实现从序列或集合seq中随机选取k个独立的的元素</p><p>参数：</p><p>seq：元组、列表或字符串</p><p>k：选取元素个数</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> random<br>In [<span class="hljs-number">2</span>]: f = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>In [<span class="hljs-number">3</span>]: f<br>Out[<span class="hljs-number">3</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>In [<span class="hljs-number">4</span>]: random.sample(f, <span class="hljs-number">5</span>)<br>Out[<span class="hljs-number">4</span>]: [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>]<br> <br></code></pre></td></tr></table></figure><p>使用random模块中的choice函数 功能：</p><p>random.choice(seq)实现从序列或集合seq中随机选取一个元素</p><p>参数：</p><p>seq：元组、列表或字符串</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> random<br>In [<span class="hljs-number">2</span>]: f = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>In [<span class="hljs-number">3</span>]: f<br>Out[<span class="hljs-number">3</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>In [<span class="hljs-number">4</span>]: random.choice(f)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>random</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java使用zxing生成二维码(带有logo)</title>
    <link href="/blog/2021/03/25/Java%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81(%E5%B8%A6%E6%9C%89logo)/"/>
    <url>/blog/2021/03/25/Java%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81(%E5%B8%A6%E6%9C%89logo)/</url>
    
    <content type="html"><![CDATA[<h2 id="首先要添加zxing依赖"><a href="#首先要添加zxing依赖" class="headerlink" title="首先要添加zxing依赖"></a>首先要添加zxing依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 二维码生成依赖 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;<br>    &lt;artifactId&gt;core&lt;/artifactId&gt;<br>    &lt;version&gt;3.4.0&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;<br>    &lt;artifactId&gt;javase&lt;/artifactId&gt;<br>    &lt;version&gt;3.4.0&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br></code></pre></td></tr></table></figure><p>下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xqd;<br> <br> <br><span class="hljs-keyword">import</span> com.google.zxing.BarcodeFormat;<br><span class="hljs-keyword">import</span> com.google.zxing.EncodeHintType;<br><span class="hljs-keyword">import</span> com.google.zxing.MultiFormatWriter;<br><span class="hljs-keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;<br><span class="hljs-keyword">import</span> com.google.zxing.common.BitMatrix;<br><span class="hljs-keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;<br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: QRCodeUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 二维码生成</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Authror</span>: XQD</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2020/1/16 10:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QRCode</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <br>        <span class="hljs-comment">// 定义二维码的参数</span><br>        <span class="hljs-keyword">int</span> width = <span class="hljs-number">300</span>; <span class="hljs-comment">// 图片宽度</span><br>        <span class="hljs-keyword">int</span> height = <span class="hljs-number">300</span>; <span class="hljs-comment">// 图片高度</span><br>        String format = <span class="hljs-string">&quot;jpg&quot;</span>; <span class="hljs-comment">// 图片格式  如果是png类型，logo图变成黑白的，</span><br>        String content = <span class="hljs-string">&quot;https://blog.csdn.net/weixin_44467567/article/details/103876746&quot;</span>;<span class="hljs-comment">// 二维码内容</span><br> <br>        <span class="hljs-comment">// 1.定义HashMap hints</span><br>        HashMap hints = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-comment">// 2.hints调用put函数设置字符集、间距以及纠错度为M</span><br>        hints.put(EncodeHintType.CHARACTER_SET, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);<span class="hljs-comment">//纠错等级【L，M，Q，H】</span><br>        hints.put(EncodeHintType.MARGIN, <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 生成二维码</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            MultiFormatWriter multiFormatWriter = <span class="hljs-keyword">new</span> MultiFormatWriter();<br>            <span class="hljs-comment">// 3.最后用MultiformatWriter函数类调用echoed函数并返回一个值 然后写入文件</span><br>            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, width, height, hints);<br>            <span class="hljs-comment">// 这里路径后面的img.png不可省略，前面是自己选取生成的图片地址</span><br>            Path file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;F:/生成的二维码/img.png&quot;</span>).toPath();<br>            MatrixToImageWriter.writeToPath(bitMatrix, format, file);<br>            <span class="hljs-comment">//*************添加logo*****************</span><br>            <span class="hljs-comment">//读取二维码图片</span><br>            BufferedImage bufferedImage = ImageIO.read(<span class="hljs-keyword">new</span> File(file.toString()));<br>            <span class="hljs-comment">//获取画笔</span><br>            Graphics2D graphics = bufferedImage.createGraphics();<br>            <span class="hljs-comment">//读取logo图片</span><br>            BufferedImage logo = ImageIO.read(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:/图片/Saved Pictures/头像/微信图片_20200109163054.jpg&quot;</span>));<br>            <span class="hljs-comment">//设置二维码大小，太大了会覆盖二维码，此处为20%</span><br>            <span class="hljs-keyword">int</span> logoWidth = logo.getWidth() &gt; bufferedImage.getWidth()*<span class="hljs-number">2</span> /<span class="hljs-number">10</span> ? (bufferedImage.getWidth()*<span class="hljs-number">2</span> /<span class="hljs-number">10</span>) : logo.getWidth();<br>            <span class="hljs-keyword">int</span> logoHeight = logo.getHeight() &gt; bufferedImage.getHeight()*<span class="hljs-number">2</span> /<span class="hljs-number">10</span> ? (bufferedImage.getHeight()*<span class="hljs-number">2</span> /<span class="hljs-number">10</span>) : logo.getHeight();<br>            <span class="hljs-comment">//设置logo图片放置的位置，中心</span><br>            <span class="hljs-keyword">int</span> x = (bufferedImage.getWidth() - logoWidth) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> y = (bufferedImage.getHeight() - logoHeight) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//开始合并并绘制图片</span><br>            graphics.drawImage(logo,x,y,logoWidth,logoHeight,<span class="hljs-keyword">null</span>);<br>            graphics.drawRoundRect(x,y,logoWidth,logoHeight,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>);<br>            <span class="hljs-comment">//logob边框大小</span><br>            graphics.setStroke(<span class="hljs-keyword">new</span> BasicStroke(<span class="hljs-number">2</span>));<br>            <span class="hljs-comment">//logo边框颜色</span><br>            graphics.setColor(Color.WHITE);<br>            graphics.drawRect(x,y,logoWidth,logoHeight);<br>            graphics.dispose();<br>            logo.flush();<br>            bufferedImage.flush();<br>            ImageIO.write(bufferedImage, format ,<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;F:/生成的二维码/img2.png&quot;</span>));<br> <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br> <br>    &#125;<br> <br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210325200119868.png" alt="202001171536554"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>zxing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中poi导出模板下拉框实现二级联动</title>
    <link href="/blog/2021/03/25/java%E4%B8%ADpoi%E5%AF%BC%E5%87%BA%E6%A8%A1%E6%9D%BF%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E8%81%94%E5%8A%A8/"/>
    <url>/blog/2021/03/25/java%E4%B8%ADpoi%E5%AF%BC%E5%87%BA%E6%A8%A1%E6%9D%BF%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E8%81%94%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>代码实现如下： 需要加入的jar包:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>   &lt;artifactId&gt;poi&lt;/artifactId&gt;<br>   &lt;version&gt;3.14&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>   &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>   &lt;version&gt;3.14&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br></code></pre></td></tr></table></figure><p>二级联动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">package</span> com.test;<br> <br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Cell;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.DataValidation;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.DataValidationConstraint;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Name;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.util.CellRangeAddressList;<br><span class="hljs-keyword">import</span> org.apache.poi.util.IOUtils;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataValidation;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataValidationConstraint;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoExport</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Cascade();<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Cascade</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 创建一个excel</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><br>        Workbook workbook = <span class="hljs-keyword">new</span> XSSFWorkbook();<br> <br>        <span class="hljs-comment">// 创建需要用户填写的sheet</span><br>        XSSFSheet sheet = (XSSFSheet) workbook.createSheet(<span class="hljs-string">&quot;省市县&quot;</span>);<br>        Row row0 = sheet.createRow(<span class="hljs-number">0</span>);<br>        row0.createCell(<span class="hljs-number">5</span>).setCellValue(<span class="hljs-string">&quot;渠道类型&quot;</span>);<br>        row0.createCell(<span class="hljs-number">6</span>).setCellValue(<span class="hljs-string">&quot;渠道来源&quot;</span>);<br> <br>        <span class="hljs-comment">//得到第一级省名称，放在列表里</span><br>        String[] provinceArr = &#123;<span class="hljs-string">&quot;线上&quot;</span>,<span class="hljs-string">&quot;线下&quot;</span>&#125;;<br>        <span class="hljs-comment">//依次列出各省的市、各市的县</span><br>        String[] cityJiangSu = &#123;<span class="hljs-string">&quot;招标网站&quot;</span>,<span class="hljs-string">&quot;营销自动化ACRM&quot;</span>,<span class="hljs-string">&quot;门户网络媒体&quot;</span>,<span class="hljs-string">&quot;移动社交媒体&quot;</span>,<span class="hljs-string">&quot;移动社交媒体&quot;</span>,<span class="hljs-string">&quot;搜索引擎&quot;</span>,<span class="hljs-string">&quot;平面媒体&quot;</span>,<span class="hljs-string">&quot;户外媒体&quot;</span>,<span class="hljs-string">&quot;其他&quot;</span>&#125;;<br>        String[] cityAnHui = &#123;<span class="hljs-string">&quot;行业博览会&quot;</span>,<span class="hljs-string">&quot;行业峰会/论坛/沙龙&quot;</span>,<span class="hljs-string">&quot;产业级市场活动&quot;</span>,<span class="hljs-string">&quot;大区/公路港市场活动&quot;</span>,<span class="hljs-string">&quot;本部门市场活动&quot;</span>,<span class="hljs-string">&quot;存量客户上下游&quot;</span>,<span class="hljs-string">&quot;政府关系网络&quot;</span>,<span class="hljs-string">&quot;个人关系网络&quot;</span>,<span class="hljs-string">&quot;传化生态业务&quot;</span>,<span class="hljs-string">&quot;其他&quot;</span>&#125;;<br>        <span class="hljs-comment">//将有子区域的父区域放到一个数组中</span><br>        String[] areaFatherNameArr =&#123;<span class="hljs-string">&quot;线上&quot;</span>,<span class="hljs-string">&quot;线下&quot;</span>&#125;;<br>        Map&lt;String,String[]&gt; areaMap = <span class="hljs-keyword">new</span> HashMap&lt;String, String[]&gt;();<br>        areaMap.put(<span class="hljs-string">&quot;线上&quot;</span>, cityJiangSu);<br>        areaMap.put(<span class="hljs-string">&quot;线下&quot;</span>,cityAnHui);<br> <br>        <span class="hljs-comment">//创建一个专门用来存放地区信息的隐藏sheet页</span><br>        <span class="hljs-comment">//因此也不能在现实页之前创建，否则无法隐藏。</span><br>        Sheet hideSheet = workbook.createSheet(<span class="hljs-string">&quot;area&quot;</span>);<br>        <span class="hljs-comment">//这一行作用是将此sheet隐藏，功能未完成时注释此行,可以查看隐藏sheet中信息是否正确</span><br>        workbook.setSheetHidden(workbook.getSheetIndex(hideSheet), <span class="hljs-keyword">true</span>);<br> <br>        <span class="hljs-keyword">int</span> rowId = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 设置第一行，存省的信息</span><br>        Row provinceRow = hideSheet.createRow(rowId++);<br>        provinceRow.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;渠道&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; provinceArr.length; i ++)&#123;<br>            Cell provinceCell = provinceRow.createCell(i + <span class="hljs-number">1</span>);<br>            provinceCell.setCellValue(provinceArr[i]);<br>        &#125;<br>        <span class="hljs-comment">// 将具体的数据写入到每一行中，行开头为父级区域，后面是子区域。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; areaFatherNameArr.length;i++)&#123;<br>            String key = areaFatherNameArr[i];<br>            String[] son = areaMap.get(key);<br>            Row row1 = hideSheet.createRow(rowId++);<br>            row1.createCell(<span class="hljs-number">0</span>).setCellValue(key);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; son.length; j ++)&#123;<br>                Cell cell0 = row1.createCell(j + <span class="hljs-number">1</span>);<br>                cell0.setCellValue(son[j]);<br>            &#125;<br> <br>            <span class="hljs-comment">// 添加名称管理器</span><br>            String range = getRange(<span class="hljs-number">1</span>, rowId, son.length);<br>            Name name = workbook.createName();<br>            <span class="hljs-comment">//key不可重复</span><br>            name.setNameName(key);<br>            String formula = <span class="hljs-string">&quot;area!&quot;</span> + range;<br>            name.setRefersToFormula(formula);<br>        &#125;<br> <br>        XSSFDataValidationHelper dvHelper = <span class="hljs-keyword">new</span> XSSFDataValidationHelper((XSSFSheet)sheet);<br>        <span class="hljs-comment">// 省规则</span><br>        DataValidationConstraint provConstraint = dvHelper.createExplicitListConstraint(provinceArr);<br>        <span class="hljs-comment">// 四个参数分别是：起始行、终止行、起始列、终止列</span><br>        CellRangeAddressList provRangeAddressList = <span class="hljs-keyword">new</span> CellRangeAddressList(<span class="hljs-number">2</span>, <span class="hljs-number">202</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br>        DataValidation provinceDataValidation = dvHelper.createValidation(provConstraint, provRangeAddressList);<br>        <span class="hljs-comment">//验证</span><br>        provinceDataValidation.createErrorBox(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;请选择正确的渠道&quot;</span>);<br>        provinceDataValidation.setShowErrorBox(<span class="hljs-keyword">true</span>);<br>        provinceDataValidation.setSuppressDropDownArrow(<span class="hljs-keyword">true</span>);<br>        sheet.addValidationData(provinceDataValidation);<br> <br>        <span class="hljs-comment">//对前20行设置有效性</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>;i &lt; <span class="hljs-number">204</span>;i++)&#123;<br>            setDataValidation(<span class="hljs-string">&quot;F&quot;</span> ,sheet,i,<span class="hljs-number">7</span>);<br>        &#125;<br>        FileOutputStream os = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:/test02.xlsx&quot;</span>);<br>            workbook.write(os);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            IOUtils.closeQuietly(os);<br>        &#125;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置有效性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset 主影响单元格所在列，即此单元格由哪个单元格影响联动</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sheet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rowNum 行数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> colNum 列数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDataValidation</span><span class="hljs-params">(String offset,XSSFSheet sheet, <span class="hljs-keyword">int</span> rowNum,<span class="hljs-keyword">int</span> colNum)</span> </span>&#123;<br>        XSSFDataValidationHelper dvHelper = <span class="hljs-keyword">new</span> XSSFDataValidationHelper(sheet);<br>        DataValidation data_validation_list;<br>        data_validation_list = getDataValidationByFormula(<br>                <span class="hljs-string">&quot;INDIRECT($&quot;</span> + offset + (rowNum) + <span class="hljs-string">&quot;)&quot;</span>, rowNum, colNum,dvHelper);<br>        sheet.addValidationData(data_validation_list);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载下拉列表内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> formulaString</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> naturalRowIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> naturalColumnIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dvHelper</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  DataValidation <span class="hljs-title">getDataValidationByFormula</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            String formulaString, <span class="hljs-keyword">int</span> naturalRowIndex, <span class="hljs-keyword">int</span> naturalColumnIndex,XSSFDataValidationHelper dvHelper)</span> </span>&#123;<br>        <span class="hljs-comment">// 加载下拉列表内容</span><br>        <span class="hljs-comment">// 举例：若formulaString = &quot;INDIRECT($A$2)&quot; 表示规则数据会从名称管理器中获取key与单元格 A2 值相同的数据，</span><br>        <span class="hljs-comment">//如果A2是江苏省，那么此处就是江苏省下的市信息。</span><br>        XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper.createFormulaListConstraint(formulaString);<br>        <span class="hljs-comment">// 设置数据有效性加载在哪个单元格上。</span><br>        <span class="hljs-comment">// 四个参数分别是：起始行、终止行、起始列、终止列</span><br>        <span class="hljs-keyword">int</span> firstRow = naturalRowIndex -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> lastRow = naturalRowIndex - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> firstCol = naturalColumnIndex - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> lastCol = naturalColumnIndex - <span class="hljs-number">1</span>;<br>        CellRangeAddressList regions = <span class="hljs-keyword">new</span> CellRangeAddressList(firstRow,<br>                lastRow, firstCol, lastCol);<br>        <span class="hljs-comment">// 数据有效性对象</span><br>        <span class="hljs-comment">// 绑定</span><br>        XSSFDataValidation data_validation_list = (XSSFDataValidation) dvHelper.createValidation(dvConstraint, regions);<br>        data_validation_list.setEmptyCellAllowed(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">if</span> (data_validation_list <span class="hljs-keyword">instanceof</span> XSSFDataValidation) &#123;<br>            data_validation_list.setSuppressDropDownArrow(<span class="hljs-keyword">true</span>);<br>            data_validation_list.setShowErrorBox(<span class="hljs-keyword">true</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            data_validation_list.setSuppressDropDownArrow(<span class="hljs-keyword">false</span>);<br>        &#125;<br>        <span class="hljs-comment">// 设置输入信息提示信息</span><br>        data_validation_list.createPromptBox(<span class="hljs-string">&quot;下拉选择提示&quot;</span>, <span class="hljs-string">&quot;请使用下拉方式选择合适的值！&quot;</span>);<br>        <span class="hljs-comment">// 设置输入错误提示信息</span><br>        <span class="hljs-comment">//data_validation_list.createErrorBox(&quot;选择错误提示&quot;, &quot;你输入的值未在备选列表中，请下拉选择合适的值！&quot;);</span><br>        <span class="hljs-keyword">return</span> data_validation_list;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  计算formula</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset 偏移量，如果给0，表示从A列开始，1，就是从B列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rowId 第几行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> colCount 一共多少列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果给入参 1,1,10. 表示从B1-K1。最终返回 $B$1:$K$1</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> rowId, <span class="hljs-keyword">int</span> colCount)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> start = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + offset);<br>        <span class="hljs-keyword">if</span> (colCount &lt;= <span class="hljs-number">25</span>) &#123;<br>            <span class="hljs-keyword">char</span> end = (<span class="hljs-keyword">char</span>)(start + colCount - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&quot;</span> + start + <span class="hljs-string">&quot;$&quot;</span> + rowId + <span class="hljs-string">&quot;:$&quot;</span> + end + <span class="hljs-string">&quot;$&quot;</span> + rowId;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">char</span> endPrefix = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            <span class="hljs-keyword">char</span> endSuffix = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            <span class="hljs-keyword">if</span> ((colCount - <span class="hljs-number">25</span>) / <span class="hljs-number">26</span> == <span class="hljs-number">0</span> || colCount == <span class="hljs-number">51</span>) &#123;<span class="hljs-comment">// 26-51之间，包括边界（仅两次字母表计算）</span><br>                <span class="hljs-keyword">if</span> ((colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 边界值</span><br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">25</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + (colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> - <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 51以上</span><br>                <span class="hljs-keyword">if</span> ((colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> == <span class="hljs-number">0</span>) &#123;<br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">25</span>);<br>                    endPrefix = (<span class="hljs-keyword">char</span>)(endPrefix + (colCount - <span class="hljs-number">25</span>) / <span class="hljs-number">26</span> - <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + (colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> - <span class="hljs-number">1</span>);<br>                    endPrefix = (<span class="hljs-keyword">char</span>)(endPrefix + (colCount - <span class="hljs-number">25</span>) / <span class="hljs-number">26</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&quot;</span> + start + <span class="hljs-string">&quot;$&quot;</span> + rowId + <span class="hljs-string">&quot;:$&quot;</span> + endPrefix + endSuffix + <span class="hljs-string">&quot;$&quot;</span> + rowId;<br>        &#125;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>效果如下：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/2020011711222348_1579401982569.png?x-oss-process=style/small" alt="2020011711222348">三级联动： 代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Cell;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.DataValidation;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.DataValidationConstraint;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Name;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.util.CellRangeAddressList;<br><span class="hljs-keyword">import</span> org.apache.poi.util.IOUtils;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataValidation;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataValidationConstraint;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Export</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Cascade();<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Cascade</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 创建一个excel</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><br>        Workbook book = <span class="hljs-keyword">new</span> XSSFWorkbook();<br> <br>        <span class="hljs-comment">// 创建需要用户填写的sheet</span><br>        XSSFSheet sheetPro = (XSSFSheet) book.createSheet(<span class="hljs-string">&quot;省市县&quot;</span>);<br>        Row row0 = sheetPro.createRow(<span class="hljs-number">0</span>);<br>        row0.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;省&quot;</span>);<br>        row0.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;市&quot;</span>);<br>        row0.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;区&quot;</span>);<br> <br>        <span class="hljs-comment">//得到第一级省名称，放在列表里</span><br>        String[] provinceArr = &#123;<span class="hljs-string">&quot;江苏省&quot;</span>,<span class="hljs-string">&quot;安徽省&quot;</span>&#125;;<br>        <span class="hljs-comment">//依次列出各省的市、各市的县</span><br>        String[] cityJiangSu = &#123;<span class="hljs-string">&quot;南京市&quot;</span>,<span class="hljs-string">&quot;苏州市&quot;</span>,<span class="hljs-string">&quot;盐城市&quot;</span>&#125;;<br>        String[] cityAnHui = &#123;<span class="hljs-string">&quot;合肥市&quot;</span>,<span class="hljs-string">&quot;安庆市&quot;</span>&#125;;<br>        String[] countyNanjing = &#123;<span class="hljs-string">&quot;六合县&quot;</span>,<span class="hljs-string">&quot;江宁县&quot;</span>&#125;;<br>        String[] countySuzhou = &#123;<span class="hljs-string">&quot;姑苏区&quot;</span>,<span class="hljs-string">&quot;园区&quot;</span>&#125;;<br>        String[] countyYancheng = &#123;<span class="hljs-string">&quot;响水县&quot;</span>,<span class="hljs-string">&quot;射阳县&quot;</span>&#125;;<br>        String[] countyLiuhe = &#123;<span class="hljs-string">&quot;瑶海区&quot;</span>,<span class="hljs-string">&quot;庐阳区&quot;</span>&#125;;<br>        String[] countyAnQing = &#123;<span class="hljs-string">&quot;迎江区&quot;</span>,<span class="hljs-string">&quot;大观区&quot;</span>&#125;;<br>        <span class="hljs-comment">//将有子区域的父区域放到一个数组中</span><br>        String[] areaFatherNameArr =&#123;<span class="hljs-string">&quot;江苏省&quot;</span>,<span class="hljs-string">&quot;安徽省&quot;</span>,<span class="hljs-string">&quot;南京市&quot;</span>,<span class="hljs-string">&quot;苏州市&quot;</span>,<span class="hljs-string">&quot;盐城市&quot;</span>,<span class="hljs-string">&quot;合肥市&quot;</span>,<span class="hljs-string">&quot;安庆市&quot;</span>&#125;;<br>        Map&lt;String,String[]&gt; areaMap = <span class="hljs-keyword">new</span> HashMap&lt;String, String[]&gt;();<br>        areaMap.put(<span class="hljs-string">&quot;江苏省&quot;</span>, cityJiangSu);<br>        areaMap.put(<span class="hljs-string">&quot;安徽省&quot;</span>,cityAnHui);<br>        areaMap.put(<span class="hljs-string">&quot;南京市&quot;</span>,countyNanjing);<br>        areaMap.put(<span class="hljs-string">&quot;苏州市&quot;</span>, countySuzhou);<br>        areaMap.put(<span class="hljs-string">&quot;盐城市&quot;</span>,countyYancheng);<br>        areaMap.put(<span class="hljs-string">&quot;合肥市&quot;</span>,countyYancheng);<br>        areaMap.put(<span class="hljs-string">&quot;合肥市&quot;</span>, countyLiuhe);<br>        areaMap.put(<span class="hljs-string">&quot;安庆市&quot;</span>,countyAnQing);<br> <br>        <span class="hljs-comment">//创建一个专门用来存放地区信息的隐藏sheet页</span><br>        <span class="hljs-comment">//因此也不能在现实页之前创建，否则无法隐藏。</span><br>        Sheet hideSheet = book.createSheet(<span class="hljs-string">&quot;area&quot;</span>);<br>        <span class="hljs-comment">//这一行作用是将此sheet隐藏，功能未完成时注释此行,可以查看隐藏sheet中信息是否正确</span><br>        <span class="hljs-comment">//book.setSheetHidden(book.getSheetIndex(hideSheet), true);</span><br> <br>        <span class="hljs-keyword">int</span> rowId = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 设置第一行，存省的信息</span><br>        Row provinceRow = hideSheet.createRow(rowId++);<br>        provinceRow.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;省列表&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; provinceArr.length; i ++)&#123;<br>            Cell provinceCell = provinceRow.createCell(i + <span class="hljs-number">1</span>);<br>            provinceCell.setCellValue(provinceArr[i]);<br>        &#125;<br>        <span class="hljs-comment">// 将具体的数据写入到每一行中，行开头为父级区域，后面是子区域。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; areaFatherNameArr.length;i++)&#123;<br>            String key = areaFatherNameArr[i];<br>            String[] son = areaMap.get(key);<br>            Row row = hideSheet.createRow(rowId++);<br>            row.createCell(<span class="hljs-number">0</span>).setCellValue(key);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; son.length; j ++)&#123;<br>                Cell cell = row.createCell(j + <span class="hljs-number">1</span>);<br>                cell.setCellValue(son[j]);<br>            &#125;<br> <br>            <span class="hljs-comment">// 添加名称管理器</span><br>            String range = getRange(<span class="hljs-number">1</span>, rowId, son.length);<br>            Name name = book.createName();<br>            <span class="hljs-comment">//key不可重复</span><br>            name.setNameName(key);<br>            String formula = <span class="hljs-string">&quot;area!&quot;</span> + range;<br>            name.setRefersToFormula(formula);<br>        &#125;<br> <br>        XSSFDataValidationHelper dvHelper = <span class="hljs-keyword">new</span> XSSFDataValidationHelper((XSSFSheet)sheetPro);<br>        <span class="hljs-comment">// 省规则</span><br>        DataValidationConstraint provConstraint = dvHelper.createExplicitListConstraint(provinceArr);<br>        <span class="hljs-comment">// 四个参数分别是：起始行、终止行、起始列、终止列</span><br>        CellRangeAddressList provRangeAddressList = <span class="hljs-keyword">new</span> CellRangeAddressList(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        DataValidation provinceDataValidation = dvHelper.createValidation(provConstraint, provRangeAddressList);<br>        <span class="hljs-comment">//验证</span><br>        provinceDataValidation.createErrorBox(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;请选择正确的省份&quot;</span>);<br>        provinceDataValidation.setShowErrorBox(<span class="hljs-keyword">true</span>);<br>        provinceDataValidation.setSuppressDropDownArrow(<span class="hljs-keyword">true</span>);<br>        sheetPro.addValidationData(provinceDataValidation);<br> <br>        <span class="hljs-comment">//对前20行设置有效性</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt; <span class="hljs-number">20</span>;i++)&#123;<br>            setDataValidation(<span class="hljs-string">&quot;A&quot;</span> ,sheetPro,i,<span class="hljs-number">2</span>);<br>            setDataValidation(<span class="hljs-string">&quot;B&quot;</span> ,sheetPro,i,<span class="hljs-number">3</span>);<br>        &#125;<br>        FileOutputStream os = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:/test01.xlsx&quot;</span>);<br>            book.write(os);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            IOUtils.closeQuietly(os);<br>        &#125;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置有效性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset 主影响单元格所在列，即此单元格由哪个单元格影响联动</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sheet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rowNum 行数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> colNum 列数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDataValidation</span><span class="hljs-params">(String offset,XSSFSheet sheet, <span class="hljs-keyword">int</span> rowNum,<span class="hljs-keyword">int</span> colNum)</span> </span>&#123;<br>        XSSFDataValidationHelper dvHelper = <span class="hljs-keyword">new</span> XSSFDataValidationHelper(sheet);<br>        DataValidation data_validation_list;<br>        data_validation_list = getDataValidationByFormula(<br>                <span class="hljs-string">&quot;INDIRECT($&quot;</span> + offset + (rowNum) + <span class="hljs-string">&quot;)&quot;</span>, rowNum, colNum,dvHelper);<br>        sheet.addValidationData(data_validation_list);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载下拉列表内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> formulaString</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> naturalRowIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> naturalColumnIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dvHelper</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  DataValidation <span class="hljs-title">getDataValidationByFormula</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            String formulaString, <span class="hljs-keyword">int</span> naturalRowIndex, <span class="hljs-keyword">int</span> naturalColumnIndex,XSSFDataValidationHelper dvHelper)</span> </span>&#123;<br>        <span class="hljs-comment">// 加载下拉列表内容</span><br>        <span class="hljs-comment">// 举例：若formulaString = &quot;INDIRECT($A$2)&quot; 表示规则数据会从名称管理器中获取key与单元格 A2 值相同的数据，</span><br>        <span class="hljs-comment">//如果A2是江苏省，那么此处就是江苏省下的市信息。</span><br>        XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper.createFormulaListConstraint(formulaString);<br>        <span class="hljs-comment">// 设置数据有效性加载在哪个单元格上。</span><br>        <span class="hljs-comment">// 四个参数分别是：起始行、终止行、起始列、终止列</span><br>        <span class="hljs-keyword">int</span> firstRow = naturalRowIndex -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> lastRow = naturalRowIndex - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> firstCol = naturalColumnIndex - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> lastCol = naturalColumnIndex - <span class="hljs-number">1</span>;<br>        CellRangeAddressList regions = <span class="hljs-keyword">new</span> CellRangeAddressList(firstRow,<br>                lastRow, firstCol, lastCol);<br>        <span class="hljs-comment">// 数据有效性对象</span><br>        <span class="hljs-comment">// 绑定</span><br>        XSSFDataValidation data_validation_list = (XSSFDataValidation) dvHelper.createValidation(dvConstraint, regions);<br>        data_validation_list.setEmptyCellAllowed(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">if</span> (data_validation_list <span class="hljs-keyword">instanceof</span> XSSFDataValidation) &#123;<br>            data_validation_list.setSuppressDropDownArrow(<span class="hljs-keyword">true</span>);<br>            data_validation_list.setShowErrorBox(<span class="hljs-keyword">true</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            data_validation_list.setSuppressDropDownArrow(<span class="hljs-keyword">false</span>);<br>        &#125;<br>        <span class="hljs-comment">// 设置输入信息提示信息</span><br>        data_validation_list.createPromptBox(<span class="hljs-string">&quot;下拉选择提示&quot;</span>, <span class="hljs-string">&quot;请使用下拉方式选择合适的值！&quot;</span>);<br>        <span class="hljs-comment">// 设置输入错误提示信息</span><br>        <span class="hljs-comment">//data_validation_list.createErrorBox(&quot;选择错误提示&quot;, &quot;你输入的值未在备选列表中，请下拉选择合适的值！&quot;);</span><br>        <span class="hljs-keyword">return</span> data_validation_list;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  计算formula</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset 偏移量，如果给0，表示从A列开始，1，就是从B列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rowId 第几行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> colCount 一共多少列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果给入参 1,1,10. 表示从B1-K1。最终返回 $B$1:$K$1</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> rowId, <span class="hljs-keyword">int</span> colCount)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> start = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + offset);<br>        <span class="hljs-keyword">if</span> (colCount &lt;= <span class="hljs-number">25</span>) &#123;<br>            <span class="hljs-keyword">char</span> end = (<span class="hljs-keyword">char</span>)(start + colCount - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&quot;</span> + start + <span class="hljs-string">&quot;$&quot;</span> + rowId + <span class="hljs-string">&quot;:$&quot;</span> + end + <span class="hljs-string">&quot;$&quot;</span> + rowId;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">char</span> endPrefix = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            <span class="hljs-keyword">char</span> endSuffix = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            <span class="hljs-keyword">if</span> ((colCount - <span class="hljs-number">25</span>) / <span class="hljs-number">26</span> == <span class="hljs-number">0</span> || colCount == <span class="hljs-number">51</span>) &#123;<span class="hljs-comment">// 26-51之间，包括边界（仅两次字母表计算）</span><br>                <span class="hljs-keyword">if</span> ((colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 边界值</span><br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">25</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + (colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> - <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 51以上</span><br>                <span class="hljs-keyword">if</span> ((colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> == <span class="hljs-number">0</span>) &#123;<br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">25</span>);<br>                    endPrefix = (<span class="hljs-keyword">char</span>)(endPrefix + (colCount - <span class="hljs-number">25</span>) / <span class="hljs-number">26</span> - <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    endSuffix = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + (colCount - <span class="hljs-number">25</span>) % <span class="hljs-number">26</span> - <span class="hljs-number">1</span>);<br>                    endPrefix = (<span class="hljs-keyword">char</span>)(endPrefix + (colCount - <span class="hljs-number">25</span>) / <span class="hljs-number">26</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&quot;</span> + start + <span class="hljs-string">&quot;$&quot;</span> + rowI<br>            d + <span class="hljs-string">&quot;:$&quot;</span> + endPrefix + endSuffix + <span class="hljs-string">&quot;$&quot;</span> + rowId;<br>        &#125;<br>    &#125;<br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>效果图如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210325195718801.png" alt="20200117132617484"></p>]]></content>
    
    
    
    <tags>
      
      <tag>poi</tag>
      
      <tag>二级联动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Iterator迭代器解决为何禁止在foreach内增删</title>
    <link href="/blog/2021/03/25/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%A7%A3%E5%86%B3%E4%B8%BA%E4%BD%95%E7%A6%81%E6%AD%A2%E5%9C%A8foreach%E5%86%85%E5%A2%9E%E5%88%A0/"/>
    <url>/blog/2021/03/25/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%A7%A3%E5%86%B3%E4%B8%BA%E4%BD%95%E7%A6%81%E6%AD%A2%E5%9C%A8foreach%E5%86%85%E5%A2%9E%E5%88%A0/</url>
    
    <content type="html"><![CDATA[<p>迭代器的应用场景：</p><p>1、对集合进行增加删除，禁止使用foreach，循环的动态操作 2、倒序遍历 3、遍历循环</p><p>步入正题：为何禁止在foreach内进行增删？</p><p>先看一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *         正例：</span><br><span class="hljs-comment"> *         Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="hljs-comment"> *         while (iterator.hasNext()) &#123;</span><br><span class="hljs-comment"> *             String item = iterator.next();</span><br><span class="hljs-comment"> *             if (删除元素的条件) &#123;</span><br><span class="hljs-comment"> *                 iterator.remove();</span><br><span class="hljs-comment"> *             &#125;</span><br><span class="hljs-comment"> *         &#125;</span><br><span class="hljs-comment"> *         反例：</span><br><span class="hljs-comment"> *         List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="hljs-comment"> *         list.add(&quot;1&quot;);</span><br><span class="hljs-comment"> *         list.add(&quot;2&quot;);</span><br><span class="hljs-comment"> *         for (String item : list) &#123;</span><br><span class="hljs-comment"> *             if (&quot;1&quot;.equals(item)) &#123;</span><br><span class="hljs-comment"> *                 list.remove(item);</span><br><span class="hljs-comment"> *             &#125;</span><br><span class="hljs-comment"> *         &#125;</span><br><span class="hljs-comment"> */</span><br> <br> <br></code></pre></td></tr></table></figure><p>这段代码是，在阿里的开发手册中的一段代码。</p><p>我们先看下面场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 场景一：对集合进行删除，增加、for循环</span><br><span class="hljs-comment"> * 错误：这里会报出数据越界异常，</span><br><span class="hljs-comment"> * 因为：remove掉一个元素后，整个长度发生变化，所以发生异常</span><br><span class="hljs-comment"> * 改进：采用forList.size()动态</span><br><span class="hljs-comment"> */</span><br>List&lt;String&gt; forList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>forList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>forList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>forList.add(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">int</span> length = forList.size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a&quot;</span>.equals(forList.get(i))) &#123;<br>        forList.remove(i);<br>    &#125;<br>&#125;<br>System.out.println(forList);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 产生新问题：</span><br><span class="hljs-comment"> * 错误：运行便会发现：将b移除不完整，</span><br><span class="hljs-comment"> * 因为：删除后整个游标向下，数组向上，刚好空出1个位置，</span><br><span class="hljs-comment"> * 紧接着的第二位没有进行比对，所以产生问题</span><br><span class="hljs-comment"> * 解决：数据长度减一与游标保持统一</span><br><span class="hljs-comment"> */</span><br>List&lt;String&gt; forList1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>forList1.add(<span class="hljs-string">&quot;a&quot;</span>);<br>forList1.add(<span class="hljs-string">&quot;b&quot;</span>);<br>forList1.add(<span class="hljs-string">&quot;b&quot;</span>);<br>forList1.add(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; forList1.size(); i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b&quot;</span>.equals(forList1.get(i))) &#123;<br>        forList1.remove(i);<br>        i--;<br>    &#125;<br>&#125;<br>System.out.println(forList1);<br> <br> <br></code></pre></td></tr></table></figure><p>通过上个场景，知道在for循环内，为啥不建议用remove/add</p><p>在foreach循环内，再接着看下面这个场景？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 场景二：</span><br><span class="hljs-comment"> * foreach循环，的remove/add操作</span><br><span class="hljs-comment"> */</span><br>List&lt;String&gt; forEach = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>forEach.add(<span class="hljs-string">&quot;a&quot;</span>);<br>forEach.add(<span class="hljs-string">&quot;b&quot;</span>);<br>forEach.add(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">for</span> (String each : forEach) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a&quot;</span>.equals(each)) &#123;<br>        forEach.remove(each);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 产生的异常：</span><br><span class="hljs-comment"> *   Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="hljs-comment"> *     at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)</span><br><span class="hljs-comment"> *     at java.util.ArrayList$Itr.next(ArrayList.java:859)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 源码：Itr实现了Iterator接口（删减部分）</span><br><span class="hljs-comment"> *  private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="hljs-comment"> *         <span class="hljs-doctag">@Override</span></span><br><span class="hljs-comment"> *         <span class="hljs-doctag">@SuppressWarnings</span>(&quot;unchecked&quot;)</span><br><span class="hljs-comment"> *         public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="hljs-comment"> *             Objects.requireNonNull(consumer);</span><br><span class="hljs-comment"> *             final int size = ArrayList.this.size;</span><br><span class="hljs-comment"> *             int i = cursor;</span><br><span class="hljs-comment"> *             if (i &gt;= size) &#123;</span><br><span class="hljs-comment"> *                 return;</span><br><span class="hljs-comment"> *             &#125;</span><br><span class="hljs-comment"> *             final Object[] elementData = ArrayList.this.elementData;</span><br><span class="hljs-comment"> *             if (i &gt;= elementData.length) &#123;</span><br><span class="hljs-comment"> *                 throw new ConcurrentModificationException();</span><br><span class="hljs-comment"> *             &#125;</span><br><span class="hljs-comment"> *             while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="hljs-comment"> *                 consumer.accept((E) elementData[i++]);</span><br><span class="hljs-comment"> *             &#125;</span><br><span class="hljs-comment"> *             // update once at end of iteration to reduce heap write traffic</span><br><span class="hljs-comment"> *             cursor = i;</span><br><span class="hljs-comment"> *             lastRet = i - 1;</span><br><span class="hljs-comment"> *             checkForComodification();</span><br><span class="hljs-comment"> *         &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *          如果有更改则抛出ConcurrentModificationException异常，</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *         final void checkForComodification() &#123;</span><br><span class="hljs-comment"> *         之前的版本不等于，当前的版本，判断为数据更新了。</span><br><span class="hljs-comment"> *         那么？为什么产生这样的判断呢，因为你删除后变为新数组，来不及</span><br><span class="hljs-comment"> * 更新版本，jvm不知道你当前数据状态，是否变化，无法再进行遍历</span><br><span class="hljs-comment"> *             if (modCount != expectedModCount)</span><br><span class="hljs-comment"> *                 throw new ConcurrentModificationException();</span><br><span class="hljs-comment"> *         &#125;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 改进：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br>List&lt;String&gt; forEachIterator = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>forEachIterator.add(<span class="hljs-string">&quot;a&quot;</span>);<br>forEachIterator.add(<span class="hljs-string">&quot;b&quot;</span>);<br>forEachIterator.add(<span class="hljs-string">&quot;c&quot;</span>);<br>java.util.Iterator&lt;String&gt; iterator = forEachIterator.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    String next = iterator.next();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a&quot;</span>.equals(next)) &#123;<br>        iterator.remove();<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>这里：foreach实现的就是迭代器。</p><p>补充：倒序循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">      * 场景三：</span><br><span class="hljs-comment">      * 应用：倒序遍历</span><br><span class="hljs-comment">      */</span><br>     List&lt;String&gt; forEachIteratorDown = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>     forEachIteratorDown.add(<span class="hljs-string">&quot;a&quot;</span>);<br>     forEachIteratorDown.add(<span class="hljs-string">&quot;b&quot;</span>);<br>     forEachIteratorDown.add(<span class="hljs-string">&quot;c&quot;</span>);<br>     ListIterator&lt;String&gt; item = forEachIteratorDown.listIterator();<br>     <span class="hljs-comment">//这里需要先将指针移向最后一位，再进行倒叙</span><br>     <span class="hljs-keyword">while</span> (item.hasNext()) &#123;<br>         item.next();<br>     &#125;<br>     <span class="hljs-keyword">while</span> (item.hasPrevious()) &#123;<br>         String previous = item.previous();<br>         System.out.println(previous);<br>     &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Iterator</tag>
      
      <tag>foreach</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索一个字符数组中是否存在某个字符</title>
    <link href="/blog/2021/03/24/%E6%90%9C%E7%B4%A2%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6/"/>
    <url>/blog/2021/03/24/%E6%90%9C%E7%B4%A2%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>请在一个类中编写一个方法，这个方法搜索一个字符数组中是否存在某个字符，如果存在，则返回这个字符在字符数组中第一次出现的位置（序号从0开始计算），否则，返回-1。要搜索的字符数组和字符都以参数形式传递传递给该方法，如果传入的数组为null，应抛出IllegalArgumentException异常。在类的main方法中以各种可能出现的情况测试验证该方法编写得是否正确，例如，字符不存在，字符存在，传入的数组为null等。</p><p>1.创建一个字符数组。 2.搜索该字符是否存在字符数组中，编写搜索方法。 3.判断字符数组中是否存在该字符</p><p>1.valueOf：方法用于返回给定参数的原生 Number 对象值。 如：char[] str = { ‘a’, ‘b’, ‘c’, ‘a’ }; String s = String.valueOf(str); // s的值是 abca 2.indexOf：返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。 如：s.indexOf(“b”); // 表示：如果字符数组中存在b，则返回第一次出现b的下标索引，如果没有b，则返回-1</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eleven.csdn0110;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.请在一个类中编写一个方法，这个方法搜索一个字符数组中是否存在某个字符，如果存在，则返回这个字符在字符数组中第一次出现的位置（序号从0开始计算），否则，返回-1。</span><br><span class="hljs-comment"> * 2.要搜索的字符数组和字符都以参数形式传递传递给该方法，如果传入的数组为null，应抛出IllegalArgumentException异常。</span><br><span class="hljs-comment"> * 3.在类的main方法中以各种可能出现的情况测试验证该方法编写得是否正确，例如，字符不存在，字符存在，传入的数组为null等。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sywangu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneDay</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建一个字符数组</span><br><span class="hljs-keyword">char</span>[] str = &#123; <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span> &#125;;<br><span class="hljs-comment">// 搜索该字符是否存在字符数组中</span><br><span class="hljs-keyword">int</span> index = search(str,<span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-comment">// 判断字符数组中是否存在该字符</span><br><span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">// index为-1时，表示字符不存在</span><br>System.out.println(<span class="hljs-string">&quot;该字符不存在&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;字符在字符数组中第一次出现的位置&quot;</span> + index);<br>&#125;<br>&#125;<br> <br><span class="hljs-comment">// search方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] aStr, <span class="hljs-keyword">char</span> aIndex)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<span class="hljs-comment">// 将index的值初始化为-1</span><br><span class="hljs-keyword">if</span> (aStr == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 如果str值为null，则抛出非法数据异常</span><br><span class="hljs-keyword">new</span> IllegalArgumentException().printStackTrace();<span class="hljs-comment">// IllegalArgumentException非法数据异常</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; aStr.length; i++) &#123;<br><span class="hljs-keyword">if</span> (aIndex == aStr[i]) &#123;<span class="hljs-comment">// 如果字符数组里面的字符和要搜索的字符一致</span><br>index = i;<span class="hljs-comment">// 就将i的值赋值给index</span><br><span class="hljs-keyword">break</span>;<span class="hljs-comment">// 满足条件，退出循环</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> index;<span class="hljs-comment">// 打印index的值</span><br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eleven.test;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.请在一个类中编写一个方法，这个方法搜索一个字符数组中是否存在某个字符，如果存在，则返回这个字符在字符数组中第一次出现的位置（序号从0开始计算），否则，返回-1。</span><br><span class="hljs-comment"> * 2.要搜索的字符数组和字符都以参数形式传递传递给该方法，如果传入的数组为null，应抛出IllegalArgumentException异常。</span><br><span class="hljs-comment"> * 3.在类的main方法中以各种可能出现的情况测试验证该方法编写得是否正确，例如，字符不存在，字符存在，传入的数组为null等。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sywangu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneDemoTest</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建一个字符数组</span><br><span class="hljs-keyword">char</span>[] str = &#123; <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span> &#125;;<br><span class="hljs-comment">// // 如果str值为null，则抛出非法数据异常</span><br><span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br><span class="hljs-comment">// valueOf() 方法用于返回给定参数的原生 Number 对象值</span><br>String s = String.valueOf(str); <span class="hljs-comment">// s的值是 abca</span><br><span class="hljs-comment">// indexOf():返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</span><br>System.out.println(s.indexOf(<span class="hljs-string">&quot;b&quot;</span>));<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>字符数组</tag>
      
      <tag>包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中使用图片验证码</title>
    <link href="/blog/2021/03/24/%E5%89%AF%E6%9C%AC%E7%9A%84%E5%89%AF%E6%9C%AC4/"/>
    <url>/blog/2021/03/24/%E5%89%AF%E6%9C%AC%E7%9A%84%E5%89%AF%E6%9C%AC4/</url>
    
    <content type="html"><![CDATA[<h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/BufferImage&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferImage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WIDTH = <span class="hljs-number">120</span>;<span class="hljs-comment">//生成图片的宽度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> HEIGHT = <span class="hljs-number">30</span>;<span class="hljs-comment">//生成图片的高度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WORDS_NUMBER = <span class="hljs-number">4</span>;<span class="hljs-comment">//验证码中字符的个数</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>    <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        String createTypeFlag = req.getParameter(<span class="hljs-string">&quot;createTypeFlag&quot;</span>);<span class="hljs-comment">//接收客户端传递的createTypeFlag标识</span><br>        <span class="hljs-comment">//在内存中创建一张图片</span><br>        BufferedImage bi = <span class="hljs-keyword">new</span> BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_3BYTE_BGR);<br>        <span class="hljs-comment">//得到图片</span><br>        Graphics g = bi.getGraphics();<br>        <span class="hljs-comment">//设置图片的背景色</span><br>        setBackGround(g);<br>        <span class="hljs-comment">//设置图片的边框</span><br>        setBorder(g);<br>        <span class="hljs-comment">//在图片上画干扰线</span><br>        drawRandomLine(g);<br>        <span class="hljs-comment">//在图片上放上随机字符</span><br>        String randomString = <span class="hljs-keyword">this</span>.drawRandomNum((Graphics2D)g, createTypeFlag);<br>        System.out.println(randomString);<br>        <span class="hljs-comment">//将随机数存在session中</span><br>        req.getSession().setAttribute(<span class="hljs-string">&quot;checkcode&quot;</span>, randomString);<br>        <br>        <span class="hljs-comment">//设置响应头通知浏览器以图片的形式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <br>        <span class="hljs-comment">//设置响应头控制浏览器不要缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expries&quot;</span>, -<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        <br>        <span class="hljs-comment">//将图片传给浏览器</span><br>        ImageIO.write(bi, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br>    &#125;<br>    <br>    <span class="hljs-comment">//设置图片背景色</span><br>    <span class="hljs-comment">//@param g</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBackGround</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-comment">//设置颜色</span><br>        g.setColor(Color.WHITE);<br>        <span class="hljs-comment">//填充区域</span><br>        g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, WIDTH, HEIGHT);<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 设置图片的边框</span><br><span class="hljs-comment">     * @param g</span><br><span class="hljs-comment">     * */</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBorder</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-comment">//设置边框颜色</span><br>        g.setColor(Color.BLUE);<br>        <span class="hljs-comment">//边框区域</span><br>        g.drawRect(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, WIDTH - <span class="hljs-number">2</span>, HEIGHT -<span class="hljs-number">2</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 在图片上画随机线条 </span><br><span class="hljs-comment">     * @param g</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawRandomLine</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-comment">//设置颜色</span><br>        g.setColor(Color.GREEN);<br>        <span class="hljs-comment">//设置线条个数并画线</span><br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">7</span> ; i++ ) &#123;<br>            <span class="hljs-keyword">int</span> x1 = <span class="hljs-keyword">new</span> Random().nextInt(WIDTH);<br>            <span class="hljs-keyword">int</span> y1 = <span class="hljs-keyword">new</span> Random().nextInt(HEIGHT);<br>            <span class="hljs-keyword">int</span> x2 = <span class="hljs-keyword">new</span> Random().nextInt(WIDTH);<br>            <span class="hljs-keyword">int</span> y2 = <span class="hljs-keyword">new</span> Random().nextInt(HEIGHT);<br>            g.drawLine(x1, y1, x2, y2);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 在图片上画随机字符</span><br><span class="hljs-comment">     * @param g</span><br><span class="hljs-comment">     * @param createTypeFlag</span><br><span class="hljs-comment">     * @return String</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">drawRandomNum</span><span class="hljs-params">(Graphics g,String createTypeFlag)</span> </span>&#123;<br>        <span class="hljs-comment">//设置颜色</span><br>        g.setColor(Color.BLUE);<br>        g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;宋体&quot;</span>,Font.BOLD,<span class="hljs-number">20</span>));<br>        <br>        <span class="hljs-comment">//数字字母的组合</span><br>        String baseNumLetter = <span class="hljs-string">&quot;0123456789ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;</span>;<br>        String baseNum = <span class="hljs-string">&quot;0123456789&quot;</span>;<br>        String baseLetter = <span class="hljs-string">&quot;ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;</span>;<br>        <span class="hljs-keyword">if</span> ( createTypeFlag != <span class="hljs-keyword">null</span>  &amp;&amp; createTypeFlag.length() &gt; <span class="hljs-number">0</span> ) &#123;<br>            <span class="hljs-keyword">if</span>( createTypeFlag.equals(<span class="hljs-string">&quot;nl&quot;</span>) ) &#123;<br>                <span class="hljs-comment">//截取数字和字母的组合</span><br>                <span class="hljs-keyword">return</span> createRandomChar((Graphics2D) g,baseNumLetter);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( createTypeFlag.equals(<span class="hljs-string">&quot;n&quot;</span>) ) &#123;<br>                <span class="hljs-comment">//截取数字的组合</span><br>                <span class="hljs-keyword">return</span> createRandomChar((Graphics2D) g,baseNum);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( createTypeFlag.equals(<span class="hljs-string">&quot;l&quot;</span>) ) &#123;<br>                <span class="hljs-comment">//截取字母的组合</span><br>                <span class="hljs-keyword">return</span> createRandomChar((Graphics2D) g,baseLetter);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//截取数字和字母的组合</span><br>            <span class="hljs-keyword">return</span> createRandomChar((Graphics2D) g,baseNumLetter);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 创建随机字符</span><br><span class="hljs-comment">     * @param g</span><br><span class="hljs-comment">     * @param baseChar</span><br><span class="hljs-comment">     * @return String</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">createRandomChar</span><span class="hljs-params">(Graphics2D g , String baseChar)</span> </span>&#123;<br>        StringBuffer b = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">5</span>;<br>        String ch = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; WORDS_NUMBER ; i++ ) &#123;<br>            <span class="hljs-comment">//设置字体的旋转角度</span><br>            <span class="hljs-keyword">int</span> degree = <span class="hljs-keyword">new</span> Random().nextInt() % <span class="hljs-number">30</span>;<br>            ch = baseChar.charAt(<span class="hljs-keyword">new</span> Random().nextInt(baseChar.length())) + <span class="hljs-string">&quot;&quot;</span>;<br>            b.append(ch);<br>            <br>            <span class="hljs-comment">//正向角度</span><br>            g.rotate(degree  * Math.PI / <span class="hljs-number">180</span> , x,<span class="hljs-number">20</span>);<br>            g.drawString(ch, x, <span class="hljs-number">20</span>);<br>            <span class="hljs-comment">//反向角度</span><br>            g.rotate(-degree  * Math.PI / <span class="hljs-number">180</span> , x,<span class="hljs-number">20</span>);<br>            x+=<span class="hljs-number">30</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> b.toString();<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@RequestMapping(value=&quot;/userLogin.do&quot;)</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">userLogin</span><span class="hljs-params">(String code,HttpSession session)</span></span>&#123;<br>String cht=(String)session.getAttribute(<span class="hljs-string">&quot;checkcode&quot;</span>);<br><span class="hljs-keyword">if</span>(code.equalsIgnoreCase(cht))&#123;<br>System.out.println(<span class="hljs-string">&quot;验证码正确&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;form&gt;<br>&lt;img src=<span class="hljs-string">&quot;BufferImage&quot;</span> οnclick=<span class="hljs-string">&quot;this.src=&#x27;BufferImage?&#x27;+new Date().getTime()&quot;</span>&gt;看不清换一张&lt;br&gt;&lt;br&gt;<br>验证码： &lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;verify&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;input-medium&quot;</span> placeholder=<span class="hljs-string">&quot;验证码&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br> <br></code></pre></td></tr></table></figure><h2 id="第二种方式（Spring-Boot框架使用）"><a href="#第二种方式（Spring-Boot框架使用）" class="headerlink" title="第二种方式（Spring Boot框架使用）"></a>第二种方式（Spring Boot框架使用）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhiyou.util;<br> <br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.util.Random;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferImage</span> </span>&#123;<br> <br>    <span class="hljs-comment">// 验证码字符集</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] chars = &#123;<br>            <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>,<br>            <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>,<br>            <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>&#125;;<br>    <span class="hljs-comment">// 字符数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SIZE = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 干扰线数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LINES = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">// 宽度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WIDTH = <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">// 高度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> HEIGHT = <span class="hljs-number">32</span>;<br>    <span class="hljs-comment">// 字体大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> FONT_SIZE = <span class="hljs-number">25</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机验证码及图片</span><br><span class="hljs-comment">     * 数组中[验证码，图片]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object[] createImage() &#123;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-comment">// 1.创建空白图片</span><br>        BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(<br>                WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">// 2.获取图片画笔</span><br>        Graphics graphic = image.getGraphics();<br>        <span class="hljs-comment">// 3.设置画笔颜色</span><br>        graphic.setColor(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">216</span>, <span class="hljs-number">172</span>, <span class="hljs-number">203</span>, <span class="hljs-number">241</span>));<br>        <span class="hljs-comment">// 4.绘制矩形背景</span><br>        graphic.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, WIDTH, HEIGHT);<br> <br>        <span class="hljs-comment">// 5.画随机字符</span><br>        Random ran = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;SIZE; i++) &#123;<br>            <span class="hljs-comment">// 取随机字符索引</span><br>            <span class="hljs-keyword">int</span> n = ran.nextInt(chars.length);<br>            <span class="hljs-comment">// 设置随机颜色</span><br>            graphic.setColor(getRandomColor());<br>            <span class="hljs-comment">// 设置字体大小</span><br>            graphic.setFont(<span class="hljs-keyword">new</span> Font(<br>                    <span class="hljs-keyword">null</span>, Font.BOLD + Font.ITALIC, FONT_SIZE));<br>            <span class="hljs-comment">// 画字符</span><br>            graphic.drawString(<br>                    chars[n] + <span class="hljs-string">&quot;&quot;</span>, i * WIDTH / SIZE, HEIGHT/<span class="hljs-number">2</span>+HEIGHT/<span class="hljs-number">8</span>);<br>            <span class="hljs-comment">// 记录字符</span><br>            sb.append(chars[n]);<br>        &#125;<br>        <span class="hljs-comment">// 6.画干扰线</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LINES; i++) &#123;<br> <br>            graphic.setColor(getRandomColor());<br>            <span class="hljs-comment">// 随机画线</span><br>            graphic.drawLine(ran.nextInt(WIDTH), ran.nextInt(HEIGHT),<br>                    ran.nextInt(WIDTH), ran.nextInt(HEIGHT));<br>        &#125;<br>        <span class="hljs-comment">// 7.返回验证码和图片</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Object[]&#123;sb.toString(), image&#125;;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 随机取色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Color <span class="hljs-title">getRandomColor</span><span class="hljs-params">()</span> </span>&#123;<br>        Random ran = <span class="hljs-keyword">new</span> Random();<br>        Color color = <span class="hljs-keyword">new</span> Color(ran.nextInt(<span class="hljs-number">256</span>),<br>                ran.nextInt(<span class="hljs-number">256</span>), ran.nextInt(<span class="hljs-number">256</span>));<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Object[] objs = createImage();<br>        BufferedImage image = (BufferedImage) objs[<span class="hljs-number">1</span>];<br>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/resources/static/picture/eb1ccd3d99794795bc99553b0b762e73.gif&quot;</span>);<br>        ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, os);<br>        os.close();<br>    &#125;<br> <br>&#125;<br> <br> <br></code></pre></td></tr></table></figure><h2 id="后台controller"><a href="#后台controller" class="headerlink" title="后台controller"></a>后台controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* **********************************图片验证码************************************* */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/BufferImage&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createImg</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><span class="hljs-comment">//1.生成随机的验证码及图片</span><br>Object[] objs = BufferImage.createImage();<br><span class="hljs-comment">//2.将验证码存入session</span><br>String imgcode = (String) objs[<span class="hljs-number">0</span>];<br>HttpSession session = req.getSession();<br>session.setAttribute(<span class="hljs-string">&quot;checkcode&quot;</span>, imgcode);<br><span class="hljs-comment">//3.将图片输出给浏览器</span><br>BufferedImage img = (BufferedImage) objs[<span class="hljs-number">1</span>];<br>res.setContentType(<span class="hljs-string">&quot;image/png&quot;</span>);<br><span class="hljs-comment">//服务器自动创建输出流，目标指向浏览器</span><br>OutputStream os = res.getOutputStream();<br>ImageIO.write(img, <span class="hljs-string">&quot;png&quot;</span>, os);<br>os.close();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>图片验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java常用工具类</title>
    <link href="/blog/2021/03/24/java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB1/"/>
    <url>/blog/2021/03/24/java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB1/</url>
    
    <content type="html"><![CDATA[<h2 id="统计段落中出现某一个词的次数"><a href="#统计段落中出现某一个词的次数" class="headerlink" title="统计段落中出现某一个词的次数"></a>统计段落中出现某一个词的次数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wordCount</span><span class="hljs-params">()</span></span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>,index = <span class="hljs-number">0</span>;<br>    System.out.println(<span class="hljs-string">&quot;请输入句子：&quot;</span>);<br>    String s = scanner.nextLine();<br>    System.out.println(<span class="hljs-string">&quot;请输入要查询的词：&quot;</span>);<br>    String card = scanner.next();<br>    <span class="hljs-keyword">while</span> ((index = s.indexOf(card,index)) != -<span class="hljs-number">1</span>)&#123;<br>        index = index + card.length();<br>        count++;<br>    &#125;<br>    System.out.println(card + <span class="hljs-string">&quot;在句子中出现了&quot;</span>+ count + <span class="hljs-string">&quot;次&quot;</span>);<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="一个随机字符串，判断有多少字母有多少数字"><a href="#一个随机字符串，判断有多少字母有多少数字" class="headerlink" title="一个随机字符串，判断有多少字母有多少数字"></a>一个随机字符串，判断有多少字母有多少数字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">letterAndnum</span><span class="hljs-params">()</span></span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入随机字符串：&quot;</span>);<br>    String s = scanner.nextLine();<br>    <span class="hljs-keyword">int</span> length = s.length();<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>,let = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>        <span class="hljs-keyword">if</span> (Character.isDigit(s.charAt(i)))&#123;<br>            num++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Character.isLetter(s.charAt(i)))&#123;<br>            let++;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数字：&quot;</span>+num+<span class="hljs-string">&quot;   字母：&quot;</span>+let);<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="根据特定日期格式拆分日期"><a href="#根据特定日期格式拆分日期" class="headerlink" title="根据特定日期格式拆分日期"></a>根据特定日期格式拆分日期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如：请输入一个日期（格式如：**月**日****年）经过处理得到： ****年**月**日</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">splitDate</span><span class="hljs-params">()</span></span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入日期：（格式如：**月**日****年）&quot;</span>);<br>    String s = scanner.nextLine();<br>    <span class="hljs-keyword">int</span> i = s.indexOf(<span class="hljs-string">&quot;日&quot;</span>);<br>    String substring = s.substring(i + <span class="hljs-number">1</span>);<br>    String substring1 = s.substring(<span class="hljs-number">0</span>, i + <span class="hljs-number">1</span>);<br>    System.out.println(substring + substring1);<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="敏感词过滤程序"><a href="#敏感词过滤程序" class="headerlink" title="敏感词过滤程序"></a>敏感词过滤程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fitterWords</span><span class="hljs-params">()</span></span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入聊天内容：&quot;</span>);<br>    String str = scanner.nextLine();<br>    String ch[] = &#123;<span class="hljs-string">&quot;色情&quot;</span>,<span class="hljs-string">&quot;爆炸&quot;</span>,<span class="hljs-string">&quot;恐怖&quot;</span>,<span class="hljs-string">&quot;军火&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (String s:ch) &#123;<br>        str = str.replaceAll(s,<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;聊天内容：&quot;</span>+str);<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="计算某年、某月、某日和某年、某月、某日之间的天数间隔和周数"><a href="#计算某年、某月、某日和某年、某月、某日之间的天数间隔和周数" class="headerlink" title="计算某年、某月、某日和某年、某月、某日之间的天数间隔和周数"></a>计算某年、某月、某日和某年、某月、某日之间的天数间隔和周数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leadTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入第一个日期：&quot;</span>);<br>    String str = scanner.nextLine();<br>    System.out.println(<span class="hljs-string">&quot;请输入第二个日期：&quot;</span>);<br>    String str2 = scanner.nextLine();<br>    SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    Date parse = dateFormat.parse(str);<br>    Date parse1 = dateFormat.parse(str2);<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (parse.after(parse1))&#123;<br>        a = parse.getTime() - parse1.getTime();<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        a = parse1.getTime() - parse.getTime();<br>    &#125;<br>    <span class="hljs-keyword">long</span> oneDay = <span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">long</span> day = a/oneDay;<br>    <span class="hljs-keyword">long</span> week = day/<span class="hljs-number">7</span>;<br>    System.out.println(<span class="hljs-string">&quot;相隔：&quot;</span>+day+<span class="hljs-string">&quot; 天&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;相隔：&quot;</span>+week+<span class="hljs-string">&quot; 周&quot;</span>);<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="设定一个有大小写字母的字符串，先将字符串的大写字符输出，再将字符串中的小写字符输出"><a href="#设定一个有大小写字母的字符串，先将字符串的大写字符输出，再将字符串中的小写字符输出" class="headerlink" title="设定一个有大小写字母的字符串，先将字符串的大写字符输出，再将字符串中的小写字符输出"></a>设定一个有大小写字母的字符串，先将字符串的大写字符输出，再将字符串中的小写字符输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">letterUpperLower</span><span class="hljs-params">()</span></span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入字符串：&quot;</span>);<br>    String str = scanner.nextLine();<br>    <span class="hljs-keyword">char</span>[] chars = str.toCharArray();<br>    System.out.println(<span class="hljs-string">&quot;大写字母为：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> a:chars) &#123;<br>        <span class="hljs-keyword">if</span> (Character.isUpperCase(a))&#123;<br>            System.out.println(a);<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;小写字母为：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> a:chars) &#123;<br>        <span class="hljs-keyword">if</span> (Character.isLowerCase(a))&#123;<br>            System.out.println(a);<br>        &#125;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="计算并输出21世纪的闰年，程序的执行时间"><a href="#计算并输出21世纪的闰年，程序的执行时间" class="headerlink" title="计算并输出21世纪的闰年，程序的执行时间"></a>计算并输出21世纪的闰年，程序的执行时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leapYeay21</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>    GregorianCalendar calendar = <span class="hljs-keyword">new</span> GregorianCalendar();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2000</span>;i&lt;<span class="hljs-number">2100</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span> (calendar.isLeapYear(i))&#123;<br>            System.out.println(i + <span class="hljs-string">&quot;是闰年&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;程序的执行时间为：&quot;</span>+(end - start)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="当以yyyy-MM-dd格式输入一个日期时，输出其该年是否为闰年，该月有几天，该日是星期几"><a href="#当以yyyy-MM-dd格式输入一个日期时，输出其该年是否为闰年，该月有几天，该日是星期几" class="headerlink" title="当以yyyy-MM-dd格式输入一个日期时，输出其该年是否为闰年，该月有几天，该日是星期几"></a>当以yyyy-MM-dd格式输入一个日期时，输出其该年是否为闰年，该月有几天，该日是星期几</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">isLeapYeay</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入日期：(格式：yyyy-MM-dd)&quot;</span>);<br>    String str = scanner.nextLine();<br>    SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    Date parse = dateFormat.parse(str);<br>    Calendar instance = Calendar.getInstance();<br>    instance.setTime(parse);<br>    <span class="hljs-keyword">int</span> year = instance.get(Calendar.YEAR);<br>    <span class="hljs-keyword">int</span> month = instance.get(Calendar.MONTH)+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> week = instance.get(Calendar.DAY_OF_WEEK)-<span class="hljs-number">1</span>;<br>    GregorianCalendar calendar = <span class="hljs-keyword">new</span> GregorianCalendar();<br>    <span class="hljs-keyword">if</span> (calendar.isLeapYear(year))&#123;<br>        System.out.println(year + <span class="hljs-string">&quot;是闰年&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(year + <span class="hljs-string">&quot;是平年&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> max = instance.getActualMaximum(Calendar.DAY_OF_MONTH);<br>    String s = week == <span class="hljs-number">0</span>?<span class="hljs-string">&quot;周日&quot;</span>:<span class="hljs-string">&quot;周&quot;</span>+week;<br>    System.out.println(month + <span class="hljs-string">&quot;月有&quot;</span> + max + <span class="hljs-string">&quot;日，该日是&quot;</span> + s);<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsp实现轮播图</title>
    <link href="/blog/2021/03/24/jsp%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <url>/blog/2021/03/24/jsp%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>背景</strong> 支持ie老版本没办法使用比较新的框架,只能使用原始js实现。 <a href="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/shufflingFigure.gif">演示地址</a> 实现功能如下:</p><ol><li>鼠标放在图上暂停。</li><li>点击下面圆点切换图片。</li><li>点击左右箭头切换。</li><li>自动进行轮播。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/context/mytags.jsp&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;商品信息查看&lt;/title&gt;<br>    &lt;style&gt;<br>        .ui-button &#123;<br>            display: inline-block;<br>            padding: 2px 2px;<br>            margin-bottom: <span class="hljs-number">0</span>;<br>            font-size: 8px;<br>            font-weight: normal;<br>            line-height: <span class="hljs-number">1.42857143</span>;<br>            text-align: center;<br>            white-space: nowrap;<br>            vertical-align: middle;<br>            -ms-touch-action: manipulation;<br>            touch-action: manipulation;<br>            cursor: pointer;<br>            -webkit-user-select: none;<br>            -moz-user-select: none;<br>            -ms-user-select: none;<br>            user-select: none;<br>            background-image: none;<br>            border: 1px solid transparent;<br>            border-radius: 4px;<br>        &#125;<br> <br>        body &#123;<br>            overflow: scroll;<br>        &#125;<br> <br>        <span class="hljs-comment">/* 轮播图样式表 */</span><br> <br>        #content #carousel_wrap &#123;<br>            position: relative;<br>            margin: <span class="hljs-number">0</span> auto;<br>            width: <span class="hljs-number">100</span>%; <span class="hljs-comment">/* 轮播图宽度 */</span><br>            overflow: hidden;<br>        &#125;<br> <br>        #content #carousel_wrap #carousel_images &#123;<br>            position: absolute;<br>            border: <span class="hljs-number">0</span>;<br>            outline: none;<br>            white-space: nowrap; <span class="hljs-comment">/* 将图片一行排列 */</span><br>            width: <span class="hljs-number">100</span>%;<br>            font-size: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 清除white-space间隙 */</span><br>            margin: 0px;<br>        &#125;<br> <br>        #content #carousel_wrap #carousel_images img &#123;<br>            width: <span class="hljs-number">100</span>%;<br>        &#125;<br> <br>        #content #carousel_wrap .arrow &#123;<br>            position: absolute;<br>            font-weight: bold;<br>            font-size: 50px;<br>            color: lightgray;<br>            top: <span class="hljs-number">50</span>%;<br>            transform: translateY(-<span class="hljs-number">50</span>%);<br>            cursor: pointer;<br>            transition-property: opacity;<br>            transition-duration: <span class="hljs-number">0.</span>5s;<br>        &#125;<br> <br>        #content #carousel_wrap .arrow:hover &#123;<br>            opacity: <span class="hljs-number">0.5</span>;<br>        &#125;<br> <br>        #content #carousel_wrap .left-arrow &#123;<br>            left: 20px;<br>        &#125;<br> <br>        #content #carousel_wrap .right-arrow &#123;<br>            right: 20px;<br>        &#125;<br> <br>        #content #carousel_wrap #dots &#123;<br>            position: absolute;<br>            bottom: 20px;<br>            left: <span class="hljs-number">50</span>%;<br>            transform: translateX(-<span class="hljs-number">50</span>%)<br>        &#125;<br> <br>        #content #carousel_wrap .dot &#123;<br>            background-color: white;<br>            display: inline-block;<br>            width: 10px;<br>            height: 10px;<br>            border-radius: <span class="hljs-number">50</span>%;<br>            margin: 4px;<br>            opacity: <span class="hljs-number">0.2</span>;<br>            cursor: pointer;<br>        &#125;<br> <br>        #content #carousel_wrap .active &#123;<br>            opacity: <span class="hljs-number">1</span>;<br>        &#125;<br> <br>        .transition &#123;<br>            transition-property: left;<br>            transition-duration: 1s;<br>        &#125;<br> <br>        <span class="hljs-comment">/* END 轮播图样式表 */</span><br> <br> <br>    &lt;/style&gt;<br> <br><span class="hljs-comment">/* 这里引入自己jquery就行 */</span><br>    &lt;t:base type=&quot;jquery,easyui,tools,DatePicker&quot;&gt;&lt;/t:base&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(document).ready(function () &#123;<br>            $(<span class="hljs-string">&#x27;#tt&#x27;</span>).tabs(&#123;<br>                onSelect: function (title) &#123;<br>                    $(<span class="hljs-string">&#x27;#tt .panel-body&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;auto&#x27;</span>);<br>                &#125;<br>            &#125;);<br>            $(<span class="hljs-string">&quot;.tabs-wrap&quot;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;100%&#x27;</span>);<br>        &#125;);<br>    &lt;/script&gt;<br> <br> <br> <br> <br>&lt;/head&gt;<br> <br>&lt;body&gt;<br> <br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> <br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;<br>    &lt;title&gt;Lifeblog.com&lt;/title&gt;<br>    &lt;script type=&quot;text/javascript&quot; src=&quot;js/friends.js&quot;&gt;&lt;/script&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&quot;css/friends.css&quot;</span>/&gt;<br>&lt;/head&gt;<br> <br>&lt;body&gt;<br> <br> <br>&lt;!-- 轮播图 --&gt;<br>&lt;div id=<span class="hljs-string">&quot;content&quot;</span>&gt;<br>    &lt;div id=<span class="hljs-string">&quot;carousel_wrap&quot;</span>&gt;<br>        &lt;div id=<span class="hljs-string">&quot;carousel_images&quot;</span>&gt;<br>            &lt;!-- 前后分别加上一张图片，方便无缝过渡显示。可以使用JS DOM增加节点操作省去该步骤 --&gt;<br>            &lt;img src=<span class="hljs-string">&quot; &quot;</span> width=<span class="hljs-string">&#x27;675&#x27;</span> height=<span class="hljs-string">&#x27;380&#x27;</span> id=<span class="hljs-string">&quot;first&quot;</span>&gt;<br>            &lt;img src=<span class="hljs-string">&quot; &quot;</span> width=<span class="hljs-string">&#x27;675&#x27;</span> height=<span class="hljs-string">&#x27;380&#x27;</span> id=<span class="hljs-string">&quot;worst&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;span class=&quot;arrow left-arrow&quot;&gt;&amp;lt;&lt;/span&gt;<br>        &lt;span class=&quot;arrow right-arrow&quot;&gt;&amp;gt;&lt;/span&gt;<br>        &lt;div id=<span class="hljs-string">&quot;dots&quot;</span>&gt;<br>            &lt;!-- 使用小点标记实际多少张图片，要添加图片时需要修改carousel_images和此处 --&gt;<br>            &lt;span class=&quot;dot active&quot;&gt;&lt;/span&gt;<br>            &lt;%--&lt;span class=&quot;dot&quot;&gt;&lt;/span&gt;--%&gt;<br>            &lt;%--&lt;span class=&quot;dot&quot;&gt;&lt;/span&gt;--%&gt;<br> <br>        &lt;/div&gt;<br>    &lt;/div&gt;<br> <br>&lt;/div&gt;<br>&lt;!-- END 轮播图 --&gt;<br> <br> <br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br>&lt;script&gt;<br>    window.onload = function () &#123;<br><span class="hljs-comment">//动态从后台获取图片</span><br>        <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;lpaArticlesController.do?getFiles&#x27;</span>;<br>        url += <span class="hljs-string">&#x27;&amp;id=&#x27;</span> + <span class="hljs-string">&#x27;$&#123;id&#125;&#x27;</span>;<br>        $.ajax(&#123;<br>            url: url,<br>            type: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            cache: <span class="hljs-keyword">false</span>,<br>            success: function (data) &#123;<br>                <span class="hljs-keyword">var</span> d = $.parseJSON(data);<br>                console.log(d.obj);<br>                <span class="hljs-keyword">if</span> (d.obj.length &gt; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">//增加图片</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; d.obj.length; i++) &#123;<br>                        $(<span class="hljs-string">&quot;#carousel_images&quot;</span>).append(<span class="hljs-string">&quot;&lt;img width=&#x27;675&#x27; height=&#x27;380&#x27; src=&quot;</span> + d.obj[i].path + <span class="hljs-string">&quot; &gt;&quot;</span>);<br>                        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                            $(<span class="hljs-string">&quot;#first&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, d.obj[<span class="hljs-number">0</span>].path);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            $(<span class="hljs-string">&quot;#worst&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, d.obj[d.obj.length - <span class="hljs-number">1</span>].path);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">//增加小圆点</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; d.obj.length - <span class="hljs-number">1</span>; i++) &#123;<br>                        $(<span class="hljs-string">&quot;#dots&quot;</span>).append(<span class="hljs-string">&quot;&lt;span class=&#x27;dot&#x27;&gt;&lt;/span&gt;&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d.obj.length == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">//如果只有一张图片 不需要加圆点</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; d.obj.length; i++) &#123;<br>                        $(<span class="hljs-string">&quot;#first&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                        $(<span class="hljs-string">&quot;#worst&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, d.obj[<span class="hljs-number">0</span>].path);<br>                        $(<span class="hljs-string">&quot;#carousel_images&quot;</span>).append(<span class="hljs-string">&quot;&lt;img width=&#x27;675&#x27; height=&#x27;380&#x27; src=&quot;</span> + d.obj[i].path + <span class="hljs-string">&quot; &gt;&quot;</span>);<br>                    &#125;<br> <br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//没有图片的时候 建议放一张空白图</span><br>                    $(<span class="hljs-string">&quot;#first&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;webpage/main/img/noPictures.jpg&quot;</span>);<br>                    $(<span class="hljs-string">&quot;#worst&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;webpage/main/img/noPictures.jpg&quot;</span>);<br>                    $(<span class="hljs-string">&quot;#carousel_images&quot;</span>).append(<span class="hljs-string">&quot;&lt;img width=&#x27;675&#x27; height=&#x27;380&#x27; src=&#x27;webpage/main/img/noPictures.jpg&#x27; &gt;&quot;</span>);<br> <br>                &#125;<br> <br> <br>                <span class="hljs-keyword">var</span> carouImg = document.getElementById(<span class="hljs-string">&quot;carousel_images&quot;</span>);<br>                <span class="hljs-keyword">var</span> carouWrap = document.getElementById(<span class="hljs-string">&quot;carousel_wrap&quot;</span>);<br>                <span class="hljs-keyword">var</span> img = carouImg.getElementsByTagName(<span class="hljs-string">&quot;img&quot;</span>)[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">var</span> leftArrow = document.getElementsByClassName(<span class="hljs-string">&quot;left-arrow&quot;</span>)[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">var</span> rightArrow = document.getElementsByClassName(<span class="hljs-string">&quot;right-arrow&quot;</span>)[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">var</span> oBtn = document.getElementsByClassName(<span class="hljs-string">&quot;dot&quot;</span>);<br>                <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">//设置图片下面小点个数</span><br>                <span class="hljs-keyword">var</span> index_length = d.obj.length;<br>                <span class="hljs-comment">// var index_length = oBtn.length;</span><br> <br>                <span class="hljs-comment">// 给图片添加过渡效果</span><br>                carouImg.classList.add(<span class="hljs-string">&quot;transition&quot;</span>);<br> <br>                <span class="hljs-comment">// 动态获取绝对定位轮播图的高度，设置carousel_wrap的高度，宽度为整个main宽度</span><br>                <span class="hljs-comment">// 如果mystyle.css中使用overflow:auto-&gt;含有滚动条宽度; 故使用overflow:scroll</span><br>                carouImg.style.left = -img.clientWidth + <span class="hljs-string">&quot;px&quot;</span>;<br>                carouWrap.style.height = img.offsetHeight + <span class="hljs-string">&quot;px&quot;</span>;<br> <br>                <span class="hljs-comment">// 监听body大小变化，修改轮播图的图片位置和高度</span><br>                document.body.onresize = function () &#123;<br>                    carouImg.style.left = -img.clientWidth + <span class="hljs-string">&quot;px&quot;</span>;<br>                    carouWrap.style.height = img.offsetHeight + <span class="hljs-string">&quot;px&quot;</span>;<br>                &#125;<br> <br>                <span class="hljs-comment">// 点击右箭头</span><br>                rightArrow.onclick = function () &#123;<br>                    next_pic();<br>                    showCurrentDot(index);<br>                &#125;<br> <br>                <span class="hljs-comment">// 点击左箭头</span><br>                leftArrow.onclick = function () &#123;<br>                    pre_pic();<br>                    showCurrentDot(index);<br>                &#125;<br> <br>                <span class="hljs-comment">// 点击小点</span><br>                <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; oBtn.length; ++i) &#123;<br>                    oBtn[i].onclick = function () &#123;<br>                        <span class="hljs-keyword">var</span> newLeft = (-img.clientWidth) * (i + <span class="hljs-number">1</span>);<br>                        carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                        console.log(i);<br>                        showCurrentDot(i);<br> <br> <br>                        <span class="hljs-keyword">var</span> left = parseInt(carouImg.style.left);<br>                        <span class="hljs-keyword">var</span> newLeft;<br> <br>                        <span class="hljs-comment">// 如果没有临界判断，当图片位于“替补图片”时，点击提示点会有错乱过渡</span><br>                        <span class="hljs-keyword">if</span> (left &lt;= (-img.clientWidth) * (index_length + <span class="hljs-number">1</span>)) &#123;<br>                            <span class="hljs-comment">// 临界情况判断</span><br>                            carouImg.classList.remove(<span class="hljs-string">&quot;transition&quot;</span>);<br>                            newLeft = -img.clientWidth * <span class="hljs-number">1</span>;<br>                            carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (left &gt;= -<span class="hljs-number">10</span>) &#123;<br>                            <span class="hljs-comment">// 临界情况判断</span><br>                            carouImg.classList.remove(<span class="hljs-string">&quot;transition&quot;</span>);<br>                            newLeft = -img.clientWidth * index_length;<br>                            carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                        &#125;<br> <br>                        newLeft = (-img.clientWidth) * (i + <span class="hljs-number">1</span>);<br>                        carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                        <span class="hljs-comment">// 注意click事件的执行过程，要在修改完left后添加transition类</span><br>                        carouImg.classList.add(<span class="hljs-string">&quot;transition&quot;</span>);<br>                        index = i;<br>                        showCurrentDot(i);<br> <br>                    &#125;<br>                &#125;<br> <br>                <span class="hljs-comment">// 下一张图片</span><br>                <span class="hljs-function">function <span class="hljs-title">next_pic</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-keyword">var</span> left = parseInt(carouImg.style.left);<br>                    <span class="hljs-keyword">if</span> (left &lt;= (-img.clientWidth) * (index_length + <span class="hljs-number">1</span>)) &#123;<br>                        <span class="hljs-comment">// 临界情况判断</span><br>                        carouImg.classList.remove(<span class="hljs-string">&quot;transition&quot;</span>);<br>                        <span class="hljs-keyword">var</span> newLeft = -img.clientWidth * <span class="hljs-number">1</span>;<br>                        carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                        newLeft = -img.clientWidth * <span class="hljs-number">2</span>;<br>                        carouImg.classList.add(<span class="hljs-string">&quot;transition&quot;</span>);<br>                        index = <span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 一般情况</span><br>                        <span class="hljs-keyword">var</span> newLeft = parseInt(carouImg.style.left) - img.clientWidth;<br>                        (index == (index_length - <span class="hljs-number">1</span>)) ? index = <span class="hljs-number">0</span> : index += <span class="hljs-number">1</span>;<br>                    &#125;<br>                    carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>; <span class="hljs-comment">// 不要忘记添加&#x27;px&#x27;</span><br>                &#125;<br> <br>                <span class="hljs-comment">// 上一张图片</span><br>                <span class="hljs-function">function <span class="hljs-title">pre_pic</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-keyword">var</span> left = parseInt(carouImg.style.left);<br>                    <span class="hljs-keyword">if</span> (left &gt;= -<span class="hljs-number">10</span>) &#123;<br>                        <span class="hljs-comment">// 临界情况判断</span><br>                        carouImg.classList.remove(<span class="hljs-string">&quot;transition&quot;</span>);<br>                        <span class="hljs-keyword">var</span> newLeft = -img.clientWidth * index_length;<br>                        carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                        newLeft = -img.clientWidth * (index_length - <span class="hljs-number">1</span>);<br>                        carouImg.classList.add(<span class="hljs-string">&quot;transition&quot;</span>);<br>                        index = index_length - <span class="hljs-number">2</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 一般情况</span><br>                        <span class="hljs-keyword">var</span> newLeft = parseInt(carouImg.style.left) + img.clientWidth;<br>                        (index == <span class="hljs-number">0</span>) ? index = (index_length - <span class="hljs-number">1</span>) : index -= <span class="hljs-number">1</span>;<br>                    &#125;<br>                    carouImg.style.left = newLeft + <span class="hljs-string">&#x27;px&#x27;</span>;<br>                &#125;<br> <br>                <span class="hljs-function">function <span class="hljs-title">showCurrentDot</span><span class="hljs-params">(index)</span> </span>&#123;<br>                    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; oBtn.length; ++i) &#123;<br>                        (i == index) ? oBtn[i].classList.add(<span class="hljs-string">&quot;active&quot;</span>) : oBtn[i].classList.remove(<span class="hljs-string">&quot;active&quot;</span>);<br>                    &#125;<br>                &#125;<br> <br>                <span class="hljs-comment">// 设置轮播定时器 3秒</span><br>                <span class="hljs-keyword">var</span> timer = setInterval(function () &#123;<br>                    next_pic();<br>                    showCurrentDot(index);<br>                &#125;, <span class="hljs-number">3000</span>);<br> <br>                carouWrap.onmouseover = function () &#123;<br>                    clearInterval(timer);<br>                &#125;<br> <br>                carouWrap.onmouseout = function () &#123;<br>                    timer = setInterval(function () &#123;<br>                        next_pic();<br>                        showCurrentDot(index);<br>                    &#125;, <span class="hljs-number">3000</span>);<br>                &#125;<br> <br>            &#125;<br>        &#125;);<br> <br>    &#125;<br> <br>&lt;/script&gt;<br> <br>&lt;/body&gt;<br> <br> <br> <br> <br> <br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jsp</tag>
      
      <tag>轮播图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>forEach在集合中的使用</title>
    <link href="/blog/2021/03/24/forEach%E5%9C%A8%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/blog/2021/03/24/forEach%E5%9C%A8%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="迭代集合"><a href="#迭代集合" class="headerlink" title="迭代集合"></a>迭代集合</h2><p>任何类型Collection的可迭代 - 列表，集合，队列 等都具有使用forEach的相同语法。</p><p>因此，正如我们已经看到的，迭代列表的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;Larry&quot;</span>, <span class="hljs-string">&quot;Steve&quot;</span>, <span class="hljs-string">&quot;James&quot;</span>);<br> <br>names.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>同样对于一组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; uniqueNames = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;Larry&quot;</span>, <span class="hljs-string">&quot;Steve&quot;</span>, <span class="hljs-string">&quot;James&quot;</span>));<br> <br>uniqueNames.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>或者让我们说一个队列也是一个集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Queue&lt;String&gt; namesQueue = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;Larry&quot;</span>, <span class="hljs-string">&quot;Steve&quot;</span>, <span class="hljs-string">&quot;James&quot;</span>));<br> <br>namesQueue.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>迭代Map - 使用Map的forEach Map没有实现Iterable接口，但它提供了自己的forEach 变体，它接受BiConsumer。*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer, String&gt; namesMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>namesMap.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Larry&quot;</span>);<br>namesMap.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Steve&quot;</span>);<br>namesMap.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;James&quot;</span>);<br>namesMap.forEach((key, value) -&gt; System.out.println(key + <span class="hljs-string">&quot; &quot;</span> + value));<br></code></pre></td></tr></table></figure><p>迭代一个Map - 通过迭代entrySet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">namesMap.entrySet().forEach(entry -&gt; System.out.println(entry.getKey() + <span class="hljs-string">&quot; &quot;</span> + entry.getValue()));<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>forEach</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2021/03/24/jsp%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE1/"/>
    <url>/blog/2021/03/24/jsp%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8中引入的forEach</title>
    <link href="/blog/2021/03/23/Java8%E4%B8%AD%E5%BC%95%E5%85%A5%E7%9A%84forEach/"/>
    <url>/blog/2021/03/23/Java8%E4%B8%AD%E5%BC%95%E5%85%A5%E7%9A%84forEach/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在Java 8中引入的forEach循环为程序员提供了一种新的，简洁而有趣的迭代集合的方式。</p><p>在本文中，我们将看到如何将forEach与集合一起使用，它采用何种参数以及此循环与增强的for循环的不同之处。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class"> </span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>Collection 接口实现了 Iterable 接口，而 Iterable 接口在 Java 8开始具有一个新的 API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> T&gt; action)</span><span class="hljs-comment">//对 Iterable的每个元素执行给定的操作，直到所有元素都被处理或动作引发异常。</span></span><br><span class="hljs-function"> </span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>使用forEach，我们可以迭代一个集合并对每个元素执行给定的操作，就像任何其他迭代器一样。</p><p>例如，迭代和打印字符串集合的for循环版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (String name : names) &#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用forEach写这个 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">names.forEach(name -&gt; &#123;<br>    System.out.println(name);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><p>我们使用 forEach迭代集合并对每个元素执行特定操作。要执行的操作包含在实现Consumer接口的类中，并作为参数传递给forEach 。</p><p>所述消费者接口是一个功能接口(具有单个抽象方法的接口）。它接受输入并且不返回任何结果。</p><p>Consumer 接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Consumer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(T t)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>任何实现，例如，只是打印字符串的消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Consumer&lt;String&gt; printConsumer = <span class="hljs-keyword">new</span> Consumer&lt;String&gt;() &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(name);<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以作为参数传递给forEach：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">names.forEach(printConsumer);<br> <br></code></pre></td></tr></table></figure><p>但这不是通过消费者和使用forEach API 创建操作的唯一方法。让我们看看我们将使用forEach方法的另外2种最流行的方式：</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Java 8功能接口的主要优点是我们可以使用Lambda表达式来实例化它们，并避免使用庞大的匿名类实现。</p><p>由于 Consumer 接口属于函数式接口，我们可以通过以下形式在Lambda中表达它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(argument) -&gt; &#123; body &#125;<br>name -&gt; System.out.println(name)<br>names.forEach(name -&gt; System.out.println(name));<br></code></pre></td></tr></table></figure><p>方法参考 我们可以使用方法引用语法而不是普通的Lambda语法，其中已存在一个方法来对类执行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">names.forEach(System.out::println);<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java8</tag>
      
      <tag>forEach</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java生成二维码</title>
    <link href="/blog/2021/03/23/java%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <url>/blog/2021/03/23/java%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>使用开源的一维/二维码图形处理库zxing <a href="https://github.com/zxing/zxing">GayHub地址</a></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/com.google.zxing/core --&gt;</span><br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;<br>    &lt;artifactId&gt;core&lt;/artifactId&gt;<br>    &lt;version&gt;3.3.0&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/com.google.zxing/javase --&gt;</span><br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;<br>    &lt;artifactId&gt;javase&lt;/artifactId&gt;<br>    &lt;version&gt;3.3.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.app.utils;<br> <br><span class="hljs-keyword">import</span> java.awt.Color;<br><span class="hljs-keyword">import</span> java.awt.Graphics2D;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> com.google.zxing.BarcodeFormat;<br><span class="hljs-keyword">import</span> com.google.zxing.EncodeHintType;<br><span class="hljs-keyword">import</span> com.google.zxing.MultiFormatWriter;<br><span class="hljs-keyword">import</span> com.google.zxing.client.j2se.MatrixToImageConfig;<br><span class="hljs-keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;<br><span class="hljs-keyword">import</span> com.google.zxing.common.BitMatrix;<br><span class="hljs-keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@title</span> 生成二维码工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zch</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@discribtion</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020年1月3日 下午4:26:05</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@vision</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QRCodeUtil</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> width = <span class="hljs-number">200</span>; <span class="hljs-comment">// 图像宽度</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> height = <span class="hljs-number">200</span>; <span class="hljs-comment">// 图像高度</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ON_COLOR = <span class="hljs-number">0xFF000001</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> OFF_COLOR = <span class="hljs-number">0xFFFFFFFF</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@title</span> 生成二维码图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@discribtion</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zch</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 2020年1月3日 下午3:27:21</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> width 二维码宽度，默认为200</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> height 二维码高度，默认为200</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 二维码内容，必填</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> logoPath logo图片路径，若为空则生成不带logo的二维码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> imgPath 生成二维码文件夹路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> imgName 生成二维码图片名称，必填</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> suffix 生成二维码图片后缀类型，例如：gif，必填</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@vision</span> V1.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">generateQRImage</span><span class="hljs-params">(Integer width, Integer height, String content, String logoPath, String imgPath, String imgName, String suffix)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (content == <span class="hljs-keyword">null</span> || imgName == <span class="hljs-keyword">null</span> || suffix == <span class="hljs-keyword">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            width = width == <span class="hljs-keyword">null</span> ? QRCodeUtil.width : width;<br>            height = height == <span class="hljs-keyword">null</span> ? QRCodeUtil.height : height;<br>            <span class="hljs-keyword">if</span> (logoPath != <span class="hljs-keyword">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(logoPath.trim()))<br>            &#123;<br>                QREncode(width, height, content, logoPath, imgPath, imgName, suffix);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                QREncode(width, height, content, imgPath, imgName, suffix);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@title</span> 生成二维码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@discribtion</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zch</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 2020年1月3日 下午3:27:21</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@vision</span> V1.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">QREncode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, String content, String imgPath, String imgName, String suffix)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function">    </span>&#123;<br>        File filePath = <span class="hljs-keyword">new</span> File(imgPath);<br>        <span class="hljs-keyword">if</span> (!filePath.exists())<br>        &#123;<br>            filePath.mkdirs();<br>        &#125;<br>        File imageFile = <span class="hljs-keyword">new</span> File(imgPath, imgName);<br>        Map&lt;EncodeHintType, Object&gt; hints = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">// 内容编码格式</span><br>        hints.put(EncodeHintType.CHARACTER_SET, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 指定纠错等级</span><br>        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);<br>        <span class="hljs-comment">// 设置二维码边的空度，非负数</span><br>        hints.put(EncodeHintType.MARGIN, <span class="hljs-number">1</span>);<br>        BitMatrix bitMatrix = <span class="hljs-keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);<br>        MatrixToImageWriter.writeToPath(bitMatrix, suffix, imageFile.toPath());<span class="hljs-comment">// 输出原图片</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@title</span> 生成带logo的二维码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@discribtion</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zch</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 2020年1月3日 下午3:27:21</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@vision</span> V1.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">QREncode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, String content, String logoPath, String imgPath, String imgName, String suffix)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function">    </span>&#123;<br>        File filePath = <span class="hljs-keyword">new</span> File(imgPath);<br>        <span class="hljs-keyword">if</span> (!filePath.exists())<br>        &#123;<br>            filePath.mkdirs();<br>        &#125;<br>        File imageFile = <span class="hljs-keyword">new</span> File(imgPath, imgName);<br>        Map&lt;EncodeHintType, Object&gt; hints = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">// 内容编码格式</span><br>        hints.put(EncodeHintType.CHARACTER_SET, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 指定纠错等级</span><br>        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);<br>        <span class="hljs-comment">// 设置二维码边的空度，非负数</span><br>        hints.put(EncodeHintType.MARGIN, <span class="hljs-number">1</span>);<br>        BitMatrix bitMatrix = <span class="hljs-keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);<br>        MatrixToImageConfig matrixToImageConfig = <span class="hljs-keyword">new</span> MatrixToImageConfig(ON_COLOR, OFF_COLOR);<br>        BufferedImage bufferedImage = LogoMatrix(MatrixToImageWriter.toBufferedImage(bitMatrix, matrixToImageConfig), <span class="hljs-keyword">new</span> File(logoPath));<br>        ImageIO.write(bufferedImage, suffix, imageFile);<span class="hljs-comment">// 输出带logo图片</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@title</span> 二维码图片添加logo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@discribtion</span>  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zch</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 2020年1月3日 下午3:27:21</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> matrixImage 源二维码图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> logoFile logo图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@vision</span> V1.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title">LogoMatrix</span><span class="hljs-params">(BufferedImage matrixImage, File logoFile)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 读取二维码图片，并构建绘图对象</span><br>        Graphics2D gs = matrixImage.createGraphics();<br>        <span class="hljs-keyword">int</span> matrixWidth = matrixImage.getWidth();<br>        <span class="hljs-keyword">int</span> matrixHeigh = matrixImage.getHeight();<br>        <span class="hljs-keyword">int</span> ratioWidth = matrixWidth * <span class="hljs-number">2</span> / <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> ratioHeight = matrixHeigh * <span class="hljs-number">2</span> / <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 读取Logo图片</span><br>        BufferedImage logo = ImageIO.read(logoFile);<br>        <span class="hljs-keyword">int</span> logoWidth = logo.getWidth(<span class="hljs-keyword">null</span>) &gt; ratioWidth ? ratioWidth : logo.getWidth(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">int</span> logoHeight = logo.getHeight(<span class="hljs-keyword">null</span>) &gt; ratioHeight ? ratioHeight : logo.getHeight(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">int</span> x = (matrixWidth - logoWidth) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> y = (matrixHeigh - logoHeight) / <span class="hljs-number">2</span>;<br>        <br>        <span class="hljs-comment">// 绘制</span><br>        gs.drawImage(logo, x, y, logoWidth, logoHeight, <span class="hljs-keyword">null</span>);<br>        gs.setColor(Color.BLACK);<br>        gs.setBackground(Color.WHITE);<br> <br>        gs.dispose();<br>        matrixImage.flush();<br>        <span class="hljs-keyword">return</span> matrixImage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试生成二维码"><a href="#测试生成二维码" class="headerlink" title="测试生成二维码"></a>测试生成二维码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">QRCodeUtil.generateQRImage(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;https://blog.csdn.net/qq_34928194&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;E:/&quot;</span>, <span class="hljs-string">&quot;test.gif&quot;</span>, <span class="hljs-string">&quot;gif&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>二维码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lamda表达式作用域(Lambda Scopes)</title>
    <link href="/blog/2021/03/23/Lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/blog/2021/03/23/Lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="访问局部变量"><a href="#访问局部变量" class="headerlink" title="访问局部变量"></a>访问局部变量</h2><p>我们可以直接在 lambda 表达式中访问外部的局部变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>Converter&lt;Integer, String&gt; stringConverter =<br>        (from) -&gt; String.valueOf(from + num);<br> <br>stringConverter.convert(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>Converter&lt;Integer, String&gt; stringConverter =<br>        (from) -&gt; String.valueOf(from + num);<br> <br>stringConverter.convert(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>不过这里的 num 必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>Converter&lt;Integer, String&gt; stringConverter =<br>        (from) -&gt; String.valueOf(from + num);<br>num = <span class="hljs-number">3</span>;<span class="hljs-comment">//在lambda表达式中试图修改num同样是不允许的。</span><br></code></pre></td></tr></table></figure><h2 id="访问字段和静态变量"><a href="#访问字段和静态变量" class="headerlink" title="访问字段和静态变量"></a>访问字段和静态变量</h2><p>与局部变量相比，我们对lambda表达式中的实例字段和静态变量都有读写访问权限。 该行为和匿名对象是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lambda4</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> outerStaticNum;<br>    <span class="hljs-keyword">int</span> outerNum;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testScopes</span><span class="hljs-params">()</span> </span>&#123;<br>        Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;<br>            outerNum = <span class="hljs-number">23</span>;<br>            <span class="hljs-keyword">return</span> String.valueOf(from);<br>        &#125;;<br> <br>        Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;<br>            outerStaticNum = <span class="hljs-number">72</span>;<br>            <span class="hljs-keyword">return</span> String.valueOf(from);<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="访问默认接口方法"><a href="#访问默认接口方法" class="headerlink" title="访问默认接口方法"></a>访问默认接口方法</h2><p>还记得第一节中的 formula 示例吗？ Formula 接口定义了一个默认方法sqrt，可以从包含匿名对象的每个 formula 实例访问该方法。 这不适用于lambda表达式。</p><p>无法从 lambda 表达式中访问默认方法,故以下代码无法编译：</p><p>Formula formula = (a) -&gt; sqrt(a * 100);</p><h2 id="内置函数式接口-Built-in-Functional-Interfaces"><a href="#内置函数式接口-Built-in-Functional-Interfaces" class="headerlink" title="内置函数式接口(Built-in Functional Interfaces)"></a>内置函数式接口(Built-in Functional Interfaces)</h2><p>JDK 1.8 API包含许多内置函数式接口。 其中一些借口在老版本的 Java 中是比较常见的比如： Comparator 或Runnable，这些接口都增加了@FunctionalInterface注解以便能用在 lambda 表达式上。</p><p>但是 Java 8 API 同样还提供了很多全新的函数式接口来让你的编程工作更加方便，有一些接口是来自 Google Guava 库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。</p><h3 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h3><p>Predicate 接口是只有一个参数的返回布尔类型值的 断言型 接口。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）：</p><p>译者注： Predicate 接口源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util.function;<br><span class="hljs-keyword">import</span> java.util.Objects;<br> <br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Predicate</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br> <br>    <span class="hljs-comment">// 该方法是接受一个传入类型,返回一个布尔值.此方法应用于判断.</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(T t)</span></span>;<br> <br>    <span class="hljs-comment">//and方法与关系型运算符&quot;&amp;&amp;&quot;相似，两边都成立才返回true</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title">and</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-keyword">super</span> T&gt; other)</span> </span>&#123;<br>        Objects.requireNonNull(other);<br>        <span class="hljs-keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);<br>    &#125;<br>    <span class="hljs-comment">// 与关系运算符&quot;!&quot;相似，对判断进行取反</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title">negate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (t) -&gt; !test(t);<br>    &#125;<br>    <span class="hljs-comment">//or方法与关系型运算符&quot;||&quot;相似，两边只要有一个成立就返回true</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title">or</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-keyword">super</span> T&gt; other)</span> </span>&#123;<br>        Objects.requireNonNull(other);<br>        <span class="hljs-keyword">return</span> (t) -&gt; test(t) || other.test(t);<br>    &#125;<br>   <span class="hljs-comment">// 该方法接收一个Object对象,返回一个Predicate类型.此方法用于判断第一个test的方法与第二个test方法相同(equal).</span><br>    <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Predicate&lt;T&gt; <span class="hljs-title">isEqual</span><span class="hljs-params">(Object targetRef)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">null</span> == targetRef)<br>                ? Objects::isNull<br>                : object -&gt; targetRef.equals(object);<br>    &#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="hljs-number">0</span>;<br> <br>predicate.test(<span class="hljs-string">&quot;foo&quot;</span>);              <span class="hljs-comment">// true</span><br>predicate.negate().test(<span class="hljs-string">&quot;foo&quot;</span>);     <span class="hljs-comment">// false</span><br> <br>Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;<br>Predicate&lt;Boolean&gt; isNull = Objects::isNull;<br> <br>Predicate&lt;String&gt; isEmpty = String::isEmpty;<br>Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();<br></code></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Function 接口接受一个参数并生成结果。默认方法可用于将多个函数链接在一起（compose, andThen）：</p><p>译者注： Function 接口源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util.function;<br> <br><span class="hljs-keyword">import</span> java.util.Objects;<br> <br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Function</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">R</span>&gt; </span>&#123;<br> <br>    <span class="hljs-comment">//将Function对象应用到输入的参数上，然后返回计算结果。</span><br>    <span class="hljs-function">R <span class="hljs-title">apply</span><span class="hljs-params">(T t)</span></span>;<br>    <span class="hljs-comment">//将两个Function整合，并返回一个能够执行两个Function对象功能的Function对象。</span><br>    <span class="hljs-keyword">default</span> &lt;V&gt; <span class="hljs-function">Function&lt;V, R&gt; <span class="hljs-title">compose</span><span class="hljs-params">(Function&lt;? <span class="hljs-keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;<br>        Objects.requireNonNull(before);<br>        <span class="hljs-keyword">return</span> (V v) -&gt; apply(before.apply(v));<br>    &#125;<br>    <span class="hljs-comment">// </span><br>    <span class="hljs-keyword">default</span> &lt;V&gt; <span class="hljs-function">Function&lt;T, V&gt; <span class="hljs-title">andThen</span><span class="hljs-params">(Function&lt;? <span class="hljs-keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;<br>        Objects.requireNonNull(after);<br>        <span class="hljs-keyword">return</span> (T t) -&gt; after.apply(apply(t));<br>    &#125;<br> <br>    <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Function&lt;T, T&gt; <span class="hljs-title">identity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> t -&gt; t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Lamda</tag>
      
      <tag>作用域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数式接口(Functional Interfaces)</title>
    <link href="/blog/2021/03/23/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <url>/blog/2021/03/23/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>Java 语言设计者们投入了大量精力来思考如何使现有的函数友好地支持Lambda。最终采取的方法是：增加函数式接口的概念。“函数式接口”是指仅仅只包含一个抽象方法,但是可以有多个非抽象方法(也就是上面提到的默认方法)的接口。 像这样的接口，可以被隐式转换为lambda表达式。java.lang.Runnable 与 java.util.concurrent.Callable 是函数式接口最典型的两个例子。Java 8增加了一种特殊的注解@FunctionalInterface,但是这个注解通常不是必须的(某些情况建议使用)，只要接口只包含一个抽象方法，虚拟机会自动判断该接口为函数式接口。一般建议在接口上使用@FunctionalInterface 注解进行声明，这样的话，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的，如下图所示<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/@FunctionalInterface_1577755902803.png?x-oss-process=style/small" alt="@FunctionalInterface">示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">F</span>, <span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-function">T <span class="hljs-title">convert</span><span class="hljs-params">(F from)</span></span>;<br>&#125;<br> <br>  <span class="hljs-comment">// TODO 将数字字符串转换为整数类型</span><br>    Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);<br>    Integer converted = converter.convert(<span class="hljs-string">&quot;123&quot;</span>);<br>    System.out.println(converted.getClass()); <span class="hljs-comment">//class java.lang.Integer</span><br></code></pre></td></tr></table></figure><h3 id="方法和构造函数引用-Method-and-Constructor-References"><a href="#方法和构造函数引用-Method-and-Constructor-References" class="headerlink" title="方法和构造函数引用(Method and Constructor References)"></a>方法和构造函数引用(Method and Constructor References)</h3><p>前一节中的代码还可以通过静态方法引用来表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Converter&lt;String, Integer&gt; converter = Integer::valueOf;<br>   Integer converted = converter.convert(<span class="hljs-string">&quot;123&quot;</span>);<br>   System.out.println(converted.getClass());   <span class="hljs-comment">//class java.lang.Integer</span><br></code></pre></td></tr></table></figure><p>Java 8允许您通过::关键字传递方法或构造函数的引用。 上面的示例显示了如何引用静态方法。 但我们也可以引用对象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Something</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">startsWith</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> String.valueOf(s.charAt(<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br> <br>Something something = <span class="hljs-keyword">new</span> Something();<br>Converter&lt;String, String&gt; converter = something::startsWith;<br>String converted = converter.convert(<span class="hljs-string">&quot;Java&quot;</span>);<br>System.out.println(converted);    <span class="hljs-comment">// &quot;J&quot;</span><br></code></pre></td></tr></table></figure><p>接下来看看构造函数是如何使用::关键字来引用的，首先我们定义一个包含多个构造函数的简单类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String firstName;<br>    String lastName;<br> <br>    Person() &#123;&#125;<br> <br>    Person(String firstName, String lastName) &#123;<br>        <span class="hljs-keyword">this</span>.firstName = firstName;<br>        <span class="hljs-keyword">this</span>.lastName = lastName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们指定一个用来创建Person对象的对象工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonFactory</span>&lt;<span class="hljs-title">P</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>&gt; </span>&#123;<br>    <span class="hljs-function">P <span class="hljs-title">create</span><span class="hljs-params">(String firstName, String lastName)</span></span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>这里我们使用构造函数引用来将他们关联起来，而不是手动实现一个完整的工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PersonFactory&lt;Person&gt; personFactory = Person::<span class="hljs-keyword">new</span>;<br>Person person = personFactory.create(<span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-string">&quot;Parker&quot;</span>);<br> <br></code></pre></td></tr></table></figure><p>我们只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据PersonFactory.create方法的参数类型来选择合适的构造函数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>函数式接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8Tutorial</title>
    <link href="/blog/2021/03/23/Java8Tutorial/"/>
    <url>/blog/2021/03/23/Java8Tutorial/</url>
    
    <content type="html"><![CDATA[<p>接口的默认方法(Default Methods for Interfaces) Java 8使我们能够通过使用 default 关键字向接口添加非抽象方法实现。 此功能也称为虚拟扩展方法。</p><p>第一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Formula</span></span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.sqrt(a);<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>Formula 接口中除了抽象方法计算接口公式还定义了默认方法 sqrt。 实现该接口的类只需要实现抽象方法 calculate。 默认方法sqrt 可以直接使用。当然你也可以直接通过接口创建对象，然后实现接口中的默认方法就可以了，我们通过代码演示一下这种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// TODO 通过匿名内部类方式访问接口</span><br>    Formula formula = <span class="hljs-keyword">new</span> Formula() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> sqrt(a * <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;;<br> <br>    System.out.println(formula.calculate(<span class="hljs-number">100</span>));     <span class="hljs-comment">// 100.0</span><br>    System.out.println(formula.sqrt(<span class="hljs-number">16</span>));           <span class="hljs-comment">// 4.0</span><br> <br>  &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>formula 是作为匿名对象实现的。该代码非常容易理解，6行代码实现了计算 sqrt(a * 100)。在下一节中，我们将会看到在 Java 8 中实现单个方法对象有一种更好更方便的方法。</p><p>译者注： 不管是抽象类还是接口，都可以通过匿名内部类的方式访问。不能通过抽象类或者接口直接创建对象。对于上面通过匿名内部类方式访问接口，我们可以这样理解：一个内部类实现了接口里的抽象方法并且返回一个内部类对象，之后我们让接口的引用来指向这个对象。</p><h2 id="Lambda表达式-Lambda-expressions"><a href="#Lambda表达式-Lambda-expressions" class="headerlink" title="Lambda表达式(Lambda expressions)"></a>Lambda表达式(Lambda expressions)</h2><p>首先看看在老版本的Java中是如何排列字符串的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;peter&quot;</span>, <span class="hljs-string">&quot;anna&quot;</span>, <span class="hljs-string">&quot;mike&quot;</span>, <span class="hljs-string">&quot;xenia&quot;</span>);<br> <br>Collections.sort(names, <span class="hljs-keyword">new</span> Comparator&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(String a, String b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> b.compareTo(a);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>只需要给静态方法Collections.sort 传入一个 List 对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给 sort 方法。</p><p>在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.sort(names, (String a, String b) -&gt; &#123;<br>    <span class="hljs-keyword">return</span> b.compareTo(a);<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以看出，代码变得更段且更具有可读性，但是实际上还可以写得更短：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));<br> <br></code></pre></td></tr></table></figure><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">names.sort((a, b) -&gt; b.compareTo(a));<br> <br></code></pre></td></tr></table></figure><p>List 类本身就有一个 sort 方法。并且Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。接下来我们看看lambda表达式还有什么其他用法。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2021/03/23/java%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%811/"/>
    <url>/blog/2021/03/23/java%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%811/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NIO (New I/O)</title>
    <link href="/blog/2021/03/21/NIO%20(New%20I:O)/"/>
    <url>/blog/2021/03/21/NIO%20(New%20I:O)/</url>
    
    <content type="html"><![CDATA[<h2 id="NIO-简介"><a href="#NIO-简介" class="headerlink" title="NIO 简介"></a>NIO 简介</h2><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p><p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p><h2 id="NIO的特性-NIO与IO区别"><a href="#NIO的特性-NIO与IO区别" class="headerlink" title="NIO的特性/NIO与IO区别"></a>NIO的特性/NIO与IO区别</h2><p>如果是在面试中回答这个问题，我觉得首先肯定要从 NIO 流是非阻塞 IO 而 IO 流是阻塞 IO 说起。然后，可以从 NIO 的3个核心组件/特性为 NIO 带来的一些改进来分析。如果，你把这些都回答上了我觉得你对于 NIO 就有了更为深入一点的认识，面试官问到你这个问题，你也能很轻松的回答上来了。</p><p>Non-blocking IO（非阻塞IO）</p><h2 id="IO流是阻塞的，NIO流是不阻塞的。"><a href="#IO流是阻塞的，NIO流是不阻塞的。" class="headerlink" title="IO流是阻塞的，NIO流是不阻塞的。"></a>IO流是阻塞的，NIO流是不阻塞的。</h2><p>Java NIO使我们可以进行非阻塞IO操作。比如说，单线程中从通道读取数据到buffer，同时可以继续做别的事情，当数据读取到buffer中后，线程再继续处理数据。写数据也是一样的。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</p><p>Java IO的各种流是阻塞的。这意味着，当一个线程调用 read() 或 write() 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了</p><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><p>IO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)。 Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，体现了新库与原I/O的一个重要区别。在面向流的I/O中·可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。</p><p>在NIO厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的; 在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p><p>最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了ByteBuffer,还有其他的一些缓冲区，事实上，每一种Java基本类型（除了Boolean类型）都对应有一种缓冲区。</p><h2 id="Channel-通道"><a href="#Channel-通道" class="headerlink" title="Channel (通道)"></a>Channel (通道)</h2><p>NIO 通过Channel（通道） 进行读写。</p><p>通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。</p><h2 id="Selector-选择器"><a href="#Selector-选择器" class="headerlink" title="Selector (选择器)"></a>Selector (选择器)</h2><p>NIO有选择器，而IO没有。</p><p>选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210321161058525.png" alt="Slector"></p><h2 id="NIO-读数据和写数据方式"><a href="#NIO-读数据和写数据方式" class="headerlink" title="NIO 读数据和写数据方式"></a>NIO 读数据和写数据方式</h2><p>通常来说NIO中的所有IO都是从 Channel（通道） 开始的。</p><p>从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。 从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。 数据读取和写入操作图示：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210321161058675.png" alt="NIO读写数据的方式"></p><h2 id="NIO核心组件简单介绍"><a href="#NIO核心组件简单介绍" class="headerlink" title="NIO核心组件简单介绍"></a>NIO核心组件简单介绍</h2><p>NIO 包含下面几个核心的组件：</p><p>Channel(通道) Buffer(缓冲区) Selector(选择器) 整个NIO体系包含的类远远不止这三个，只能说这三个是NIO体系的“核心API”。我们上面已经对这三个概念进行了基本的阐述，这里就不多做解释了。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>代码示例出自闪电侠的博客，原地址如下：</p><p><a href="https://www.jianshu.com/p/a4e03835921a">https://www.jianshu.com/p/a4e03835921a</a></p><p>客户端 IOClient.java 的代码不变，我们对服务端使用 NIO 进行改造。以下代码较多而且逻辑比较复杂，大家看看就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 闪电侠</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019年2月21日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: NIO 改造后的服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NIOServer</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 1. serverSelector负责轮询是否有新的连接，服务端监测到新的连接之后，不再创建一个新的线程，</span><br>    <span class="hljs-comment">// 而是直接将新连接绑定到clientSelector上，这样就不用 IO 模型中 1w 个 while 循环在死等</span><br>    Selector serverSelector = Selector.open();<br>    <span class="hljs-comment">// 2. clientSelector负责轮询连接是否有数据可读</span><br>    Selector clientSelector = Selector.open();<br> <br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 对应IO编程中服务端启动</span><br>        ServerSocketChannel listenerChannel = ServerSocketChannel.open();<br>        listenerChannel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-number">3333</span>));<br>        listenerChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        listenerChannel.register(serverSelector, SelectionKey.OP_ACCEPT);<br> <br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>          <span class="hljs-comment">// 监测是否有新的连接，这里的1指的是阻塞的时间为 1ms</span><br>          <span class="hljs-keyword">if</span> (serverSelector.select(<span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>            Set&lt;SelectionKey&gt; set = serverSelector.selectedKeys();<br>            Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();<br> <br>            <span class="hljs-keyword">while</span> (keyIterator.hasNext()) &#123;<br>              SelectionKey key = keyIterator.next();<br> <br>              <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                  <span class="hljs-comment">// (1) 每来一个新连接，不需要创建一个线程，而是直接注册到clientSelector</span><br>                  SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();<br>                  clientChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>                  clientChannel.register(clientSelector, SelectionKey.OP_READ);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                  keyIterator.remove();<br>                &#125;<br>              &#125;<br> <br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException ignored) &#123;<br>      &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>          <span class="hljs-comment">// (2) 批量轮询是否有哪些连接有数据可读，这里的1指的是阻塞的时间为 1ms</span><br>          <span class="hljs-keyword">if</span> (clientSelector.select(<span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>            Set&lt;SelectionKey&gt; set = clientSelector.selectedKeys();<br>            Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();<br> <br>            <span class="hljs-keyword">while</span> (keyIterator.hasNext()) &#123;<br>              SelectionKey key = keyIterator.next();<br> <br>              <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                  SocketChannel clientChannel = (SocketChannel) key.channel();<br>                  ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>                  <span class="hljs-comment">// (3) 面向 Buffer</span><br>                  clientChannel.read(byteBuffer);<br>                  byteBuffer.flip();<br>                  System.out.println(<br>                      Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                  keyIterator.remove();<br>                  key.interestOps(SelectionKey.OP_READ);<br>                &#125;<br>              &#125;<br> <br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException ignored) &#123;<br>      &#125;<br>    &#125;).start();<br> <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么大家都不愿意用 JDK 原生 NIO 进行开发呢？从上面的代码中大家都可以看出来，是真的难用！除了编程复杂、编程模型难之外，它还有以下让人诟病的问题：</p><p>JDK 的 NIO 底层由 epoll 实现，该实现饱受诟病的空轮询 bug 会导致 cpu 飙升 100% 项目庞大之后，自行实现的 NIO 很容易出现各类 bug，维护成本较高，上面这一坨代码我都不能保证没有 bug Netty 的出现很大程度上改善了 JDK 原生 NIO 所存在的一些让人难以忍受的问题。</p><h2 id="AIO-Asynchronous-I-O"><a href="#AIO-Asynchronous-I-O" class="headerlink" title="AIO (Asynchronous I/O)"></a>AIO (Asynchronous I/O)</h2><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。</p><p><a href="https://bk.cuixiaoyan.xyz/archives/ni#nio-%E7%AE%80%E4%BB%8B">NIO 简介</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#nio%E7%9A%84%E7%89%B9%E6%80%A7nio%E4%B8%8Eio%E5%8C%BA%E5%88%AB">NIO的特性/NIO与IO区别</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#io%E6%B5%81%E6%98%AF%E9%98%BB%E5%A1%9E%E7%9A%84nio%E6%B5%81%E6%98%AF%E4%B8%8D%E9%98%BB%E5%A1%9E%E7%9A%84">IO流是阻塞的，NIO流是不阻塞的。</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#buffer%E7%BC%93%E5%86%B2%E5%8C%BA">Buffer(缓冲区)</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#channel-%E9%80%9A%E9%81%93">Channel (通道)</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#selector-%E9%80%89%E6%8B%A9%E5%99%A8">Selector (选择器)</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#nio-%E8%AF%BB%E6%95%B0%E6%8D%AE%E5%92%8C%E5%86%99%E6%95%B0%E6%8D%AE%E6%96%B9%E5%BC%8F">NIO 读数据和写数据方式</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#nio%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">NIO核心组件简单介绍</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">代码示例</a><a href="https://bk.cuixiaoyan.xyz/archives/ni#aio-asynchronous-io">AIO (Asynchronous I/O)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BIO,NIO,AIO总结</title>
    <link href="/blog/2021/03/21/BIO,NIO,AIO%E6%80%BB%E7%BB%93/"/>
    <url>/blog/2021/03/21/BIO,NIO,AIO%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>Java 中的 BIO、NIO和 AIO 理解为是 Java 语言对操作系统的各种 IO 模型的封装。程序员在使用这些 API 的时候，不需要关心操作系统层面的知识，也不需要根据不同操作系统编写不同的代码。只需要使用Java的API就可以了。</p><p>在讲 BIO,NIO,AIO 之前先来回顾一下这样几个概念：同步与异步，阻塞与非阻塞。 同步与异步</p><ul><li>同步： 同步就是发起一个调用后，被调用者未处理完请求之前，调用不返回。</li><li>异步： 异步就是发起一个调用后，立刻得到被调用者的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常依靠事件，回调等机制来通知调用者其返回结果。 同步和异步的区别最大在于异步的话调用者不需要等待处理结果，被调用者会通过回调等机制来通知调用者其返回结果。</li></ul><p>阻塞和非阻塞</p><ul><li>阻塞： 阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。</li><li>非阻塞： 非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。 举个生活中简单的例子，你妈妈让你烧水，小时候你比较笨啊，在那里傻等着水开（同步阻塞）。等你稍微再长大一点，你知道每次烧水的空隙可以去干点其他事，然后只需要时不时来看看水开了没有（同步非阻塞）。后来，你们家用上了水开了会发出声音的壶，这样你就只需要听到响声后就知道水开了，在这期间你可以随便干自己的事情，你需要去倒水了（异步非阻塞）。</li></ul><h2 id="BIO-Blocking-I-O"><a href="#BIO-Blocking-I-O" class="headerlink" title="BIO (Blocking I/O)"></a>BIO (Blocking I/O)</h2><p>同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p><h3 id="传统-BIO"><a href="#传统-BIO" class="headerlink" title="传统 BIO"></a>传统 BIO</h3><p>BIO通信（一请求一应答）模型图如下(图源网络，原出处不明)：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/2_1577323312632.png?x-oss-process=style/small" alt="2">采用 BIO 通信模型 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在while(true) 循环中服务端会调用 accept() 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成， 不过可以通过多线程来支持多个客户端的连接，如上图所示。</p><p>如果要让 BIO 通信模型 能够同时处理多个客户端请求，就必须使用多线程（主要原因是socket.accept()、socket.read()、socket.write() 涉及的三个主要函数都是同步阻塞的），也就是说它在接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完成之后，通过输出流返回应答给客户端，线程销毁。这就是典型的 一请求一应答通信模型 。我们可以设想一下如果这个连接不做任何事情的话就会造成不必要的线程开销，不过可以通过 线程池机制 改善，线程池还可以让线程的创建和回收成本相对较低。使用FixedThreadPool 可以有效的控制了线程的最大数量，保证了系统有限的资源的控制，实现了N(客户端请求数量):M(处理客户端请求的线程数量)的伪异步I/O模型（N 可以远远大于 M），下面一节”伪异步 BIO”中会详细介绍到。</p><p>我们再设想一下当客户端并发访问量增加后这种模型会出现什么问题？</p><p>在 Java 虚拟机中，线程是宝贵的资源，线程的创建和销毁成本很高，除此之外，线程的切换成本也是很高的。尤其在 Linux 这样的操作系统中，线程本质上就是一个进程，创建和销毁线程都是重量级的系统函数。如果并发访问量增加会导致线程数急剧膨胀可能会导致线程堆栈溢出、创建新线程失败等问题，最终导致进程宕机或者僵死，不能对外提供服务。</p><h3 id="伪异步-IO"><a href="#伪异步-IO" class="headerlink" title="伪异步 IO"></a>伪异步 IO</h3><p>为了解决同步阻塞I/O面临的一个链路需要一个线程处理的问题，后来有人对它的线程模型进行了优化一一一后端通过一个线程池来处理多个客户端的请求接入，形成客户端个数M：线程池最大线程数N的比例关系，其中M可以远远大于N.通过线程池可以灵活地调配线程资源，设置线程的最大值，防止由于海量并发接入导致线程耗尽。</p><p>伪异步IO模型图(图源网络，原出处不明)：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210321160958899.png" alt="3">采用线程池和任务队列可以实现一种叫做伪异步的 I/O 通信框架，它的模型图如上图所示。当有新的客户端接入时，将客户端的 Socket 封装成一个Task（该任务实现java.lang.Runnable接口）投递到后端的线程池中进行处理，JDK 的线程池维护一个消息队列和 N 个活跃线程，对消息队列中的任务进行处理。由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</p><p>伪异步I/O通信框架采用了线程池实现，因此避免了为每个请求都创建一个独立线程造成的线程资源耗尽问题。不过因为它的底层仍然是同步阻塞的BIO模型，因此无法从根本上解决问题。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>下面代码中演示了BIO通信（一请求一应答）模型。我们会在客户端创建多个线程依次连接服务端并向其发送”当前时间+:hello world”，服务端会为每个客户端线程创建一个线程来处理。代码示例出自闪电侠的博客，原地址如下：</p><p><a href="https://www.jianshu.com/p/a4e03835921a">https://www.jianshu.com/p/a4e03835921a</a> 客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 闪电侠</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018年10月14日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOClient</span> </span>&#123;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// TODO 创建多个线程，模拟多个客户端连接服务端</span><br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">3333</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            socket.getOutputStream().write((<span class="hljs-keyword">new</span> Date() + <span class="hljs-string">&quot;: hello world&quot;</span>).getBytes());<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          &#125;<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>      &#125;<br>    &#125;).start();<br> <br>  &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 闪电侠</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018年10月14日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOServer</span> </span>&#123;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// TODO 服务端处理客户端连接请求</span><br>    ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">3333</span>);<br> <br>    <span class="hljs-comment">// 接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理</span><br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// 阻塞方法获取新的连接</span><br>          Socket socket = serverSocket.accept();<br> <br>          <span class="hljs-comment">// 每一个新的连接都创建一个线程，负责读取数据</span><br>          <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-keyword">int</span> len;<br>              <span class="hljs-keyword">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>              InputStream inputStream = socket.getInputStream();<br>              <span class="hljs-comment">// 按字节流方式读取数据</span><br>              <span class="hljs-keyword">while</span> ((len = inputStream.read(data)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, len));<br>              &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            &#125;<br>          &#125;).start();<br> <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        &#125;<br> <br>      &#125;<br>    &#125;).start();<br> <br>  &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p><p><a href="https://bk.cuixiaoyan.xyz/archives/BIO#bio-blocking-io">BIO (Blocking I/O)</a><a href="https://bk.cuixiaoyan.xyz/archives/BIO#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">代码示例</a><a href="https://bk.cuixiaoyan.xyz/archives/BIO#%E6%80%BB%E7%BB%93">总结</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>乐观锁的缺点</title>
    <link href="/blog/2021/03/21/%E4%B9%90%E8%A7%82%E9%94%81%E7%9A%84%E7%BC%BA%E7%82%B9/"/>
    <url>/blog/2021/03/21/%E4%B9%90%E8%A7%82%E9%94%81%E7%9A%84%E7%BC%BA%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h2><p>如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 “ABA”问题。</p><p>JDK 1.5 以后的 AtomicStampedReference 类就提供了此种能力，其中的 compareAndSet 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><h2 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h2><p>自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。 如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p><h2 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h2><p>CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并成一个共享变量来操作。</p><h2 id="CAS与synchronized的使用情景"><a href="#CAS与synchronized的使用情景" class="headerlink" title="CAS与synchronized的使用情景"></a>CAS与synchronized的使用情景</h2><p>简单的来说CAS适用于写比较少的情况下（多读场景，冲突一般较少），synchronized适用于写比较多的情况下（多写场景，冲突一般较多）</p><ol><li>对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。</li><li>对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。 补充： Java并发编程这个领域中synchronized关键字一直都是元老级的角色，很久之前很多人都会称它为 “重量级锁” 。但是，在JavaSE 1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的 偏向锁 和 轻量级锁 以及其它各种优化之后变得在某些情况下并不是那么重了。synchronized的底层实现主要依靠 Lock-Free 的队列，基本思路是 自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>乐观锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何谓悲观锁与乐观锁</title>
    <link href="/blog/2021/03/21/%E4%BD%95%E8%B0%93%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81/"/>
    <url>/blog/2021/03/21/%E4%BD%95%E8%B0%93%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>乐观锁对应于生活中乐观的人总是想着事情往好的方向发展，悲观锁对应于生活中悲观的人总是想着事情往坏的方向发展。这两种人各有优缺点，不能不以场景而定说一种人好于另外一种人。</p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><h2 id="两种锁的使用场景"><a href="#两种锁的使用场景" class="headerlink" title="两种锁的使用场景"></a>两种锁的使用场景</h2><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</p><p>乐观锁常见的两种实现方式 乐观锁一般会使用版本号机制或CAS算法实现。</p><h3 id="版本号机制"><a href="#版本号机制" class="headerlink" title="版本号机制"></a>版本号机制</h3><p>一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p><p>举一个简单的例子： 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。</p><ol><li>操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 50（50（100-$50 ）。</li><li>在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 20 （20（100-$20 ）。</li><li>操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。</li><li>操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。 这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。</li></ol><h3 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h3><p>即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数</p><p>需要读写的内存值 V 进行比较的值 A 拟写入的新值 B 当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>乐观锁</tag>
      
      <tag>悲观锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几种常见的线程池详解</title>
    <link href="/blog/2021/03/21/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/"/>
    <url>/blog/2021/03/21/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h2><p>FixedThreadPool 被称为可重用固定线程数的线程池。通过 Executors 类中的相关源代码来看一下相关实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 创建一个可重用固定数量线程的线程池</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                     <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                     <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),<br>                                     threadFactory);<br>   &#125;<br></code></pre></td></tr></table></figure><p>另外还有一个 FixedThreadPool 的实现方法，和上面的类似，所以这里不多做阐述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                    <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                    <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());<br>  &#125;<br></code></pre></td></tr></table></figure><p>从上面源代码可以看出新创建的 FixedThreadPool 的 corePoolSize 和 maximumPoolSize 都被设置为 nThreads，这个 nThreads 参数是我们使用的时候自己传递的。</p><h2 id="执行任务过程介绍"><a href="#执行任务过程介绍" class="headerlink" title="执行任务过程介绍"></a>执行任务过程介绍</h2><p>FixedThreadPool 的 execute() 方法运行示意图（该图片来源：《Java 并发编程的艺术》）：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/aHR0cDovL215LWJsb2ctdG8tdXNlLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS8xOC00LTE2LzcxMzc1OTYzLmpwZw_1577067898214.jpeg?x-oss-process=style/small" alt="aHR0cDovL215LWJsb2ctdG8tdXNlLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS8xOC00LTE2LzcxMzc1OTYzLmpwZw"></p><p>上图说明：</p><ol><li>如果当前运行的线程数小于 corePoolSize， 如果再来新任务的话，就创建新的线程来执行任务；</li><li>当前运行的线程数等于 corePoolSize 后， 如果再来新任务的话，会将任务加入 LinkedBlockingQueue；</li><li>线程池中的线程执行完 手头的任务后，会在循环中反复从 LinkedBlockingQueue 中获取任务来执行；</li></ol><h2 id="为什么不推荐使用FixedThreadPool"><a href="#为什么不推荐使用FixedThreadPool" class="headerlink" title="为什么不推荐使用FixedThreadPool"></a>为什么不推荐使用FixedThreadPool</h2><p>FixedThreadPool 使用无界队列 LinkedBlockingQueue（队列的容量为 Intger.MAX_VALUE）作为线程池的工作队列会对线程池带来如下影响 ：</p><ol><li>当线程池中的线程数达到 corePoolSize 后，新任务将在无界队列中等待，因此线程池中的线程数不会超过 corePoolSize；</li><li>由于使用无界队列时 maximumPoolSize 将是一个无效参数，因为不可能存在任务队列满的情况。所以，通过创建 FixedThreadPool的源码可以看出创建的 FixedThreadPool 的 corePoolSize 和 maximumPoolSize 被设置为同一个值。</li><li>由于 1 和 2，使用无界队列时 keepAliveTime 将是一个无效参数；</li><li>运行中的 FixedThreadPool（未执行 shutdown()或 shutdownNow()）不会拒绝任务，在任务比较多的时候会导致 OOM（内存溢出）。</li></ol><p><a href="https://bk.cuixiaoyan.xyz/archives/breakDown#fixedthreadpool">FixedThreadPool</a><a href="https://bk.cuixiaoyan.xyz/archives/breakDown#%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E8%BF%87%E7%A8%8B%E4%BB%8B%E7%BB%8D">执行任务过程介绍</a><a href="https://bk.cuixiaoyan.xyz/archives/breakDown#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8fixedthreadpool">为什么不推荐使用FixedThreadPool</a></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/cuplogo-sm.png" alt="img">SupportShare</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池几个常见的对比</title>
    <link href="/blog/2021/03/19/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <url>/blog/2021/03/19/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h2 id="Runnable-vs-Callable"><a href="#Runnable-vs-Callable" class="headerlink" title="Runnable vs Callable"></a>Runnable vs Callable</h2><p>Runnable自 Java 1.0 以来一直存在，但Callable仅在 Java 1.5 中引入,目的就是为了来处理Runnable不支持的用例。Runnable 接口不会返回结果或抛出检查异常，但是Callable 接口可以。所以，如果任务不需要返回结果或抛出异常推荐使用 Runnable 接口，这样代码看起来会更加简洁。</p><p>工具类 Executors 可以实现 Runnable 对象和 Callable 对象之间的相互转换。（Executors.callable（Runnable task）或 Executors.callable（Runnable task，Object resule））。</p><p>Runnable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 被线程执行，没有返回值也无法抛出异常</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Callable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算结果，或在无法这样做时抛出异常。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 计算得出的结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> 如果无法计算结果，则抛出异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">V <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="execute-vs-submit"><a href="#execute-vs-submit" class="headerlink" title="execute() vs submit()"></a>execute() vs submit()</h2><ol><li>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</li><li>submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功，并且可以通过 Future 的 get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用 get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。 我们以AbstractExecutorService接口中的一个 submit 方法为例子来看看源代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;<br>       <span class="hljs-keyword">if</span> (task == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>       RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="hljs-keyword">null</span>);<br>       execute(ftask);<br>       <span class="hljs-keyword">return</span> ftask;<br>   &#125;<br></code></pre></td></tr></table></figure><p>上面方法调用的 newTaskFor 方法返回了一个 FutureTask 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-function">RunnableFuture&lt;T&gt; <span class="hljs-title">newTaskFor</span><span class="hljs-params">(Runnable runnable, T value)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FutureTask&lt;T&gt;(runnable, value);<br>  &#125;<br></code></pre></td></tr></table></figure><p>我们再来看看execute()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br>     ...<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="shutdown-VSshutdownNow"><a href="#shutdown-VSshutdownNow" class="headerlink" title="shutdown()VSshutdownNow()"></a>shutdown()VSshutdownNow()</h2><ol><li>shutdown（） :关闭线程池，线程池的状态变为 SHUTDOWN。线程池不再接受新任务了，但是队列里的任务得执行完毕。</li><li>shutdownNow（） :关闭线程池，线程的状态变为 STOP。线程池会终止当前正在运行的任务，并停止处理排队的任务并返回正在等待执行的 List。</li></ol><h2 id="isTerminated-VS-isShutdown"><a href="#isTerminated-VS-isShutdown" class="headerlink" title="isTerminated() VS isShutdown()"></a>isTerminated() VS isShutdown()</h2><ol><li>isShutDown 当调用 shutdown() 方法后返回为 true。</li><li>isTerminated 当调用 shutdown() 方法后，并且所有提交的任务完成后返回为 true</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadPoolExecutor使用示例</title>
    <link href="/blog/2021/03/19/ThreadPoolExecutor%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <url>/blog/2021/03/19/ThreadPoolExecutor%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>我们上面讲解了 Executor框架以及 ThreadPoolExecutor 类，下面让我们实战一下，来通过写一个 ThreadPoolExecutor 的小 Demo 来回顾上面的内容。</p><h2 id="示例代码-Runnable-ThreadPoolExecutor"><a href="#示例代码-Runnable-ThreadPoolExecutor" class="headerlink" title="示例代码:Runnable+ThreadPoolExecutor"></a>示例代码:Runnable+ThreadPoolExecutor</h2><p>首先创建一个 Runnable 接口的实现类（当然也可以是 Callable 接口，我们上面也说了两者的区别。）</p><p>MyRunnable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是一个简单的Runnable类，需要大约5秒钟来执行其任务。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shuang.kou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> String command;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRunnable</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.command = s;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; Start. Time = &quot;</span> + <span class="hljs-keyword">new</span> Date());<br>        processCommand();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; End. Time = &quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processCommand</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.command;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写测试程序，我们这里以阿里巴巴推荐的使用 ThreadPoolExecutor 构造函数自定义参数的方式来创建线程池。</p><p>ThreadPoolExecutorDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutorDemo</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CORE_POOL_SIZE = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_POOL_SIZE = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> QUEUE_CAPACITY = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long KEEP_ALIVE_TIME = <span class="hljs-number">1L</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <br>        <span class="hljs-comment">//使用阿里巴巴推荐的创建线程池的方式</span><br>        <span class="hljs-comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span><br>        ThreadPoolExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>                CORE_POOL_SIZE,<br>                MAX_POOL_SIZE,<br>                KEEP_ALIVE_TIME,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br> <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接口）</span><br>            Runnable worker = <span class="hljs-keyword">new</span> MyRunnable(<span class="hljs-string">&quot;&quot;</span> + i);<br>            <span class="hljs-comment">//执行Runnable</span><br>            executor.execute(worker);<br>        &#125;<br>        <span class="hljs-comment">//终止线程池</span><br>        executor.shutdown();<br>        <span class="hljs-keyword">while</span> (!executor.isTerminated()) &#123;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Finished all threads&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们上面的代码指定了：</p><ol><li>corePoolSize: 核心线程数为 5。</li><li>maximumPoolSize ：最大线程数 10</li><li>keepAliveTime : 等待时间为 1L。</li><li>unit: 等待时间的单位为 TimeUnit.SECONDS。</li><li>workQueue：任务队列为 ArrayBlockingQueue，并且容量为 100;</li><li>handler:饱和策略为 CallerRunsPolicy。 Output：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br></code></pre></td></tr></table></figure><h2 id="线程池原理分析"><a href="#线程池原理分析" class="headerlink" title="线程池原理分析"></a>线程池原理分析</h2><p>我们通过代码输出结果可以看出：线程池每次会同时执行 5 个任务，这 5 个任务执行完之后，剩余的 5 个任务才会被执行。 大家可以先通过上面讲解的内容，分析一下到底是咋回事？（自己独立思考一会）</p><p>现在，我们就分析上面的输出内容来简单分析一下线程池原理。</p><p>为了搞懂线程池的原理，我们需要首先分析一下 execute方法。在 5.1 节中的 Demo 中我们使用 executor.execute(worker)来提交一个任务到线程池中去，这个方法非常重要，下面我们来看看它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger ctl = <span class="hljs-keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">workerCountOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> c &amp; CAPACITY;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br>       <span class="hljs-comment">// 如果任务为null，则抛出异常。</span><br>       <span class="hljs-keyword">if</span> (command == <span class="hljs-keyword">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>       <span class="hljs-comment">// ctl 中保存的线程池当前的一些状态信息</span><br>       <span class="hljs-keyword">int</span> c = ctl.get();<br><br>       <span class="hljs-comment">//  下面会涉及到 3 步 操作</span><br>       <span class="hljs-comment">// 1.首先判断当前线程池中之行的任务数量是否小于 corePoolSize</span><br>       <span class="hljs-comment">// 如果小于的话，通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。</span><br>       <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>           <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-keyword">true</span>))<br>               <span class="hljs-keyword">return</span>;<br>           c = ctl.get();<br>       &#125;<br>       <span class="hljs-comment">// 2.如果当前之行的任务数量大于等于 corePoolSize 的时候就会走到这里</span><br>       <span class="hljs-comment">// 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态才会被并且队列可以加入任务，该任务才会被加入进去</span><br>       <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>           <span class="hljs-keyword">int</span> recheck = ctl.get();<br>           <span class="hljs-comment">// 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。</span><br>           <span class="hljs-keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))<br>               reject(command);<br>               <span class="hljs-comment">// 如果当前线程池为空就新创建一个线程并执行。</span><br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>               addWorker(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>       &#125;<br>       <span class="hljs-comment">//3. 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。</span><br>       <span class="hljs-comment">//如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。</span><br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-keyword">false</span>))<br>           reject(command);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>ThreadPoolExecutor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadPoolExecutor类简单介绍</title>
    <link href="/blog/2021/03/19/ThreadPoolExecutor%E7%B1%BB%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/blog/2021/03/19/ThreadPoolExecutor%E7%B1%BB%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>线程池实现类 ThreadPoolExecutor 是 Executor 框架最核心的类。</p><h2 id="ThreadPoolExecutor-类分析"><a href="#ThreadPoolExecutor-类分析" class="headerlink" title="ThreadPoolExecutor 类分析"></a>ThreadPoolExecutor 类分析</h2><p>ThreadPoolExecutor 类中提供的四个构造方法。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生（其他几个构造方法说白点都是给定某些默认参数的构造方法比如默认制定拒绝策略是什么），这里就不贴代码讲了，比较简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize,//线程池的核心线程数量</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">int</span> maximumPoolSize,//线程池的最大线程数</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span><br><span class="hljs-function"><span class="hljs-params">                              TimeUnit unit,//时间单位</span></span><br><span class="hljs-function"><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span><br><span class="hljs-function"><span class="hljs-params">                              ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span><br><span class="hljs-function"><span class="hljs-params">                              RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span><br><span class="hljs-function"><span class="hljs-params">                               )</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>            maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>            maximumPoolSize &lt; corePoolSize ||<br>            keepAliveTime &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>        <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>        <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>        <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>        <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>        <span class="hljs-keyword">this</span>.handler = handler;<br>    &#125;<br></code></pre></td></tr></table></figure><p>下面这些对创建 非常重要，在后面使用线程池的过程中你一定会用到！所以，务必拿着小本本记清楚。</p><p>ThreadPoolExecutor 3 个最重要的参数：</p><ol><li>corePoolSize : 核心线程数线程数定义了最小可以同时运行的线程数量。</li><li>maximumPoolSize : 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li>workQueue: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，信任就会被存放在队列中。 ThreadPoolExecutor其他常见参数:</li><li>keepAliveTime:当线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；</li><li>unit : keepAliveTime 参数的时间单位。</li><li>threadFactory :executor 创建新线程的时候会用到。</li><li>handler :饱和策略。关于饱和策略下面单独介绍一下。 下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java性能调优实战》）：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210319201705168.jpeg" alt="线程池各个参数的关系">ThreadPoolExecutor 饱和策略定义:</li></ol><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任时，ThreadPoolTaskExecutor 定义一些策略:</p><ol><li>ThreadPoolExecutor.AbortPolicy：抛出 RejectedExecutionException来拒绝新任务的处理。</li><li>ThreadPoolExecutor.CallerRunsPolicy：调用执行自己的线程运行任务。您不会任务请求。但是这种策略会降低对于新任务提交速度，影响程序的整体性能。另外，这个策略喜欢增加队列容量。如果您的应用程序可以承受此延迟并且你不能任务丢弃任何一个任务请求的话，你可以选择这个策略。</li><li>ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。</li><li>ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。 举个例子：</li></ol><p>Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略的话来配置线程池的时候默认使用的是 ThreadPoolExecutor.AbortPolicy。在默认情况下，ThreadPoolExecutor 将抛出 RejectedExecutionException 来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。 对于可伸缩的应用程序，建议使用 ThreadPoolExecutor.CallerRunsPolicy。当最大池被填满时，此策略为我们提供可伸缩队列。（这个直接查看 ThreadPoolExecutor 的构造函数源码就可以看出，比较简单的原因，这里就不贴代码了。）</p><h2 id="推荐使用-ThreadPoolExecutor-构造函数创建线程池"><a href="#推荐使用-ThreadPoolExecutor-构造函数创建线程池" class="headerlink" title="推荐使用 ThreadPoolExecutor 构造函数创建线程池"></a>推荐使用 ThreadPoolExecutor 构造函数创建线程池</h2><p>在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。</p><p>为什么呢？</p><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p><p>另外《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><p>Executors 返回线程池对象的弊端如下：</p><p>FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。 CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。 方式一：通过ThreadPoolExecutor构造函数实现（推荐）<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210319201705255.jpeg" alt="aHR0cDovL215LWJsb2ctdG8tdXNlLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS8xOC00LTE2LzE3ODU4MjMwLmpwZw"></p><p>方式二：通过 Executor 框架的工具类 Executors 来实现 我们可以创建三种类型的 ThreadPoolExecutor：</p><p>FixedThreadPool SingleThreadExecutor CachedThreadPool 对应 Executors 工具类中的方法如图所示：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210319201705406.jpeg" alt="aHR0cDovL215LWJsb2ctdG8tdXNlLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS8xOC00LTE2LzEzMjk2OTAxLmpwZw"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>ThreadPoolExecutor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用线程池的好处</title>
    <link href="/blog/2021/03/19/%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
    <url>/blog/2021/03/19/%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
    
    <content type="html"><![CDATA[<p>池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p><p>这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：</p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol><h2 id="Executor-框架"><a href="#Executor-框架" class="headerlink" title="Executor 框架"></a>Executor 框架</h2><p>Executor 框架是 Java5 之后引进的，在 Java 5 之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题。</p><p>补充：this 逃逸是指在构造函数返回之前其他线程就持有该对象的引用. 调用尚未构造完全的对象的方法可能引发令人疑惑的错误。</p><p>Executor 框架不仅包括了线程池的管理，还提供了线程工厂、队列以及拒绝策略等，Executor 框架让并发编程变得更加简单。</p><h3 id="Executor-框架结构-主要由三大部分组成"><a href="#Executor-框架结构-主要由三大部分组成" class="headerlink" title="Executor 框架结构(主要由三大部分组成)"></a>Executor 框架结构(主要由三大部分组成)</h3><ol><li>任务(Runnable /Callable) 执行任务需要实现的 Runnable 接口 或 Callable接口。Runnable 接口或 Callable 接口 实现类都可以被 ThreadPoolExecutor 或 ScheduledThreadPoolExecutor 执行。</li><li>任务的执行(Executor) 如下图所示，包括任务执行机制的核心接口 Executor ，以及继承自 Executor 接口的 ExecutorService 接口。ThreadPoolExecutor 和 ScheduledThreadPoolExecutor 这两个关键类实现了 ExecutorService 接口。</li></ol><p>这里提了很多底层的类关系，但是，实际上我们需要更多关注的是 ThreadPoolExecutor 这个类，这个类在我们实际使用线程池的过程中，使用频率还是非常高的。</p><p>注意： 通过查看 ScheduledThreadPoolExecutor 源代码我们发现 ScheduledThreadPoolExecutor 实际上是继承了 ThreadPoolExecutor 并实现了 ScheduledExecutorService ，而 ScheduledExecutorService 又实现了 ExecutorService，正如我们下面给出的类关系图显示的一样。</p><p>ThreadPoolExecutor 类描述:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AbstractExecutorService实现了ExecutorService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractExecutorService</span></span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>ScheduledThreadPoolExecutor 类描述:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ScheduledExecutorService实现了ExecutorService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledThreadPoolExecutor</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">ThreadPoolExecutor</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">ScheduledExecutorService</span></span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p><img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%85%B3%E6%8E%A5%E5%8F%A3_1576546630498.png?x-oss-process=style/small" alt="任务的执行相关接口">3) 异步计算的结果(Future) Future 接口以及 Future 接口的实现类 FutureTask 类都可以代表异步计算的结果。</p><p>当我们把 Runnable接口 或 Callable 接口 的实现类提交给 ThreadPoolExecutor 或 ScheduledThreadPoolExecutor 执行。（调用 submit() 方法时会返回一个 FutureTask 对象）</p><h3 id="Executor-框架的使用示意图"><a href="#Executor-框架的使用示意图" class="headerlink" title="Executor 框架的使用示意图"></a>Executor 框架的使用示意图</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210319201441640.png" alt="aHR0cDovL215LWJsb2ctdG8tdXNlLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS8xOC01LTMwLzg0ODIzMzMwLmpwZw"></p><ol><li>主线程首先要创建实现 Runnable 或者 Callable 接口的任务对象。</li><li>把创建完成的实现 Runnable/Callable接口的 对象直接交给 ExecutorService 执行: ExecutorService.execute（Runnable command））或者也可以把 Runnable 对象或Callable 对象提交给 ExecutorService 执行（ExecutorService.submit（Runnable task）或 ExecutorService.submit（Callable task））。</li><li>如果执行 ExecutorService.submit（…），ExecutorService 将返回一个实现Future接口的对象（我们刚刚也提到过了执行 execute()方法和 submit()方法的区别，submit()会返回一个 FutureTask 对象）。由于 FutureTask 实现了 Runnable，我们也可以创建 FutureTask，然后直接交给 ExecutorService 执行。</li><li>最后，主线程可以执行 FutureTask.get()方法来等待任务执行完成。主线程也可以执行 FutureTask.cancel（boolean mayInterruptIfRunning）来取消此任务的执行。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池原理分析</title>
    <link href="/blog/2021/03/19/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/blog/2021/03/19/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>我们通过代码输出结果可以看出：线程池每次会同时执行 5 个任务，这 5 个任务执行完之后，剩余的 5 个任务才会被执行。 大家可以先通过上面讲解的内容，分析一下到底是咋回事？（自己独立思考一会）</p><p>现在，我们就分析上面的输出内容来简单分析一下线程池原理。</p><p>为了搞懂线程池的原理，我们需要首先分析一下 execute方法。在 4.6 节中的 Demo 中我们使用 executor.execute(worker)来提交一个任务到线程池中去，这个方法非常重要，下面我们来看看它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger ctl = <span class="hljs-keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">workerCountOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> c &amp; CAPACITY;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果任务为null，则抛出异常。</span><br>        <span class="hljs-keyword">if</span> (command == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-comment">// ctl 中保存的线程池当前的一些状态信息</span><br>        <span class="hljs-keyword">int</span> c = ctl.get();<br> <br>        <span class="hljs-comment">//  下面会涉及到 3 步 操作</span><br>        <span class="hljs-comment">// 1.首先判断当前线程池中之行的任务数量是否小于 corePoolSize</span><br>        <span class="hljs-comment">// 如果小于的话，通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。</span><br>        <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>            <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-keyword">true</span>))<br>                <span class="hljs-keyword">return</span>;<br>            c = ctl.get();<br>        &#125;<br>        <span class="hljs-comment">// 2.如果当前之行的任务数量大于等于 corePoolSize 的时候就会走到这里</span><br>        <span class="hljs-comment">// 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态才会被并且队列可以加入任务，该任务才会被加入进去</span><br>        <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>            <span class="hljs-keyword">int</span> recheck = ctl.get();<br>            <span class="hljs-comment">// 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。</span><br>            <span class="hljs-keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))<br>                reject(command);<br>                <span class="hljs-comment">// 如果当前线程池为空就新创建一个线程并执行。</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>                addWorker(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>        &#125;<br>        <span class="hljs-comment">//3. 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。</span><br>        <span class="hljs-comment">//如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-keyword">false</span>))<br>            reject(command);<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过下图可以更好的对上面这 3 步做一个展示，下图<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/%E5%9B%BE%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86_1576459366999.png?x-oss-process=style/small" alt="图解线程池实现原理">我们在代码中模拟了 10 个任务，我们配置的核心线程数为 5 、等待队列容量为 100 ，所以每次只可能存在 5 个任务同时执行，剩下的 5 个任务会被放到等待队列中去。当前的 5 个任务之行完成后，才会之行剩下的 5 个任务。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创建线程池</title>
    <link href="/blog/2021/03/18/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/blog/2021/03/18/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>《阿里巴巴Java开发手册》</strong>中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><p>Executors 返回线程池对象的弊端如下：</p><p>FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE ，可能堆积大量的请求，从而导致OOM。 CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</p><h3 id="方式一：通过构造方法实现"><a href="#方式一：通过构造方法实现" class="headerlink" title="方式一：通过构造方法实现"></a>方式一：通过构造方法实现</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210318200323238.jpeg" alt="ThreadPoolExecutor构造方法"></p><h3 id="方式二：通过Executor-框架的工具类Executors来实现-我们可以创建三种类型的ThreadPoolExecutor："><a href="#方式二：通过Executor-框架的工具类Executors来实现-我们可以创建三种类型的ThreadPoolExecutor：" class="headerlink" title="方式二：通过Executor 框架的工具类Executors来实现 我们可以创建三种类型的ThreadPoolExecutor："></a>方式二：通过Executor 框架的工具类Executors来实现 我们可以创建三种类型的ThreadPoolExecutor：</h3><p>FixedThreadPool ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。 SingleThreadExecutor： 方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。 CachedThreadPool： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。 对应Executors工具类中的方法如图所示：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210318200323344.jpeg" alt="Executor框架的工具类"></p><h3 id="ThreadPoolExecutor-类分析"><a href="#ThreadPoolExecutor-类分析" class="headerlink" title="ThreadPoolExecutor 类分析"></a>ThreadPoolExecutor 类分析</h3><p>ThreadPoolExecutor 类中提供的四个构造方法。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生（其他几个构造方法说白点都是给定某些默认参数的构造方法比如默认制定拒绝策略是什么），这里就不贴代码讲了，比较简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">int</span> maximumPoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">long</span> keepAliveTime,</span></span><br><span class="hljs-function"><span class="hljs-params">                              TimeUnit unit,</span></span><br><span class="hljs-function"><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="hljs-function"><span class="hljs-params">                              ThreadFactory threadFactory,</span></span><br><span class="hljs-function"><span class="hljs-params">                              RejectedExecutionHandler handler)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>            maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>            maximumPoolSize &lt; corePoolSize ||<br>            keepAliveTime &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>        <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>        <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>        <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>        <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>        <span class="hljs-keyword">this</span>.handler = handler;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="ThreadPoolExecutor构造函数重要参数分析"><a href="#ThreadPoolExecutor构造函数重要参数分析" class="headerlink" title="ThreadPoolExecutor构造函数重要参数分析"></a>ThreadPoolExecutor构造函数重要参数分析</h3><p>ThreadPoolExecutor 3 个最重要的参数：</p><ol><li>corePoolSize : 核心线程数线程数定义了最小可以同时运行的线程数量。</li><li>maximumPoolSize : 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li>workQueue: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，信任就会被存放在队列中。 ThreadPoolExecutor其他常见参数:</li><li>keepAliveTime:当线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；</li><li>unit : keepAliveTime 参数的时间单位。</li><li>threadFactory :executor 创建新线程的时候会用到。</li><li>handler :饱和策略。关于饱和策略下面单独介绍一下。</li></ol><h3 id="ThreadPoolExecutor-饱和策略"><a href="#ThreadPoolExecutor-饱和策略" class="headerlink" title="ThreadPoolExecutor 饱和策略"></a>ThreadPoolExecutor 饱和策略</h3><p>ThreadPoolExecutor 饱和策略定义:</p><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任时，ThreadPoolTaskExecutor 定义一些策略:</p><ol><li>ThreadPoolExecutor.AbortPolicy：抛出 RejectedExecutionException来拒绝新任务的处理。</li><li>ThreadPoolExecutor.CallerRunsPolicy：调用执行自己的线程运行任务。您不会任务请求。但是这种策略会降低对于新任务提交速度，影响程序的整体性能。另外，这个策略喜欢增加队列容量。如果您的应用程序可以承受此延迟并且你不能任务丢弃任何一个任务请求的话，你可以选择这个策略。</li><li>ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。</li><li>ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。 举个例子： Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略的话来配置线程池的时候默认使用的是 ThreadPoolExecutor.AbortPolicy。在默认情况下，ThreadPoolExecutor 将抛出 RejectedExecutionException 来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。 对于可伸缩的应用程序，建议使用 ThreadPoolExecutor.CallerRunsPolicy。当最大池被填满时，此策略为我们提供可伸缩队列。（这个直接查看 ThreadPoolExecutor 的构造函数源码就可以看出，比较简单的原因，这里就不贴代码了）</li></ol><h3 id="一个简单的线程池Demo-Runnable-ThreadPoolExecutor"><a href="#一个简单的线程池Demo-Runnable-ThreadPoolExecutor" class="headerlink" title="一个简单的线程池Demo:Runnable+ThreadPoolExecutor"></a>一个简单的线程池Demo:Runnable+ThreadPoolExecutor</h3><p>为了让大家更清楚上面的面试题中的一些概念，我写了一个简单的线程池 Demo。</p><p>首先创建一个 Runnable 接口的实现类（当然也可以是 Callable 接口，我们上面也说了两者的区别。）</p><p>MyRunnable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是一个简单的Runnable类，需要大约5秒钟来执行其任务。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shuang.kou</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> String command;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRunnable</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.command = s;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; Start. Time = &quot;</span> + <span class="hljs-keyword">new</span> Date());<br>        processCommand();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; End. Time = &quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processCommand</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.command;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写测试程序，我们这里以阿里巴巴推荐的使用 ThreadPoolExecutor 构造函数自定义参数的方式来创建线程池。</p><p>ThreadPoolExecutorDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolExecutorDemo</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CORE_POOL_SIZE = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_POOL_SIZE = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> QUEUE_CAPACITY = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long KEEP_ALIVE_TIME = <span class="hljs-number">1L</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <br>        <span class="hljs-comment">//使用阿里巴巴推荐的创建线程池的方式</span><br>        <span class="hljs-comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span><br>        ThreadPoolExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>                CORE_POOL_SIZE,<br>                MAX_POOL_SIZE,<br>                KEEP_ALIVE_TIME,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br> <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接口）</span><br>            Runnable worker = <span class="hljs-keyword">new</span> MyRunnable(<span class="hljs-string">&quot;&quot;</span> + i);<br>            <span class="hljs-comment">//执行Runnable</span><br>            executor.execute(worker);<br>        &#125;<br>        <span class="hljs-comment">//终止线程池</span><br>        executor.shutdown();<br>        <span class="hljs-keyword">while</span> (!executor.isTerminated()) &#123;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Finished all threads&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们上面的代码指定了：</p><ol><li>corePoolSize: 核心线程数为 5。</li><li>maximumPoolSize ：最大线程数 10</li><li>keepAliveTime : 等待时间为 1L。</li><li>unit: 等待时间的单位为 TimeUnit.SECONDS。</li><li>workQueue：任务队列为 ArrayBlockingQueue，并且容量为 100;</li><li>handler:饱和策略为 CallerRunsPolicy。 Output：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> Start. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">49</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> End. Time = Tue Nov <span class="hljs-number">12</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2019</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么要用线程池</title>
    <link href="/blog/2021/03/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/blog/2021/03/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</strong> 线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p><p>这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处：</p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol><h2 id="实现Runnable接口和Callable接口的区别"><a href="#实现Runnable接口和Callable接口的区别" class="headerlink" title="实现Runnable接口和Callable接口的区别"></a>实现Runnable接口和Callable接口的区别</h2><p>Runnable自Java 1.0以来一直存在，但Callable仅在Java 1.5中引入,目的就是为了来处理Runnable不支持的用例。Runnable 接口不会返回结果或抛出检查异常，但是Callable 接口可以。所以，如果任务不需要返回结果或抛出异常推荐使用 Runnable 接口，这样代码看起来会更加简洁。</p><p>工具类 Executors 可以实现 Runnable 对象和 Callable 对象之间的相互转换。（Executors.callable（Runnable task）或 Executors.callable（Runnable task，Object resule））。</p><p>Runnable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 被线程执行，没有返回值也无法抛出异常</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Callable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算结果，或在无法这样做时抛出异常。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 计算得出的结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> 如果无法计算结果，则抛出异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">V <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行execute-方法和submit-方法的区别是什么呢？"><a href="#执行execute-方法和submit-方法的区别是什么呢？" class="headerlink" title="执行execute()方法和submit()方法的区别是什么呢？"></a>执行execute()方法和submit()方法的区别是什么呢？</h2><ol><li>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</li><li>submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功，并且可以通过 Future 的 get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用 get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。 我们以AbstractExecutorService接口中的一个 submit 方法为例子来看看源代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;<br>        <span class="hljs-keyword">if</span> (task == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="hljs-keyword">null</span>);<br>        execute(ftask);<br>        <span class="hljs-keyword">return</span> ftask;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面方法调用的 newTaskFor 方法返回了一个 FutureTask 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-function">RunnableFuture&lt;T&gt; <span class="hljs-title">newTaskFor</span><span class="hljs-params">(Runnable runnable, T value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FutureTask&lt;T&gt;(runnable, value);<br>    &#125;<br></code></pre></td></tr></table></figure><p>我们再来看看execute()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br>     ...<br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/newTaskFor#%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3%E5%92%8Ccallable%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB">实现Runnable接口和Callable接口的区别</a><a href="https://bk.cuixiaoyan.xyz/archives/newTaskFor#%E6%89%A7%E8%A1%8Cexecute%E6%96%B9%E6%B3%95%E5%92%8Csubmit%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2">执行execute()方法和submit()方法的区别是什么呢？</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/blog/2021/03/18/ThreadLocal/"/>
    <url>/blog/2021/03/18/ThreadLocal/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ JDK中提供的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</p><p>如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get（） 和 set（） 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p><p>再举个简单的例子：</p><p>比如有两个人去宝屋收集宝物，这两个共用一个袋子的话肯定会产生争执，但是给他们两个人每个人分配一个袋子的话就不会出现这样的问题。如果把这两个人比作线程的话，那么ThreadLocal就是用来避免这两个线程竞争的。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>相信看了上面的解释，大家已经搞懂 ThreadLocal 类是个什么东西了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Random;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br> <br>     <span class="hljs-comment">// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SimpleDateFormat&gt; formatter = ThreadLocal.withInitial(() -&gt; <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd HHmm&quot;</span>));<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        ThreadLocalExample obj = <span class="hljs-keyword">new</span> ThreadLocalExample();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span>; i++)&#123;<br>            Thread t = <span class="hljs-keyword">new</span> Thread(obj, <span class="hljs-string">&quot;&quot;</span>+i);<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">1000</span>));<br>            t.start();<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Thread Name= &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; default Formatter = &quot;</span>+formatter.get().toPattern());<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">1000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//formatter pattern is changed here by thread, but it won&#x27;t reflect to other threads</span><br>        formatter.set(<span class="hljs-keyword">new</span> SimpleDateFormat());<br> <br>        System.out.println(<span class="hljs-string">&quot;Thread Name= &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; formatter = &quot;</span>+formatter.get().toPattern());<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread Name= <span class="hljs-number">0</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">0</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">1</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">2</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">1</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">3</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">2</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">4</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">3</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">4</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">5</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">5</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">6</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">6</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">7</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">7</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">8</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">9</span> <span class="hljs-keyword">default</span> Formatter = yyyyMMdd HHmm<br>Thread Name= <span class="hljs-number">8</span> formatter = yy-M-d ah:mm<br>Thread Name= <span class="hljs-number">9</span> formatter = yy-M-d ah:mm<br></code></pre></td></tr></table></figure><p>从输出中可以看出，Thread-0已经改变了formatter的值，但仍然是thread-2默认格式化程序与初始化值相同，其他线程也一样。</p><p>上面有一段代码用到了创建 ThreadLocal 变量的那段代码用到了 Java8 的知识，它等于下面这段代码，如果你写了下面这段代码的话，IDEA会提示你转换为Java8的格式(IDEA真的不错！)。因为ThreadLocal类在Java 8中扩展，使用一个新的方法withInitial()，将Supplier功能接口作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SimpleDateFormat&gt; formatter = <span class="hljs-keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> SimpleDateFormat <span class="hljs-title">initialValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd HHmm&quot;</span>);<br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>从 Thread类源代码入手。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br> ......<br><span class="hljs-comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span><br>ThreadLocal.ThreadLocalMap threadLocals = <span class="hljs-keyword">null</span>;<br> <br><span class="hljs-comment">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span><br>ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="hljs-keyword">null</span>;<br> ......<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。</p><p>ThreadLocal类的set()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>        Thread t = Thread.currentThread();<br>        ThreadLocalMap map = getMap(t);<br>        <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>            map.set(<span class="hljs-keyword">this</span>, value);<br>        <span class="hljs-keyword">else</span><br>            createMap(t, value);<br>    &#125;<br>    <span class="hljs-function">ThreadLocalMap <span class="hljs-title">getMap</span><span class="hljs-params">(Thread t)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> t.threadLocals;<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过上面这些内容，我们足以通过猜测得出结论：最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。 ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。</p><p>每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为key的键值对。 比如我们在同一个线程中声明了两个 ThreadLocal 对象的话，会使用 Thread内部都是使用仅有那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。ThreadLocal 是 map结构是为了让每个线程可以关联多个 ThreadLocal变量。这也就解释了 ThreadLocal 声明的变量为什么在每一个线程都有自己的专属本地变量。</p><p>ThreadLocalMap是ThreadLocal的静态内部类。<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/ThreadLocal%E5%86%85%E9%83%A8%E7%B1%BB_1575941927731.png?x-oss-process=style/small" alt="ThreadLocal内部类"></p><h2 id="内存泄露问题"><a href="#内存泄露问题" class="headerlink" title="内存泄露问题"></a>内存泄露问题</h2><p>ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用,而 value 是强引用。所以，如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。这样一来，ThreadLocalMap 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。使用完 ThreadLocal方法后 最好手动调用remove()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WeakReference</span>&lt;<span class="hljs-title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;<br>            <span class="hljs-comment">/** The value associated with this ThreadLocal. */</span><br>            Object value;<br> <br>            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>                <span class="hljs-keyword">super</span>(k);<br>                value = v;<br>            &#125;<br>        &#125;<br> <br></code></pre></td></tr></table></figure><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>如果一个对象只具有弱引用，那就类似于可有可无的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。</p><p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>ThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile关键字</title>
    <link href="/blog/2021/03/18/volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/blog/2021/03/18/volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>在 JDK1.2 之前，Java的内存模型实现总是从主存（即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4_1575855805654.png?x-oss-process=style/small" alt="数据不一致">要解决这个问题，就需要把变量声明为volatile，这就指示 JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。</p><p>说白了， volatile 关键字的主要作用就是保证变量的可见性然后还有一个作用是防止指令重排序。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210318200107505.jpeg" alt="volatile关键字的可见性"></p><h2 id="说说-synchronized-关键字和-volatile-关键字的区别"><a href="#说说-synchronized-关键字和-volatile-关键字的区别" class="headerlink" title="说说 synchronized 关键字和 volatile 关键字的区别"></a>说说 synchronized 关键字和 volatile 关键字的区别</h2><p>synchronized关键字和volatile关键字比较</p><p>volatile关键字是线程同步的轻量级实现，所以volatile性能肯定比synchronized关键字要好。但是volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块。synchronized关键字在JavaSE1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，实际开发中使用 synchronized 关键字的场景还是更多一些。 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞 volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。 volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>volatile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized和ReentrantLock的区别</title>
    <link href="/blog/2021/03/18/synchronized%E5%92%8CReentrantLock%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/03/18/synchronized%E5%92%8CReentrantLock%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>① 两者都是可重入锁</p><p>两者都是可重入锁。“可重入锁”概念是：自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。</p><p>② synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</p><p>synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><p>③ ReentrantLock 比 synchronized 增加了一些高级功能</p><p>相比synchronized，ReentrantLock增加了一些高级功能。主要来说主要有三点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</p><p>ReentrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。 ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。 ReentrantLock默认情况是非公平的，可以通过 ReentrantLock类的ReentrantLock(boolean fair)构造方法来制定是否是公平的。 synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。Condition是JDK1.5之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视器），线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用notify()/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合Condition实例可以实现“选择性通知” ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。 如果你想使用上述功能，那么选择ReentrantLock是一个不错的选择。</p><p>④ 性能已不是选择标准</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>synchronized</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized关键字</title>
    <link href="/blog/2021/03/16/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/blog/2021/03/16/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="说一说自己对于-synchronized-关键字的了解"><a href="#说一说自己对于-synchronized-关键字的了解" class="headerlink" title="说一说自己对于 synchronized 关键字的了解"></a>说一说自己对于 synchronized 关键字的了解</h2><p>synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><p>另外，在 Java 早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因。庆幸的是在 Java 6 之后 Java 官方对从 JVM 层面对synchronized 较大优化，所以现在的 synchronized 锁效率也优化得很不错了。JDK1.6对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。</p><h2 id="说说自己是怎么使用-synchronized-关键字，在项目中用到了吗"><a href="#说说自己是怎么使用-synchronized-关键字，在项目中用到了吗" class="headerlink" title="说说自己是怎么使用 synchronized 关键字，在项目中用到了吗"></a>说说自己是怎么使用 synchronized 关键字，在项目中用到了吗</h2><p>synchronized关键字最主要的三种使用方式：</p><p>修饰实例方法: 作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁 修饰静态方法: 也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态 synchronized 方法，而线程B需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，因为访问静态 synchronized 方法占用的锁是当前类的锁，而访问非静态 synchronized 方法占用的锁是当前实例对象锁。 修饰代码块: 指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。 总结： synchronized 关键字加到 static 静态方法和 synchronized(class)代码块上都是是给 Class 类上锁。synchronized 关键字加到实例方法上是给对象实例上锁。尽量不要使用 synchronized(String a) 因为JVM中，字符串常量池具有缓存功能！</p><p>下面我以一个常见的面试题为例讲解一下 synchronized 关键字的具体使用。</p><p>面试中面试官经常会说：“单例模式了解吗？来给我手写一下！给我解释一下双重检验锁方式实现单例模式的原理呗！”</p><p>双重校验锁实现对象单例（线程安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getUniqueInstance</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span><br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//类对象加锁</span><br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>                    uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，需要注意 uniqueInstance 采用 volatile 关键字修饰也是很有必要。</p><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， uniqueInstance = new Singleton(); 这段代码其实是分为三步执行：</p><p>为 uniqueInstance 分配内存空间 初始化 uniqueInstance 将 uniqueInstance 指向分配的内存地址 但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>synchronized</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是线程死锁?如何避免死锁</title>
    <link href="/blog/2021/03/16/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81?%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81/"/>
    <url>/blog/2021/03/16/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81?%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h2 id="认识线程死锁"><a href="#认识线程死锁" class="headerlink" title="认识线程死锁"></a>认识线程死锁</h2><p>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p><p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210316195143184.png" alt="2019-4死锁1">下面通过一个例子来说明线程死锁,代码模拟了上图的死锁的情况 (代码来源于《并发编程之美》)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLockDemo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object resource1 = <span class="hljs-keyword">new</span> Object();<span class="hljs-comment">//资源 1</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object resource2 = <span class="hljs-keyword">new</span> Object();<span class="hljs-comment">//资源 2</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (resource1) &#123;<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;get resource1&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;waiting get resource2&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (resource2) &#123;<br>                    System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;get resource2&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程 1&quot;</span>).start();<br> <br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (resource2) &#123;<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;get resource2&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;waiting get resource1&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (resource1) &#123;<br>                    System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;get resource1&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程 2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread[线程 <span class="hljs-number">1</span>,<span class="hljs-number">5</span>,main]get resource1<br>Thread[线程 <span class="hljs-number">2</span>,<span class="hljs-number">5</span>,main]get resource2<br>Thread[线程 <span class="hljs-number">1</span>,<span class="hljs-number">5</span>,main]waiting get resource2<br>Thread[线程 <span class="hljs-number">2</span>,<span class="hljs-number">5</span>,main]waiting get resource1<br></code></pre></td></tr></table></figure><p>线程 A 通过 synchronized (resource1) 获得 resource1 的监视器锁，然后通过Thread.sleep(1000);让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 resource2 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。上面的例子符合产生死锁的四个必要条件。</p><p>学过操作系统的朋友都知道产生死锁必须具备以下四个条件：</p><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:线程已获得的资源在末使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h2 id="如何避免线程死锁"><a href="#如何避免线程死锁" class="headerlink" title="如何避免线程死锁?"></a>如何避免线程死锁?</h2><p>我们只要破坏产生死锁的四个条件中的其中一个就可以了。</p><p>破坏互斥条件</p><p>这个条件我们没有办法破坏，因为我们用锁本来就是想让他们互斥的（临界资源需要互斥访问）。</p><p>破坏请求与保持条件</p><p>一次性申请所有的资源。</p><p>破坏不剥夺条件</p><p>占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</p><p>破坏循环等待条件</p><p>靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</p><p>我们对线程 2 的代码修改成下面这样就不会产生死锁了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (resource1) &#123;<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;get resource1&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;waiting get resource2&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (resource2) &#123;<br>                    System.out.println(Thread.currentThread() + <span class="hljs-string">&quot;get resource2&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程 2&quot;</span>).start();<br></code></pre></td></tr></table></figure><p>Output</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread[线程 <span class="hljs-number">1</span>,<span class="hljs-number">5</span>,main]get resource1<br>Thread[线程 <span class="hljs-number">1</span>,<span class="hljs-number">5</span>,main]waiting get resource2<br>Thread[线程 <span class="hljs-number">1</span>,<span class="hljs-number">5</span>,main]get resource2<br>Thread[线程 <span class="hljs-number">2</span>,<span class="hljs-number">5</span>,main]get resource1<br>Thread[线程 <span class="hljs-number">2</span>,<span class="hljs-number">5</span>,main]waiting get resource2<br>Thread[线程 <span class="hljs-number">2</span>,<span class="hljs-number">5</span>,main]get resource2<br> <br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>我们分析一下上面的代码为什么避免了死锁的发生?</p><p>线程 1 首先获得到 resource1 的监视器锁,这时候线程 2 就获取不到了。然后线程 1 再去获取 resource2 的监视器锁，可以获取到。然后线程 1 释放了对 resource1、resource2 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程死锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程的生命周期和状态</title>
    <link href="/blog/2021/03/16/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81/"/>
    <url>/blog/2021/03/16/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210316195056031.png" alt="Java线程的状态"></p><p>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210316195056316.png" alt="a"></p><p>由上图可以看出：线程创建之后它将处于 NEW（新建） 状态，调用 start() 方法后开始运行，线程这时候处于 READY（可运行） 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 RUNNING（运行） 状态。</p><p>操作系统隐藏 Java 虚拟机（JVM）中的 RUNNABLE 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：HowToDoInJava：Java Thread Life Cycle and Thread States），所以 Java 系统一般将这两个状态统称为 RUNNABLE（运行中） 状态 。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210316195056428.png" alt="RUNNABLE-VS-RUNNING">当线程执行 wait()方法之后，线程进入 WAITING（等待） 状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 TIME_WAITING(超时等待) 状态相当于在等待状态的基础上增加了超时限制，比如通过 sleep（long millis）方法或 wait（long millis）方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 BLOCKED（阻塞） 状态。线程在执行 Runnable 的run()方法之后将会进入到 TERMINATED（终止） 状态。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是线程和进程</title>
    <link href="/blog/2021/03/16/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
    <url>/blog/2021/03/16/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>1.1. 何为进程? 进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p><p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p><p>如下图所示，在 windows 中通过查看任务管理器的方式，我们就可以清楚看到 window 当前运行的进程（.exe 文件的运行）。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210316194835966.png" alt="进程示例图片-Windows">1.2. 何为线程? 线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的堆和方法区资源，但每个线程有自己的程序计数器、虚拟机栈和本地方法栈，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p>Java 程序天生就是多线程程序，我们可以通过 JMX 来看一下一个普通的 Java 程序有哪些线程，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiThread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取 Java 线程管理 MXBean</span><br>    ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();<br>        <span class="hljs-comment">// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息</span><br>        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">// 遍历线程信息，仅打印线程 ID 和线程名称信息</span><br>        <span class="hljs-keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;<br>            System.out.println(<span class="hljs-string">&quot;[&quot;</span> + threadInfo.getThreadId() + <span class="hljs-string">&quot;] &quot;</span> + threadInfo.getThreadName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序输出如下（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行 main 方法即可）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">5</span>] Attach Listener <span class="hljs-comment">//添加事件</span><br>[<span class="hljs-number">4</span>] Signal Dispatcher <span class="hljs-comment">// 分发处理给 JVM 信号的线程</span><br>[<span class="hljs-number">3</span>] Finalizer <span class="hljs-comment">//调用对象 finalize 方法的线程</span><br>[<span class="hljs-number">2</span>] Reference Handler <span class="hljs-comment">//清除 reference 线程</span><br>[<span class="hljs-number">1</span>] main <span class="hljs-comment">//main 线程,程序入口</span><br></code></pre></td></tr></table></figure><p>从上面的输出内容可以看出：一个 Java 程序的运行是 main 线程和多个其他线程同时运行。</p><p>2.1. 图解进程和线程的关系 下图是 Java 内存区域，通过下图我们从 JVM 的角度来说一下线程和进程之间的关系。如果你对 Java 内存区域 (运行时数据区) 这部分知识不太了解的话可以阅读一下这篇文章：《可能是把 Java 内存区域讲的最清楚的一篇文章》<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210316194836243.png" alt="JVM运行时数据区域">从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的堆和方法区 (JDK1.8 之后的元空间)资源，但是每个线程有自己的程序计数器、虚拟机栈 和 本地方法栈。</p><p>总结： 线程 是 进程 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反</p><p>下面是该知识点的扩展内容！</p><p>下面来思考这样一个问题：为什么程序计数器、虚拟机栈和本地方法栈是线程私有的呢？为什么堆和方法区是线程共享的呢？</p><p>2.2. 程序计数器为什么是私有的? 程序计数器主要有下面两个作用：</p><p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。 在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。 需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p><p>所以，程序计数器私有主要是为了线程切换后能恢复到正确的执行位置。</p><p>2.3. 虚拟机栈和本地方法栈为什么是私有的? 虚拟机栈： 每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。 本地方法栈： 和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。 所以，为了保证线程中的局部变量不被别的线程访问到，虚拟机栈和本地方法栈是线程私有的。</p><p>2.4. 一句话简单了解堆和方法区 堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>]]></content>
    
    
    
    <tags>
      
      <tag>线程</tag>
      
      <tag>进程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap和HashSet区别</title>
    <link href="/blog/2021/03/16/HashMap%E5%92%8CHashSet%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/03/16/HashMap%E5%92%8CHashSet%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone()、writeObject()、readObject()是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/QQ20191129-094719@2x_1574992056988.png?x-oss-process=style/small" alt="QQ20191129-094719@2x"></p><h2 id="HashSet如何检查重复"><a href="#HashSet如何检查重复" class="headerlink" title="HashSet如何检查重复"></a>HashSet如何检查重复</h2><p>当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与其他加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让加入操作成功。（摘自我的Java启蒙书《Head fist java》第二版）</p><h3 id="hashCode（）与equals（）的相关规定："><a href="#hashCode（）与equals（）的相关规定：" class="headerlink" title="hashCode（）与equals（）的相关规定："></a>hashCode（）与equals（）的相关规定：</h3><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个equals方法返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li></ol><h3 id="与equals的区别"><a href="#与equals的区别" class="headerlink" title="==与equals的区别"></a>==与equals的区别</h3><ol><li>==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同</li><li>==是指对内存地址进行比较 equals()是对字符串的内容进行比较</li><li>==指引用是否相同 equals()指的是值是否相同</li></ol><h2 id="HashMap-多线程操作导致死循环问题"><a href="#HashMap-多线程操作导致死循环问题" class="headerlink" title="HashMap 多线程操作导致死循环问题"></a>HashMap 多线程操作导致死循环问题</h2><p>主要原因在于 并发下的Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HashMap</tag>
      
      <tag>HashSet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap和Hashtable的区别</title>
    <link href="/blog/2021/03/15/HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/03/15/HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<ol><li>线程是否安全： HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；</li><li>效率： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；</li><li>对Null key 和Null value的支持： HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。</li><li>初始容量大小和每次扩充容量大小的不同 ： ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的tableSizeFor()方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂作为哈希表的大小,后面会介绍到为什么是2的幂次方。</li><li>底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。 HashMap 中带有初始容量的构造函数：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                              initialCapacity);<br>       <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>           initialCapacity = MAXIMUM_CAPACITY;<br>       <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                              loadFactor);<br>       <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>       <span class="hljs-keyword">this</span>.threshold = tableSizeFor(initialCapacity);<br>   &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>   &#125;<br></code></pre></td></tr></table></figure><p>下面这个方法保证了 HashMap 总是使用2的幂作为哈希表的大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns a power of two size for the given target capacity.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tableSizeFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> n = cap - <span class="hljs-number">1</span>;<br>      n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>      n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>      n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>      n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>      n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>      <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HashMap</tag>
      
      <tag>Hashtable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>List,Set,Map三者的区别</title>
    <link href="/blog/2021/03/15/List,Set,Map%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/03/15/List,Set,Map%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<ol><li>List(对付顺序的好帮手)： List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象</li><li>Set(注重独一无二的性质): 不允许重复的集合。不会有多个元素引用相同的对象。</li><li>Map(用Key来搜索的专家): 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</li></ol><h2 id="Arraylist-与-LinkedList-区别"><a href="#Arraylist-与-LinkedList-区别" class="headerlink" title="Arraylist 与 LinkedList 区别?"></a>Arraylist 与 LinkedList 区别?</h2><ol><li>是否保证线程安全： ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；</li><li>底层数据结构： Arraylist 底层使用的是 Object 数组；LinkedList 底层使用的是 双向链表 数据结构（JDK1.6之前为循环链表，JDK1.7取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）</li><li>插入和删除是否受元素位置的影响： ① ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行add(E e)方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置 i 插入和删除元素的话（add(int index, E element)）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 ② LinkedList 采用链表存储，所以对于add(E e)方法的插入，删除元素时间复杂度不受元素位置的影响，近似 O（1），如果是要在指定位置i插入和删除元素的话（(add(int index, E element)） 时间复杂度近似为o(n))因为需要先移动到指定位置再插入。</li><li>是否支持快速随机访问： LinkedList 不支持高效的随机元素访问，而 ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法)。</li><li>内存空间占用： ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。</li></ol><h3 id="补充内容-RandomAccess接口"><a href="#补充内容-RandomAccess接口" class="headerlink" title="补充内容:RandomAccess接口"></a>补充内容:RandomAccess接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RandomAccess</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看源码我们发现实际上 RandomAccess 接口中什么都没有定义。所以，在我看来 RandomAccess 接口不过是一个标识罢了。标识什么？ 标识实现这个接口的类具有随机访问功能。</p><p>在 binarySearch（）方法中，它要判断传入的list 是否 RamdomAccess 的实例，如果是，调用indexedBinarySearch（）方法，如果不是，那么调用iteratorBinarySearch（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(List&lt;? extends Comparable&lt;? <span class="hljs-keyword">super</span> T&gt;&gt; list, T key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (list <span class="hljs-keyword">instanceof</span> RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)<br>            <span class="hljs-keyword">return</span> Collections.indexedBinarySearch(list, key);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> Collections.iteratorBinarySearch(list, key);<br>    &#125;<br></code></pre></td></tr></table></figure><p>ArrayList 实现了 RandomAccess 接口， 而 LinkedList 没有实现。为什么呢？我觉得还是和底层数据结构有关！ArrayList 底层是数组，而 LinkedList 底层是链表。数组天然支持随机访问，时间复杂度为 O（1），所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O（n），所以不支持快速随机访问。，ArrayList 实现了 RandomAccess 接口，就表明了他具有快速随机访问功能。 RandomAccess 接口只是标识，并不是说 ArrayList 实现 RandomAccess 接口才具有快速随机访问功能的！</p><h3 id="下面再总结一下-list-的遍历方式选择："><a href="#下面再总结一下-list-的遍历方式选择：" class="headerlink" title="下面再总结一下 list 的遍历方式选择："></a>下面再总结一下 list 的遍历方式选择：</h3><p>实现了 RandomAccess 接口的list，优先选择普通 for 循环 ，其次 foreach, 未实现 RandomAccess接口的list，优先选择iterator遍历（foreach遍历底层也是通过iterator实现的,），大size的数据，千万不要使用普通for循环</p><h3 id="补充内容-双向链表和双向循环链表"><a href="#补充内容-双向链表和双向循环链表" class="headerlink" title="补充内容:双向链表和双向循环链表"></a>补充内容:双向链表和双向循环链表</h3><p>双向链表： 包含两个指针，一个prev指向前一个节点，一个next指向后一个节点。<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8_1574818255138.png?x-oss-process=style/small" alt="双向链表">双向循环链表： 最后一个节点的 next 指向head，而 head 的prev指向最后一个节点，构成一个环。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210315204506653.png" alt="双向循环链表"></p>]]></content>
    
    
    
    <tags>
      
      <tag>List</tag>
      
      <tag>Set</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>get和post请求的区别</title>
    <link href="/blog/2021/03/15/get%E5%92%8Cpost%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/03/15/get%E5%92%8Cpost%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>网上也有文章说：get和post请求实际上是没有区别，大家可以自行查询相关文章（参考文章：<a href="https://www.cnblogs.com/logsharing/p/8448446.html%EF%BC%8C%E7%9F%A5%E4%B9%8E%E5%AF%B9%E5%BA%94%E7%9A%84%E9%97%AE%E9%A2%98%E9%93%BE%E6%8E%A5%EF%BC%9Aget%E5%92%8Cpost%E5%8C%BA%E5%88%AB%EF%BC%9F%EF%BC%89%EF%BC%81%E6%88%91%E4%B8%8B%E9%9D%A2%E7%BB%99%E5%87%BA%E7%9A%84%E5%8F%AA%E6%98%AF%E4%B8%80%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AD%94%E6%A1%88%E3%80%82">https://www.cnblogs.com/logsharing/p/8448446.html，知乎对应的问题链接：get和post区别？）！我下面给出的只是一种常见的答案。</a></p><p>①get请求用来从服务器上获得资源，而post是用来向服务器提交数据；</p><p>②get将表单中数据按照name=value的形式，添加到action 所指向的URL 后面，并且两者使用”?”连接，而各个变量之间使用”&amp;”连接；post是将表单中的数据放在HTTP协议的请求头或消息体中，传递到action所指向URL；</p><p>③get传输的数据要受到URL长度限制（最大长度是 2048 个字符）；而post可以传输大量的数据，上传文件通常要使用post方式；</p><p>④使用get时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用get；对于敏感数据还是应用使用post；</p><p>⑤get使用MIME类型application/x-www-form-urlencoded的URL编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是”%20”。</p><p>补充：GET方式提交表单的典型应用是搜索引擎。GET方式就是被设计为查询用的。</p><p>还有另外一种回答。推荐大家看一下：</p><p><a href="https://www.zhihu.com/question/28586791">https://www.zhihu.com/question/28586791</a> <a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd">https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd</a> 什么情况下调用doGet()和doPost() Form标签里的method的属性为get时调用doGet()，为post时调用doPost()。</p><p>转发(Forward)和重定向(Redirect)的区别 转发是服务器行为，重定向是客户端行为。</p><p>转发（Forward） 通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到login_success.jsp页面。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-built_in">request</span>.getRequestDispatcher(<span class="hljs-string">&quot;login_success.jsp&quot;</span>).forward(<span class="hljs-built_in">request</span>, <span class="hljs-built_in">response</span>);<br></code></pre></td></tr></table></figure><p>重定向（Redirect） 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 HttpServletResponse 的 setStatus(int status) 方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。</p><p>从地址栏显示来说 forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址. redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</p><p>从数据共享来说 forward:转发页面和转发到的页面可以共享request里面的数据. redirect:不能共享数据.</p><p>从运用地方来说 forward:一般用于用户登陆的时候,根据角色转发到相应的模块. redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p><p>从效率来说 forward:高. redirect:低.</p>]]></content>
    
    
    
    <tags>
      
      <tag>get</tag>
      
      <tag>post</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet总结</title>
    <link href="/blog/2021/03/15/Servlet%E6%80%BB%E7%BB%93/"/>
    <url>/blog/2021/03/15/Servlet%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>在Java Web程序中，Servlet主要负责接收用户请求 HttpServletRequest,在doGet(),doPost()中做相应的处理，并将回应HttpServletResponse反馈给用户。Servlet 可以设置初始化参数，供Servlet内部使用。一个Servlet类只会有一个实例，在它初始化时调用init()方法，销毁时调用destroy()方法。Servlet需要在web.xml中配置（MyEclipse中创建Servlet会自动配置），一个Servlet可以设置多个URL访问。Servlet不是线程安全，因此要谨慎使用类变量。</p><h2 id="阐述Servlet和CGI的区别"><a href="#阐述Servlet和CGI的区别" class="headerlink" title="阐述Servlet和CGI的区别?"></a>阐述Servlet和CGI的区别?</h2><h3 id="CGI的不足之处"><a href="#CGI的不足之处" class="headerlink" title="CGI的不足之处:"></a>CGI的不足之处:</h3><p>1，需要为每个请求启动一个操作CGI程序的系统进程。如果请求频繁，这将会带来很大的开销。</p><p>2，需要为每个请求加载和运行一个CGI程序，这将带来很大的开销</p><p>3，需要重复编写处理网络协议的代码以及编码，这些工作都是非常耗时的。</p><h3 id="Servlet的优点"><a href="#Servlet的优点" class="headerlink" title="Servlet的优点:"></a>Servlet的优点:</h3><p>1，只需要启动一个操作系统进程以及加载一个JVM，大大降低了系统的开销</p><p>2，如果多个请求需要做同样处理的时候，这时候只需要加载一个类，这也大大降低了开销</p><p>3，所有动态加载的类可以实现对网络协议以及请求解码的共享，大大降低了工作量。</p><p>4，Servlet能直接和Web服务器交互，而普通的CGI程序不能。Servlet还能在各个程序之间共享数据，使数据库连接池之类的功能很容易实现。</p><p>补充：Sun Microsystems公司在1996年发布Servlet技术就是为了和CGI进行竞争，Servlet是一个特殊的Java程序，一个基于Java的Web应用通常包含一个或多个Servlet类。Servlet不能够自行创建并执行，它是在Servlet容器中运行的，容器将用户的请求传递给Servlet程序，并将Servlet的响应回传给用户。通常一个Servlet会关联一个或多个JSP页面。以前CGI经常因为性能开销上的问题被诟病，然而Fast CGI早就已经解决了CGI效率上的问题，所以面试的时候大可不必信口开河的诟病CGI，事实上有很多你熟悉的网站都使用了CGI技术。</p><p>参考：《javaweb整合开发王者归来》P7</p><h3 id="Servlet接口中有哪些方法及Servlet生命周期探秘"><a href="#Servlet接口中有哪些方法及Servlet生命周期探秘" class="headerlink" title="Servlet接口中有哪些方法及Servlet生命周期探秘"></a>Servlet接口中有哪些方法及Servlet生命周期探秘</h3><p>Servlet接口定义了5个方法，其中前三个方法与Servlet生命周期相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest req, ServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, java.io.IOException</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span><br><span class="hljs-function">java.lang.String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function">ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>生命周期： Web容器加载Servlet并将其实例化后，Servlet生命周期开始，容器运行其init()方法进行Servlet的初始化；请求到达时调用Servlet的service()方法，service()方法会根据需要调用与请求对应的doGet或doPost等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的destroy()方法。init方法和destroy方法只会执行一次，service方法客户端每次请求Servlet都会执行。Servlet中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入init方法中，销毁资源的代码放入destroy方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p><p>参考：《javaweb整合开发王者归来》P81</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型的实际应用</title>
    <link href="/blog/2021/03/15/%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
    <url>/blog/2021/03/15/%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="实现最小值函数"><a href="#实现最小值函数" class="headerlink" title="实现最小值函数"></a>实现最小值函数</h2><p>自己设计一个泛型的获取数组最小值的函数.并且这个方法只能接受Number的子类并且实现了Comparable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意：Number并没有实现Comparable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T extends Number &amp; Comparable&lt;? <span class="hljs-keyword">super</span> T&gt;&gt; <span class="hljs-function">T <span class="hljs-title">min</span><span class="hljs-params">(T[] values)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span> || values.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    T min = values[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; values.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (min.compareTo(values[i]) &gt; <span class="hljs-number">0</span>) min = values[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> min;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> minInteger = min(<span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;);<span class="hljs-comment">//result:1</span><br><span class="hljs-keyword">double</span> minDouble = min(<span class="hljs-keyword">new</span> Double[]&#123;<span class="hljs-number">1.2</span>, <span class="hljs-number">2.2</span>, -<span class="hljs-number">1d</span>&#125;);<span class="hljs-comment">//result:-1d</span><br>String typeError = min(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>&#125;);<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="使用数组实现栈"><a href="#使用数组实现栈" class="headerlink" title="使用数组实现栈"></a>使用数组实现栈</h2><p>自己实现一个栈，要求这个栈具有push()、pop()（返回栈顶元素并出栈）、peek() （返回栈顶元素不出栈）、isEmpty()、size()这些基本的方法。</p><p>提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用Arrays.copyOf()进行扩容；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] storage;<span class="hljs-comment">//存放栈中元素的数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> capacity;<span class="hljs-comment">//栈的容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<span class="hljs-comment">//栈中元素数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> GROW_FACTOR = <span class="hljs-number">2</span>;<br> <br>    <span class="hljs-comment">//TODO：不带初始容量的构造方法。默认容量为8</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.capacity = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">this</span>.storage=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-keyword">this</span>.count = <span class="hljs-number">0</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：带初始容量的构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Capacity too small.&quot;</span>);<br> <br>        <span class="hljs-keyword">this</span>.capacity = initialCapacity;<br>        <span class="hljs-keyword">this</span>.storage = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[initialCapacity];<br>        <span class="hljs-keyword">this</span>.count = <span class="hljs-number">0</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (count == capacity) &#123;<br>            ensureCapacity();<br>        &#125;<br>        storage[count++] = value;<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：确保容量大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> newCapacity = capacity * GROW_FACTOR;<br>        storage = Arrays.copyOf(storage, newCapacity);<br>        capacity = newCapacity;<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：返回栈顶元素并出栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        count--;<br>        <span class="hljs-keyword">if</span> (count == -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Stack is empty.&quot;</span>);<br> <br>        <span class="hljs-keyword">return</span> storage[count];<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：返回栈顶元素不出栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Stack is empty.&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> storage[count-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：判断栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//TODO：返回栈中元素的个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">MyStack myStack = <span class="hljs-keyword">new</span> MyStack(<span class="hljs-number">3</span>);<br>myStack.push(<span class="hljs-number">1</span>);<br>myStack.push(<span class="hljs-number">2</span>);<br>myStack.push(<span class="hljs-number">3</span>);<br>myStack.push(<span class="hljs-number">4</span>);<br>myStack.push(<span class="hljs-number">5</span>);<br>myStack.push(<span class="hljs-number">6</span>);<br>myStack.push(<span class="hljs-number">7</span>);<br>myStack.push(<span class="hljs-number">8</span>);<br>System.out.println(myStack.peek());<span class="hljs-comment">//8</span><br>System.out.println(myStack.size());<span class="hljs-comment">//8</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>    System.out.println(myStack.pop());<br>&#125;<br>System.out.println(myStack.isEmpty());<span class="hljs-comment">//true</span><br>myStack.pop();<span class="hljs-comment">//报错：java.lang.IllegalArgumentException: Stack is empty.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Collection.toArray()</title>
    <link href="/blog/2021/03/14/Collection.toArray()/"/>
    <url>/blog/2021/03/14/Collection.toArray()/</url>
    
    <content type="html"><![CDATA[<p><strong>该方法是一个泛型方法： T[] toArray(T[] a); 如果toArray方法中没有传递任何参数的话返回的是Object类型数组。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String [] s= <span class="hljs-keyword">new</span> String[]&#123;<br>    <span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;lazy&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;over&quot;</span>, <span class="hljs-string">&quot;jumps&quot;</span>, <span class="hljs-string">&quot;fox&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>, <span class="hljs-string">&quot;quick&quot;</span>, <span class="hljs-string">&quot;A&quot;</span><br>&#125;;<br>List&lt;String&gt; list = Arrays.asList(s);<br>Collections.reverse(list);<br>s=list.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]);<span class="hljs-comment">//没有指定类型的话会报错</span><br></code></pre></td></tr></table></figure><p>由于JVM优化，new String[0]作为Collection.toArray()方法的参数现在使用更好，new String[0]就是起一个模板的作用，指定了返回数组的类型，0是为了节省空间，因为它只是为了说明返回的类型。详见：<a href="https://shipilev.net/blog/2016/arrays-wisdom-ancients/">https://shipilev.net/blog/2016/arrays-wisdom-ancients/</a></p><p><strong>不要在 foreach 循环里进行元素的 remove/add 操作</strong></p><p>如果要进行remove操作，可以调用迭代器的 remove方法而不是集合类的 remove 方法。因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身remove/add方法，迭代器都将抛出一个ConcurrentModificationException,这就是单线程状态下产生的 fail-fast 机制。</p><p>fail-fast 机制 ：多个线程对 fail-fast 集合进行修改的时，可能会抛出ConcurrentModificationException，单线程下也会出现这种情况，上面已经提到过。</p><p>java.util包下面的所有的集合类都是fail-fast的，而java.util.concurrent包下面的所有的类都是fail-safe的。</p><p>不要在 foreach 循环里进行元素的 remove/add 操作</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何正确的将数组转换为ArrayList</title>
    <link href="/blog/2021/03/14/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%B0%86%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BAArrayList/"/>
    <url>/blog/2021/03/14/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%B0%86%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BAArrayList/</url>
    
    <content type="html"><![CDATA[<h2 id="自己动手实现（教育目的）"><a href="#自己动手实现（教育目的）" class="headerlink" title="自己动手实现（教育目的）"></a>自己动手实现（教育目的）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK1.5+</span><br><span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">arrayToList</span><span class="hljs-params">(<span class="hljs-keyword">final</span> T[] array)</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> List&lt;T&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;T&gt;(array.length);<br> <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> T s : array) &#123;<br>    l.add(s);<br>  &#125;<br>  <span class="hljs-keyword">return</span> (l);<br>&#125;<br>Integer [] myArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>System.out.println(arrayToList(myArray).getClass());<span class="hljs-comment">//class java.util.ArrayList</span><br></code></pre></td></tr></table></figure><h2 id="最简便的方法-推荐"><a href="#最简便的方法-推荐" class="headerlink" title="最简便的方法(推荐)"></a>最简便的方法(推荐)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>))<br> <br></code></pre></td></tr></table></figure><h2 id="使用-Java8-的Stream-推荐"><a href="#使用-Java8-的Stream-推荐" class="headerlink" title="使用 Java8 的Stream(推荐)"></a>使用 Java8 的Stream(推荐)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer [] myArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>List myList = Arrays.stream(myArray).collect(Collectors.toList());<br><span class="hljs-comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span><br><span class="hljs-keyword">int</span> [] myArray2 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>List myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h2 id="使用-Guava-推荐"><a href="#使用-Guava-推荐" class="headerlink" title="使用 Guava(推荐)"></a>使用 Guava(推荐)</h2><p>对于不可变集合，你可以使用ImmutableList类及其of()与copyOf()工厂方法：（参数不能为空）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; il = ImmutableList.of(<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;elements&quot;</span>);  <span class="hljs-comment">// from varargs</span><br>List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      <span class="hljs-comment">// from array</span><br></code></pre></td></tr></table></figure><p>对于可变集合，你可以使用Lists类及其newArrayList()工厂方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l1 = Lists.newArrayList(anotherListOrCollection);    <span class="hljs-comment">// from collection</span><br>List&lt;String&gt; l2 = Lists.newArrayList(aStringArray);               <span class="hljs-comment">// from array</span><br>List&lt;String&gt; l3 = Lists.newArrayList(<span class="hljs-string">&quot;or&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;elements&quot;</span>); <span class="hljs-comment">// from varargs</span><br></code></pre></td></tr></table></figure><h2 id="使用-Apache-Commons-Collections"><a href="#使用-Apache-Commons-Collections" class="headerlink" title="使用 Apache Commons Collections"></a>使用 Apache Commons Collections</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>CollectionUtils.addAll(list, str);<br></code></pre></td></tr></table></figure><p>Collection.toArray()方法使用的坑&amp;如何反转数组 该方法是一个泛型方法： T[] toArray(T[] a); 如果toArray方法中没有传递任何参数的话返回的是Object类型数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String [] s= <span class="hljs-keyword">new</span> String[]&#123;<br>    <span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;lazy&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;over&quot;</span>, <span class="hljs-string">&quot;jumps&quot;</span>, <span class="hljs-string">&quot;fox&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>, <span class="hljs-string">&quot;quick&quot;</span>, <span class="hljs-string">&quot;A&quot;</span><br>&#125;;<br>List&lt;String&gt; list = Arrays.asList(s);<br>Collections.reverse(list);<br>s=list.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]);<span class="hljs-comment">//没有指定类型的话会报错</span><br></code></pre></td></tr></table></figure><p>由于JVM优化，new String[0]作为Collection.toArray()方法的参数现在使用更好，new String[0]就是起一个模板的作用，指定了返回数组的类型，0是为了节省空间，因为它只是为了说明返回的类型。详见：<a href="https://shipilev.net/blog/2016/arrays-wisdom-ancients/">https://shipilev.net/blog/2016/arrays-wisdom-ancients/</a></p><p><strong>不要在 foreach 循环里进行元素的 remove/add 操作</strong> 如果要进行remove操作，可以调用迭代器的 remove方法而不是集合类的 remove 方法。因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身remove/add方法，迭代器都将抛出一个ConcurrentModificationException,这就是单线程状态下产生的 fail-fast 机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fail-fast 机制 ：多个线程对 fail-fast 集合进行修改的时，可能会抛出ConcurrentModificationException，单线程下也会出现这种情况，上面已经提到过。<br></code></pre></td></tr></table></figure><p>java.util包下面的所有的集合类都是fail-fast的，而java.util.concurrent包下面的所有的类都是fail-safe的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>ArrayList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arrays.asList()使用指南</title>
    <link href="/blog/2021/03/14/Arrays.asList()%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/blog/2021/03/14/Arrays.asList()%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p><strong>最近使用Arrays.asList()遇到了一些坑，然后在网上看到这篇文章：Java Array to List Examples 感觉挺不错的，但是还不是特别全面。所以，自己对于这块小知识点进行了简单的总结。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Arrays.asList()在平时开发中还是比较常见的，我们可以使用它将一个数组转换为一个List集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] myArray = &#123; <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span> &#125;； <br>List&lt;String&gt; myList = Arrays.asList(myArray);<br><span class="hljs-comment">//上面两个语句等价于下面一条语句</span><br>List&lt;String&gt; myList = Arrays.asList(<span class="hljs-string">&quot;Apple&quot;</span>,<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>);<br></code></pre></td></tr></table></figure><p>JDK 源码对于这个方法的说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *返回由指定数组支持的固定大小的列表。此方法作为基于数组和基于集合的API之间的桥梁，与           Collection.toArray()结合使用。返回的List是可序列化并实现RandomAccess接口。</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">asList</span><span class="hljs-params">(T... a)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(a);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用时的注意事项总结"><a href="#使用时的注意事项总结" class="headerlink" title="使用时的注意事项总结"></a>使用时的注意事项总结</h2><p>传递的数组必须是对象数组，而不是基本类型。</p><p>Arrays.asList()是泛型方法，传入的对象必须是对象数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] myArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>List myList = Arrays.asList(myArray);<br>System.out.println(myList.size());<span class="hljs-comment">//1</span><br>System.out.println(myList.get(<span class="hljs-number">0</span>));<span class="hljs-comment">//数组地址值</span><br>System.out.println(myList.get(<span class="hljs-number">1</span>));<span class="hljs-comment">//报错：ArrayIndexOutOfBoundsException</span><br><span class="hljs-keyword">int</span> [] array=(<span class="hljs-keyword">int</span>[]) myList.get(<span class="hljs-number">0</span>);<br>System.out.println(array[<span class="hljs-number">0</span>]);<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>当传入一个原生数据类型数组时，Arrays.asList() 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时List 的唯一元素就是这个数组，这也就解释了上面的代码。</p><p>我们使用包装类型数组就可以解决这个问题。</p><p>Integer[] myArray = { 1, 2, 3 }; 使用集合的修改方法:add()、remove()、clear()会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List myList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>myList.add(<span class="hljs-number">4</span>);<span class="hljs-comment">//运行时报错：UnsupportedOperationException</span><br>myList.remove(<span class="hljs-number">1</span>);<span class="hljs-comment">//运行时报错：UnsupportedOperationException</span><br>myList.clear();<span class="hljs-comment">//运行时报错：UnsupportedOperationException</span><br></code></pre></td></tr></table></figure><p>Arrays.asList() 方法返回的并不是 java.util.ArrayList ，而是 java.util.Arrays 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List myList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>System.out.println(myList.getClass());<span class="hljs-comment">//class java.util.Arrays$ArrayList</span><br></code></pre></td></tr></table></figure><p>下图是java.util.Arrays$ArrayList的简易源码，我们可以看到这个类重写的方法有哪些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class">       <span class="hljs-keyword">implements</span> <span class="hljs-title">RandomAccess</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span><br><span class="hljs-class">   </span>&#123;<br>       ...<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>         ...<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>         ...<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>         ...<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>          ...<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> E&gt; action)</span> </span>&#123;<br>         ...<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">replaceAll</span><span class="hljs-params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;<br>         ...<br>       &#125;<br><br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-keyword">super</span> E&gt; c)</span> </span>&#123;<br>         ...<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>我们再看一下java.util.AbstractList的remove()方法，这样我们就明白为啥会抛出UnsupportedOperationException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Arrays</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正确使用equals方法</title>
    <link href="/blog/2021/03/13/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8equals%E6%96%B9%E6%B3%95/"/>
    <url>/blog/2021/03/13/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8equals%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p><h2 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</span><br>String str = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;SnailClimb&quot;</span>)) &#123;<br>  ...<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  ..<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上面的程序会抛出空指针异常，但是我们把第二行的条件判断语句改为下面这样的话，就不会抛出空指针异常，else 语句块得到执行。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;SnailClimb&quot;</span>.equals(str);<span class="hljs-comment">// false </span><br></code></pre></td></tr></table></figure><p>不过更推荐使用 java.util.Objects#equals(JDK7 引入的工具类)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Objects.equals(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;SnailClimb&quot;</span>);<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>我们看一下java.util.Objects#equals的源码就知道原因了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object a, Object b)</span> </span>&#123;<br>        <span class="hljs-comment">// 可以避免空指针异常。如果a==null的话此时a.equals(b)就不会得到执行，避免出现空指针异常。</span><br>        <span class="hljs-keyword">return</span> (a == b) || (a != <span class="hljs-keyword">null</span> &amp;&amp; a.equals(b));<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>每种原始类型都有默认值一样，如int默认值为 0，boolean 的默认值为 false，null 是任何引用类型的默认值，不严格的说是所有 Object 类型的默认值。</li><li>可以使用 == 或者 != 操作来比较null值，但是不能使用其他算法或者逻辑操作。在Java中null == null将返回true。</li><li>不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>equals</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中IO流分为几种</title>
    <link href="/blog/2021/03/13/Java%E4%B8%ADIO%E6%B5%81%E5%88%86%E4%B8%BA%E5%87%A0%E7%A7%8D/"/>
    <url>/blog/2021/03/13/Java%E4%B8%ADIO%E6%B5%81%E5%88%86%E4%B8%BA%E5%87%A0%E7%A7%8D/</url>
    
    <content type="html"><![CDATA[<ol><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ol><h3 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h3><p><strong>问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h3 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h3><ul><li>BIO (Blocking I/O): 同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li>NIO (New I/O): NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li>AIO (Asynchronous I/O): AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的异常处理</title>
    <link href="/blog/2021/03/13/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/blog/2021/03/13/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在 Java 中，所有的异常都有一个共同的祖先java.lang包中的 Throwable类。Throwable： 有两个重要的子类：Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p>Error（错误）:是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p><p>Exception（异常）:是程序本身可以处理的异常。Exception 类有一个重要的子类 RuntimeException。RuntimeException 异常由Java虚拟机抛出。NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）、ArithmeticException（算术运算异常，一个整数除以0时，抛出该异常）和 ArrayIndexOutOfBoundsException （下标越界异常）。</p><p>注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。</p><h2 id="Throwable类常用方法"><a href="#Throwable类常用方法" class="headerlink" title="Throwable类常用方法"></a>Throwable类常用方法</h2><p>public string getMessage():返回异常发生时的简要描述 public string toString():返回异常发生时的详细信息 public string getLocalizedMessage():返回异常对象的本地化信息。使用Throwable的子类覆盖这个方法，可以声称本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同 public void printStackTrace():在控制台上打印Throwable对象封装的异常信息</p><h2 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h2><p>try 块： 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。 catch 块： 用于处理try捕获到的异常。 finally 块： 无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return 语句时，finally语句块将在方法返回之前被执行。</p><p><strong>在以下4种特殊情况下，finally块不会被执行：</strong></p><p>在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行 在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行 程序所在的线程死亡。 关闭CPU。</p><p>注意： 当try语句和finally语句中都有return语句时，在方法返回之前，finally语句的内容将被执行，并且finally语句的返回值将会覆盖原始的返回值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> value * value;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (value == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>如果调用 f(2)，返回值将是0，因为finally语句的返回值覆盖了try语句块的返回值。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>==与equals和hashCode与equals</title>
    <link href="/blog/2021/03/12/==%E4%B8%8Eequals%E5%92%8ChashCode%E4%B8%8Eequals/"/>
    <url>/blog/2021/03/12/==%E4%B8%8Eequals%E5%92%8ChashCode%E4%B8%8Eequals/</url>
    
    <content type="html"><![CDATA[<p>== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><p>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。 情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String a = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// a 为一个引用</span><br>        String b = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// b为另一个引用,对象的内容一样</span><br>        String aa = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 放在常量池中</span><br>        String bb = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 从常量池中查找</span><br>        <span class="hljs-keyword">if</span> (aa == bb) <span class="hljs-comment">// true</span><br>            System.out.println(<span class="hljs-string">&quot;aa==bb&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a == b) <span class="hljs-comment">// false，非同一对象</span><br>            System.out.println(<span class="hljs-string">&quot;a==b&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a.equals(b)) <span class="hljs-comment">// true</span><br>            System.out.println(<span class="hljs-string">&quot;aEQb&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">42</span> == <span class="hljs-number">42.0</span>) &#123; <span class="hljs-comment">// true</span><br>            System.out.println(<span class="hljs-string">&quot;true&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。 当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</p><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><h2 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h2><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><p>为什么要有 hashCode 我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode： 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：hashCode() 的作用就是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode()在散列表中才有用，在其它情况下没用。在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><p>hashCode（）与equals（）的相关规定 如果两个对象相等，则hashcode一定也是相同的 两个对象相等,对两个对象分别调用equals方法都返回true 两个对象有相同的hashcode值，它们也不一定是相等的 因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖 hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>String和StringBuffer和StringBuilder的区别是什么</title>
    <link href="/blog/2021/03/12/String%E5%92%8CStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/blog/2021/03/12/String%E5%92%8CStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h1><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，private　final　char　value[]，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。 <strong>AbstractStringBuilder.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Appendable</span>, <span class="hljs-title">CharSequence</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>[] value;<br>    <span class="hljs-keyword">int</span> count;<br>    AbstractStringBuilder() &#123;<br>    &#125;<br>    AbstractStringBuilder(<span class="hljs-keyword">int</span> capacity) &#123;<br>        value = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[capacity];<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h1><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。　</p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><h1 id="对于三者使用的总结"><a href="#对于三者使用的总结" class="headerlink" title="对于三者使用的总结"></a>对于三者使用的总结</h1><p>操作少量的数据: 适用String 单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder 多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer</p>]]></content>
    
    
    
    <tags>
      
      <tag>StringBuffer</tag>
      
      <tag>StringBuilder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java比较两个日期相差的天数</title>
    <link href="/blog/2021/03/12/java%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%B7%AE%E7%9A%84%E5%A4%A9%E6%95%B0/"/>
    <url>/blog/2021/03/12/java%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%B7%AE%E7%9A%84%E5%A4%A9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>判断两个Date类型的日期之间的天数</p><h2 id="通过计算毫秒数判断"><a href="#通过计算毫秒数判断" class="headerlink" title="通过计算毫秒数判断"></a>通过计算毫秒数判断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    DateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    Date date = df.parse(<span class="hljs-string">&quot;2019-11-04 20:23:31&quot;</span>);<br>    <span class="hljs-keyword">long</span> days = (<span class="hljs-keyword">new</span> Date().getTime() - date.getTime()) / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span> / <span class="hljs-number">24</span>;<br>    System.out.println(days);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式主要是通过计算两个时间之间的毫秒数来判断，如果相差不超过24小时，则说明是同一天</p><h2 id="也可以通过将时分秒设置为0来通过日期判断"><a href="#也可以通过将时分秒设置为0来通过日期判断" class="headerlink" title="也可以通过将时分秒设置为0来通过日期判断"></a>也可以通过将时分秒设置为0来通过日期判断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    DateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    Date date = df.parse(<span class="hljs-string">&quot;2019-11-04 20:23:31&quot;</span>);<br>    <span class="hljs-keyword">long</span> days = <span class="hljs-keyword">new</span> Date().getTime() / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span> / <span class="hljs-number">24</span> - date.getTime() / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span> / <span class="hljs-number">24</span>;<br>    System.out.println(days);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zuul自定义过滤器</title>
    <link href="/blog/2021/03/11/Zuul%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/blog/2021/03/11/Zuul%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>**Zuul 的核心技术就是过滤器，该框架提供了 ZuulFilter 接口让开发者可以自定义过滤规则。</p><p>我们以身份检验为例，自定义 ZuulFilter 过滤器实现该功能。**</p><h2 id="创建用户服务"><a href="#创建用户服务" class="headerlink" title="创建用户服务"></a>创建用户服务</h2><p>新建名为 user-server 的项目。</p><p>添加依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- common api --&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.extlight.springcloud&lt;/groupId&gt;<br>  &lt;artifactId&gt;common-api&lt;/artifactId&gt;<br>  &lt;version&gt;$&#123;parent-version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br>  <br>&lt;!-- springmvc --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- eureka 客户端 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="application-yml："><a href="#application-yml：" class="headerlink" title="application.yml："></a>application.yml：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>    port: <span class="hljs-number">8200</span><br> <br>spring:<br>  application:<br>    name: USER<br>    <br>eureka:<br>    instance:<br>        instance-id: user-api-<span class="hljs-number">8200</span><br>        prefer-ip-address: true # 访问路径可以显示 IP<br>    client:<br>        service-url:<br>            defaultZone: http:<span class="hljs-comment">//localhost:9000/eureka/  # 注册中心访问地址</span><br></code></pre></td></tr></table></figure><h2 id="登录接口："><a href="#登录接口：" class="headerlink" title="登录接口："></a>登录接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br> <br><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, HttpServletResponse response)</span> </span>&#123;<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="hljs-string">&quot;admin&quot;</span>.equals(password)) &#123;<br><span class="hljs-comment">// 模拟生成 token，实际开发中 token 应存放在数据库或缓存中</span><br>String token = <span class="hljs-string">&quot;123456&quot;</span>;<br>Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;token&quot;</span>, token);<br>cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">10</span>);<br>response.addCookie(cookie);<br><br><span class="hljs-keyword">return</span> Result.success();<br>&#125;<br><br><span class="hljs-keyword">return</span> Result.fail(<span class="hljs-number">401</span>, <span class="hljs-string">&quot;账号或密码错误&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="user-server-启动类："><a href="#user-server-启动类：" class="headerlink" title="user-server 启动类："></a>user-server 启动类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServerApplication</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(UserServerApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建-ZuulFilter-过滤器"><a href="#创建-ZuulFilter-过滤器" class="headerlink" title="创建 ZuulFilter 过滤器"></a>创建 ZuulFilter 过滤器</h2><p>在 gateway-server 项目中，新建一个过滤器，需要继承 ZuulFilter 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ZuulFilter</span> </span>&#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否开启过滤</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldFilter</span><span class="hljs-params">()</span> </span>&#123;<br>RequestContext context = RequestContext.getCurrentContext();<br>        HttpServletRequest request = context.getRequest();<br>        <br><span class="hljs-keyword">boolean</span> flag = request.getRequestURI().contains(<span class="hljs-string">&quot;/login&quot;</span>);<br><span class="hljs-comment">// 如果是登录请求不进行过滤</span><br><span class="hljs-keyword">if</span> (flag) &#123;<br>System.out.println(<span class="hljs-string">&quot;========不执行 zuul 过滤方法=======&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;========执行 zuul 过滤方法=======&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> !flag;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤器执行内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ZuulException </span>&#123;<br><br>RequestContext context = RequestContext.getCurrentContext();<br>        HttpServletRequest request = context.getRequest();<br>        String token = request.getParameter(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-comment">// 此处模拟获取数据库或缓存中的 token</span><br>        String dbToken = <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-comment">// 此处简单检验 token</span><br>        <span class="hljs-keyword">if</span> (token == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token) || !dbToken.equals(token)) &#123;<br>        context.setSendZuulResponse(<span class="hljs-keyword">false</span>);<br>        context.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());<br>        &#125;<br>        <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤器类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">filterType</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pre&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤器执行顺序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">filterOrder</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其中，filterType-有-4-种类型："><a href="#其中，filterType-有-4-种类型：" class="headerlink" title="其中，filterType 有 4 种类型："></a>其中，filterType 有 4 种类型：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">pre： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。<br> <br>routing：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用 Apache HttpClient 或 Netfilx Ribbon 请求微服务。<br> <br>post：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。<br> <br>error：在其他阶段发生错误时执行该过滤器。<br> <br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213320401.jpeg" alt="zuul-04"></p><h2 id="运行所有项目，测试操作步骤如下："><a href="#运行所有项目，测试操作步骤如下：" class="headerlink" title="运行所有项目，测试操作步骤如下："></a>运行所有项目，测试操作步骤如下：</h2><p>请求用户服务的登录接口(<a href="http://localhost:9600/user/user/login)%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8D%E6%89%A7%E8%A1%8C">http://localhost:9600/user/user/login)，请求不执行</a> zuul 过滤方法，并且请求响应返回的 cookie 包含 token</p><p>请求订单服务的下单接口(<a href="http://localhost:9600/extlight/order/place)%EF%BC%8C%E4%BD%86%E4%B8%8D%E6%90%BA%E5%B8%A6">http://localhost:9600/extlight/order/place)，但不携带</a> token，请求需要执行 zuul 过滤方法，请求响应 401 权限不足</p><p>请求订单服务的下单接口(<a href="http://localhost:9600/extlight/order/place)%EF%BC%8C%E6%90%BA%E5%B8%A6%E4%B9%8B%E5%89%8D%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84">http://localhost:9600/extlight/order/place)，携带之前登录接口返回的</a> token，请求需要执行 zuul 过滤方法，校验通过后路由到订单服务执行之后的操作</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Zuul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea将项目提交到码云</title>
    <link href="/blog/2021/03/11/idea%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0%E7%A0%81%E4%BA%91/"/>
    <url>/blog/2021/03/11/idea%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0%E7%A0%81%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://bk.cuixiaoyan.xyz/archives/github">首先先看idea提交到github</a> 我爱写代码 嘿嘿</p><p>先下载插件<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/QQ20191105-093954@2x_1572918288442.png?x-oss-process=style/small" alt="QQ20191105-093954@2x">然后再去码云弄公匙<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213144761.png" alt="QQ20191105-094104@2x">因为我的项目之前绑定了github 所以现在再绑定码云<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213145817.png" alt="QQ20191105-094203@2x">这里设置提交的路径<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213146647.png" alt="QQ20191105-094229@2x">如下<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213146872.png" alt="QQ20191105-094243@2x">最后push的时候<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/QQ20191105-094229@2x_1572918294237.png?x-oss-process=style/small" alt="QQ20191105-094229@2x">需要选择提交到哪里 是码云还是 github<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213147586.png" alt="QQ20191105-094315@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>码云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud入门之Zuul篇</title>
    <link href="/blog/2021/03/11/SpringCloud%E5%85%A5%E9%97%A8Zuul%E7%AF%87/"/>
    <url>/blog/2021/03/11/SpringCloud%E5%85%A5%E9%97%A8Zuul%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>随着业务的扩展，微服务会不对增加，相应的其对外开放的 API 接口也势必增多，这不利于前端的调用以及不同场景下数据的返回，因此，我们通常都需要设计一个 API 网关作为一个统一的 API 入口，来组合一个或多个内部 API。</p><h2 id="API-网关使用场景"><a href="#API-网关使用场景" class="headerlink" title="API 网关使用场景"></a>API 网关使用场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">黑白名单： 实现通过 IP 地址控制请求的访问<br> <br>日志：实现访问日志的记录，进而实现日志分析，处理性能指标等<br> <br>协议适配：实现通信协议的校验、适配转换的功能<br> <br>身份认证：对请求进行身份认证<br> <br>计流限流：可以设计限流规则，记录访问流量<br> <br>路由：将请求进行内部（服务）转发<br></code></pre></td></tr></table></figure><h2 id="API-网关的实现"><a href="#API-网关的实现" class="headerlink" title="API 网关的实现"></a>API 网关的实现</h2><p>业界常用的 API 网关有很多方式，如：Spring Cloud Zuul、 Nginx、Tyk、Kong。本篇介绍的对象正是 Spring Cloud Zuul。</p><p>Zuul 是 Netflix 公司开源的一个 API 网关组件，提供了认证、鉴权、限流、动态路由、监控、弹性、安全、负载均衡、协助单点压测等边缘服务的框架。</p><p>Spring Cloud Zuul 是基于 Netflix Zuul 的微服务路由和过滤器的解决方案，也用于实现 API 网关。其中，路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入门的基础。而过滤功能是负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础。</p><p>Spring Cloud Zuul 和 Eureka 进行整合时，Zuul 将自身注册到 Eureka 服务中，同时从 Eureka 中获取其他微服务信息，以便请求可以准确的通过 Zuul 转发到具体微服务上。</p><h2 id="当前的项目列表如下："><a href="#当前的项目列表如下：" class="headerlink" title="当前的项目列表如下："></a>当前的项目列表如下：</h2><p>服务实例 端口 描述 common-api - 公用的 api，如：实体类 eureka-server 9000 注册中心（Eureka 服务端） goods-server 8081 商品服务（Eureka 客户端） goods-server-02 8082 商品服务（Eureka 客户端） goods-server-03 8083 商品服务（Eureka 客户端） order-server 8100 订单服务（Eureka 客户端） 创建一个为名 gateway-server 的 Spring Boot 项目。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- eureka 客户端 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- zuul 网关 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>    port: <span class="hljs-number">9600</span><br> <br>spring:<br>    application:<br>        name: gateway<br> <br>eureka:<br>    instance:<br>        instance-id: gateway-<span class="hljs-number">9600</span><br>        prefer-ip-address: <span class="hljs-keyword">true</span> <br>    client:<br>        service-url:<br>            defaultZone: http:<span class="hljs-comment">//localhost:9000/eureka/  # 注册中心访问地址</span><br></code></pre></td></tr></table></figure><h2 id="启动-Zuul"><a href="#启动-Zuul" class="headerlink" title="启动 Zuul"></a>启动 Zuul</h2><p>在启动类上添加 @EnableZuulProxy 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GatewayApplication</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(GatewayApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动上边的所有项目，打开 Postman 请求订单下单接口，如下图：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/zuul-01_1572832302170.gif?x-oss-process=style/small" alt="zuul-01">图中，我们首先不经过网关直接访问 order-server 项目请求地址：<a href="http://localhost:8100/order/place">http://localhost:8100/order/place</a></p><p>之后再修改成访问 gateway-server 项目的请求地址：<a href="http://localhost:9600/order/order/place">http://localhost:9600/order/order/place</a></p><p>最终，响应结果都一样。</p><p>提示：<a href="http://localhost:9600/order/order/place">http://localhost:9600/order/order/place</a> 中第一个 order 表示的是注册在 Eureka 上的订单服务名称。</p><h2 id="zuul-常用配置"><a href="#zuul-常用配置" class="headerlink" title="zuul 常用配置"></a>zuul 常用配置</h2><p>修改路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">zuul:<br>  sensitive-headers: # 全局忽略敏感头，即允许接收 cookie 等请求头信息   <br>  routes:<br>    extlight: # 任意名字，保证唯一即可<br>      path: /extlight<span class="hljs-comment">/** # 自定义，真正用到的请求地址</span><br><span class="hljs-comment">      service-id: ORDER  # 路由到的目标服务名称</span><br><span class="hljs-comment"> </span><br></code></pre></td></tr></table></figure><p>将订单服务的路由名称改成 extlight。</p><p>使用 Postman 请求下单接口，运行结果：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210311213025395.jpeg" alt="zuul-02">请求成功。</p><h2 id="禁用路由："><a href="#禁用路由：" class="headerlink" title="禁用路由："></a>禁用路由：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">zuul:<br>  ignored-patterns:<br>  - /order/order<span class="hljs-comment">/**   </span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p><a href="http://localhost:9600/order/order/place">http://localhost:9600/order/order/place</a> 无法被正常路由到订单服务，响应返回 404。</p><h2 id="路由加前缀："><a href="#路由加前缀：" class="headerlink" title="路由加前缀："></a>路由加前缀：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">zuul:<br>  prefix: /api<br></code></pre></td></tr></table></figure><p>所有请求中的 path 需要添加 api 前缀。如: <a href="http://localhost:9600/extlight/order/place">http://localhost:9600/extlight/order/place</a> 需要改成 <a href="http://localhost:9600/api/extlight/order/place%E3%80%82">http://localhost:9600/api/extlight/order/place。</a></p><h2 id="设置敏感头："><a href="#设置敏感头：" class="headerlink" title="设置敏感头："></a>设置敏感头：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">zuul:<br>  sensitive-headers: # 设置全局敏感头，如果为空，表示接收所有敏感头信息<br>或者<br>zuul:<br>  routes:<br>    extlight: # 任意名字，保证唯一即可<br>      path: /extlight<span class="hljs-comment">/** # 自定义，真正用到的请求地址</span><br><span class="hljs-comment">      service-id: ORDER  # 路由到的目标服务名称</span><br><span class="hljs-comment">      sensitive-headers: # 针对 /extlight/ 的请求设置敏感头信息</span><br><span class="hljs-comment"> </span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/cuixiaoyan/zuul">源码下载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Zuul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hystrix仪表盘</title>
    <link href="/blog/2021/03/10/Hystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/"/>
    <url>/blog/2021/03/10/Hystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<p><strong>除了服务熔断、降级的功能外，Hystrix 还提供了准及时的调用监控。 Hystrix 会持续地记录所有通过 Hystrix 发起的请求的执行信息，并以统计报表和图形方式展示给用户。</strong></p><h2 id="配置被监控方"><a href="#配置被监控方" class="headerlink" title="配置被监控方"></a>配置被监控方</h2><p>order-server 项目中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>修改 application.yml，开放端口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="配置监控方"><a href="#配置监控方" class="headerlink" title="配置监控方"></a>配置监控方</h2><p>新建一个名为 hystrix-dashboard 项目，添加如下依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- hystrix-dashboard --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>新建 application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">9300</span><br>  <br>spring:<br>  application:<br>    name: Hystrix-Dashboard  <br></code></pre></td></tr></table></figure><p>开启监控功能 在启动类上添加 @EnableHystrixDashboard 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableHystrixDashboard</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HystrixdashboardApplication</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(HystrixdashboardApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动,浏览器访问: <a href="http://localhost:9300/hystrix![hystrix-06](https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210310202348565.jpeg)">http://localhost:9300/hystrix![hystrix-06](https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210310202348565.jpeg)</a></p><h2 id="监控设置"><a href="#监控设置" class="headerlink" title="监控设置"></a>监控设置</h2><p>我们以监控 order-server 为例，在监控界面添加监控信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"># 需要监控的服务地址<br>http:<span class="hljs-comment">//localhost:8100/actuator/hystrix.stream</span><br> <br>delay: 请求间隔时间<br> <br>title: 监控名称<br> <br>点击 monitor stream<br> <br>批量访问 order-server 服务的下单接口。<br></code></pre></td></tr></table></figure><p>最终效果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210310202348764.jpeg" alt="hystrix-07-01">通过批量访问下单接口，发现图中实心圆和曲线发生了变化。那我们如何根据这两个图形查看监控信息呢？</p><p>实心圆：通过颜色的变化代表实例的健康程度，健康度从绿色&gt;黄色&gt;橙色&gt;红色递减。其大小也会根据实例的请求流量发生变化，流量越大实心圆越大。</p><p>曲线：用来记录间隔时间内流量的相对变化，通常可以观察到流量的上升和下降趋势。 <a href="https://github.com/cuixiaoyan/hystrix">源码下载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Hystrix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批量去除文件,文件夹的名称中指定的字符</title>
    <link href="/blog/2021/03/10/%E6%89%B9%E9%87%8F%E5%8E%BB%E9%99%A4%E6%96%87%E4%BB%B6,%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%90%8D%E7%A7%B0%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <url>/blog/2021/03/10/%E6%89%B9%E9%87%8F%E5%8E%BB%E9%99%A4%E6%96%87%E4%BB%B6,%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%90%8D%E7%A7%B0%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p><strong>效果如下</strong></p><h2 id="执行前"><a href="#执行前" class="headerlink" title="执行前"></a>执行前</h2><p><img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/20191029095253196_1572490020008.png?x-oss-process=style/small" alt="20191029095253196"></p><h2 id="执行后"><a href="#执行后" class="headerlink" title="执行后"></a>执行后</h2><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210310202248495.png" alt="20191029095319557">完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.we;<br><span class="hljs-keyword">import</span> java.io.File;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量去除文件、文件夹的名称中指定的字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> WalterWen</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClearAdvert</span> </span>&#123;<br><span class="hljs-comment">//AD为广告内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD = <span class="hljs-string">&quot;要去除的字符&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> fileNum = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//文件夹路径名</span><br>        String rootPath = <span class="hljs-string">&quot;指定的文件（夹）路径&quot;</span>;<br>        scanFile(rootPath);<br>        System.out.println(<span class="hljs-string">&quot;共去广告&quot;</span> + fileNum + <span class="hljs-string">&quot;个文件&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 递归调用查找指定文件夹下所有文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">scanFile</span><span class="hljs-params">(String path)</span> </span>&#123;<br>        File dirFile = reName(<span class="hljs-keyword">new</span> File(path));<br>        System.out.println(dirFile.getAbsolutePath());<br>        <span class="hljs-keyword">if</span> (dirFile.isDirectory())&#123;<br>            String[] fileList = dirFile.list();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fileList.length; i++) &#123;<br>                path = dirFile.getAbsolutePath() + <span class="hljs-string">&quot;\\&quot;</span> + fileList[i];<br>                scanFile(path);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title">reName</span><span class="hljs-params">(File oldFile)</span> </span>&#123;<br>        <span class="hljs-comment">//不带路径的文件名</span><br>        String originalName = oldFile.getName();        <br>        <span class="hljs-keyword">if</span> (originalName.contains(AD)) &#123;<br>            <span class="hljs-comment">//带路径的文件名</span><br>            String oldFilePath = oldFile.getAbsolutePath();<span class="hljs-comment">// 目录路径</span><br>            String newFilePath = oldFilePath.replace(AD, <span class="hljs-string">&quot;&quot;</span>);<br>            File newFile = <span class="hljs-keyword">new</span> File(newFilePath);<br>            <span class="hljs-keyword">if</span> (oldFile.renameTo(newFile)) &#123;<br>                fileNum++;<br>                <span class="hljs-keyword">return</span> newFile;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> oldFile;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/quzifu#%E6%89%A7%E8%A1%8C%E5%89%8D">执行前</a><a href="https://bk.cuixiaoyan.xyz/archives/quzifu#%E6%89%A7%E8%A1%8C%E5%90%8E">执行后</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud入门之Hystrix篇</title>
    <link href="/blog/2021/03/10/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BHystrix%E7%AF%87/"/>
    <url>/blog/2021/03/10/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BHystrix%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在微服务应用中，服务存在一定的依赖关系，如果某个目标服务调用慢或者有大量超时造成服务不可用，间接导致其他的依赖服务不可用，最严重的可能会阻塞整条依赖链，最终导致业务系统崩溃（又称雪崩效应）。</p><p>上述的问题将是本篇需要解决的问题。</p><h2 id="请求熔断"><a href="#请求熔断" class="headerlink" title="请求熔断"></a>请求熔断</h2><p>断路器是一种开关设置，当某个服务单元发生故障之后，通过断路器的故障监控，向调用方返回一个符合预期的服务降级处理（fallback），而不是长时间的等待或者抛出调用方无法处理的异常，这样保证了服务调用方的线程不会长时间被占用，从而避免了故障在分布式系统的蔓延乃至崩溃。</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>fallback 相当于是降级操作。对于查询操作, 我们可以实现一个 fallback 方法, 当请求后端服务出现异常的时候, 可以使用 fallback 方法返回的值。 fallback 方法的返回值一般是设置的默认值或者来自缓存，告知后面的请求服务不可用了，不要再请求了。</p><h2 id="请求熔断和服务降级区别"><a href="#请求熔断和服务降级区别" class="headerlink" title="请求熔断和服务降级区别"></a>请求熔断和服务降级区别</h2><p>相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">目标一致：为了防止系统崩溃而实施的一种防御手段<br> <br>表现形式一致：当请求目标在一定时间内无响应时，返回或执行默认响应内容<br></code></pre></td></tr></table></figure><p>不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">触发条件不同：下游服务出现故障触发请求熔断。系统负荷超过阈值触发服务降级。<br> <br>管理目标层次不同：请求熔断针对所有微服务。服务降级针对整个系统中的外围服务。<br></code></pre></td></tr></table></figure><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>Spring Cloud Hystrix 实现了断路器、线程隔离等一系列服务保护功能。它是基于 Netflix 的开源框架 Hystrix 实现的，该框架的目的在于通过控制访问远程系统、服务和第三方库节点，从而对延迟和故障提供更强大的容错能力。</p><p>Hystrix 具备服务熔断、服务降级、线程和信号隔离、请求缓存、请求合并以及服务监控的能力。</p><h1 id="请求熔断实战"><a href="#请求熔断实战" class="headerlink" title="请求熔断实战"></a>请求熔断实战</h1><p>现在的项目列表如下： 服务实例 端口 描述 common-api - 公用的 api，如：实体类 eureka-server 9000 注册中心（Eureka 服务端） goods-server 8081 商品服务（Eureka 客户端） goods-server-02 8082 商品服务（Eureka 客户端） goods-server-03 8083 商品服务（Eureka 客户端） order-server 8100 订单服务（Eureka 客户端） 在 order-server 项目中：</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- hystrix --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="设置熔断策略"><a href="#设置熔断策略" class="headerlink" title="设置熔断策略"></a>设置熔断策略</h2><p>我们来修改获取下订单的方法，在 placeOrder 方法上加 @HystrixCommand 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span></span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-comment">//@Autowired</span><br><span class="hljs-comment">//private GoodsServiceClient goodsServiceClient;</span><br> <br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;defaultByPlaceOrder&quot;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">placeOrder</span><span class="hljs-params">(Order order)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br>Result result = <span class="hljs-keyword">this</span>.restTemplate.getForObject(<span class="hljs-string">&quot;http://GOODS/goods/goodsInfo/&quot;</span> + order.getGoodsId(), Result.class);<br><br><span class="hljs-comment">//Result result = this.goodsServiceClient.goodsInfo(order.getGoodsId());</span><br><br><span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span> &amp;&amp; result.getCode() == <span class="hljs-number">200</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;=====下订单====&quot;</span>);<br>System.out.println(result.getData());<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(result.getMsg());<br>&#125;<br>&#125;<br><br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">defaultByPlaceOrder</span><span class="hljs-params">(Order order)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;商品服务系统异常&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当调用商品服务超时或出现异常时，Hystrix 会调用 @HystrixCommand 中指定的 fallbackMethod 方法获取返回值或执行异常处理。</p><p>注意：fallbackMethod 方法要求与正常方法有相同的入参和回参。</p><h2 id="启动熔断功能"><a href="#启动熔断功能" class="headerlink" title="启动熔断功能"></a>启动熔断功能</h2><p>在启动类上添加 @EnableCircuitBreaker 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServerApplication</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(OrderServerApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="熔断测试"><a href="#熔断测试" class="headerlink" title="熔断测试"></a>熔断测试</h2><p>我们首先演示没有开启熔断的功能，即先把上边的 @EnableCircuitBreaker 注解进行注释。 启动好所有项目，使用 Postman 请求 order-server 进行下单操作，运行结果如下：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/hystrix-03-02_1572403574165.gif?x-oss-process=style/small" alt="hystrix-03-02">当我们请求发送的 goodsId 的商品不存在，服务提供方抛会异常，调用方无法处理，因此只能展示图中的异常信息。</p><p>下面，我们再将 @EnableCircuitBreaker 注解的注释放开，运行结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210310202116369.jpeg" alt="hystrix-04-02"></p><p>从图中可知，虽然请求了一个 goodsId 不存在的商品，但是调用方（order-server）开启了熔断机制，执行默认方法，从而使接口能正常通信而不是抛出调用方不可处理的异常导致整个系统不能正常运行。</p><p>看到这里，或许会有读者产生一个疑问，如果类中定义 N 个方法，是不是意味着同时也要定义 N 个异常处理的方法呢，答案是否定的。</p><p>Hystrix 还提供了 @DefaultProperties 统一处理请求熔断，在该注解上设置 defaultFallback 属性值，即熔断开启后要执行的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@DefaultProperties(defaultFallback = &quot;defaultByHystrix&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span></span>&#123;<br><br><span class="hljs-comment">//@Autowired</span><br><span class="hljs-comment">//private RestTemplate restTemplate;</span><br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> GoodsServiceClient goodsServiceClient;<br> <br><span class="hljs-meta">@HystrixCommand</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">placeOrder</span><span class="hljs-params">(Order order)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br><span class="hljs-comment">//Result result = this.restTemplate.getForObject(&quot;http://GOODS/goods/goodsInfo/&quot; + order.getGoodsId(), Result.class);</span><br><br>Result result = <span class="hljs-keyword">this</span>.goodsServiceClient.goodsInfo(order.getGoodsId());<br><br><span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span> &amp;&amp; result.getCode() == <span class="hljs-number">200</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;=====下订单====&quot;</span>);<br>System.out.println(result.getData());<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(result.getMsg());<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">defaultByHystrix</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;商品服务系统异常&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：defaultFallback 定义的方法必须是无参的。 <a href="https://github.com/cuixiaoyan/hystrix">源码下载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java解决Emoji表情过滤问题</title>
    <link href="/blog/2021/03/07/Java%E8%A7%A3%E5%86%B3Emoji%E8%A1%A8%E6%83%85%E8%BF%87%E6%BB%A4%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2021/03/07/Java%E8%A7%A3%E5%86%B3Emoji%E8%A1%A8%E6%83%85%E8%BF%87%E6%BB%A4%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>问题：</strong></p><p>Emoji表情从三方数据中获取没有过滤，导致存入DB的时候报错。</p><p><strong>原因：</strong></p><p>UTF-8编码有可能是两个、三个、四个字节。Emoji表情是4个字节，而Mysql的utf8编码最多3个字节，所以数据插不进去。</p><p><strong>解决方案：</strong></p><p>1.将已经建好的表也转换成utf8mb4，这个方法不可行，有的时候就不灵了。</p><p>2，写个工具类：过滤掉emoji表情符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmojiFilter</span> </span>&#123;<br>   <br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmojiCharacter</span><span class="hljs-params">(<span class="hljs-keyword">char</span> codePoint)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (codePoint == <span class="hljs-number">0x0</span>) || (codePoint == <span class="hljs-number">0x9</span>) || (codePoint == <span class="hljs-number">0xA</span>)<br>                || (codePoint == <span class="hljs-number">0xD</span>)<br>                || ((codePoint &gt;= <span class="hljs-number">0x20</span>) &amp;&amp; (codePoint &lt;= <span class="hljs-number">0xD7FF</span>))<br>                || ((codePoint &gt;= <span class="hljs-number">0xE000</span>) &amp;&amp; (codePoint &lt;= <span class="hljs-number">0xFFFD</span>))<br>                || ((codePoint &gt;= <span class="hljs-number">0x10000</span>) &amp;&amp; (codePoint &lt;= <span class="hljs-number">0x10FFFF</span>));<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤emoji 或者 其他非文字类型的字符</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> source</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">filterEmoji</span><span class="hljs-params">(String source)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(source)) &#123;<br>            <span class="hljs-keyword">return</span> source;<br>        &#125;<br>        StringBuilder buf = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> len = source.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">char</span> codePoint = source.charAt(i);<br>            <span class="hljs-keyword">if</span> (isEmojiCharacter(codePoint)) &#123;<br>                <span class="hljs-keyword">if</span> (buf == <span class="hljs-keyword">null</span>) &#123;<br>                    buf = <span class="hljs-keyword">new</span> StringBuilder(source.length());<br>                &#125;<br>                buf.append(codePoint);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (buf == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> source;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (buf.length() == len) &#123;<br>                buf = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">return</span> source;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> buf.toString();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>使用别人封装的一个类，专门解决emoji问题的。这个在git上有开源的代码。在pom工程中引入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;com.vdurmont&lt;/groupId&gt;<br>&lt;artifactId&gt;emoji-java&lt;/artifactId&gt;<br>&lt;version&gt;4.0.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>直接就可以在代码中使用了。</p><p>EmojiParser.removeAllEmojis(str) 这个方法可以过滤掉字符串内的emoji表情。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud入门之Feign篇</title>
    <link href="/blog/2021/03/07/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BFeign%E7%AF%87/"/>
    <url>/blog/2021/03/07/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BFeign%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>上面介绍了 Ribbon 使用负载均衡调用微服务，但存在一个问题：消费端每个请求方法中都需要拼接请求服务的 URL 地址，存在硬编码问题且不符合面向对象编程思想。如果服务名称发生变化，消费端也需要跟着修改。</p><p>本篇文章将介绍 Feign 来解决上边的问题。</p><p>Feign 是一个声明式的 Web Service 客户端。使用 Feign 能让编写 Web Service 客户端更加简单，同时支持与Eureka、Ribbon 组合使用以支持负载均衡。</p><p>Spring Cloud 对 Feign 进行了封装，使其支持了 Spring MVC 标准注解和 HttpMessageConverters。</p><p>Feign 的使用方法是定义一个接口，然后在其上边添加 @FeignClient 注解。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在 common-api 和 user-web 项目中添加依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value=&quot;USER-API&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserFeignService</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/provider/user/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 @FeignClient 注解指定调用的微服务名称，封装了调用 USER-API 的过程，作为消费方调用模板。</p><h2 id="修改服务消费方"><a href="#修改服务消费方" class="headerlink" title="修改服务消费方"></a>修改服务消费方</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserFeignService userFeignService;<br><br><span class="hljs-meta">@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 使用 Feign 封装的模板</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.userFeignService.get(id);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接使用 Feign 封装模板调用服务方，从而实现面向对象编程。</p><h2 id="启动-Feign-功能"><a href="#启动-Feign-功能" class="headerlink" title="启动 Feign 功能"></a>启动 Feign 功能</h2><p>在启动类上添加 @EnableEeignClients 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">@<span class="hljs-meta">@EnableFeignClients(basePackages=&#123;&quot;com.extlight.springcloud&quot;&#125;)</span><br><span class="hljs-meta">@ComponentScan(&quot;com.extlight.springcloud&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerApplication</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(ConsumerApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开浏览器访问 user-web 项目，请求结果如下图：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/feign_1571967712084.jpg?x-oss-process=style/small" alt="feign"><a href="https://github.com/cuixiaoyan/feign">源码下载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程容易产生的40个问题汇总</title>
    <link href="/blog/2021/03/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%B9%E6%98%93%E4%BA%A7%E7%94%9F%E7%9A%8440%E4%B8%AA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/blog/2021/03/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%B9%E6%98%93%E4%BA%A7%E7%94%9F%E7%9A%8440%E4%B8%AA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>这些多线程的问题，有些来源于各大网站、有些来源于自己的思考。可能有些问题网上有、可能有些问题对应的答案也有、也可能有些各位网友也都看过，但是本文写作的重心就是所有的问题都会按照自己的理解回答一遍，不会去看网上的答案，因此可能有些问题讲的不对，能指正的希望大家不吝指教。</strong></p><p>40个问题汇总</p><p>1、多线程有什么用？</p><p>一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所以然”的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：</p><p>（1）发挥多核CPU的优势</p><p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。</p><p>（2）防止阻塞</p><p>从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。</p><p>（3）便于建模</p><p>这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p><p>2、创建线程的方式</p><p>比较常见的一个问题了，一般就是两种：</p><p>（1）继承Thread类</p><p>（2）实现Runnable接口</p><p>至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，面向接口编程也是设计模式6大原则的核心。</p><p>3、start()方法和run()方法的区别</p><p>只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。</p><p>4、Runnable接口和Callable接口的区别</p><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p><p>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p><p>5、CyclicBarrier和CountDownLatch的区别</p><p>两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p><p>（1）CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</p><p>（2）CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</p><p>（3）CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</p><p>6、Volatile关键字的作用</p><p>一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：</p><p>（1）多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</p><p>（2）代码底层执行不像我们看到的高级语言—-Java程序这么简单，它的执行是Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C代码–&gt;C/C代码被编译成汇编语言–&gt;和硬件电路交互，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率</p><p>从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。</p><p>7、什么是线程安全 又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。</p><p>这个问题有值得一提的地方，就是线程安全也是有几个级别的：</p><p>（1）不可变</p><p>像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用</p><p>（2）绝对线程安全</p><p>不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet</p><p>（3）相对线程安全</p><p>相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是fail-fast机制。</p><p>（4）线程非安全</p><p>这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类</p><p>8、Java中如何获取到线程dump文件</p><p>死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：</p><p>（1）获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java</p><p>（2）打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid</p><p>另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈，</p><p>9、一个线程如果出现了运行时异常会怎么样</p><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p><p>10、如何在两个线程之间共享数据</p><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p><p>11、sleep方法和wait方法有什么区别</p><p>这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器</p><p>12、生产者消费者模型的作用是什么</p><p>这个问题很理论，但是很重要：</p><p>（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用 （2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p><p>13、ThreadLocal有什么用</p><p>简单说ThreadLocal就是一种以空间换时间的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了</p><p>14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</p><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p><p>15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</p><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p><p>16、为什么要使用线程池</p><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p><p>17、怎么检测一个线程是否持有对象监视器</p><p>我也是在网上看到一道多线程面试题才知道有方法可以判断某个线程是否持有对象监视器：Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着“某条线程”指的是当前线程。</p><p>18、synchronized和ReentrantLock的区别</p><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：</p><p>（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁</p><p>（2）ReentrantLock可以获取各种锁的信息</p><p>（3）ReentrantLock可以灵活地实现多路通知</p><p>另外，二者的锁机制其实也是不一样的。ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word，这点我不能确定。</p><p>19、ConcurrentHashMap的并发度是什么</p><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p><p>20、ReadWriteLock是什么 首先明确一下，不是说ReentrantLock不好，只是ReentrantLock某些时候有局限。如果使用ReentrantLock，可能本身是为了防止线程A在写数据、线程B在读数据造成的数据不一致，但这样，如果线程C在读数据、线程D也在读数据，读数据是不会改变数据的，没有必要加锁，但是还是加锁了，降低了程序的性能。</p><p>因为这个，才诞生了读写锁ReadWriteLock。ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</p><p>21、FutureTask是什么</p><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p><p>22、Linux环境下如何查找哪个线程使用CPU最长 ‘</p><p>这是一个比较偏实践的问题，这种问题我觉得挺有意义的。可以这么做：</p><p>（1）获取项目的pid，jps或者ps -ef | grep java，这个前面有讲过</p><p>（2）top -H -p pid，顺序不能改变</p><p>这样就可以打印出当前的项目，每条线程占用CPU时间的百分比。注意这里打出的是LWP，也就是操作系统原生线程的线程号，我笔记本山没有部署Linux环境下的Java工程，因此没有办法截图演示，网友朋友们如果公司是使用Linux环境部署项目的话，可以尝试一下。</p><p>使用”top -H -p pid”+”jps pid”可以很容易地找到某条占用CPU高的线程的线程堆栈，从而定位占用CPU高的原因，一般是因为不当的代码操作导致了死循环。</p><p>最后提一点，”top -H -p pid”打出来的LWP是十进制的，”jps pid”打出来的本地线程号是十六进制的，转换一下，就能定位到占用CPU高的线程的当前线程堆栈了。</p><p>23、Java编程写一个会导致死锁的程序</p><p>第一次看到这个题目，觉得这是一个非常好的问题。很多人都知道死锁是怎么一回事儿：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。当然也仅限于此了，问一下怎么写一个死锁的程序就不知道了，这种情况说白了就是不懂什么是死锁，懂一个理论就完事儿了，实践中碰到死锁的问题基本上是看不出来的。</p><p>真正理解什么是死锁，这个问题其实不难，几个步骤：</p><p>（1）两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；</p><p>（2）线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁</p><p>（3）线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的</p><p>这样，线程1″睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。代码就不写了，占的篇幅有点多，Java多线程：死锁这篇文章里面有，就是上面步骤的代码实现。</p><p>24、怎么唤醒一个阻塞的线程</p><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p><p>25、不可变对象对多线程有什么帮助</p><p>前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。</p><p>26、什么是多线程的上下文切换</p><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p><p>27、如果你提交任务时，线程池队列已满，这时会发生什么</p><p>如果你使用的LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务；如果你使用的是有界队列比方说ArrayBlockingQueue的话，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy。</p><p>28、Java中用到的线程调度算法是什么</p><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p><p>29、Thread.sleep(0)的作用是什么</p><p>这个问题和上面那个问题是相关的，我就连在一起了。由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。</p><p>30、什么是自旋</p><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行地非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p><p>31、什么是Java内存模型</p><p>Java内存模型定义了一种多线程访问Java内存的规范。Java内存模型要完整讲不是这里几句话能说清楚的，我简单总结一下Java内存模型的几部分内容：</p><p>（1）Java内存模型将内存分为了主内存和工作内存。类的状态，也就是类之间共享的变量，是存储在主内存中的，每次Java线程用到这些主内存中的变量的时候，会读一次主内存中的变量，并让这些内存在自己的工作内存中有一份拷贝，运行自己线程代码的时候，用到这些变量，操作的都是自己工作内存中的那一份。在线程代码执行完毕之后，会将最新的值更新到主内存中去</p><p>（2）定义了几个原子操作，用于操作主内存和工作内存中的变量</p><p>（3）定义了volatile变量的使用规则</p><p>（4）happens-before，即先行发生原则，定义了操作A必然先行发生于操作B的一些规则，比如在同一个线程内控制流前面的代码一定先行发生于控制流后面的代码、一个释放锁unlock的动作一定先行发生于后面对于同一个锁进行锁定lock的动作等等，只要符合这些规则，则不需要额外做同步措施，如果某段代码不符合所有的happens-before规则，则这段代码一定是线程非安全的</p><p>32、什么是CAS</p><p>CAS，全称为Compare and Set，即比较-设置。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p><p>33、什么是乐观锁和悲观锁</p><p>（1）乐观锁：就像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-设置这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。</p><p>（2）悲观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。</p><p>34、什么是AQS</p><p>简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。</p><p>如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，ReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。</p><p>AQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。</p><p>35、单例模式的线程安全性</p><p>老生常谈的问题了，首先要说的是单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。单例模式有很多种的写法，我总结一下：</p><p>（1）饿汉式单例模式的写法：线程安全</p><p>（2）懒汉式单例模式的写法：非线程安全</p><p>（3）双检锁单例模式的写法：线程安全</p><p>36、Semaphore有什么作用</p><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p><p>37、Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</p><p>这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会引发线程安全问题，这很好理解，但是size()方法明明只有一条语句，为什么还要加锁？</p><p>关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点：</p><p>（1）同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性</p><p>（2）CPU执行代码，执行的不是Java代码，这点很关键，一定得记住。Java代码最终是被翻译成汇编代码执行的，汇编代码才是真正可以和硬件电路交互的代码。即使你看到Java代码只有一行，甚至你看到Java代码编译之后生成的字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个。一句”return count”假设被翻译成了三句汇编语句执行，完全可能执行完第一句，线程就切换了。</p><p>38、线程类的构造方法、静态块是被哪个线程调用的</p><p>这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p><p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p><p>（1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</p><p>（2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</p><p>39、同步方法和同步块，哪个是更好的选择 同步块，这意味着同步块之外的代码是异步执行的，这比同步整个方法更提升代码的效率。请知道一条原则：同步的范围越少越好。</p><p>借着这一条，我额外提一点，虽说同步的范围越少越好，但是在Java虚拟机中还是存在着一种叫做锁粗化的优化方法，这种方法就是把同步范围变大。这是有用的，比方说StringBuffer，它是一个线程安全的类，自然最常用的append()方法是一个同步方法，我们写代码的时候会反复append字符串，这意味着要进行反复的加锁-&gt;解锁，这对性能不利，因为这意味着Java虚拟机在这条线程上要反复地在内核态和用户态之间进行切换，因此Java虚拟机会将多次append方法调用的代码进行一个锁粗化的操作，将多次的append的操作扩展到append方法的头尾，变成一个大的同步块，这样就减少了加锁–&gt;解锁的次数，有效地提升了代码执行的效率。</p><p>40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</p><p>这是我在并发编程网上看到的一个问题，把这个问题放在最后一个，希望每个人都能看到并且思考一下，因为这个问题非常好、非常实际、非常专业。关于这个问题，个人看法是：</p><p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p><p>（2）并发不高、任务执行时间长的业务要区分开看：</p><p>a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</p><p>b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</p><p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ribbon负载均衡</title>
    <link href="/blog/2021/03/02/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/blog/2021/03/02/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<p>策略规则 Ribbon 提供 IRule 接口，该接口定义了如何访问服务的策略，以下是该接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>) RoundRobinRule：轮询，默认使用的规则；<br><span class="hljs-number">2</span>) RandomRule：随机；<br><span class="hljs-number">3</span>) AvailabilityFilteringRule：先过滤由于多次访问故障而处于断路器跳闸状态以及并发连接数量超过阀值得服务，然后从剩余服务列表中按照轮询策略进行访问；<br><span class="hljs-number">4</span>) WeightedResponseTimeRule：根据平均响应时间计算所有的权重，响应时间越快服务权重越有可能被选中；<br><span class="hljs-number">5</span>) RetryRule：先按照 RoundRobinRule 策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用服务；<br><span class="hljs-number">6</span>) BestAvailableRule：先过滤由于多次访问故障而处于断路器跳闸状态的服务，然后选择并发量最小的服务；<br><span class="hljs-number">7</span>) ZoneAvoidanceRule：判断 server 所在区域的性能和 server 的可用性来选择服务器。<br></code></pre></td></tr></table></figure><p>策略使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestConfiguration</span> </span>&#123;<br> <br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">testRule</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>手动创建负载均衡规则对象，本次测试使用的策略是随机。</p><p>启动 user-consumer 项目使用浏览器访问接口，运行结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210302204744717.jpeg" alt="ribbon-02"></p><p>由图可知，随机策略已生效，负载均衡的策略由轮询变成了随机。 <a href="https://github.com/cuixiaoyan/ribbon">源码下载</a></p>]]></content>
    
    
    <categories>
      
      <category>Ribbon</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Ribbon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud入门之Ribbon篇</title>
    <link href="/blog/2021/03/02/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BRibbon%E7%AF%87/"/>
    <url>/blog/2021/03/02/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BRibbon%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>本篇文章将介绍如何使用 Ribbon 完成发现服务的调用以及其负载均衡的规则的使用。 Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套客户端负载均衡工具，其主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。</p><p>其运行原理如下图：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/ribbon_1571707503910.png?x-oss-process=style/small" alt="ribbon">Ribbon 运行时分成 2 个步骤： 1、先选择在同一个区域负载较少的 EurekaServer; 2、 再根据用户指定的策略，在从 EurekaServer 中获取注册列表中的服务信息进行调用。</p><p>添加依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>其实，添加 Eureka 包时，会自动添加 Ribbon 依赖包。 修改请求类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestConfiguration</span> </span>&#123;<br> <br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正如上文介绍的，Ribbon 是客户端负载均衡工具，所以在 getRestTemplate 方法上添加 @LoadBalanced 注解实现负载均衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-comment">//@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br><span class="hljs-comment">//public User get(@PathVariable(&quot;id&quot;) Integer id) throws Exception &#123;</span><br><span class="hljs-comment">//// 没有使用 Eureka 时，uri 为消息提供者的地址，需要指定 ip 和 端口</span><br><span class="hljs-comment">//return restTemplate.getForObject(new URI(&quot;http://localhost:8081/provider/user/get/&quot; + id), User.class);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//@Autowired</span><br><span class="hljs-comment">//private DiscoveryClient client;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br><span class="hljs-comment">//public User get(@PathVariable(&quot;id&quot;) Integer id) throws Exception &#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//List&lt;ServiceInstance&gt; list = this.client.getInstances(&quot;USER-API&quot;);</span><br><span class="hljs-comment">//String uri = &quot;&quot;;</span><br><span class="hljs-comment">//    for (ServiceInstance instance : list) &#123;</span><br><span class="hljs-comment">//        if (instance.getUri() != null &amp;&amp; !&quot;&quot;.equals(instance.getUri().toString())) &#123;</span><br><span class="hljs-comment">//        uri = instance.getUri().toString();</span><br><span class="hljs-comment">//        break;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//return restTemplate.getForObject(uri + &quot;/provider/user/get/&quot; + id, User.class);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-meta">@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 使用 Eureka + Ribbon 后，uri 填写服务名称即可</span><br><span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://USER-API/provider/user/get/&quot;</span> + id, User.class);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改 DiscoveryClient 相关代码，使用 USER-API 服务名称作为请求 URL。</p><p>在启动类上将 @EnableDiscoveryClient 替换成 @EnableEurekaClient 注解。 完成上边 4 个操作后，启动 user-consumer 项目使用浏览器访问接口，运行结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210302204653022.jpeg" alt="ribbon-01">由图可知，Ribbon 默认使用负载均衡的策略是轮询，对服务进行调用。 <a href="https://github.com/cuixiaoyan/ribbon">源码下载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Ribbon</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka集群</title>
    <link href="/blog/2021/03/02/Eureka%E9%9B%86%E7%BE%A4/"/>
    <url>/blog/2021/03/02/Eureka%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>Eureka 作为注册中心，保存了系统服务的相关信息，如果注册中心挂掉，那么系统就瘫痪了。因此，对 Eureka 做集群实现高可用是必不可少的。</p><p>本次测试使用一台机器部署 Eureka 集群，通过名字和端口区分不同的 eureka 服务。 Eureka 名称 端口号 eureka01 9001 eureka02 9002 由于使用一台机器，使用两个名称还需要修改 C:\Windows\System32\drivers\etc 下的 host 文件，添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  eureka01<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  eureka02<br></code></pre></td></tr></table></figure><p>application.yml 文件需要进行如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>    port: <span class="hljs-number">9001</span><br>    <br>eureka:<br>    instance:<br>        hostname: eureka01   # eureka 实例名称<br>    client:<br>        register-with-eureka: false # 不向注册中心注册自己<br>        fetch-registry: false       # 表示自己就是注册中心<br>        service-url:<br>            defaultZone: http:<span class="hljs-comment">//eureka01:9001/eureka/,http://eureka02:9002/eureka/</span><br></code></pre></td></tr></table></figure><p>两个 eureka 服务实例的配置文件修改方式类似，将名称和端口进行修改即可。 服务注册的项目中，将 eureka.client.service-url.defaultZone 改成集群的 url 即可。 启动效果如下图：<img src="https://cuixiaoyande.oss-cn-shanghai.aliyuncs.com/springcloud-eureka-05_1571621779024.jpg?x-oss-process=style/small" alt="springcloud-eureka-05"></p><p><strong>Eureka 与 Zookeeper 的区别</strong> 两者都可以充当注册中心的角色，且可以集群实现高可用，相当于小型的分布式存储系统。</p><h2 id="CAP-理论"><a href="#CAP-理论" class="headerlink" title="CAP 理论"></a>CAP 理论</h2><p>CAP 分别为 consistency(强一致性)、availability(可用性) 和 partition toleranc(分区容错性)。</p><p>理论核心：一个分布式系统不可能同时很好的满足一致性、可用性和分区容错性这三个需求。因此，根据 CAP 原理将 NoSQL 数据库分成满足 CA 原则、满足 CP 原则和满足 AP 原则三大类： <strong>CA：单点集群，满足一致性，可用性的系统，通常在可扩展性上不高 CP: 满足一致性，分区容错性的系统，通常性能不是特别高 AP: 满足可用性，分区容错性的系统，通过对一致性要求较低</strong> 简单的说：CAP 理论描述在分布式存储系统中，最多只能满足两个需求。</p><h2 id="Zookeeper-保证-CP"><a href="#Zookeeper-保证-CP" class="headerlink" title="Zookeeper 保证 CP"></a>Zookeeper 保证 CP</h2><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟前的注册信息，但不能接受服务直接挂掉不可用了。因此，服务注册中心对可用性的要求高于一致性。</p><p>但是，zookeeper 会出现一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新进行 leader 选举。问题在于，选举 leader 的时间较长，30 ~ 120 秒，且选举期间整个 zookeeper 集群是不可用的，这期间会导致注册服务瘫痪。在云部署的环境下，因网络问题导致 zookeeper 集群失去 master 节点的概率较大，虽然服务能最终恢复，但是漫长的选举时间导致注册服务长期不可用是不能容忍的。</p><h2 id="Eureka-保证-AP"><a href="#Eureka-保证-AP" class="headerlink" title="Eureka 保证 AP"></a>Eureka 保证 AP</h2><p>Eureka 在设计上优先保证了可用性。EurekaServer 各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和发现服务。</p><p>而 Eureka 客户端在向某个 EurekaServer 注册或发现连接失败时，会自动切换到其他 EurekaServer 节点，只要有一台 EurekaServer 正常运行，就能保证注册服务可用，只不过查询到的信息可能不是最新的。</p><p>除此之外，EurekaServer 还有一种自我保护机制，如果在 15 分钟内超过 85% 的节点都没有正常的心跳，那么 EurekaServer 将认为客户端与注册中心出现网络故障，此时会出现一下几种情况：</p><p>EurekaServer 不再从注册列表中移除因为长时间没有收到心跳而应该过期的服务</p><p>EurekaServer 仍然能够接收新服务的注册和查询请求，但不会被同步到其他节点上</p><p>当网络稳定时，当前 EurekaServer 节点新的注册信息会同步到其他节点中 因此，Eureka 可以很好的应对因网络故障导致部分节点失去联系的情况，而不会向 Zookeeper 那样是整个注册服务瘫痪。 <a href="https://github.com/cuixiaoyan/eureka">源码下载</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eureka</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 入门之Eureka 篇</title>
    <link href="/blog/2021/02/27/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BEureka%E7%AF%87/"/>
    <url>/blog/2021/02/27/SpringCloud%E5%85%A5%E9%97%A8%E4%B9%8BEureka%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Cloud 是一系列框架的有序集合。它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。</p><p>本篇介绍 Spring Cloud 入门系列中的 Eureka，实现快速入门。</p><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>Eureka 是 Netflix 的子模块，它是一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p><p>服务注册和发现对于微服务架构而言，是非常重要的。有了服务发现和注册，只需要使用服务的标识符就可以访问到服务，而不需要修改服务调用的配置文件。该功能类似于 Dubbo 的注册中心，比如 Zookeeper。</p><p>Eureka 采用了 CS 的设计架构。Eureka Server 作为服务注册功能的服务端，它是服务注册中心。而系统中其他微服务则使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接。</p><p>其运行原理如下图：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small.jpeg" alt="springcloud-eureka-01">由图可知，Eureka 的运行原理和 Dubbo 大同小异， Eureka 包含两个组件： Eureka Server 和 Eureka Client。</p><p>Eureka Server 提供服务的注册服务。各个服务节点启动后会在 Eureka Server 中注册服务，Eureka Server 中的服务注册表会存储所有可用的服务节点信息。</p><p>Eureka Client 是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询负载算法的负载均衡器。在应用启动后，向 Eureka Server 发送心跳（默认周期 30 秒）。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 会从服务注册表中将该服务节点信息移除。</p><h1 id="搭建注册中心"><a href="#搭建注册中心" class="headerlink" title="搭建注册中心"></a>搭建注册中心</h1><p>创建 Spring Boot 项目，名为 eureka-server，进行如下操作：</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencyManagement&gt;<br>  &lt;dependencies&gt;<br>  &lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>&lt;version&gt;Dalston.SR1&lt;/version&gt;<br>&lt;type&gt;pom&lt;/type&gt;<br>&lt;scope&gt;import&lt;/scope&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>&lt;version&gt;1.5.9.RELEASE&lt;/version&gt;<br>&lt;type&gt;pom&lt;/type&gt;<br>&lt;scope&gt;import&lt;/scope&gt;<br>&lt;/dependency&gt;<br>  &lt;/dependencies&gt;<br>&lt;/dependencyManagement&gt;<br>  <br>&lt;dependencies&gt;  <br>    &lt;!-- eureka 服务端 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>Spring Boot 与 SpringCloud 有版本兼容关系，如果引用版本不对应，项目启动会报错。</p><h2 id="application-yml-配置参数"><a href="#application-yml-配置参数" class="headerlink" title="application.yml 配置参数"></a>application.yml 配置参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>    port: <span class="hljs-number">9000</span><br>    <br>eureka:<br>    instance:<br>        hostname: localhost   # eureka 实例名称<br>    client:<br>        register-with-eureka: false # 不向注册中心注册自己<br>        fetch-registry: false       # 是否检索服务<br>        service-url:<br>            defaultZone: http:<span class="hljs-comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/  # 注册中心访问地址</span><br></code></pre></td></tr></table></figure><h2 id="开启注册中心功能"><a href="#开启注册中心功能" class="headerlink" title="开启注册中心功能"></a>开启注册中心功能</h2><p>在启动类上添加 @EnableEurekaServer 注解。</p><p>至此，准备工作完成，启动项目完成后，浏览器访问 <a href="http://localhost:9000/">http://localhost:9000</a> ，查看 Eureka 服务监控界面，如下图：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small.png" alt="springcloud-eureka-02">通过该网址可以查看注册中心注册服务的相关信息。当前还没有服务注册，因此没有服务信息。</p><p>补充：<a href="http://localhost:9000/">http://localhost:9000</a> 是 Eureka 监管界面访问地址，而 <a href="http://localhost:9000/eureka/">http://localhost:9000/eureka/</a> Eureka 注册服务的地址。</p><h1 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h1><p>了解 Eureka 的环境搭建后，我们需要进行实战直观的感受 Eureka 的真正作用，这样才能清楚掌握和学习 Eureka 。</p><p>我们再创建两个 Spring Boot 项目，一个名为 user-api ，用于提供接口服务，另一个名为 user-web，用于调用 user-api 接口获取数据与浏览器交互。 服务实例 端口 描述 eureka 9000 注册中心（Eureka 服务端） user-api 8081 服务提供者（Eureka 客户端） user-web 80 服务消费者，与浏览器端交互（Eureka 客户端）</p><h2 id="user-api-项目部分代码（服务提供）"><a href="#user-api-项目部分代码（服务提供）" class="headerlink" title="user-api 项目部分代码（服务提供）"></a>user-api 项目部分代码（服务提供）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- eureka 客户端 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>    port: <span class="hljs-number">8081</span><br> <br>spring:<br>    application:<br>        name: user-api<br> <br>eureka:<br>    instance:<br>        instance-id: user-api-<span class="hljs-number">8081</span><br>        prefer-ip-address: true # 访问路径可以显示 IP<br>    client:<br>        service-url:<br>            defaultZone: http:<span class="hljs-comment">//localhost:9000/eureka/  # 注册中心访问地址</span><br></code></pre></td></tr></table></figure><h2 id="服务接口："><a href="#服务接口：" class="headerlink" title="服务接口："></a>服务接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br> <br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer,User&gt; map;<br><br><span class="hljs-keyword">static</span> &#123;<br>map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;<span class="hljs-number">6</span>; i++) &#123;<br>map.put(i, <span class="hljs-keyword">new</span> User(i,<span class="hljs-string">&quot;test&quot;</span> +i , <span class="hljs-string">&quot;pwd&quot;</span> + i));<br>&#125;<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">return</span> map.get(id);<br>&#125;<br> <br>&#125;<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserService userService;<br> <br><span class="hljs-meta">@RequestMapping(&quot;/get/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.userService.getById(id);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：该 controller 是给 user-web 使用的（内部服务），不是给浏览器端调用的。</p><h2 id="开启服务注册功能："><a href="#开启服务注册功能：" class="headerlink" title="开启服务注册功能："></a>开启服务注册功能：</h2><p>在启动类上添加 @EnableEurekaClient 注解。</p><p>启动项目完成后，浏览器访问 <a href="http://localhost:9000/">http://localhost:9000</a> 查看 Eureka 服务监控界面 ，如下图：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210227094510603.jpeg" alt="springcloud-eureka-03">从图可知，user 相关服务信息已经注册到 Eureka 服务中了。</p><p>补充：在上图中，我们还看到一串红色的字体，那是因为 Eureka 启动了自我保护的机制。当 EurekaServer 在短时间内丢失过多客户端时（可能发生了网络故障），EurekaServer 将进入自我保护模式。进入该模式后，EurekaServer 会保护服务注册表中的信息不被删除。当网络故障恢复后，EurekaServer 会自动退出自我保护模式。</p><h2 id="user-web-项目部分代码（服务消费）"><a href="#user-web-项目部分代码（服务消费）" class="headerlink" title="user-web 项目部分代码（服务消费）"></a>user-web 项目部分代码（服务消费）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- eureka 客户端 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="配置参数-1"><a href="#配置参数-1" class="headerlink" title="配置参数"></a>配置参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">80</span><br> <br>spring:<br>  application:<br>    name: user-web<br>      <br>eureka:<br>  client:<br>    register-with-eureka: false # 不向注册中心注册自己<br>    fetch-registry: true        # 是否检索服务<br>    service-url:<br>      defaultZone: http:<span class="hljs-comment">//localhost:9000/eureka/  # 注册中心访问地址</span><br></code></pre></td></tr></table></figure><h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestConfiguration</span> </span>&#123;<br> <br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br>&#125;<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-comment">//@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br><span class="hljs-comment">//public User get(@PathVariable(&quot;id&quot;) Integer id) throws Exception &#123;</span><br><span class="hljs-comment">//// 没有使用 Eureka 时，uri 为消息提供者的地址，需要指定 ip 和 端口</span><br><span class="hljs-comment">//return restTemplate.getForObject(new URI(&quot;http://localhost:8081/provider/user/get/&quot; + id), User.class);</span><br><span class="hljs-comment">//&#125;</span><br> <br>    <span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DiscoveryClient client;<br><br><span class="hljs-meta">@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>List&lt;ServiceInstance&gt; list = <span class="hljs-keyword">this</span>.client.getInstances(<span class="hljs-string">&quot;USER-API&quot;</span>);<br>String uri = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (ServiceInstance instance : list) &#123;<br>        <span class="hljs-keyword">if</span> (instance.getUri() != <span class="hljs-keyword">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(instance.getUri())) &#123;<br>        uri = instance.getUri().toString();<br>        <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> restTemplate.getForObject(uri + <span class="hljs-string">&quot;/provider/user/get/&quot;</span> + id, User.class);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开启服务发现功能："><a href="#开启服务发现功能：" class="headerlink" title="开启服务发现功能："></a>开启服务发现功能：</h2><p>在启动类上添加 @EnableDiscoveryClient 注解。</p><p>启动项目后，使用浏览器访问 user-web 项目接口，运行结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/small-20210227094510701.jpeg" alt="springcloud-eureka-04-2"></p><p><a href="https://github.com/cuixiaoyan/eureka">源码下载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具类</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python统计字符出现次数(Counter包)以及txt文件写入</title>
    <link href="/blog/2021/02/27/Python%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0(Counter%E5%8C%85)%E4%BB%A5%E5%8F%8Atxt%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <url>/blog/2021/02/27/Python%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0(Counter%E5%8C%85)%E4%BB%A5%E5%8F%8Atxt%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="统计字符-可以在jieba分词之后使用"><a href="#统计字符-可以在jieba分词之后使用" class="headerlink" title="统计字符(可以在jieba分词之后使用)"></a>统计字符(可以在jieba分词之后使用)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br> <br><span class="hljs-comment"># txt_list可以写成函数参数进行导入</span><br>txt_list = [<span class="hljs-string">&#x27;千古&#x27;</span>,<span class="hljs-string">&#x27;人间&#x27;</span>,<span class="hljs-string">&#x27;人间&#x27;</span>,<span class="hljs-string">&#x27;龙&#x27;</span>,<span class="hljs-string">&#x27;龙&#x27;</span>,<span class="hljs-string">&#x27;龙&#x27;</span>,<span class="hljs-string">&#x27;哈哈哈&#x27;</span>,<span class="hljs-string">&#x27;人才&#x27;</span>,<span class="hljs-string">&#x27;千古&#x27;</span>,<span class="hljs-string">&#x27;千古&#x27;</span>]<br>c = Counter()<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> txt_list:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) &gt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> x == <span class="hljs-string">&#x27;\r\n&#x27;</span> <span class="hljs-keyword">or</span> x == <span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-keyword">or</span> x == <span class="hljs-string">&#x27; &#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            c[x] += <span class="hljs-number">1</span><br>print(<span class="hljs-string">&#x27;常用词频统计结果: \n&#x27;</span>)<br><span class="hljs-keyword">for</span> (k, v) <span class="hljs-keyword">in</span> c.most_common(<span class="hljs-number">4</span>): <span class="hljs-comment">#打印排名前四位</span><br>    print(<span class="hljs-string">&#x27;%s%s %s  %d&#x27;</span> % (<span class="hljs-string">&#x27;  &#x27;</span> * (<span class="hljs-number">3</span> ), k, <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">3</span>, v))<br> <br><span class="hljs-comment"># 按照词频数从大到小打印</span><br>d = <span class="hljs-built_in">sorted</span>(c.items(),key=itemgetter(<span class="hljs-number">1</span>),reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> ss,tt <span class="hljs-keyword">in</span> d:<br>    out_words=ss + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-built_in">str</span>(tt)<br>    print(out_words)<br></code></pre></td></tr></table></figure><h1 id="多次覆盖，循环写入文件"><a href="#多次覆盖，循环写入文件" class="headerlink" title="多次覆盖，循环写入文件"></a>多次覆盖，循环写入文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#写入文件，多次写入，后一次覆盖前一次，但是out_words本身是在叠加的</span><br><span class="hljs-comment">#即：第一次写入的是：千古\t3\n;第二次写入的是：千古\t3\n龙\t3\n，覆盖上一次的数据;</span><br><span class="hljs-comment">#第三次是：千古\t3\n龙\t3\n人间\t2\n，继续覆盖上一次的数据</span><br>out_words = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> ss,tt <span class="hljs-keyword">in</span> d:<br>    out_words=out_words + ss + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-built_in">str</span>(tt) + <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;.\sss.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(out_words+<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>比如，循环两次的结果是：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1468269-20191016222751323-1357691422_1571276134547.png" alt="1468269-20191016222751323-1357691422"></p><p>一次性写入文件，中间不会覆盖和多次写入；但是如果重复运行代码，则会覆盖之前的全部内容，一次性重新写入所有新内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">out_words = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> ss,tt <span class="hljs-keyword">in</span> d:<br>    out_words=out_words + ss + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-built_in">str</span>(tt) + <span class="hljs-string">&#x27;\n&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;.\ttt.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(out_words+<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1468269-20191016222730634-1775423973_1571276133624.png" alt="1468269-20191016222730634-1775423973"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Counter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何正确遍历删除List中的元素(普通for循环、增强for循环、迭代器iterator、removeIf+方法引用)</title>
    <link href="/blog/2021/02/27/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4List%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0(%E6%99%AE%E9%80%9Afor%E5%BE%AA%E7%8E%AF%E3%80%81%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8iterator%E3%80%81removeIf+%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8)/"/>
    <url>/blog/2021/02/27/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4List%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0(%E6%99%AE%E9%80%9Afor%E5%BE%AA%E7%8E%AF%E3%80%81%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8iterator%E3%80%81removeIf+%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8)/</url>
    
    <content type="html"><![CDATA[<p>遍历删除List中符合条件的元素主要有以下几种方法：</p><ol><li>普通for循环 2.增强for循环 foreach 3.迭代器iterator 4.removeIf 和 方法引用 (一行代码搞定) 其中使用普通for循环容易造成遗漏元素的问题，增强for循环foreach会报java.util.ConcurrentModificationException并发修改异常。</li></ol><p>所以推荐使用迭代器iterator，或者JDK1.8以上使用lambda表达式进行List的遍历删除元素操作。</p><p>以下是上述几种方法的具体分析：</p><h1 id="普通for循环"><a href="#普通for循环" class="headerlink" title="普通for循环"></a>普通for循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 普通for循环遍历删除元素</span><br><span class="hljs-comment"> */</span>  <br>    List&lt;Student&gt; students = <span class="hljs-keyword">this</span>.getStudents();  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;students.size(); i++) &#123;  <br>        <span class="hljs-keyword">if</span> (students.get(i).getId()%<span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;  <br>            Student student = students.get(i);  <br>            students.remove(student);  <br>        &#125;  <br>    &#125;<br></code></pre></td></tr></table></figure><p>由于在循环中删除元素后，list的索引会自动变化，list.size()获取到的list长度也会实时更新，所以会造成漏掉被删除元素后一个索引的元素。</p><p>比如循环到第2个元素时你把它删了，接下来去访问第3个元素，实际上访问到的是原来list的第4个元素，因为原来的第3个元素变成了现在的第2个元素。这样就造成了元素的遗漏。</p><h1 id="增强for循环-foreach"><a href="#增强for循环-foreach" class="headerlink" title="增强for循环 foreach"></a>增强for循环 foreach</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 增强for循环遍历删除元素</span><br><span class="hljs-comment"> */</span><br>    List&lt;Student&gt; students = <span class="hljs-keyword">this</span>.getStudents();  <br>    <span class="hljs-keyword">for</span> (Student stu : students) &#123;  <br>        <span class="hljs-keyword">if</span> (stu.getId() == <span class="hljs-number">2</span>)   <br>            students.remove(stu);  <br>    &#125;<br></code></pre></td></tr></table></figure><p>使用foreach遍历循环删除符合条件的元素，不会出现普通for循环的遗漏元素问题，但是会产生java.util.ConcurrentModificationException并发修改异常的错误。</p><p>报ConcurrentModificationException错误的原因：</p><p>　　先来看一下JDK源码中ArrayList的remove源码是怎么实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; size; index++)<br>                <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-keyword">null</span>) &#123;<br>                    fastRemove(index);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; size; index++)<br>                <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                    fastRemove(index);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>一般情况下程序的执行路径会走到else路径下最终调用fastRemove方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fastRemove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        modCount++;<br>        <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>            System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                             numMoved);<br>        elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// clear to let GC do its work</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>在fastRemove方法中，可以看到第2行把modCount变量的值加一，但在ArrayList返回的迭代器会做迭代器内部的修改次数检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkForComodification</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>             <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>     &#125;<br></code></pre></td></tr></table></figure><p>而foreach写法是对实际的Iterable、hasNext、next方法的简写，因为上面的remove(Object)方法修改了modCount的值，所以才会报出并发修改异常。</p><p>要避免这种情况的出现则在使用迭代器迭代时（显式或for-each的隐式）不要使用List的remove，改为用Iterator的remove即可。</p><h1 id="迭代器iterator"><a href="#迭代器iterator" class="headerlink" title="迭代器iterator"></a>迭代器iterator</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  迭代器iterator</span><br><span class="hljs-comment"> */</span><br>     List&lt;Student&gt; students = <span class="hljs-keyword">this</span>.getStudents();  <br>     System.out.println(students);  <br>     Iterator&lt;Student&gt; iterator = students.iterator();  <br>     <span class="hljs-keyword">while</span> (iterator .hasNext()) &#123;  <br>         Student student = iterator .next();  <br>         <span class="hljs-keyword">if</span> (iterator.getId() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)  <br>             iterator.remove();<span class="hljs-comment">//这里要使用Iterator的remove方法移除当前对象，如果使用List的remove方法，则同样会出现ConcurrentModificationException  </span><br>     &#125;<br></code></pre></td></tr></table></figure><p>由上述foreach报错的原因，注意要使用迭代器的remove方法，而不是List的remove方法。</p><h1 id="removeIf-和-方法引用"><a href="#removeIf-和-方法引用" class="headerlink" title="removeIf 和 方法引用"></a>removeIf 和 方法引用</h1><p>在JDK1.8中，Collection以及其子类新加入了removeIf方法，作用是按照一定规则过滤集合中的元素。</p><p>方法引用是也是JDK1.8的新特性之一。方法引用通过方法的名字来指向一个方法，使用一对冒号 :: 来完成对方法的调用，可以使语言的构造更紧凑简洁，减少冗余代码。</p><p>使用removeIf和方法引用删除List中符合条件的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; urls = <span class="hljs-keyword">this</span>.getUrls();  <br> <br><span class="hljs-comment">// 使用方法引用删除urls中值为&quot;null&quot;的元素</span><br>urls.removeIf(<span class="hljs-string">&quot;null&quot;</span>::equals);<br> <br></code></pre></td></tr></table></figure><p>作为removeIf的条件，为true时就删除元素。</p><p>使用removeIf 和 方法引用，可以将原本需要七八行的代码，缩减到一行即可完成，使代码的构造更紧凑简洁，减少冗余代码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot二十个注解</title>
    <link href="/blog/2021/02/27/SpringBoot%E4%BA%8C%E5%8D%81%E4%B8%AA%E6%B3%A8%E8%A7%A3/"/>
    <url>/blog/2021/02/27/SpringBoot%E4%BA%8C%E5%8D%81%E4%B8%AA%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>@SpringBootApplication 注解用于声明自动配置，即让Spring Boot 自动为程序进行必要的配置；@SpringBootApplication 注解配置等同于@Configuration、@EnableAutoConfiguration 和@ComponentScan 三个注解的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br> <br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">/*@Configuration  三者只和等同于 @SpringBootApplication 注解进行自动配置</span><br><span class="hljs-comment">@EnableAutoConfiguration</span><br><span class="hljs-comment">@ComponentScan*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JzxyApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(JzxyApplication.class, args);<br>        <br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Contronller"><a href="#Contronller" class="headerlink" title="@Contronller"></a>@Contronller</h1><p>@Contronller 注解用于定义该类属于控制器类，因为在Sping Boot 项目中是由控制器负责将用户请求的URL 转发到对应的服务接口（Service 服务层），So使用其是必不可少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义控制器类 <span class="hljs-doctag">@Controller</span> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/demon/linux&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinuxUsersController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/add/host&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getLinuxConn</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;LinuxConnEntity&gt; list)</span> </span>&#123;<br>        Map resultMap = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> list == <span class="hljs-keyword">null</span><br>                ? setResult(resultMap, Constant.ZERO, Constant.REQUEST_NULL_MSG)<br>                : linuxUsersServiceImpl.createLinuxConn(list);<br> <br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h1><p>@ResponseBody 注解表示该方法的返回结果直接写入HTTP 的Response Body 中，该注解一般在异步获取数据时使用，用于构建RESTful 的API；另外，在使用@RequestMapping 注解后返回值通常会解析为路径跳转，而在加上了@ResponseBody 注解后，返回结果则不会被解析为路径而是直接写入HTTP Response Body 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异步获取json 数据，加上<span class="hljs-doctag">@responsebody</span> 注解后，会直接返回json 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/responsebody&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LinuxUserEntity <span class="hljs-title">testOne</span><span class="hljs-params">(LinuxUserEntity linuxUserEntity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> linuxUsersServiceImpl.test();<br>        <span class="hljs-number">9</span>     &#125;<br></code></pre></td></tr></table></figure><h1 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h1><p>@RestController 注解用于标注控制层组件，其是@ResponseBody 和@Contronller 两个注解的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@RestController</span> 等价于<span class="hljs-doctag">@Controller</span> 和 <span class="hljs-doctag">@ResponseBody</span> 两个注解的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/responsebody/linux&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinuxUsersController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/responsebody&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LinuxUserEntity <span class="hljs-title">testOne</span><span class="hljs-params">(LinuxUserEntity linuxUserEntity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> linuxUsersServiceImpl.test();<br>        <span class="hljs-number">12</span>     &#125;<br></code></pre></td></tr></table></figure><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><p>@RequestMapping 是提供路由信息的注解，其是负责URL 到Controller 中的具体函数的映射；此外，该注解后的括号内经常会使用如下六个属性：</p><ol><li>param：指定请求request 中必须包含某些参数，否则不处理该方法；</li><li>header：指定请求request 中必须包含某些指定的header 值，否则不处理该方法；</li><li>value：指定请求的实际地址；</li><li>method：指定请求的方法method 类型，通常设计为RESTful 风格的GET、POST、PUT 和DELETE；</li><li>consumes：指定处理请求提交内容的具体类型（即Content-Type），如applicatin/json 和text/html 等类型格式；</li></ol><p>6: produces：指定返回的内容类型，设置该属性后仅当request 请求头中的Accept 类型中包含该制定类型时才会返回，需谨慎。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@RequestMapping</span> 提供路由信息的注解</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/responsebody&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LinuxUserEntity <span class="hljs-title">testOne</span><span class="hljs-params">(LinuxUserEntity linuxUserEntity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> linuxUsersServiceImpl.test();<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h1><p>@EnableAutoConfiguration 是Spring Boot 自动配置注解，其会根据项目中添加的依赖自动配置Spring 应用；比如Spring Boot 自动配置内嵌tomcat 的端口为8080；还有自动载入应用程序所需的所有Bean，这依赖于Spring Boot 在类路径中的查找结果，就比如你在classpath 下存在HSQLDB，并且没有手动配置任何数据库连接Bean，那么@EnableAutoConfiguration 注解就会自动配置一个内存模型（in-memory）数据库。</p><h1 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h1><p>@ComponentScan 注解表示该类会自动发现扫描组件，若扫描到包含@Component、@Controller 和@Service 等注解的类，则会将其注册为Bean，并且可以自动收集所有的Spring 组件，包括有@Configuration 注解标注的类；开发中经常使用@ComponentScan 注解搜索Beans，并结合@Autowired 注解将Beans 注入，若没有进行配置，则Spring Boot 只会扫描SpringBootApplication 启动类所在包下及其子包下的使用了@Service、@Repository 等注解的类。</p><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h1><p>@Configuration 注解作用类似于传统的xml 配置文件；例如，有第三方库需要用到xml 文件，则可以通过添加@Configuration 注解表示该类作为项目的配置主类，然后使用@ImportResource 注解加载xml 配置文件内容。</p><h1 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h1><p>@Import 注解作用是导入其它配置类。</p><h1 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h1><p>@ImportResource 注解作用是加载xml 配置文件。</p><h1 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h1><p>@Autowired 注解的作用是自动导入依赖的Bean；即把配置好的Bean 拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作；并且当加上标签（required=false）时，就算找不到bean 也不报错，允许注入为空。</p><h1 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h1><p>@Service 注解的作用是标志某类为Service 层，是Service 服务层组件注解。</p><h1 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h1><p>@Repository 注解作用是标志某类为数据层，其可用于确保DAO 层或者Repositories 能正常转译；当@Repository 注解修饰DAO 或者repositories 类时会被ComponentScan 发现并配置。</p><h1 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h1><p>@Bean 注解相当于XML 配置文件中使用的标签，初始化的时候创建对象，并交由IOC 容器管理；需要注意的是@Bean 注解是放在方法的上面，而不是类，意思是产生一个bean，并交给spring 管理。</p><h1 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h1><p>@Value 注解作用是注入Spring Boot 配置文件application.properties，即获取application.properties 配置文件中属性的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value = &quot;#&#123;VEHIVLE_TOPIC&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String VEHIVLE_TOPIC;<br></code></pre></td></tr></table></figure><h1 id="inject"><a href="#inject" class="headerlink" title="@inject"></a>@inject</h1><p>@inject 注解作用与@Autowired 相同，不同的是其没有require 属性，强制要求注入不能为空。</p><h1 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h1><p>@Component 注解泛指组件，即当组件不方便归类时，可以使用该注解进行标注归类。</p><h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><p>@Qualifier 注解用于当有多个同一类型的Bean 时，通过@Qualifier(“name”) 根据名字来指定注入的Bean；其需要配合@Autowired 使用，根据名字进行注入，进行更细粒度的控制如何选择要注入的Bean。</p><h1 id="Resouce"><a href="#Resouce" class="headerlink" title="@Resouce"></a>@Resouce</h1><p>@Resouce 注解的作用与@Autowired 相似，都是自动注入依赖的Bean；不同的是@Resource(name=”name”,type=”type”) 多了括号内的属性，当没有括号内内容的话，默认byName。</p><h1 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h1><p>@PathVariable 注解的作用是获取路径变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@RequestMapping</span> 获取路径变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ioc/get/&#123;address&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String address )</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取得到路径中address 的值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基本类型和包装类型</title>
    <link href="/blog/2021/02/27/Java%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
    <url>/blog/2021/02/27/Java%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="包装类型可以为-null，而基本类型不可以"><a href="#包装类型可以为-null，而基本类型不可以" class="headerlink" title="包装类型可以为 null，而基本类型不可以"></a>包装类型可以为 null，而基本类型不可以</h1><p>别小看这一点区别，它使得包装类型可以应用于 POJO 中，而基本类型则不行。</p><p>POJO 是什么呢？这里稍微说明一下。</p><p>POJO 的英文全称是 Plain Ordinary Java Object，翻译一下就是，简单无规则的 Java 对象，只有属性字段以及 setter 和 getter 方法，示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Writer</span> </span>&#123;<br><span class="hljs-keyword">private</span> Integer age;<br><span class="hljs-keyword">private</span> String name;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>和 POJO 类似的，还有数据传输对象 DTO（Data Transfer Object，泛指用于展示层与服务层之间的数据传输对象）、视图对象 VO（View Object，把某个页面的数据封装起来）、持久化对象 PO（Persistant Object，可以看成是与数据库中的表映射的 Java 对象）。</p><p>那为什么 POJO 的属性必须要用包装类型呢？ 数据库的查询结果可能是 null，如果使用基本类型的话，因为要自动拆箱（将包装类型转为基本类型，比如说把 Integer 对象转换成 int 值），就会抛出 NullPointerException 的异常。</p><h1 id="包装类型可用于泛型，而基本类型不可以"><a href="#包装类型可用于泛型，而基本类型不可以" class="headerlink" title="包装类型可用于泛型，而基本类型不可以"></a>包装类型可用于泛型，而基本类型不可以</h1><p>泛型不能使用基本类型，因为使用基本类型时会编译出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;<span class="hljs-keyword">int</span>&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <span class="hljs-comment">// 提示 Syntax error, insert &quot;Dimensions&quot; to complete ReferenceType</span><br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br> <br></code></pre></td></tr></table></figure><p>为什么呢？因为泛型在编译时会进行类型擦除，最后只保留原始类型，而原始类型只能是 Object 类及其子类——基本类型是个特例。</p><h1 id="基本类型比包装类型更高效"><a href="#基本类型比包装类型更高效" class="headerlink" title="基本类型比包装类型更高效"></a>基本类型比包装类型更高效</h1><p>基本类型在栈中直接存储的具体数值，而包装类型则存储的是堆中的引用。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTc5Mzg5LTM4MGYzMDk4YWQ3YzQwN2UucG5n_1571020521890.jpeg" alt="基本">很显然，相比较于基本类型而言，包装类型需要占用更多的内存空间。假如没有基本类型的话，对于数值这类经常使用到的数据来说，每次都要通过 new 一个包装类型就显得非常笨重。</p><h1 id="两个包装类型的值可以相同，但却不相等"><a href="#两个包装类型的值可以相同，但却不相等" class="headerlink" title="两个包装类型的值可以相同，但却不相等"></a>两个包装类型的值可以相同，但却不相等</h1><p>两个包装类型的值可以相同，但却不相等——这句话怎么理解呢？来看一段代码就明明白白了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer chenmo = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">10</span>);<br>Integer wanger = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">10</span>);<br> <br>System.out.println(chenmo == wanger); <span class="hljs-comment">// false</span><br>System.out.println(chenmo.equals(wanger )); <span class="hljs-comment">// true</span><br> <br></code></pre></td></tr></table></figure><p>两个包装类型在使用“”进行判断的时候，判断的是其指向的地址是否相等。chenmo 和 wanger 两个变量使用了 new 关键字，导致它们在“”的时候输出了 false。</p><p>而 chenmo.equals(wanger) 的输出结果为 true，是因为 equals 方法内部比较的是两个 int 值是否相等。源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> value;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">intValue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Integer) &#123;<br>        <span class="hljs-keyword">return</span> value == ((Integer)obj).intValue();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>虽然 chenmo 和 wanger 的值都是 10，但他们并不相等。换句话说就是：将“==”操作符应用于包装类型比较的时候，其结果很可能会和预期的不符。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬图片</title>
    <link href="/blog/2021/02/21/python%E7%88%AC%E5%9B%BE%E7%89%87/"/>
    <url>/blog/2021/02/21/python%E7%88%AC%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p><strong>这个例子也不是我本意,不过好像大家都喜欢爬这类图片本人抱着学习技术的态度 深入研究,了解啦其过程(滑稽)</strong></p><p>建议: 编译器debug运行,加上浏览器开发者调试 会有更加容易了解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 导入文件操作库</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br>importlib.reload(sys)<br> <br> <br><span class="hljs-comment"># 越多越好</span><br>meizi_headers = [<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/537.75.14&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)&quot;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&#x27;</span>,<br>    <span class="hljs-string">&#x27;Opera/9.25 (Windows NT 5.1; U; en)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12&#x27;</span>,<br>    <span class="hljs-string">&#x27;Lynx/2.8.5rel.1 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/1.2.9&#x27;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Ubuntu/11.04 Chromium/16.0.912.77 Chrome/16.0.912.77 Safari/535.7&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0&quot;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&#x27;</span><br>]<br><span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span><br><span class="hljs-keyword">global</span> headers<br>headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers)&#125;<br><span class="hljs-comment"># 爬图地址</span><br>mziTu = <span class="hljs-string">&#x27;http://www.mzitu.com/&#x27;</span><br><span class="hljs-comment"># 定义存储位置</span><br><span class="hljs-keyword">global</span> save_path<br>save_path = <span class="hljs-string">&#x27;/Users/cuixiaoyan/Downloads/a&#x27;</span><br> <br> <br><span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createFile</span>(<span class="hljs-params">file_path</span>):</span><br>    <span class="hljs-keyword">if</span> os.path.exists(file_path) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        os.makedirs(file_path)<br>    <span class="hljs-comment"># 切换路径至上面创建的文件夹</span><br>    os.chdir(file_path)<br> <br> <br><span class="hljs-comment"># 下载文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">page_no, file_path</span>):</span><br>    <span class="hljs-keyword">global</span> headers<br>    res_sub = requests.get(page_no, headers=headers)<br>    <span class="hljs-comment"># 解析html</span><br>    soup_sub = BeautifulSoup(res_sub.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 获取页面的栏目地址</span><br>    all_a = soup_sub.find(<span class="hljs-string">&#x27;div&#x27;</span>,class_=<span class="hljs-string">&#x27;postlist&#x27;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>,target=<span class="hljs-string">&#x27;_blank&#x27;</span>)<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> all_a:<br>        count = count + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:<br>            headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers)&#125;<br>            print(<span class="hljs-string">&quot;内页第几页：&quot;</span> + <span class="hljs-built_in">str</span>(count))<br>            <span class="hljs-comment"># 提取href</span><br>            href = a.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            print(<span class="hljs-string">&quot;套图地址：&quot;</span> + href)<br>            res_sub_1 = requests.get(href, headers=headers)<br>            soup_sub_1 = BeautifulSoup(res_sub_1.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>            <span class="hljs-comment"># ------ 这里最好使用异常处理 ------</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 获取套图的最大数量</span><br>                pic_max = soup_sub_1.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;pagenavi&#x27;</span>).find_all(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">6</span>].text<br>                print(<span class="hljs-string">&quot;套图数量：&quot;</span> + pic_max)<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pic_max) + <span class="hljs-number">1</span>):<br>                    <span class="hljs-comment"># 单位为秒，1-3 随机数</span><br>                    time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>                    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers)&#125;<br>                    <span class="hljs-comment"># print(&quot;子内页第几页：&quot; + str(j))</span><br>                    <span class="hljs-comment"># j int类型需要转字符串</span><br>                    href_sub = href + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(j)<br>                    print(<span class="hljs-string">&quot;图片地址：&quot;</span>+href_sub)<br>                    res_sub_2 = requests.get(href_sub, headers=headers)<br>                    soup_sub_2 = BeautifulSoup(res_sub_2.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>                    img = soup_sub_2.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;main-image&#x27;</span>).find(<span class="hljs-string">&#x27;img&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(img, bs4.element.Tag):<br>                        <span class="hljs-comment"># 提取src</span><br>                        url = img.attrs[<span class="hljs-string">&#x27;src&#x27;</span>]<br>                        array = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>                        file_name = array[<span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span>]<br>                        <span class="hljs-comment"># 防盗链加入Referer</span><br>                        headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers), <span class="hljs-string">&#x27;Referer&#x27;</span>: url&#125;<br>                        img = requests.get(url, headers=headers)<br>                        print(<span class="hljs-string">&#x27;开始保存图片&#x27;</span>, img)<br>                        f = <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;ab&#x27;</span>)<br>                        f.write(img.content)<br>                        print(file_name, <span class="hljs-string">&#x27;图片保存成功！&#x27;</span>)<br>                        f.close()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                print(e)<br> <br> <br><span class="hljs-comment"># 主方法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    res = requests.get(mziTu, headers=headers)<br>    <span class="hljs-comment"># 使用自带的html.parser解析</span><br>    soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 创建文件夹</span><br>    createFile(save_path)<br>    <span class="hljs-comment"># 获取首页总页数</span><br>    img_max = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;nav-links&#x27;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">3</span>].text<br>    <span class="hljs-comment"># print(&quot;总页数:&quot;+img_max)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(img_max) + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 获取每页的URL地址</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>            page = mziTu<br>        <span class="hljs-keyword">else</span>:<br>            page = mziTu + <span class="hljs-string">&#x27;page/&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        file = save_path + <span class="hljs-string">&#x27;\\&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        createFile(file)<br>        <span class="hljs-comment"># 下载每页的图片</span><br>        print(<span class="hljs-string">&quot;套图页码：&quot;</span> + page)<br>        download(page, file)<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具类</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My97Date控件设置默认时间</title>
    <link href="/blog/2021/02/21/My97Date%E6%8E%A7%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4/"/>
    <url>/blog/2021/02/21/My97Date%E6%8E%A7%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p><strong>需求:设置开始时间和结束时间初始化时间隔为一周</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;startTime&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;startTime&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 45%&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Wdate&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;WdatePicker(&#123;maxDate: $(&#x27;#endTime&#x27;).val(),dateFmt:&#x27;yyyy-MM-dd&#x27; &#125;)&quot;</span> <span class="hljs-attr">ignore</span>=<span class="hljs-string">&quot;ignore&quot;</span>/&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;endTime&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;endTime&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 45%&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Wdate&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;WdatePicker(&#123;minDate: $(&#x27;#startTime&#x27;).val(),dateFmt:&#x27;yyyy-MM-dd&#x27; &#125;)&quot;</span><span class="hljs-attr">ignore</span>=<span class="hljs-string">&quot;ignore&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>如果需要设置一个月后的话 就加30</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js">       <span class="hljs-built_in">Date</span>.prototype.pattern = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fmt</span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> o = &#123;<br>               <span class="hljs-string">&quot;M+&quot;</span>: <span class="hljs-built_in">this</span>.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">//月份</span><br>               <span class="hljs-string">&quot;d+&quot;</span>: <span class="hljs-built_in">this</span>.getDate(), <span class="hljs-comment">//日</span><br>               <span class="hljs-string">&quot;h+&quot;</span>: <span class="hljs-built_in">this</span>.getHours() % <span class="hljs-number">12</span> == <span class="hljs-number">0</span> ? <span class="hljs-number">12</span> : <span class="hljs-built_in">this</span>.getHours() % <span class="hljs-number">12</span>, <span class="hljs-comment">//小时</span><br>               <span class="hljs-string">&quot;H+&quot;</span>: <span class="hljs-built_in">this</span>.getHours(), <span class="hljs-comment">//小时</span><br>               <span class="hljs-string">&quot;m+&quot;</span>: <span class="hljs-built_in">this</span>.getMinutes(), <span class="hljs-comment">//分</span><br>               <span class="hljs-string">&quot;s+&quot;</span>: <span class="hljs-built_in">this</span>.getSeconds(), <span class="hljs-comment">//秒</span><br>               <span class="hljs-string">&quot;q+&quot;</span>: <span class="hljs-built_in">Math</span>.floor((<span class="hljs-built_in">this</span>.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">//季度</span><br>               <span class="hljs-string">&quot;S&quot;</span>: <span class="hljs-built_in">this</span>.getMilliseconds() <span class="hljs-comment">//毫秒</span><br>           &#125;;<br>           <span class="hljs-keyword">var</span> week = &#123;<br>               <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-string">&quot;\u65e5&quot;</span>,<br>               <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;\u4e00&quot;</span>,<br>               <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;\u4e8c&quot;</span>,<br>               <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;\u4e09&quot;</span>,<br>               <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-string">&quot;\u56db&quot;</span>,<br>               <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-string">&quot;\u4e94&quot;</span>,<br>               <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-string">&quot;\u516d&quot;</span><br>           &#125;;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.test(fmt)) &#123;<br>               fmt = fmt.replace(<span class="hljs-built_in">RegExp</span>.$1, (<span class="hljs-built_in">this</span>.getFullYear() + <span class="hljs-string">&quot;&quot;</span>).substr(<span class="hljs-number">4</span> - <span class="hljs-built_in">RegExp</span>.$1.length));<br>           &#125;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(E+)/</span>.test(fmt)) &#123;<br>               fmt = fmt.replace(<span class="hljs-built_in">RegExp</span>.$1, ((<span class="hljs-built_in">RegExp</span>.$1.length &gt; <span class="hljs-number">1</span>) ? (<span class="hljs-built_in">RegExp</span>.$1.length &gt; <span class="hljs-number">2</span> ? <span class="hljs-string">&quot;\u661f\u671f&quot;</span> : <span class="hljs-string">&quot;\u5468&quot;</span>) : <span class="hljs-string">&quot;&quot;</span>) + week[<span class="hljs-built_in">this</span>.getDay() + <span class="hljs-string">&quot;&quot;</span>]);<br>           &#125;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).test(fmt)) &#123;<br>                   fmt = fmt.replace(<span class="hljs-built_in">RegExp</span>.$1, (<span class="hljs-built_in">RegExp</span>.$1.length == <span class="hljs-number">1</span>) ? (o[k]) : ((<span class="hljs-string">&quot;00&quot;</span> + o[k]).substr((<span class="hljs-string">&quot;&quot;</span> + o[k]).length)));<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> fmt;<br>       &#125;<br>       $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>           <span class="hljs-comment">//$(&quot;#startTime&quot;).val(dt.pattern(&quot;yyyy-MM-dd hh:mm:ss&quot;));</span><br>           $(<span class="hljs-string">&quot;#startTime&quot;</span>).val(dt.pattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>           dt.setDate(dt.getDate() + <span class="hljs-number">7</span>);<span class="hljs-comment">//获取七天后的日期</span><br>           $(<span class="hljs-string">&quot;#endTime&quot;</span>).val(dt.pattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br><br>       &#125;);<br><span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;multitaskEchartsController.do?getAchievement&#x27;</span>;<br>       url += <span class="hljs-string">&#x27;&amp;startTime=&#x27;</span> + $(<span class="hljs-string">&quot;#startTime&quot;</span>).val()<br>       url += <span class="hljs-string">&#x27;&amp;endTime=&#x27;</span> + $(<span class="hljs-string">&quot;#endTime&quot;</span>).val()<br><br>       <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>       <span class="hljs-comment">//$(&quot;#startTime&quot;).val(dt.pattern(&quot;yyyy-MM-dd hh:mm:ss&quot;));</span><br>       $(<span class="hljs-string">&quot;#startTime&quot;</span>).val(dt.pattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>       dt.setDate(dt.getDate() + <span class="hljs-number">7</span>);<span class="hljs-comment">//获取七天后的日期</span><br>       $(<span class="hljs-string">&quot;#endTime&quot;</span>).val(dt.pattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br></code></pre></td></tr></table></figure><p>效果如下<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/QQ20191011-113936@2x_1570765228201.png" alt="QQ20191011-113936@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>My97Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON数组形式字符串转换为Map数组</title>
    <link href="/blog/2021/02/21/JSON%E6%95%B0%E7%BB%84%E5%BD%A2%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAMap%E6%95%B0%E7%BB%84/"/>
    <url>/blog/2021/02/21/JSON%E6%95%B0%E7%BB%84%E5%BD%A2%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAMap%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p><strong>阿里巴巴封装的FastJSON来转换JSON数组形式字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zkn.newlearn.json;<br> <br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里我用到的是第一种方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonToMapTest02</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br> <br>        String strArr = <span class="hljs-string">&quot;[&#123;\&quot;0\&quot;:\&quot;zhangsan\&quot;,\&quot;1\&quot;:\&quot;lisi\&quot;,\&quot;2\&quot;:\&quot;wangwu\&quot;,\&quot;3\&quot;:\&quot;maliu\&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;\&quot;00\&quot;:\&quot;zhangsan\&quot;,\&quot;11\&quot;:\&quot;lisi\&quot;,\&quot;22\&quot;:\&quot;wangwu\&quot;,\&quot;33\&quot;:\&quot;maliu\&quot;&#125;]&quot;</span>;<br>        <span class="hljs-comment">//第一种方式</span><br>        List&lt;Map&lt;String,String&gt;&gt; listObjectFir = (List&lt;Map&lt;String,String&gt;&gt;) JSONArray.parse(strArr);<br>        System.out.println(<span class="hljs-string">&quot;利用JSONArray中的parse方法来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Map&lt;String,String&gt; mapList : listObjectFir)&#123;<br>            <span class="hljs-keyword">for</span> (Map.Entry entry : mapList.entrySet())&#123;<br>               System.out.println( entry.getKey()  + <span class="hljs-string">&quot;  &quot;</span> +entry.getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第二种方式</span><br>        List&lt;Map&lt;String,String&gt;&gt; listObjectSec = JSONArray.parseObject(strArr,List.class);<br>        System.out.println(<span class="hljs-string">&quot;利用JSONArray中的parseObject方法并指定返回类型来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Map&lt;String,String&gt; mapList : listObjectSec)&#123;<br>            <span class="hljs-keyword">for</span> (Map.Entry entry : mapList.entrySet())&#123;<br>                System.out.println( entry.getKey()  + <span class="hljs-string">&quot;  &quot;</span> +entry.getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第三种方式</span><br>        JSONArray listObjectThir = JSONArray.parseArray(strArr);<br>        System.out.println(<span class="hljs-string">&quot;利用JSONArray中的parseArray方法来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object mapList : listObjectThir)&#123;<br>            <span class="hljs-keyword">for</span> (Object entry : ((Map)mapList).entrySet())&#123;<br>                System.out.println(((Map.Entry)entry).getKey()  + <span class="hljs-string">&quot;  &quot;</span> +((Map.Entry)entry).getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第四种方式</span><br>        List listObjectFour = JSONArray.parseArray(strArr,Map.class);<br>        System.out.println(<span class="hljs-string">&quot;利用JSONArray中的parseArray方法并指定返回类型来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object mapList : listObjectFour)&#123;<br>            <span class="hljs-keyword">for</span> (Object entry : ((Map)mapList).entrySet())&#123;<br>                System.out.println(((Map.Entry)entry).getKey()  + <span class="hljs-string">&quot;  &quot;</span> +((Map.Entry)entry).getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第五种方式</span><br>        JSONArray listObjectFifth = JSONObject.parseArray(strArr);<br>        System.out.println(<span class="hljs-string">&quot;利用JSONObject中的parseArray方法来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object mapList : listObjectFifth)&#123;<br>            <span class="hljs-keyword">for</span> (Object entry : ((Map)mapList).entrySet())&#123;<br>                System.out.println(((Map.Entry)entry).getKey()  + <span class="hljs-string">&quot;  &quot;</span> +((Map.Entry)entry).getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第六种方式</span><br>        List listObjectSix = JSONObject.parseArray(strArr,Map.class);<br>        System.out.println(<span class="hljs-string">&quot;利用JSONObject中的parseArray方法并指定返回类型来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object mapList : listObjectSix)&#123;<br>            <span class="hljs-keyword">for</span> (Object entry : ((Map)mapList).entrySet())&#123;<br>                System.out.println(((Map.Entry)entry).getKey()  + <span class="hljs-string">&quot;  &quot;</span> +((Map.Entry)entry).getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第七种方式</span><br>        JSONArray listObjectSeven = JSON.parseArray(strArr);<br>        System.out.println(<span class="hljs-string">&quot;利用JSON中的parseArray方法来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object mapList : listObjectSeven)&#123;<br>            <span class="hljs-keyword">for</span> (Object entry : ((Map)mapList).entrySet())&#123;<br>                System.out.println(((Map.Entry)entry).getKey()  + <span class="hljs-string">&quot;  &quot;</span> +((Map.Entry)entry).getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第八种方式</span><br>        List listObjectEigh = JSONObject.parseArray(strArr,Map.class);<br>        System.out.println(<span class="hljs-string">&quot;利用JSON中的parseArray方法并指定返回类型来解析json数组字符串&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object mapList : listObjectEigh)&#123;<br>            <span class="hljs-keyword">for</span> (Object entry : ((Map)mapList).entrySet())&#123;<br>                System.out.println(((Map.Entry)entry).getKey()  + <span class="hljs-string">&quot;  &quot;</span> +((Map.Entry)entry).getValue());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>FastJSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS大更新导致git和svn无法使用</title>
    <link href="/blog/2021/02/17/macOS%E5%A4%A7%E6%9B%B4%E6%96%B0%E5%AF%BC%E8%87%B4git%E5%92%8Csvn%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <url>/blog/2021/02/17/macOS%E5%A4%A7%E6%9B%B4%E6%96%B0%E5%AF%BC%E8%87%B4git%E5%92%8Csvn%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>大更新之后 更新一堆自带没用软件之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">$ git --version<br> <br>xcrun: error: <span class="hljs-function">invalid active developer <span class="hljs-title">path</span> <span class="hljs-params">(/Library/Developer/CommandLineTools)</span>, missing </span><br><span class="hljs-function">xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</span><br><span class="hljs-function"> </span><br><span class="hljs-function"> </span><br></code></pre></td></tr></table></figure><p>原因是系统升级了，但是Xcode的命令行工具未升级导致的，更新一下就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">$ xcode-select --install<br> <br>xcode-select: note: install requested <span class="hljs-keyword">for</span> command line developer tools<br>弹窗安装完重启端口再输入命令就可以了<br> <br>$ git --version<br>git version <span class="hljs-number">2.17</span><span class="hljs-number">.2</span> (Apple Git-<span class="hljs-number">113</span>)<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java上传解压zip文件,并且解析文件里面的excel和图片</title>
    <link href="/blog/2021/02/17/Java%E4%B8%8A%E4%BC%A0%E8%A7%A3%E5%8E%8Bzip%E6%96%87%E4%BB%B6,%E5%B9%B6%E4%B8%94%E8%A7%A3%E6%9E%90%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E7%9A%84excel%E5%92%8C%E5%9B%BE%E7%89%87/"/>
    <url>/blog/2021/02/17/Java%E4%B8%8A%E4%BC%A0%E8%A7%A3%E5%8E%8Bzip%E6%96%87%E4%BB%B6,%E5%B9%B6%E4%B8%94%E8%A7%A3%E6%9E%90%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E7%9A%84excel%E5%92%8C%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p><strong>需求：上传一个zip文件，zip文件里面包含一个excel和很多图片，需要把excel里面的信息解析出来保存到表中，同时图片也转化成base64保存到数据库表中。</strong></p><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个deomo入参的类型是MultipartFile，很多网上的例子是File类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file (zip)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/addPersonsFileOfZip&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addPersonsFileOfZip</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String createdId = request.getParameter(KEY_CREATED_ID);<br>        <span class="hljs-comment">//正常上这里需要检查一下createdId是否为空</span><br>        <br>        <span class="hljs-comment">//原则上这个uploadZipFilesAndParse方法需要写到service和serviceImpl中</span><br>        String result =uploadZipFilesAndParse(file,createdId);<br>        <span class="hljs-keyword">return</span>  result;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     *返回的是批次号</span><br><span class="hljs-comment">     *同时我另外开了线程处理zip文件里面的图片和excel，</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">uploadZipFilesAndParse</span><span class="hljs-params">(MultipartFile file, String createdId)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String filename = file.getOriginalFilename();<br>        String fileType = filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>).toLowerCase(Locale.US);<br>        String uuid = UUID.randomUUID().toString();<br>        <span class="hljs-comment">//判断文件是不是zip类型</span><br>        <span class="hljs-keyword">if</span>(fileType.equals(<span class="hljs-string">&quot;zip&quot;</span>))&#123;<br>            <br>            <span class="hljs-comment">//FileConfig.localtion是配置文件和config类生产的，我会在评论区附上这些代码，测试demo的时候大家可以直接把FileConfig.localtion替换成D:/test</span><br>            <span class="hljs-comment">//String desPath = FileConfig.localtion + File.separator + uuid.replaceAll(&quot;-&quot;, &quot;&quot;);</span><br>            String desPath = <span class="hljs-string">&quot;D:/test&quot;</span> + File.separator + uuid.replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <br>            <br>            <span class="hljs-comment">//下面这三行的代码就是把上传文件copy到服务器，一定不要遗漏了。</span><br>            <span class="hljs-comment">//遗漏了这个代码，在本地测试环境不会出问题，在服务器上一定会报没有找到文件的错误</span><br>            String savePath = FileConfig.localtion + File.separator;<br>            File savefile = <span class="hljs-keyword">new</span> File(savePath+filename);<br>            file.transferTo(savefile);<br>            <br>            FileUtil fileUtil = <span class="hljs-keyword">new</span> FileUtil();<br>            <span class="hljs-comment">//解压zip文件，我是写在公共类里面，FileUtil类代码评论区见</span><br>            FileUtil.unZip(file, desPath,savePath);<br>            <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    List&lt;File&gt; fileList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                    fileList = fileUtil.getSubFiles(desPath,fileList);<br>                        <span class="hljs-keyword">for</span> (File oneFile : fileList)&#123;<br>                            <span class="hljs-keyword">if</span> (oneFile.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.xls&quot;</span>) || oneFile.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.xlsx&quot;</span>) ) &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    <span class="hljs-comment">//解析处理excel文件</span><br>                                    parseExcelFile(oneFile,createdId,uuid);<br>                                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                    LogUtils.error(e.getMessage());<br>                                &#125;<br>                            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(oneFile.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>)) &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    <span class="hljs-comment">//解析处理图片文件</span><br>                                    parseImageFile(oneFile,createdId,uuid);<br>                                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                    LogUtils.error(e.getMessage());<br>                                &#125;<br>                            &#125;<br>                        &#125;    <br>                        <br>                        <span class="hljs-comment">//最后要删除文件，删除文件的方法见评论区FileUtil类</span><br>                        FileUtil.clearFiles(desPath);<br>                        <br>                &#125;<br>            &#125;).start();            <br> <br>        &#125;<br>        <span class="hljs-keyword">return</span> uuid;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="解压zip文件的unzip方法"><a href="#解压zip文件的unzip方法" class="headerlink" title="解压zip文件的unzip方法"></a>解压zip文件的unzip方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unZip</span><span class="hljs-params">(MultipartFile  srcFile, String destDirPath,String savePath)</span> <span class="hljs-keyword">throws</span> RuntimeException, IOException </span>&#123;<br>        <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>        <br>        File file = <span class="hljs-keyword">null</span>;  <br>        InputStream ins = srcFile.getInputStream();  <br>        file=<span class="hljs-keyword">new</span> File(savePath+srcFile.getOriginalFilename()); <br>        LogUtils.info(<span class="hljs-string">&quot;MultipartFile transform to File,MultipartFile name:&quot;</span>+srcFile.getOriginalFilename());<br>        inputStreamToFile(ins, file);  <br>        <br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(file.getPath() + <span class="hljs-string">&quot;,file is not found&quot;</span>);<br>        &#125;<br>        ZipFile zipFile = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            zipFile = <span class="hljs-keyword">new</span> ZipFile(file);<br>            Enumeration&lt;?&gt; entries = zipFile.entries();<br>            <span class="hljs-keyword">while</span> (entries.hasMoreElements()) &#123;<br>                ZipEntry entry = (ZipEntry) entries.nextElement();<br>                LogUtils.info(<span class="hljs-string">&quot;zipFile context name:&quot;</span>+entry.getName());<br>                <span class="hljs-keyword">if</span> (entry.isDirectory()) &#123;<br>                    String dirPath = destDirPath + File.separator+ entry.getName();<br>                    File dir = <span class="hljs-keyword">new</span> File(dirPath);<br>                    dir.mkdirs();<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    File targetFile = <span class="hljs-keyword">new</span> File(destDirPath + File.separator + entry.getName());<br>                    targetFile.setExecutable(<span class="hljs-keyword">true</span>);<br>                    <span class="hljs-keyword">if</span>(!targetFile.getParentFile().exists())&#123;<br>                        targetFile.getParentFile().mkdirs();<br>                    &#125;<br>                    targetFile.createNewFile();<br>                    InputStream is = zipFile.getInputStream(entry);<br>                    FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(targetFile);<br>                    <span class="hljs-keyword">int</span> len;<br>                    <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-keyword">while</span> ((len = is.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                        fos.write(buf, <span class="hljs-number">0</span>, len);<br>                    &#125;<br>                    fos.close();<br>                    is.close();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>            LogUtils.info(<span class="hljs-string">&quot;unZip time--&gt;&quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot; ms&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;unzip error from FileUtil&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(zipFile != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    zipFile.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//MultipartFile change to file may create a temp file in the project root folder(delete the temp file)</span><br>            File del = <span class="hljs-keyword">new</span> File(file.toURI());  <br>            del.delete(); <br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="inputStreamToFile"><a href="#inputStreamToFile" class="headerlink" title="inputStreamToFile"></a>inputStreamToFile</h1><p>unzip方法中的inputStreamToFile方法，这个方法的目的是把MultipartFile转成File类型，但是会在项目根目录下生成一个临时文件，切记要删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inputStreamToFile</span><span class="hljs-params">(InputStream ins, File file)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>            <span class="hljs-keyword">int</span> bytesRead = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br>            <span class="hljs-keyword">while</span> ((bytesRead = ins.read(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">8192</span>)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            os.close();<br>            ins.close();<br>            LogUtils.info(<span class="hljs-string">&quot;MultipartFile transform to File completed!&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="parseExcelFile"><a href="#parseExcelFile" class="headerlink" title="parseExcelFile"></a>parseExcelFile</h1><p>parseExcelFile方法是解析excel的方法，里面包括我自己项目的逻辑处理，大家可以删除这些代码，只保留解析excel的代码就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseExcelFile</span><span class="hljs-params">(File file,String createdId,String uuid)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <br>        LogUtils.info(<span class="hljs-string">&quot;file name:&quot;</span>+file.getName());<br>        FileInputStream is = <span class="hljs-keyword">new</span> FileInputStream(file); <br>        Workbook workbook = WorkbookFactory.create(is);<br>        Sheet sheet = workbook.getSheetAt(<span class="hljs-number">0</span>);<br>        <br>        <span class="hljs-keyword">int</span> firstRowIndex = sheet.getFirstRowNum() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> lastRowIndex = sheet.getLastRowNum();<br>        <br>        List&lt;VapBatchPersonInfo&gt; batchPersonList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> rIndex = firstRowIndex; rIndex &lt;= lastRowIndex; rIndex++) &#123;<br>            <br>            VapBatchPersonInfo vapBatchPersonInfo  = <span class="hljs-keyword">new</span> VapBatchPersonInfo();<br>            Row row = sheet.getRow(rIndex);<br>            <span class="hljs-keyword">if</span> (row != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">int</span> firstCellIndex = row.getFirstCellNum();<br>                <span class="hljs-keyword">int</span> lastCellIndex = row.getLastCellNum();<br>                JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>                jsonObject.put(KEY_CREATED_ID, createdId);<br> <br>                Cell resultCell = row.createCell(lastCellIndex);<br>                Cell msgCell = row.createCell(lastCellIndex + <span class="hljs-number">1</span>);<br>                Boolean flag = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> cIndex = firstCellIndex; cIndex &lt; lastCellIndex; cIndex++) &#123;<br>                    Cell cell = row.getCell(cIndex);<br>                    String titleName = sheet.getRow(<span class="hljs-number">0</span>).getCell(cIndex).toString();<br>                    String checkTitleName = checkTitleName(cIndex, titleName);<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;SUCCESS&quot;</span>.equals(checkTitleName)) &#123;<br>                        msgCell.setCellValue(checkTitleName);<br>                        resultCell.setCellValue(<span class="hljs-string">&quot;Failed&quot;</span>);<br>                        flag = <span class="hljs-keyword">true</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (cell != <span class="hljs-keyword">null</span>) &#123;<br>                        cell.setCellType(CellType.STRING);<br>                        jsonObject.put(titleName, cell.toString());<br>                    &#125;<br> <br>                &#125;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    rIndex = <span class="hljs-number">0</span>;<br>                    lastRowIndex = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    vapBatchPersonInfo.setBatchNo(uuid);<br>                    vapBatchPersonInfo.setName(jsonObject.getString(<span class="hljs-string">&quot;fullName&quot;</span>));<br>                    vapBatchPersonInfo.setImageName(jsonObject.getString(<span class="hljs-string">&quot;imageName&quot;</span>));<br>                    vapBatchPersonInfo.setConfidenceThreshold(jsonObject.getString(<span class="hljs-string">&quot;confidenceThreshold&quot;</span>));<br>                    vapBatchPersonInfo.setCreatedId(jsonObject.getString(<span class="hljs-string">&quot;createdId&quot;</span>));<br>                    vapBatchPersonInfo.setIdentityNo(jsonObject.getString(<span class="hljs-string">&quot;identityNo&quot;</span>));<br>                    vapBatchPersonInfo.setCreatedDate(<span class="hljs-keyword">new</span> Date());<br>                    vapBatchPersonInfo.setLastUpdatedId(jsonObject.getString(<span class="hljs-string">&quot;createdId&quot;</span>));<br>                    vapBatchPersonInfo.setLastUpdatedDate(<span class="hljs-keyword">new</span> Date());<br>                    vapBatchPersonInfo.setStatus(TaskStatus.RUNNING);<br>                    batchPersonList.add(vapBatchPersonInfo);<br>                &#125;<br>            &#125;<br>        &#125;<br>        batchPersonInfoRepository.saveAll(batchPersonList);<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="解析图片的方法"><a href="#解析图片的方法" class="headerlink" title="解析图片的方法"></a>解析图片的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseImageFile</span><span class="hljs-params">(File file, String createdId, String uuid)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <br>        String imgStr =<span class="hljs-string">&quot;&quot;</span>;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>) file.length()]; <br>        <span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">int</span> numRead = <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">while</span> (offset &lt; buffer.length &amp;&amp; (numRead = fis.read(buffer, offset, buffer.length - offset)) &gt;= <span class="hljs-number">0</span>) &#123;<br>            offset += numRead;<br>        &#125; <br>        <span class="hljs-keyword">if</span> (offset != buffer.length) &#123; <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Could not completely read file &quot;</span> + file.getName()); <br>        &#125; <br>        fis.close(); <br>        Base64 encoder = <span class="hljs-keyword">new</span> Base64();<br>        imgStr = Base64.encodeBase64String(buffer);<br>        imgStr.length();<br>        LogUtils.info(<span class="hljs-string">&quot;file name:&quot;</span>+file.getName());<br><span class="hljs-comment">//        LogUtils.info(&quot;file imgStr:&quot;+imgStr);</span><br><span class="hljs-comment">//        LogUtils.info(&quot;file imgStr.length:&quot;+imgStr.length());</span><br> <br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="FileConfig文件"><a href="#FileConfig文件" class="headerlink" title="FileConfig文件"></a>FileConfig文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *Jun 12, 2019</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * FileConfig.java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;upload&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileConfig</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String localtion;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String maxFileSize;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String maxRequestSize;    <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> localtion the localtion to set</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocaltion</span><span class="hljs-params">(String localtion)</span> </span>&#123;<br>        FileConfig.localtion = localtion;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxFileSize the maxFileSize to set</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxFileSize</span><span class="hljs-params">(String maxFileSize)</span> </span>&#123;<br>        FileConfig.maxFileSize = maxFileSize;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxRequestSize the maxRequestSize to set</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxRequestSize</span><span class="hljs-params">(String maxRequestSize)</span> </span>&#123;<br>        FileConfig.maxRequestSize = maxRequestSize;<br>    &#125;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>配置文件类型是yml,大家也可以自己改成properties文件格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">upload: <br>  #localtion: $&#123;UPLOAD_DIR:/home/data/test&#125;<br>  localtion: $&#123;UPLOAD_DIR:D:/test&#125;<br>  maxFileSize: 10240KB <br>  maxRequestSize: 102400KB  <br></code></pre></td></tr></table></figure><h1 id="FileUtil类"><a href="#FileUtil类" class="headerlink" title="FileUtil类"></a>FileUtil类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.nio.file.attribute.PosixFilePermission;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipFile;<br> <br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br> <br><span class="hljs-keyword">import</span> sg.com.mha.ummi.common.util.LogUtils;<br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUtil</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearFiles</span><span class="hljs-params">(String workspaceRootPath)</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(workspaceRootPath);<br>        deleteFile(file);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteFile</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                File[] files = file.listFiles();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>                    deleteFile(files[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        file.delete();<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileWrite</span><span class="hljs-params">(String str, String fileNamePath)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileWriter writer = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            File file = <span class="hljs-keyword">new</span> File(fileNamePath);<br>            <span class="hljs-keyword">if</span> (!file.getParentFile().exists()) &#123;<br>                file.getParentFile().mkdirs();<br>                file.createNewFile();<br>            &#125;<br>            writer = <span class="hljs-keyword">new</span> FileWriter(file, <span class="hljs-keyword">true</span>);<br>            writer.write(str + System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>));<br> <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            LogUtils.error(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (writer != <span class="hljs-keyword">null</span>) &#123;<br>                writer.close();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">changePermission</span><span class="hljs-params">(File dirFile, <span class="hljs-keyword">int</span> mode)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">char</span>[] modes = Integer.toOctalString(mode).toCharArray();<br>        <span class="hljs-keyword">if</span> (modes.length != <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Set&lt;PosixFilePermission&gt; perms = <span class="hljs-keyword">new</span> HashSet&lt;PosixFilePermission&gt;();<br>        <span class="hljs-keyword">switch</span> (modes[<span class="hljs-number">0</span>]) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                perms.add(PosixFilePermission.OWNER_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                perms.add(PosixFilePermission.OWNER_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                perms.add(PosixFilePermission.OWNER_READ);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                perms.add(PosixFilePermission.OWNER_READ);<br>                perms.add(PosixFilePermission.OWNER_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>                perms.add(PosixFilePermission.OWNER_READ);<br>                perms.add(PosixFilePermission.OWNER_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>                perms.add(PosixFilePermission.OWNER_READ);<br>                perms.add(PosixFilePermission.OWNER_WRITE);<br>                perms.add(PosixFilePermission.OWNER_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br> <br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (modes[<span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                perms.add(PosixFilePermission.GROUP_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                perms.add(PosixFilePermission.GROUP_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                perms.add(PosixFilePermission.GROUP_READ);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                perms.add(PosixFilePermission.GROUP_READ);<br>                perms.add(PosixFilePermission.GROUP_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>                perms.add(PosixFilePermission.GROUP_READ);<br>                perms.add(PosixFilePermission.GROUP_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>                perms.add(PosixFilePermission.GROUP_READ);<br>                perms.add(PosixFilePermission.GROUP_WRITE);<br>                perms.add(PosixFilePermission.GROUP_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (modes[<span class="hljs-number">2</span>]) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                perms.add(PosixFilePermission.OTHERS_EXECUTE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                perms.add(PosixFilePermission.OTHERS_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                perms.add(PosixFilePermission.OTHERS_READ);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                perms.add(PosixFilePermission.OTHERS_EXECUTE);<br>                perms.add(PosixFilePermission.OTHERS_READ);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>                perms.add(PosixFilePermission.OTHERS_READ);<br>                perms.add(PosixFilePermission.OTHERS_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>                perms.add(PosixFilePermission.OTHERS_EXECUTE);<br>                perms.add(PosixFilePermission.OTHERS_READ);<br>                perms.add(PosixFilePermission.OTHERS_WRITE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            Path path = Paths.get(dirFile.getAbsolutePath());<br>            Files.setPosixFilePermissions(path, perms);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title">mkFile</span><span class="hljs-params">(String fileName)</span> </span>&#123;<br>        File f = <span class="hljs-keyword">new</span> File(fileName);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (f.exists()) &#123;<br>                f.delete();<br>            &#125;<br>            f.createNewFile();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>    &#125;<br> <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyDirAndFile</span><span class="hljs-params">(String oldPath, String newPath)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">new</span> File(newPath)).exists()) &#123;<br>            (<span class="hljs-keyword">new</span> File(newPath)).mkdir();<br>        &#125;<br>        File file = <span class="hljs-keyword">new</span> File(oldPath);<br>        <span class="hljs-comment">//file name list</span><br>        String[] filePaths = file.list();<br>        <span class="hljs-keyword">for</span> (String filePath : filePaths) &#123;<br>            String oldFullPath = oldPath + file.separator + filePath;<br>            String newFullPath = newPath + file.separator + filePath;<br>            File oldFile = <span class="hljs-keyword">new</span> File(oldFullPath);<br>            File newFile = <span class="hljs-keyword">new</span> File(newFullPath);<br>            <span class="hljs-keyword">if</span> (oldFile.isDirectory()) &#123;<br>                copyDirAndFile(oldFullPath, newFullPath);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldFile.isFile()) &#123;<br>                copyFile(oldFile, newFile);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(File source, File dest)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileChannel inputChannel = <span class="hljs-keyword">null</span>;<br>        FileChannel outputChannel = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputChannel = <span class="hljs-keyword">new</span> FileInputStream(source).getChannel();<br>            outputChannel = <span class="hljs-keyword">new</span> FileOutputStream(dest).getChannel();<br>            outputChannel.transferFrom(inputChannel, <span class="hljs-number">0</span>, inputChannel.size());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            inputChannel.close();<br>            outputChannel.close();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> panchaoyuan</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFile    Unzipped file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> destDirPath   Unzipped destination folder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RuntimeException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unZip</span><span class="hljs-params">(MultipartFile  srcFile, String destDirPath,String savePath)</span> <span class="hljs-keyword">throws</span> RuntimeException, IOException </span>&#123;<br>        <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>        <br>        File file = <span class="hljs-keyword">null</span>;  <br>        InputStream ins = srcFile.getInputStream();  <br>        file=<span class="hljs-keyword">new</span> File(savePath+srcFile.getOriginalFilename()); <br>        LogUtils.info(<span class="hljs-string">&quot;MultipartFile transform to File,MultipartFile name:&quot;</span>+srcFile.getOriginalFilename());<br>        inputStreamToFile(ins, file);  <br>        <br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(file.getPath() + <span class="hljs-string">&quot;,file is not found&quot;</span>);<br>        &#125;<br>        ZipFile zipFile = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            zipFile = <span class="hljs-keyword">new</span> ZipFile(file);<br>            Enumeration&lt;?&gt; entries = zipFile.entries();<br>            <span class="hljs-keyword">while</span> (entries.hasMoreElements()) &#123;<br>                ZipEntry entry = (ZipEntry) entries.nextElement();<br>                LogUtils.info(<span class="hljs-string">&quot;zipFile context name:&quot;</span>+entry.getName());<br>                <span class="hljs-keyword">if</span> (entry.isDirectory()) &#123;<br>                    String dirPath = destDirPath + File.separator+ entry.getName();<br>                    File dir = <span class="hljs-keyword">new</span> File(dirPath);<br>                    dir.mkdirs();<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    File targetFile = <span class="hljs-keyword">new</span> File(destDirPath + File.separator + entry.getName());<br>                    targetFile.setExecutable(<span class="hljs-keyword">true</span>);<br>                    <span class="hljs-keyword">if</span>(!targetFile.getParentFile().exists())&#123;<br>                        targetFile.getParentFile().mkdirs();<br>                    &#125;<br>                    targetFile.createNewFile();<br>                    InputStream is = zipFile.getInputStream(entry);<br>                    FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(targetFile);<br>                    <span class="hljs-keyword">int</span> len;<br>                    <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-keyword">while</span> ((len = is.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                        fos.write(buf, <span class="hljs-number">0</span>, len);<br>                    &#125;<br>                    fos.close();<br>                    is.close();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>            LogUtils.info(<span class="hljs-string">&quot;unZip time--&gt;&quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot; ms&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;unzip error from FileUtil&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(zipFile != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    zipFile.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//MultipartFile change to file may create a temp file in the project root folder(delete the temp file)</span><br>            File del = <span class="hljs-keyword">new</span> File(file.toURI());  <br>            del.delete(); <br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * MultipartFile changed to File</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> panchaoyuan</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inputStreamToFile</span><span class="hljs-params">(InputStream ins, File file)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>            <span class="hljs-keyword">int</span> bytesRead = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br>            <span class="hljs-keyword">while</span> ((bytesRead = ins.read(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">8192</span>)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            os.close();<br>            ins.close();<br>            LogUtils.info(<span class="hljs-string">&quot;MultipartFile transform to File completed!&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br> <br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> panchaoyuan</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;File&gt; <span class="hljs-title">getSubFiles</span><span class="hljs-params">(String  desFile,List&lt;File&gt; fileList)</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(desFile);<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span> (File fileIndex : files) &#123;<br>            <span class="hljs-keyword">if</span> (!fileIndex.exists()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;Cannot find &quot;</span> + fileIndex);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileIndex.isFile()) &#123;<br>                fileList.add(fileIndex);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileIndex.isDirectory()) &#123;<br>                    getSubFiles(fileIndex.getAbsolutePath(),fileList);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fileList;<br>    &#125;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#%E4%B8%80">一</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#%E4%BA%8C">二</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#%E8%A7%A3%E5%8E%8Bzip%E6%96%87%E4%BB%B6%E7%9A%84unzip%E6%96%B9%E6%B3%95">解压zip文件的unzip方法</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#inputstreamtofile">inputStreamToFile</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#parseexcelfile">parseExcelFile</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#%E8%A7%A3%E6%9E%90%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95">解析图片的方法</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#fileconfig%E6%96%87%E4%BB%B6">FileConfig文件</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a><a href="https://bk.cuixiaoyan.xyz/archives/jiexi#fileutil%E7%B1%BB">FileUtil类</a></p>]]></content>
    
    
    <categories>
      
      <category>excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实现微信头像加国旗</title>
    <link href="/blog/2021/02/17/python%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A4%B4%E5%83%8F%E5%8A%A0%E5%9B%BD%E6%97%97/"/>
    <url>/blog/2021/02/17/python%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A4%B4%E5%83%8F%E5%8A%A0%E5%9B%BD%E6%97%97/</url>
    
    <content type="html"><![CDATA[<p>喜迎国庆,最近到处都是充满这对祖国对祝福,这里身为码农我也很开心。 并不是为了想放假(手动狗头)<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190930-152916@2x_1569828571186.png" alt="WX20190930-152916@2x">代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf8 -*-</span><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-comment"># 读取头像和国旗图案</span><br>img_head = cv2.imread(<span class="hljs-string">&#x27;/Users/cuixiaoyan/biancheng/python/guoqi/img/touxiang.jpeg&#x27;</span>)<br>img_flag = cv2.imread(<span class="hljs-string">&#x27;/Users/cuixiaoyan/biancheng/python/guoqi/img/guoqi.png&#x27;</span>)<br><span class="hljs-comment"># 获取头像和国旗图案宽度</span><br>w_head, h_head = img_head.shape[:<span class="hljs-number">2</span>]<br>w_flag, h_flag = img_flag.shape[:<span class="hljs-number">2</span>]<br><span class="hljs-comment"># 计算图案缩放比例</span><br>scale = w_head / w_flag / <span class="hljs-number">4</span><br><span class="hljs-comment"># 缩放图案</span><br>img_flag = cv2.resize(img_flag, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), fx=scale, fy=scale)<br><span class="hljs-comment"># 获取缩放后新宽度</span><br>w_flag, h_flag = img_flag.shape[:<span class="hljs-number">2</span>]<br><span class="hljs-comment"># 按3个通道合并图片</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):<br>    img_head[w_head - w_flag:, h_head - h_flag:, c] = img_flag[:, :, c]<br><span class="hljs-comment"># 保存最终结果 路径可以写为绝对 或者相对</span><br>cv2.imwrite(<span class="hljs-string">&#x27;/Users/cuixiaoyan/biancheng/python/guoqi/img/duang.png&#x27;</span>, img_head)<br></code></pre></td></tr></table></figure><p>祝福祖国永远繁荣昌盛。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分库分表之后,id主键如何处理</title>
    <link href="/blog/2021/02/12/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%B9%8B%E5%90%8E,id%E4%B8%BB%E9%94%AE%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/"/>
    <url>/blog/2021/02/12/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%B9%8B%E5%90%8E,id%E4%B8%BB%E9%94%AE%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><strong>其实这是分库分表之后你必然要面对的一个问题，就是 id 咋生成？因为要是分成多个表之后，每个表都是从 1 开始累加，那肯定不对啊，需要一个全局唯一的 id 来支持。所以这都是你实际生产环境中必须考虑的问题。</strong></p><h1 id="数据库自增-id"><a href="#数据库自增-id" class="headerlink" title="数据库自增 id"></a>数据库自增 id</h1><p>这个就是说你的系统里每次得到一个 id，都是往一个库的一个表里插入一条没什么业务含义的数据，然后获取一个数据库自增的一个 id。拿到这个 id 之后再往对应的分库分表里去写入。</p><p>这个方案的好处就是方便简单，谁都会用；缺点就是单库生成自增 id，要是高并发的话，就会有瓶颈的；如果你硬是要改进一下，那么就专门开一个服务出来，这个服务每次就拿到当前 id 最大值，然后自己递增几个 id，一次性返回一批 id，然后再把当前最大 id 值修改成递增几个 id 之后的一个值；但是无论如何都是基于单个数据库。</p><p>适合的场景：你分库分表就俩原因，要不就是单库并发太高，要不就是单库数据量太大；除非是你并发不高，但是数据量太大导致的分库分表扩容，你可以用这个方案，因为可能每秒最高并发最多就几百，那么就走单独的一个库和表生成自增主键即可。</p><h1 id="设置数据库-sequence-或者表自增字段步长"><a href="#设置数据库-sequence-或者表自增字段步长" class="headerlink" title="设置数据库 sequence 或者表自增字段步长"></a>设置数据库 sequence 或者表自增字段步长</h1><p>可以通过设置数据库 sequence 或者表的自增字段步长来进行水平伸缩。</p><p>比如说，现在有 8 个服务节点，每个服务节点使用一个 sequence 功能来产生 ID，每个 sequence 的起始 ID 不同，并且依次递增，步长都是 8。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1756639-20190929231341180-1764461227_1569810079034.jpg" alt="1756639-20190929231341180-1764461227">适合的场景：在用户防止产生的 ID 重复时，这种方案实现起来比较简单，也能达到性能目标。但是服务节点固定，步长也固定，将来如果还要增加服务节点，就不好搞了。</p><h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><p>好处就是本地生成，不要基于数据库来了；不好之处就是，UUID 太长了、占用空间大，作为主键性能太差了；更重要的是，UUID 不具有有序性，会导致 B+ 树索引在写的时候有过多的随机写操作（连续的 ID 可以产生部分顺序写），还有，由于在写的时候不能产生有顺序的 append 操作，而需要进行 insert 操作，将会读取整个 B+ 树节点到内存，在插入这条记录后会将整个节点写回磁盘，这种操作在记录占用空间比较大的情况下，性能下降明显。</p><p>适合的场景：如果你是要随机生成个什么文件名、编号之类的，你可以用 UUID，但是作为主键是不能用 UUID 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">UUID.randomUUID().toString().replace(“-”, “”) -&gt; sfsdf23423rr234sfdaf<br> <br></code></pre></td></tr></table></figure><h1 id="获取系统当前时间"><a href="#获取系统当前时间" class="headerlink" title="获取系统当前时间"></a>获取系统当前时间</h1><p>这个就是获取当前时间即可，但是问题是，并发很高的时候，比如一秒并发几千，会有重复的情况，这个是肯定不合适的。基本就不用考虑了。</p><p>适合的场景：一般如果用这个方案，是将当前时间跟很多其他的业务字段拼接起来，作为一个 id，如果业务上你觉得可以接受，那么也是可以的。你可以将别的业务字段值跟当前时间拼接起来，组成一个全局唯一的编号。</p><h1 id="snowflake-算法"><a href="#snowflake-算法" class="headerlink" title="snowflake 算法"></a>snowflake 算法</h1><p>snowflake 算法是 twitter 开源的分布式 id 生成算法，采用 Scala 语言实现，是把一个 64 位的 long 型的 id，1 个 bit 是不用的，用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><ol><li>1 bit：不用，为啥呢？因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</li><li>41 bit：表示的是时间戳，单位是毫秒。41 bit 可以表示的数字多达 2^41 - 1，也就是可以标识 2^41 - 1 个毫秒值，换算成年就是表示69年的时间。</li><li>10 bit：记录工作机器 id，代表的是这个服务最多可以部署在 2^10台机器上哪，也就是1024台机器。但是 10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2^5个机房（32个机房），每个机房里可以代表 2^5 个机器（32台机器）。</li><li>12 bit：这个是用来记录同一个毫秒内产生的不同 id，12 bit 可以代表的最大正整数是 2^12 - 1 = 4096，也就是说可以用这个 12 bit 代表的数字来区分同一个毫秒内的 4096 个不同的 id。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdWorker</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IdWorker</span><span class="hljs-params">(<span class="hljs-keyword">long</span> workerId, <span class="hljs-keyword">long</span> datacenterId, <span class="hljs-keyword">long</span> sequence)</span> </span>&#123;<br>        <span class="hljs-comment">// sanity check for workerId</span><br>        <span class="hljs-comment">// 这儿不就检查了一下，要求就是你传递进来的机房id和机器id不能超过32，不能小于0</span><br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                    String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                    String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        System.out.printf(<br>                <span class="hljs-string">&quot;worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d&quot;</span>,<br>                timestampLeftShift, datacenterIdBits, workerIdBits, sequenceBits, workerId);<br> <br>        <span class="hljs-keyword">this</span>.workerId = workerId;<br>        <span class="hljs-keyword">this</span>.datacenterId = datacenterId;<br>        <span class="hljs-keyword">this</span>.sequence = sequence;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> twepoch = <span class="hljs-number">1288834974657L</span>;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerIdBits = <span class="hljs-number">5L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterIdBits = <span class="hljs-number">5L</span>;<br> <br>    <span class="hljs-comment">// 这个是二进制运算，就是 5 bit最多只能有31个数字，也就是说机器id最多只能是32以内</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> maxWorkerId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br> <br>    <span class="hljs-comment">// 这个是一个意思，就是 5 bit最多只能有31个数字，机房id最多只能是32以内</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> maxDatacenterId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequenceBits = <span class="hljs-number">12L</span>;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerIdShift = sequenceBits;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequenceMask = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastTimestamp = -<span class="hljs-number">1L</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getWorkerId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> workerId;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getDatacenterId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> datacenterId;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTimestamp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 这儿就是获取当前时间戳，单位是毫秒</span><br>        <span class="hljs-keyword">long</span> timestamp = timeGen();<br> <br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            System.err.printf(<span class="hljs-string">&quot;clock is moving backwards.  Rejecting requests until %d.&quot;</span>, lastTimestamp);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(String.format(<br>                    <span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            <span class="hljs-comment">// 这个意思是说一个毫秒内最多只能有4096个数字</span><br>            <span class="hljs-comment">// 无论你传递多少进来，这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span><br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0</span>;<br>        &#125;<br> <br>        <span class="hljs-comment">// 这儿记录一下最近一次生成id的时间戳，单位是毫秒</span><br>        lastTimestamp = timestamp;<br> <br>        <span class="hljs-comment">// 这儿就是将时间戳左移，放到 41 bit那儿；</span><br>        <span class="hljs-comment">// 将机房 id左移放到 5 bit那儿；</span><br>        <span class="hljs-comment">// 将机器id左移放到5 bit那儿；将序号放最后12 bit；</span><br>        <span class="hljs-comment">// 最后拼接起来成一个 64 bit的二进制数字，转换成 10 进制就是个 long 型</span><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift)<br>                | (workerId &lt;&lt; workerIdShift) | sequence;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">tilNextMillis</span><span class="hljs-params">(<span class="hljs-keyword">long</span> lastTimestamp)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> timestamp = timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">timeGen</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br> <br>    <span class="hljs-comment">// ---------------测试---------------</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        IdWorker worker = <span class="hljs-keyword">new</span> IdWorker(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>            System.out.println(worker.nextId());<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>怎么说呢，大概这个意思吧，就是说 41 bit 是当前毫秒单位的一个时间戳，就这意思；然后 5 bit 是你传递进来的一个机房 id（但是最大只能是 32 以内），另外 5 bit 是你传递进来的机器 id（但是最大只能是 32 以内），剩下的那个 12 bit序列号，就是如果跟你上次生成 id 的时间还在一个毫秒内，那么会把顺序给你累加，最多在 4096 个序号以内。</p><p>所以你自己利用这个工具类，自己搞一个服务，然后对每个机房的每个机器都初始化这么一个东西，刚开始这个机房的这个机器的序号就是 0。然后每次接收到一个请求，说这个机房的这个机器要生成一个 id，你就找到对应的 Worker 生成。</p><p>利用这个 snowflake 算法，你可以开发自己公司的服务，甚至对于机房 id 和机器 id，反正给你预留了 5 bit + 5 bit，你换成别的有业务含义的东西也可以的。</p><p>这个 snowflake 算法相对来说还是比较靠谱的，所以你要真是搞分布式 id 生成，如果是高并发啥的，那么用这个应该性能比较好，一般每秒几万并发的场景，也足够你用了。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么快速插100条数据用时最短</title>
    <link href="/blog/2021/02/12/%E6%80%8E%E4%B9%88%E5%BF%AB%E9%80%9F%E6%8F%92100%E6%9D%A1%E6%95%B0%E6%8D%AE%E7%94%A8%E6%97%B6%E6%9C%80%E7%9F%AD/"/>
    <url>/blog/2021/02/12/%E6%80%8E%E4%B9%88%E5%BF%AB%E9%80%9F%E6%8F%92100%E6%9D%A1%E6%95%B0%E6%8D%AE%E7%94%A8%E6%97%B6%E6%9C%80%E7%9F%AD/</url>
    
    <content type="html"><![CDATA[<p>问：为何对同一个表的插入多线程会比单线程快？同一时间对一个表的写操作不应该是独占的吗？ 答：在数据里做插入操作的时候，整体时间的分配是这样的：</p><ol><li>链接耗时 （30%）</li><li>发送query到服务器 （20%）</li><li>解析query （20%）</li><li>插入操作 （10% * 词条数目）</li><li>插入index （10% * Index的数目）</li><li>关闭链接 （10%） 从这里可以看出来，真正耗时的不是操作，而是链接，解析的过程。 MySQL插入数据在写阶段是独占的，但是插入一条数据仍然需要解析、计算、最后才进行写处理，比如要给每一条记录分配自增id，校验主键唯一键属性，或者其他一些逻辑处理，都是需要计算的，所以说多线程能够提高效率。 多线程插入(多表) 分区分表后使用多线程插入。 预处理SQL</li><li>普通SQL，即使用Statement接口执行SQL</li><li>预处理SQL，即使用PreparedStatement接口执行SQL 使用PreparedStatement接口允许数据库预编译SQL语句，以后只需传入参数，避免了数据库每次都编译SQL语句，因此性能更好。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">String sql = <span class="hljs-string">&quot;insert into testdb.tuser (name, remark, createtime, updatetime) values (?, ?, ?, ?)&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-comment">//从池中获取连接</span><br>    Connection conn = myBroker.getConnection();<br>    PreparedStatement pstmt = conn.prepareStatement(sql);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>            pstmt.setString(<span class="hljs-number">1</span>, RandomToolkit.generateString(<span class="hljs-number">12</span>));<br>            pstmt.setString(<span class="hljs-number">2</span>, RandomToolkit.generateString(<span class="hljs-number">24</span>));<br>            pstmt.setDate(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> Date(System.currentTimeMillis()));<br>            pstmt.setDate(<span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> Date(System.currentTimeMillis()));<br>            <span class="hljs-comment">//加入批处理</span><br>            pstmt.addBatch();<br>    &#125;<br>    pstmt.executeBatch();    <span class="hljs-comment">//执行批处理</span><br>    pstmt.close();<br>    myBroker.freeConnection(conn); <span class="hljs-comment">//连接归池</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>多值插入SQL</strong></p><ol><li>普通插入SQL：INSERT INTO TBL_TEST (id) VALUES(1)</li><li>多值插入SQL：INSERT INTO TBL_TEST (id) VALUES (1), (2), (3) 使用多值插入SQL，SQL语句的总长度减少，即减少了网络IO，同时也降低了连接次数，数据库一次SQL解析，能够插入多条数据。 <strong>事务(N条提交一次)</strong> 在一个事务中提交大量INSERT语句可以提高性能。</li><li>将表的存储引擎修改为myisam</li><li>将 sql 拼接成字符串，每 1000 条左右提交事务。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// &lt;summary&gt;</span><br>        <span class="hljs-comment">/// 执行多条SQL语句，实现数据库事务。</span><br>        <span class="hljs-comment">/// &lt;/summary&gt;mysql数据库</span><br>        <span class="hljs-comment">/// &lt;param name=&quot;SQLStringList&quot;&gt;多条SQL语句&lt;/param&gt;</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExecuteSqlTran</span><span class="hljs-params">(List&lt;string&gt; SQLStringList)</span></span><br><span class="hljs-function">        </span>&#123;<br>            using (MySqlConnection conn = <span class="hljs-keyword">new</span> MySqlConnection(connectionString))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (DBVariable.flag)<br>                &#123;<br>                    conn.Open();<br>                    MySqlCommand cmd = <span class="hljs-keyword">new</span> MySqlCommand();<br>                    cmd.Connection = conn;<br>                    MySqlTransaction tx = conn.BeginTransaction();<br>                    cmd.Transaction = tx;<br>                    <span class="hljs-keyword">try</span><br>                    &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; SQLStringList.Count; n++)<br>                        &#123;<br>                            string strsql = SQLStringList[n].ToString();<br>                            <span class="hljs-keyword">if</span> (strsql.Trim().Length &gt; <span class="hljs-number">1</span>)<br>                            &#123;<br>                                cmd.CommandText = strsql;<br>                                cmd.ExecuteNonQuery();<br>                            &#125;<br>                            <span class="hljs-comment">//后来加上的</span><br>                            <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span> &amp;&amp; (n % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span> || n == SQLStringList.Count - <span class="hljs-number">1</span>))<br>                            &#123;<br>                                tx.Commit();<br>                                tx = conn.BeginTransaction();<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-comment">//tx.Commit();//原来一次性提交</span><br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (System.Data.SqlClient.SqlException E)<br>                    &#123;<br>                        tx.Rollback();<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(E.Message);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>10w条数据大概用时10s！</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将map按照值排序</title>
    <link href="/blog/2021/02/12/%E5%B0%86map%E6%8C%89%E7%85%A7%E5%80%BC%E6%8E%92%E5%BA%8F/"/>
    <url>/blog/2021/02/12/%E5%B0%86map%E6%8C%89%E7%85%A7%E5%80%BC%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>值里面存放的是一个对象需要根据id排序 将相同的人放在一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list =<br>               <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;(correctRateOm.entrySet());<br>       Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>               <span class="hljs-keyword">return</span> (o1.getValue().getStudentId()).compareTo(o2.getValue().getStudentId());<br>           &#125;<br>       &#125;);<br></code></pre></td></tr></table></figure><h1 id="list集合分页"><a href="#list集合分页" class="headerlink" title="list集合分页"></a>list集合分页</h1><p>java对list进行分页 <strong>业务场景因为数据是通过从数据库中多次sql查出来之后存放到list 无法使用sql进行分页</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.unote.echarts.entity;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: unote</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: list分页工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: cuixy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2019-09-27 09:37</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageModel</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> page = <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前页</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> totalPages = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总页数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageRecorders;<span class="hljs-comment">// 每页5条数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalRows = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总数据数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageStartRow = <span class="hljs-number">0</span>;<span class="hljs-comment">// 每页的起始数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageEndRow = <span class="hljs-number">0</span>; <span class="hljs-comment">// 每页显示数据的终止数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasNextPage = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 是否有下一页</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasPreviousPage = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 是否有前一页</span><br>    <span class="hljs-keyword">private</span> List list;<br> <br>    <span class="hljs-comment">// private Iterator it;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageModel</span><span class="hljs-params">(List list, <span class="hljs-keyword">int</span> pageRecorders)</span> </span>&#123;<br>        init(list, pageRecorders);<span class="hljs-comment">// 通过对象集，记录总数划分</span><br>    &#125;<br> <br>    <span class="hljs-comment">/** */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化list，并告之该list每页的记录数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRecorders</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(List list, <span class="hljs-keyword">int</span> pageRecorders)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageRecorders = pageRecorders;<br>        <span class="hljs-keyword">this</span>.list = list;<br>        totalRows = list.size();<br>        <span class="hljs-comment">// it = list.iterator();</span><br>        hasPreviousPage = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> ((totalRows % pageRecorders) == <span class="hljs-number">0</span>) &#123;<br>            totalPages = totalRows / pageRecorders;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            totalPages = totalRows / pageRecorders + <span class="hljs-number">1</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (page &gt;= totalPages) &#123;<br>            hasNextPage = <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hasNextPage = <span class="hljs-keyword">true</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (totalRows &lt; pageRecorders) &#123;<br>            <span class="hljs-keyword">this</span>.pageStartRow = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.pageEndRow = totalRows;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.pageStartRow = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.pageEndRow = pageRecorders;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">// 判断要不要分页</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list.size() &gt; <span class="hljs-number">5</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHasPreviousPage</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> hasPreviousPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hasPreviousPage = hasPreviousPage;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">(<span class="hljs-keyword">int</span> temp)</span> </span>&#123;<br>        String str = Integer.toString(temp);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">description</span><span class="hljs-params">()</span> </span>&#123;<br> <br>        String description = <span class="hljs-string">&quot;共有数据数:&quot;</span> + <span class="hljs-keyword">this</span>.getTotalRows()<br>                + <span class="hljs-string">&quot;共有页数: &quot;</span> + <span class="hljs-keyword">this</span>.getTotalPages()<br>                + <span class="hljs-string">&quot;当前页数为:&quot;</span> + <span class="hljs-keyword">this</span>.getPage()<br>                + <span class="hljs-string">&quot; 是否有前一页: &quot;</span> + <span class="hljs-keyword">this</span>.isHasPreviousPage()<br>                + <span class="hljs-string">&quot; 是否有下一页:&quot;</span> + <span class="hljs-keyword">this</span>.isHasNextPage()<br>                + <span class="hljs-string">&quot; 开始行数:&quot;</span> + <span class="hljs-keyword">this</span>.getPageStartRow()<br>                + <span class="hljs-string">&quot; 终止行数:&quot;</span> + <span class="hljs-keyword">this</span>.getPageEndRow();<br> <br>        System.out.println(description);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">getNextPage</span><span class="hljs-params">()</span> </span>&#123;<br>        page = page + <span class="hljs-number">1</span>;<br> <br>        disposePage();<br> <br>        System.out.println(<span class="hljs-string">&quot;用户凋用的是第&quot;</span> + page + <span class="hljs-string">&quot;页&quot;</span>);<br>        <span class="hljs-keyword">this</span>.description();<br>        <span class="hljs-keyword">return</span> getObjects(page);<br>    &#125;<br> <br>    <span class="hljs-comment">/** */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理分页</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disposePage</span><span class="hljs-params">()</span> </span>&#123;<br> <br>        <span class="hljs-keyword">if</span> (page == <span class="hljs-number">0</span>) &#123;<br>            page = <span class="hljs-number">1</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> ((page - <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>            hasPreviousPage = <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hasPreviousPage = <span class="hljs-keyword">false</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (page &gt;= totalPages) &#123;<br>            hasNextPage = <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hasNextPage = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">getPreviousPage</span><span class="hljs-params">()</span> </span>&#123;<br> <br>        page = page - <span class="hljs-number">1</span>;<br> <br>        <span class="hljs-keyword">if</span> ((page - <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>            hasPreviousPage = <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hasPreviousPage = <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (page &gt;= totalPages) &#123;<br>            hasNextPage = <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hasNextPage = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.description();<br>        <span class="hljs-keyword">return</span> getObjects(page);<br>    &#125;<br> <br>    <span class="hljs-comment">/** */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取第几页的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">getObjects</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (page == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.setPage(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.setPage(page);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.disposePage();<br>        <span class="hljs-keyword">if</span> (page * pageRecorders &lt; totalRows) &#123;<span class="hljs-comment">// 判断是否为最后一页</span><br>            pageEndRow = page * pageRecorders;<br>            pageStartRow = pageEndRow - pageRecorders;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pageEndRow = totalRows;<br>            pageStartRow = pageRecorders * (totalPages - <span class="hljs-number">1</span>);<br>        &#125;<br> <br>        List objects = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (!list.isEmpty()) &#123;<br>            objects = list.subList(pageStartRow, pageEndRow);<br>        &#125;<br>        <span class="hljs-comment">//this.description();</span><br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">getFistPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isNext()) &#123;<br>            <span class="hljs-keyword">return</span> list.subList(<span class="hljs-number">0</span>, pageRecorders);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHasNextPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasNextPage;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHasNextPage</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> hasNextPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hasNextPage = hasNextPage;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> page;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.page = page;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageEndRow</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageEndRow;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageEndRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageEndRow)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageEndRow = pageEndRow;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageRecorders</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageRecorders;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageRecorders</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRecorders)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageRecorders = pageRecorders;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageStartRow</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageStartRow;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageStartRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageStartRow)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageStartRow = pageStartRow;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalPages</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalPages;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPages</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalPages)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalPages = totalPages;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalRows</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalRows;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalRows</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalRows)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalRows = totalRows;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHasPreviousPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasPreviousPage;<br>    &#125;<br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><p>调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">PageModel pm = <span class="hljs-keyword">new</span> PageModel(list, Integer.parseInt(page_size));<span class="hljs-comment">//每页显示条数</span><br> <br>List sublist = pm.getObjects(Integer.parseInt(page_no));<span class="hljs-comment">//显示第几页</span><br> <br> <br>data.put(<span class="hljs-string">&quot;list&quot;</span>, sublist);<br>data.put(<span class="hljs-string">&quot;total_count&quot;</span>, list.size());<br>data.put(<span class="hljs-string">&quot;page_no&quot;</span>, Integer.parseInt(page_no));<br>data.put(<span class="hljs-string">&quot;page_size&quot;</span>, Integer.parseInt(page_size));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取map对象中的最大最小值</title>
    <link href="/blog/2021/02/07/%E8%8E%B7%E5%8F%96map%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <url>/blog/2021/02/07/%E8%8E%B7%E5%8F%96map%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>遇到的问题是获取map中的最高成绩和最低成绩 xxx.entrySet() 这里放的你的map</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WechatIMG96_1569388966080.png" alt="WechatIMG96">两种方式</p><h1 id="1-8后"><a href="#1-8后" class="headerlink" title="1.8后"></a>1.8后</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList(correctRateOm.entrySet());<br>Collections.sort(list, (o1, o2) -&gt; (o1.getValue().getScore().intValue() - o2.getValue().getScore().intValue()));<br>        <br>Double minScore = list.get(<span class="hljs-number">0</span>).getValue().getScore();<br> <br>List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list1 = <span class="hljs-keyword">new</span> ArrayList(correctRateOm.entrySet());<br>Collections.sort(list1, (o1, o2) -&gt; (o2.getValue().getScore().intValue()) - o1.getValue().getScore().intValue());<br> <br>Double maxScore = list1.get(<span class="hljs-number">0</span>).getValue().getScore();<br></code></pre></td></tr></table></figure><h1 id="1-8前"><a href="#1-8前" class="headerlink" title="1.8前"></a>1.8前</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//最大值</span><br>               List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList(correctRateOm.entrySet());<br>               Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>                           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>                               <span class="hljs-keyword">return</span> (o2.getValue().getScore().intValue() - o1.getValue().getScore().intValue());<br>                           &#125;<br>                       &#125;<br>               );<br>Double maxScore = list.get(<span class="hljs-number">0</span>).getValue().getScore();<br><br>               <span class="hljs-comment">//最小值</span><br>               List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list1 = <span class="hljs-keyword">new</span> ArrayList(correctRateOm1.entrySet());<br>               Collections.sort(list1, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>                           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>                               <span class="hljs-keyword">return</span> (o1.getValue().getScore().intValue() - o2.getValue().getScore().intValue());<br>                           &#125;<br>                       &#125;<br>               );<br>Double minScore = list1.get(<span class="hljs-number">0</span>).getValue().getScore();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合RabbitMQ</title>
    <link href="/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88RabbitMQ/"/>
    <url>/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.rabbitmq.host=<span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.71</span><br>spring.rabbitmq.port=<span class="hljs-number">5672</span><br>spring.rabbitmq.username=light<br>spring.rabbitmq.password=light<br>spring.rabbitmq.virtual-host=/test<br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpConfirguration</span> </span>&#123;<br> <br>  <span class="hljs-comment">//=============简单、工作队列模式===============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SIMPLE_QUEUE = <span class="hljs-string">&quot;simple_queue&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SIMPLE_QUEUE, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-comment">//===============发布/订阅模式============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PS_QUEUE_1 = <span class="hljs-string">&quot;ps_queue_1&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PS_QUEUE_2 = <span class="hljs-string">&quot;ps_queue_2&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_EXCHANGE = <span class="hljs-string">&quot;fanout_exchange&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">psQueue1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(PS_QUEUE_1, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">psQueue2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(PS_QUEUE_2, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title">fanoutExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">fanoutBinding1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(psQueue1()).to(fanoutExchange());<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">fanoutBinding2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(psQueue2()).to(fanoutExchange());<br>  &#125;<br> <br>  <span class="hljs-comment">//===============路由模式============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTING_QUEUE_1 = <span class="hljs-string">&quot;routing_queue_1&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTING_QUEUE_2 = <span class="hljs-string">&quot;routing_queue_2&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_EXCHANGE = <span class="hljs-string">&quot;direct_exchange&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">routingQueue1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(ROUTING_QUEUE_1, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">routingQueue2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(ROUTING_QUEUE_2, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title">directExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DirectExchange(DIRECT_EXCHANGE);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">directBinding1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(routingQueue1()).to(directExchange()).with(<span class="hljs-string">&quot;user&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">directBinding2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(routingQueue2()).to(directExchange()).with(<span class="hljs-string">&quot;order&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-comment">//===============主题模式============</span><br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_1 = <span class="hljs-string">&quot;topic_queue_1&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_2 = <span class="hljs-string">&quot;topic_queue_2&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_EXCHANGE = <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">topicQueue1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TOPIC_QUEUE_1, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">topicQueue2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TOPIC_QUEUE_2, <span class="hljs-keyword">true</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title">topicExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(TOPIC_EXCHANGE);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">topicBinding1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="hljs-string">&quot;user.add&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">topicBinding2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="hljs-string">&quot;user.#&quot;</span>);<br>  &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息生产者："><a href="#消息生产者：" class="headerlink" title="消息生产者："></a>消息生产者：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpSender</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> AmqpTemplate amqpTemplate;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 简单模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleSend</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.SIMPLE_QUEUE, message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发布/订阅模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">psSend</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.FANOUT_EXCHANGE, <span class="hljs-string">&quot;&quot;</span>, message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 路由模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">routingSend</span><span class="hljs-params">(String routingKey, String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.DIRECT_EXCHANGE, routingKey, message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 主题模式发送</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> routingKey</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topicSend</span><span class="hljs-params">(String routingKey, String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.amqpTemplate.convertAndSend(AmqpConfirguration.TOPIC_EXCHANGE, routingKey, message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息消费者："><a href="#消息消费者：" class="headerlink" title="消息消费者："></a>消息消费者：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpReceiver</span> </span>&#123;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 简单模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.SIMPLE_QUEUE)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleReceive</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发布/订阅模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.PS_QUEUE_1)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">psReceive1</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.PS_QUEUE_1 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.PS_QUEUE_2)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">psReceive2</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.PS_QUEUE_2 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 路由模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.ROUTING_QUEUE_1)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">routingReceive1</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.ROUTING_QUEUE_1 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.ROUTING_QUEUE_2)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">routingReceive2</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.ROUTING_QUEUE_2 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 主题模式接收</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.TOPIC_QUEUE_1)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topicReceive1</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.TOPIC_QUEUE_1 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@RabbitListener(queues = AmqpConfirguration.TOPIC_QUEUE_2)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">topicReceive2</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(AmqpConfirguration.TOPIC_QUEUE_2 + <span class="hljs-string">&quot;接收消息:&quot;</span> + message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者使用 @RabbitListener 注解监听消息。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmqpTest</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> AmqpSender sender;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.simpleSend(<span class="hljs-string">&quot;test simpleSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPsSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.psSend(<span class="hljs-string">&quot;test psSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRoutingSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.routingSend(<span class="hljs-string">&quot;order&quot;</span>, <span class="hljs-string">&quot;test routingSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTopicSend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.topicSend(<span class="hljs-string">&quot;user.add&quot;</span>, <span class="hljs-string">&quot;test topicSend &quot;</span> + i);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合ActiveMQ</title>
    <link href="/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88ActiveMQ/"/>
    <url>/blog/2021/02/06/SpringBoot%E6%95%B4%E5%90%88ActiveMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- 如果需要配置连接池，添加如下依赖 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;<br>    &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># activemq 配置<br>spring.activemq.broker-url=tcp:<span class="hljs-comment">//192.168.2.61:61616</span><br>spring.activemq.user=admin<br>spring.activemq.password=admin<br>spring.activemq.pool.enabled=<span class="hljs-keyword">false</span><br>spring.activemq.pool.max-connections=<span class="hljs-number">50</span><br># 使用发布/订阅模式时，下边配置需要设置成 true<br>spring.jms.pub-sub-domain=<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>此处 spring.activemq.pool.enabled=false，表示关闭连接池。</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsConfirguration</span> </span>&#123;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME = <span class="hljs-string">&quot;activemq_queue&quot;</span>;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_NAME = <span class="hljs-string">&quot;activemq_topic&quot;</span>;<br> <br>  <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveMQQueue(QUEUE_NAME);<br>    &#125;<br> <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Topic <span class="hljs-title">topic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveMQTopic(TOPIC_NAME);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsSender</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Queue queue;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Topic topic;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JmsMessagingTemplate jmsTemplate;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendByQueue</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.jmsTemplate.convertAndSend(queue, message);<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendByTopic</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.jmsTemplate.convertAndSend(topic, message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsReceiver</span> </span>&#123;<br> <br>  <span class="hljs-meta">@JmsListener(destination = JmsConfirguration.QUEUE_NAME)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveByQueue</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收队列消息:&quot;</span> + message);<br>  &#125;<br> <br>  <span class="hljs-meta">@JmsListener(destination = JmsConfirguration.TOPIC_NAME)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveByTopic</span><span class="hljs-params">(String message)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收主题消息:&quot;</span> + message);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息消费者使用 @JmsListener 注解监听消息。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JmsTest</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JmsSender sender;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendByQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.sendByQueue(<span class="hljs-string">&quot;hello activemq queue &quot;</span> + i);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendByTopic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">this</span>.sender.sendByTopic(<span class="hljs-string">&quot;hello activemq topic &quot;</span> + i);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打印结果："><a href="#打印结果：" class="headerlink" title="打印结果："></a>打印结果：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">接收队列消息:hello activemq queue <span class="hljs-number">1</span><br>接收队列消息:hello activemq queue <span class="hljs-number">2</span><br>接收队列消息:hello activemq queue <span class="hljs-number">3</span><br>接收队列消息:hello activemq queue <span class="hljs-number">4</span><br>接收队列消息:hello activemq queue <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="测试发布-订阅模式时"><a href="#测试发布-订阅模式时" class="headerlink" title="测试发布/订阅模式时"></a>测试发布/订阅模式时</h1><p>设置 spring.jms.pub-sub-domain=true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">接收主题消息:hello activemq topic <span class="hljs-number">1</span><br>接收主题消息:hello activemq topic <span class="hljs-number">2</span><br>接收主题消息:hello activemq topic <span class="hljs-number">3</span><br>接收主题消息:hello activemq topic <span class="hljs-number">4</span><br>接收主题消息:hello activemq topic <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>ActiveMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea将项目提交到github上</title>
    <link href="/blog/2021/02/06/idea%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A/"/>
    <url>/blog/2021/02/06/idea%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<p>首先区分git 和 github 是不一样的, github 和 码云是一样的。 我的文字表达确实差 所以一图胜万语千言</p><h1 id="配置本地"><a href="#配置本地" class="headerlink" title="配置本地"></a>配置本地</h1><p>先把他放到本地git 本地想必大家都已经安装好了 没有安装的话百度一下 然后选择整个项目的文件夹 然后项目会变成红色<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133614@2x_1569303820807.png" alt="WX20190924-133614@2x"></p><h1 id="上传本地"><a href="#上传本地" class="headerlink" title="上传本地"></a>上传本地</h1><p>右键项目 add之后 文件都会变成绿色 然后在提交项目就没颜色了<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133704@2x_1569303820892.png" alt="WX20190924-133704@2x"></p><h1 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h1><p>这里输入备注 就会提交到GitHub 可以自定义名字我这里使用的就是项目的名字<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133818@2x_1569303820981.png" alt="WX20190924-133818@2x"></p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-134320@2x_1569303820947.png" alt="WX20190924-134320@2x">#两者区分 一般上先上传到本地 然后再右键push<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190924-133901@2x_1569303821043.png" alt="WX20190924-133901@2x"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2021/02/06/%E5%89%AF%E6%9C%AC/"/>
    <url>/blog/2021/02/06/%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis</title>
    <link href="/blog/2021/02/05/SpringBoot%E6%95%B4%E5%90%88Redis/"/>
    <url>/blog/2021/02/05/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<p>Spring Data Redis 为我们提供 RedisTemplate 和 StringRedisTemplate 两个模板进行数据操作，它们主要 的访问方法如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190919-173422@2x_1568885674306.png" alt="WX20190919-173422@2x"></p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.redis.host=<span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.11</span><br>spring.redis.port=<span class="hljs-number">6379</span><br>spring.redis.password=redis123<br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisDao</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stringRedisTemplate.opsForValue().set(key, value);<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.stringRedisTemplate.opsForValue().get(key);<br>  &#125;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String key)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stringRedisTemplate.delete(key);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisDaoTest</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> RedisDao redisDao;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSet</span><span class="hljs-params">()</span> </span>&#123;<br>    String key = <span class="hljs-string">&quot;name&quot;</span>;<br>    String value = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br> <br>    <span class="hljs-keyword">this</span>.redisDao.set(key, value);<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGet</span><span class="hljs-params">()</span> </span>&#123;<br>    String key = <span class="hljs-string">&quot;name&quot;</span>;<br>    String value = <span class="hljs-keyword">this</span>.redisDao.get(key);<br>    System.out.println(value);<br>  &#125;<br> <br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>    String key = <span class="hljs-string">&quot;name&quot;</span>;<br>    <span class="hljs-keyword">this</span>.redisDao.delete(key);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置EhCache缓存</title>
    <link href="/blog/2021/02/05/SpringBoot%E9%85%8D%E7%BD%AEEhCache%E7%BC%93%E5%AD%98/"/>
    <url>/blog/2021/02/05/SpringBoot%E9%85%8D%E7%BD%AEEhCache%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;dependency&gt;<br>  &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;<br>  &lt;artifactId&gt;ehcache&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p>在 src/main/resources 目录下创建 ehcache.xml 文件，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;ehcache xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:noNamespaceSchemaLocation=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span>&gt;<br> <br>    &lt;!-- 磁盘缓存位置 --&gt;<br>    &lt;diskStore path=<span class="hljs-string">&quot;java.io.tmpdir/ehcache&quot;</span>/&gt;<br> <br>    &lt;!-- 默认缓存 --&gt;<br>    &lt;defaultCache<br>            maxEntriesLocalHeap=<span class="hljs-string">&quot;10000&quot;</span><br>            eternal=<span class="hljs-string">&quot;false&quot;</span><br>            timeToIdleSeconds=<span class="hljs-string">&quot;120&quot;</span><br>            timeToLiveSeconds=<span class="hljs-string">&quot;120&quot;</span><br>            maxEntriesLocalDisk=<span class="hljs-string">&quot;10000000&quot;</span><br>            diskExpiryThreadIntervalSeconds=<span class="hljs-string">&quot;120&quot;</span><br>            memoryStoreEvictionPolicy=<span class="hljs-string">&quot;LRU&quot;</span>&gt;<br>        &lt;persistence strategy=<span class="hljs-string">&quot;localTempSwap&quot;</span>/&gt;<br>    &lt;/defaultCache&gt;<br> <br>    &lt;!-- 自定义缓存 --&gt;<br>    &lt;cache name=<span class="hljs-string">&quot;department&quot;</span><br>           maxElementsInMemory=<span class="hljs-string">&quot;1000&quot;</span><br>           eternal=<span class="hljs-string">&quot;false&quot;</span><br>           timeToIdleSeconds=<span class="hljs-string">&quot;50&quot;</span><br>           timeToLiveSeconds=<span class="hljs-string">&quot;50&quot;</span><br>           overflowToDisk=<span class="hljs-string">&quot;false&quot;</span><br>           memoryStoreEvictionPolicy=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;<br>&lt;/ehcache&gt;<br></code></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">name：Cache 的唯一标识<br>maxElementsInMemory：内存中允许存储的最大的元素个数<br>maxElementsOnDisk：硬盘最大缓存个数，<span class="hljs-number">0</span>代表无限个<br>clearOnFlush：内存数量最大时是否清除<br>eternal：缓存对象是否永久有效，如果是，超时设置将被忽略<br>overflowToDisk：内存不足（超过 maxElementsInMemory）时，是否启用磁盘缓存<br>timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=<span class="hljs-keyword">false</span>对象不是永久有效时使用，可选属性，默认值是<span class="hljs-number">0</span>，也就是可闲置时间无穷大<br>timeToLiveSeconds：缓存数据的生存时间（TTL），也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是<span class="hljs-number">0</span>就意味着元素可以停顿无穷长的时间<br>diskPersistent：是否将缓存数据持久化到磁盘上，如果为 <span class="hljs-keyword">true</span>，JVM 重启数据依然存在。默认值是<span class="hljs-keyword">false</span><br>diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区<br>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是<span class="hljs-number">120</span>秒<br>memoryStoreEvictionPolicy：当达到 maxElementsInMemory 限制时，Ehcache 将根据指定策略清除内存。默认为 LRU（最近最少使用），其他策略有 FIFO（先进先出），LFU（较少使用）<br></code></pre></td></tr></table></figure><h1 id="application-properties-："><a href="#application-properties-：" class="headerlink" title="application.properties ："></a>application.properties ：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># 缓存类型（ehcache、redis）<br>spring.cache.type=ehcache<br> <br># ehcache 配置文件<br>spring.cache.ehcache.config=classpath:ehcache.xml<br> <br># 打印日志，查看 sql<br>logging.level.com.light.springboot=DEBUG<br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>在持久层篇的基础上，结合 Mybatis 测试：</p><p>Service 层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheConfig(cacheNames = &quot;department&quot;)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentService</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> DepartmentMapper departmentMapper;<br> <br>  <span class="hljs-meta">@CachePut(key = &quot;#department.id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">save</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;保存 id=&quot;</span> + department.getId() + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    <span class="hljs-keyword">this</span>.departmentMapper.insert(department);<br>    <span class="hljs-keyword">return</span> department;<br>  &#125;<br> <br>  <span class="hljs-meta">@CachePut(key = &quot;#department.id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">update</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改 id=&quot;</span> + department.getId() + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    <span class="hljs-keyword">this</span>.departmentMapper.update(department);<br>    <span class="hljs-keyword">return</span> department;<br>  &#125;<br> <br>  <span class="hljs-meta">@Cacheable(key = &quot;#id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDepartmentById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;获取 id=&quot;</span> + id + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    Department department = <span class="hljs-keyword">this</span>.departmentMapper.getById(id);<br>    <span class="hljs-keyword">return</span> department;<br>  &#125;<br> <br>  <span class="hljs-meta">@CacheEvict(key = &quot;#id&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;删除 id=&quot;</span> + id + <span class="hljs-string">&quot; 的数据&quot;</span>);<br>    <span class="hljs-keyword">this</span>.departmentMapper.deleteById(id);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="控制层："><a href="#控制层：" class="headerlink" title="控制层："></a>控制层：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;department&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentController</span> </span>&#123;<br> <br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> DepartmentService departmentService;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;save&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.departmentService.save(department);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;保存成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;get/&#123;id&#125;&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br>    Department department = <span class="hljs-keyword">this</span>.departmentService.getDepartmentById(id);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;获取成功&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;data&quot;</span>, department);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;update&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">update</span><span class="hljs-params">(Department department)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.departmentService.update(department);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;修改成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br> <br>  <span class="hljs-meta">@RequestMapping(&quot;delete/&#123;id&#125;&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.departmentService.delete(id);<br> <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;删除成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动类：</p><p>添加 @EnableCaching 注解，开启缓存功能。</p><h1 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h1><p>由于 ehcache 缓存是存储在应用的内存中，如果使用 junit 测试，方法执行完毕缓存就释放了，无法正常测试缓存效果，因此测试使用发起 http 请求的形式。</p><p>发起保存请求：</p><h2 id="发起保存请求："><a href="#发起保存请求：" class="headerlink" title="发起保存请求："></a>发起保存请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">保存 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">50</span>:<span class="hljs-number">48.800</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">7</span>] c.l.s.dao.DepartmentMapper.insert        : ==&gt;  Preparing: <span class="hljs-function">insert into <span class="hljs-title">department</span><span class="hljs-params">(id,name,descr)</span> <span class="hljs-title">values</span><span class="hljs-params">(?,?,?)</span></span><br><span class="hljs-function">2017-12-06 14:50:48.801 DEBUG 680 --- [nio-8081-exec-7] c.l.s.dao.DepartmentMapper.insert        : </span>==&gt; Parameters: <span class="hljs-number">2</span>(Integer), Ehcache 部门(String), Ehcache(String)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">50</span>:<span class="hljs-number">48.868</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">7</span>] c.l.s.dao.DepartmentMapper.insert        : &lt;==    Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>保存成功后，立刻发起查询请求，没有日志打印，但返回对象数据，说明数据是从缓存中获取。</p><h2 id="发起修改请求："><a href="#发起修改请求：" class="headerlink" title="发起修改请求："></a>发起修改请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">修改 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">16.588</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">8</span>] c.l.s.dao.DepartmentMapper.update        : ==&gt;  Preparing: update department set name = ? , descr = ? where id = ?<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">16.589</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">8</span>] c.l.s.dao.DepartmentMapper.update        : ==&gt; Parameters: Ehcache 部门<span class="hljs-number">2</span>(String), Ehcache2(String), <span class="hljs-number">2</span>(Integer)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">16.657</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">8</span>] c.l.s.dao.DepartmentMapper.update        : &lt;==    Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>修改成功后，立刻发起查询请求，没有日志打印，但返回修改后的对象数据，说明缓存中的数据已经同步。</p><h2 id="发起删除请求："><a href="#发起删除请求：" class="headerlink" title="发起删除请求："></a>发起删除请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">删除 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07.572</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">1</span>] c.l.s.dao.DepartmentMapper.deleteById    : ==&gt;  Preparing: delete from department where id = ?<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07.572</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">1</span>] c.l.s.dao.DepartmentMapper.deleteById    : ==&gt; Parameters: <span class="hljs-number">2</span>(Integer)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">07.613</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">1</span>] c.l.s.dao.DepartmentMapper.deleteById    : &lt;==    Updates: <span class="hljs-number">1</span><br> <br></code></pre></td></tr></table></figure><p>删除成功后，立刻发起查询请求，控制台打印 sql 语句，说明缓存数据被删除，需要查询数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">获取 id=<span class="hljs-number">2</span> 的数据<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.324</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">3</span>] c.l.s.dao.DepartmentMapper.getById       : ==&gt;  Preparing: select id,name,descr from department where id = ?<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.325</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">3</span>] c.l.s.dao.DepartmentMapper.getById       : ==&gt; Parameters: <span class="hljs-number">2</span>(Integer)<br><span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">06</span> <span class="hljs-number">14</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.328</span> DEBUG <span class="hljs-number">680</span> --- [nio-<span class="hljs-number">8081</span>-exec-<span class="hljs-number">3</span>] c.l.s.dao.DepartmentMapper.getById       : &lt;==      Total: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>EhCache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot配置 Druid 数据源</title>
    <link href="/blog/2021/02/03/Springboot%E9%85%8D%E7%BD%AEDruid%20%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/blog/2021/02/03/Springboot%E9%85%8D%E7%BD%AEDruid%20%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;druid&lt;/artifactId&gt;<br>    &lt;version&gt;1.1.8&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.druid.driverClassName=com.mysql.jdbc.Driver<br>spring.datasource.druid.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>spring.datasource.druid.username=root<br>spring.datasource.druid.password=tiger<br> <br>spring.datasource.druid.initialSize=<span class="hljs-number">5</span><br>spring.datasource.druid.minIdle=<span class="hljs-number">5</span><br>spring.datasource.druid.maxActive=<span class="hljs-number">20</span><br>spring.datasource.druid.maxWait=<span class="hljs-number">60000</span><br>spring.datasource.druid.timeBetweenEvictionRunsMillis=<span class="hljs-number">60000</span><br>spring.datasource.druid.min-evictableIdleTimeMillis=<span class="hljs-number">300000</span><br>spring.datasource.druid.validationQuery=SELECT <span class="hljs-number">1</span> FROM DUAL<br>spring.datasource.druid.testWhileIdle=<span class="hljs-keyword">true</span><br>spring.datasource.druid.testOnBorrow=<span class="hljs-keyword">false</span><br>spring.datasource.druid.testOnReturn=<span class="hljs-keyword">false</span><br>spring.datasource.druid.poolPreparedStatements=<span class="hljs-keyword">true</span><br>spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=<span class="hljs-number">20</span><br>spring.datasource.druid.filters=stat,wall<br> <br></code></pre></td></tr></table></figure><p>注意：配置中都是以 spring.datasource.druid 开头，使用驼峰命名</p><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfiguration</span> </span>&#123;<br> <br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)</span><br>    <span class="hljs-meta">@Bean(initMethod = &quot;init&quot;,destroyMethod = &quot;close&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">dataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        DruidDataSource ds = <span class="hljs-keyword">new</span> DruidDataSource();<br>        ds.setProxyFilters(Arrays.asList(statFilter()));<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Filter <span class="hljs-title">statFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        StatFilter filter = <span class="hljs-keyword">new</span> StatFilter();<br>        filter.setSlowSqlMillis(<span class="hljs-number">5000</span>);<br>        filter.setLogSlowSql(<span class="hljs-keyword">true</span>);<br>        filter.setMergeSql(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了保证访问的安全性，我们可以如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">## druid 监控<br>spring.datasource.druid.web-stat-filter.enabled=<span class="hljs-keyword">true</span><br>spring.datasource.druid.web-stat-filter.url-pattern=<span class="hljs-comment">/*</span><br><span class="hljs-comment">spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">## druid 监控页面</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.enabled=true</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.login-username=druid</span><br><span class="hljs-comment">spring.datasource.druid.stat-view-servlet.login-password=druid123</span><br><span class="hljs-comment"> </span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190917-133136@2x_1568698317734.png" alt="WX20190917-133136@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>Druid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <link href="/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Mybatis/"/>
    <url>/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="整合-Mybatis"><a href="#整合-Mybatis" class="headerlink" title="整合 Mybatis"></a>整合 Mybatis</h1><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- jdbc --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- mybatis --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>    &lt;version&gt;3.4.4&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- spring,mybatis整合包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>    &lt;version&gt;1.3.1&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- mysql 驱动包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="配置数据库连接："><a href="#配置数据库连接：" class="headerlink" title="配置数据库连接："></a>配置数据库连接：</h2><p>在 application.properties 中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># 数据源配置<br>spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>spring.datasource.username=root<br>spring.datasource.password=tiger<br></code></pre></td></tr></table></figure><h2 id="创建配置类："><a href="#创建配置类：" class="headerlink" title="创建配置类："></a>创建配置类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisConfiguration</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">// 当容器里没有指定的 Bean 的情况下创建该对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;<br>        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        <span class="hljs-comment">// 设置数据源</span><br>        sqlSessionFactoryBean.setDataSource(dataSource);<br> <br>        <span class="hljs-comment">// 设置mybatis的主配置文件</span><br>        sqlSessionFactoryBean.setConfigLocation(<span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;mybatis/mybatis-config.xml&quot;</span>));<br> <br>        <span class="hljs-comment">// 设置mapper映射文件</span><br>        PathMatchingResourcePatternResolver resolver = <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver();<br>        Resource[] mapperXml;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mapperXml = resolver.getResources(<span class="hljs-string">&quot;classpath:mybatis/mapper/*.xml&quot;</span>);<br>            sqlSessionFactoryBean.setMapperLocations(mapperXml);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br> <br>        <span class="hljs-comment">// 设置别名包</span><br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;com.light.springboot.domain&quot;</span>);<br> <br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnBean(SqlSessionFactoryBean.class)</span> <span class="hljs-comment">// 当 SqlSessionFactoryBean 实例存在时创建对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title">mapperScannerConfigurer</span><span class="hljs-params">()</span> </span>&#123;<br>        MapperScannerConfigurer mapperScannerConfigurer = <span class="hljs-keyword">new</span> MapperScannerConfigurer();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;com.light.springboot.mapper&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 src/main/resources 下创建 mybatis 文件夹，并在 mybatis 文件夹中创建 “mybatis-config.xml” 配置文件，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;settings&gt;<br>        &lt;!-- 获取数据库自增主键值 --&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>        &lt;!-- 使用列别名替换列名，默认为 <span class="hljs-keyword">true</span> --&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;useColumnLabel&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>        &lt;!-- 开启驼峰命名转换：Table(create_time) =&gt; Entity(createTime) --&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>    &lt;/settings&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>mybatis 文件夹下再创建一个 “mapper” 文件夹，里边存放 Mpper 接口对应的 mapper 映射文件。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>在 MySQL 中创建名为 springboot 的数据库，在该库中创建 role 表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">CREATE TABLE `department` (<br>    `id` INT(<span class="hljs-number">11</span>) NOT NULL,<br>    `name` VARCHAR(<span class="hljs-number">10</span>) NOT NULL,<br>    `descr` VARCHAR(<span class="hljs-number">50</span>) NULL DEFAULT NULL,<br>    <span class="hljs-function">PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(`id`)</span></span><br><span class="hljs-function">)</span><br><span class="hljs-function">ENGINE</span>=InnoDB<br>;<br></code></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>setet 和 getter 方法省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">6067283535977178571L</span>;<br> <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">private</span> String descr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Department department)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getById</span><span class="hljs-params">(Integer id)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Department department)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>补充：Mapper 接口需要添加 @Mapper 注解，如果不想使用该注解，可以在启动类上使用 @MapperScan 配置 Mapper 接口路径</p><p>mybatis/mapper/departmentMapper.xml ：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE mapper PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.light.springboot.dao.DepartmentMapper&quot;</span>&gt;<br> <br>    &lt;insert id=<span class="hljs-string">&quot;insert&quot;</span> parameterType=<span class="hljs-string">&quot;com.light.springboot.domain.Department&quot;</span>&gt;<br>        <span class="hljs-function">insert into <span class="hljs-title">department</span><span class="hljs-params">(id,name,descr)</span> <span class="hljs-title">values</span><span class="hljs-params">(#&#123;id&#125;,#&#123;name&#125;,#&#123;descr&#125;)</span></span><br><span class="hljs-function">    &lt;/insert&gt;</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    &lt;select id</span>=<span class="hljs-string">&quot;getById&quot;</span> parameterType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> resultType=<span class="hljs-string">&quot;com.light.springboot.domain.Department&quot;</span>&gt;<br>        select id,name,descr from department where id = #&#123;id&#125;<br>    &lt;/select&gt;<br>    <br>    &lt;update id=<span class="hljs-string">&quot;update&quot;</span> parameterType=<span class="hljs-string">&quot;com.light.springboot.domain.Department&quot;</span>&gt;<br>        update department set descr = #&#123;descr&#125; where id = #&#123;id&#125;<br>    &lt;/update&gt;<br>    <br>    &lt;delete id=<span class="hljs-string">&quot;deleteById&quot;</span> parameterType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;<br>        delete from department where id = #&#123;id&#125;<br>    &lt;/delete&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DepartmentMapper departmentMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        Department department = <span class="hljs-keyword">new</span> Department();<br>        department.setId(<span class="hljs-number">1</span>);<br>        department.setName(<span class="hljs-string">&quot;研发部&quot;</span>);<br>        department.setDescr(<span class="hljs-string">&quot;开发产品&quot;</span>);<br>        <span class="hljs-keyword">this</span>.departmentMapper.insert(department);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetById</span><span class="hljs-params">()</span> </span>&#123;<br>        Department department = <span class="hljs-keyword">this</span>.departmentMapper.getById(<span class="hljs-number">1</span>);<br>        System.out.println(department);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>        Department department = <span class="hljs-keyword">new</span> Department();<br>        department.setId(<span class="hljs-number">1</span>);<br>        department.setDescr(<span class="hljs-string">&quot;开发高级产品&quot;</span>);<br>        <span class="hljs-keyword">this</span>.departmentMapper.update(department);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.departmentMapper.deleteById(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Spring-data-jpa</title>
    <link href="/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Spring-data-jpa/"/>
    <url>/blog/2021/02/03/SpringBoot%E6%95%B4%E5%90%88Spring-data-jpa/</url>
    
    <content type="html"><![CDATA[<p>增删改查很爽就对了 适合业务性比较单一的项目</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- jdbc --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- springboot,jpa 整合包--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;!-- mysql 驱动包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h1 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h1><p>在 application.properties 中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"># 数据库连接配置<br>spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br>spring.datasource.username=root<br>spring.datasource.password=tiger<br> <br># JPA 配置<br>spring.jpa.hibernate.ddl-auto=update<br>spring.jpa.show-sql=<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>在 MySQL 中创建名为 springboot 的数据库，在该库中创建 role 表： 注意，主键 ID 为 AUTO_INCREMENT 自增。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">CREATE TABLE `role` (<br>    `id` INT(<span class="hljs-number">11</span>) NOT NULL AUTO_INCREMENT,<br>    `name` VARCHAR(<span class="hljs-number">10</span>) NOT NULL,<br>    `descr` VARCHAR(<span class="hljs-number">100</span>) NULL DEFAULT NULL,<br>    <span class="hljs-function">PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(`id`)</span></span><br><span class="hljs-function">)</span><br><span class="hljs-function">COLLATE</span>=<span class="hljs-string">&#x27;utf8_general_ci&#x27;</span><br>ENGINE=InnoDB<br>;<br></code></pre></td></tr></table></figure><h2 id="建实体类"><a href="#建实体类" class="headerlink" title="建实体类"></a>建实体类</h2><p>添加相应的注解 getset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">3926276668667517847L</span>;<br> <br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String descr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Repository-接口"><a href="#Repository-接口" class="headerlink" title="Repository 接口"></a>Repository 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Role</span>, <span class="hljs-title">Integer</span>&gt;</span>&#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleRepositoryTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RoleRepository roleRepository;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        Role role = <span class="hljs-keyword">new</span> Role();<br>        role.setName(<span class="hljs-string">&quot;管理员&quot;</span>);<br>        role.setDescr(<span class="hljs-string">&quot;测试&quot;</span>);<br>        Role result = <span class="hljs-keyword">this</span>.roleRepository.save(role);<br>        System.out.println(result);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOne</span><span class="hljs-params">()</span> </span>&#123;<br>        Role role = <span class="hljs-keyword">this</span>.roleRepository.findOne(<span class="hljs-number">1</span>);<br>        System.out.println(role);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>        Role role = <span class="hljs-keyword">new</span> Role();<br>        role.setId(<span class="hljs-number">1</span>);<br>        role.setName(<span class="hljs-string">&quot;管理员&quot;</span>);<br>        role.setDescr(<span class="hljs-string">&quot;控制权限&quot;</span>);<br>        Role result = <span class="hljs-keyword">this</span>.roleRepository.save(role);<br>        System.out.println(result);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleRepository.delete(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>jpa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Tomcat</title>
    <link href="/blog/2021/02/02/Docker%E5%AE%89%E8%A3%85Tomcat/"/>
    <url>/blog/2021/02/02/Docker%E5%AE%89%E8%A3%85Tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="查看-Tomcat-镜像"><a href="#查看-Tomcat-镜像" class="headerlink" title="查看 Tomcat 镜像"></a>查看 Tomcat 镜像</h1><p>我一般上都是直接获取最新的 除非指定要哪个版本的时候 <strong>docker search tomcat</strong></p><h1 id="获取-Tomcat-镜像"><a href="#获取-Tomcat-镜像" class="headerlink" title="获取 Tomcat 镜像"></a>获取 Tomcat 镜像</h1><p>比如： 这种是指定版本 docker pull mongo:3.2.4 dockre pull redis:3.2</p><p><strong>docker pull tomcat</strong>（这种方法是获取最新的Tomcat镜像）</p><h1 id="启动Tomcat容器实例"><a href="#启动Tomcat容器实例" class="headerlink" title="启动Tomcat容器实例"></a>启动Tomcat容器实例</h1><p>第一个端口是外部访问的 我这里换成 8888 <strong>docker run –name tomcat -d -it –rm -p 8888:8080 tomcat</strong> –rm:表示当关闭或者销毁当前容器实例进程时，同时销毁容器实例。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190911-173602@2x_1568194575420.png" alt="WX20190911-173602@2x"></p><h1 id="实例化Tomcat容器实例"><a href="#实例化Tomcat容器实例" class="headerlink" title="实例化Tomcat容器实例"></a>实例化Tomcat容器实例</h1><p>docker restart tomcat（tomcat是当前实例的名称，也可以通过当前实例的容器ID来重启）</p><h1 id="关闭Tomcat容器实例"><a href="#关闭Tomcat容器实例" class="headerlink" title="关闭Tomcat容器实例"></a>关闭Tomcat容器实例</h1><p>docker stop tomcat（tomcat是当前实例的名称，也可以通过当前实例的容器ID来重启）</p><h1 id="启动Tomcat容器实例-1"><a href="#启动Tomcat容器实例-1" class="headerlink" title="启动Tomcat容器实例"></a>启动Tomcat容器实例</h1><p>docker start tomcat</p><h1 id="查看Tomcat容器实例进程信息"><a href="#查看Tomcat容器实例进程信息" class="headerlink" title="查看Tomcat容器实例进程信息"></a>查看Tomcat容器实例进程信息</h1><p>通过docker top tomcat查看</p><p>通过ps -ef | grep tomcat查看</p><h1 id="杀死Tomcat容器实例进程"><a href="#杀死Tomcat容器实例进程" class="headerlink" title="杀死Tomcat容器实例进程"></a>杀死Tomcat容器实例进程</h1><p>docker kill -s KILL tomcat 再查看 docker ps</p><h1 id="移除Tomcat容器实例"><a href="#移除Tomcat容器实例" class="headerlink" title="移除Tomcat容器实例"></a>移除Tomcat容器实例</h1><p>docker rm -f -v tomcat</p><h1 id="进入Tomcat容器实例"><a href="#进入Tomcat容器实例" class="headerlink" title="进入Tomcat容器实例"></a>进入Tomcat容器实例</h1><p>docker exec -it tomcat /bin/sh</p><h1 id="Tomcat-环境说明"><a href="#Tomcat-环境说明" class="headerlink" title="Tomcat 环境说明"></a>Tomcat 环境说明</h1><p>Tomcat 7、Tomcat 8 在容器的中的默认环境： CATALINA_BASE: /usr/local/tomcat CATALINA_HOME: /usr/local/tomcat CATALINA_TMPDIR: /usr/local/tomcat/temp JRE_HOME: /usr CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</p><h1 id="上传WEB应用到Tomcat的容器实例中"><a href="#上传WEB应用到Tomcat的容器实例中" class="headerlink" title="上传WEB应用到Tomcat的容器实例中"></a>上传WEB应用到Tomcat的容器实例中</h1><p>进入war包 文件所在目录 docker cp tyrone-demo.war tomcat:/usr/local/tomcat/webapps</p><p>注意：将WEB应用复制到Tomcat容器实例中后，会自动解压部署的，不需要重启容器。</p><h1 id="查看Tomcat容器实例中的WEB应用"><a href="#查看Tomcat容器实例中的WEB应用" class="headerlink" title="查看Tomcat容器实例中的WEB应用"></a>查看Tomcat容器实例中的WEB应用</h1><p>语法：docker exec -it tomcat /bin/sh（相当于开启tomcat终端）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap按照value排序</title>
    <link href="/blog/2021/02/02/HashMap%E6%8C%89%E7%85%A7value%E6%8E%92%E5%BA%8F/"/>
    <url>/blog/2021/02/02/HashMap%E6%8C%89%E7%85%A7value%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>给定一个HashMap&lt;String, BuziObj&gt; buziObjMap;，其中 BuziObj 实现了 Comparable 接口。现在需要将 buziObjMap 按照 BuziObj 有序输出。注意，BuziObj 实例有可能相等，要求多次返回的结果一致。可以使用JDK提供的各种API。</p><p>当时自己的想法是，将 buziObjMap 的 values 放在一个 List 中。然后使用 Collections.sort(valuesList) 对存放 values 的 valuesList 排序。再遍历排序之后的 valuesList 和 buziObjMap，比对 valuesList 与 buziObjMap 中的值，相等之后，将当前 buziObjMap 中的 Entry 放在 LinkedHashMap 中，返回 LinkedHashMap 即可。</p><p>但是如上解法主要存在两个问题： 1，不满足多次执行返回结果一致这个要求，因为在遍历 valuesList 与 buziObjMap 时，buziObjMap的输出顺序无法保证每次都是一致的。 2，算法的复杂度过大。</p><h1 id="实际遇到的问题"><a href="#实际遇到的问题" class="headerlink" title="实际遇到的问题"></a>实际遇到的问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br> <br>List&lt;Map.Entry&lt;K, V&gt;&gt; list =  <br>            <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;( map.entrySet() );  <br>        Collections.sort( list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()  <br>        &#123;  <br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )</span>  </span><br><span class="hljs-function">            </span>&#123;  <br>                <span class="hljs-keyword">return</span> (o1.getValue()).compareTo( o2.getValue() );  <br>            &#125;  <br>        &#125; );  <br>  <br>        Map&lt;K, V&gt; result = <span class="hljs-keyword">new</span> LinkedHashMap&lt;K, V&gt;();  <br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;K, V&gt; entry : list)  <br>        &#123;  <br>            result.put( entry.getKey(), entry.getValue() );  <br>        &#125;<br> <br><span class="hljs-comment">//map 里面的属性值需要替换成自己的 我这里用的key是String型 value 是实体类</span><br>  List&lt;Map.Entry&lt;String, CorrectRate&gt;&gt; list =<br>                <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;(correctRateOm.entrySet());<br>        Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, CorrectRate&gt;&gt;() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;String, CorrectRate&gt; o1, Map.Entry&lt;String, CorrectRate&gt; o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> (o1.getValue().getStudentId()).compareTo(o2.getValue().getStudentId());<br>            &#125;<br>        &#125;);<br> <br></code></pre></td></tr></table></figure><p>list 返回的就是排好顺序的啦</p><p><a href="https://bk.cuixiaoyan.xyz/archives/valuepaixu#%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a><a href="https://bk.cuixiaoyan.xyz/archives/valuepaixu#%E5%AE%9E%E9%99%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">实际遇到的问题</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java的三种随机数生成方式</title>
    <link href="/blog/2021/02/02/java%E7%9A%84%E4%B8%89%E7%A7%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/"/>
    <url>/blog/2021/02/02/java%E7%9A%84%E4%B8%89%E7%A7%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>随机数的产生在一些代码中很常用，也是我们必须要掌握的。而java中产生随机数的方法主要有三种：</p><p>第一种：new Random()</p><p>第二种：Math.random()</p><p>第三种：currentTimeMillis()</p><p>第一种需要借助java.util.Random类来产生一个随机数发生器，也是最常用的一种，构造函数有两个，Random()和Random(long seed)。第一个就是以当前时间为默认种子，第二个是以指定的种子值进行。产生之后，借助不同的语句产生不同类型的数。</p><p>种子就是产生随机数的第一次使用值,机制是通过一个函数,将这个种子的值转化为随机数空间中的某一个点上,并且产生的随机数均匀的散布在空间中。以后产生的随机数都与前一个随机数有关。以代码为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"></span>&#123;<br>　　Random r = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">1</span>);<br>　　<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">5</span> ; i++)<br>　　&#123;<br>　　　　<span class="hljs-keyword">int</span> ran1 = r.nextInt(<span class="hljs-number">100</span>);<br>　　　　System.out.println(ran1);<br>　　&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>在我的编译器下产生的五个数均为85,88,47,13,54，如果采用Random r = new Random()，产生的随机数就不同，这就是确定种子导致的结果。</p><p>而第二种方法返回的数值是[0.0,1.0）的double型数值，由于double类数的精度很高，可以在一定程度下看做随机数，借助（int）来进行类型转换就可以得到整数随机数了，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"> </span>&#123;    <br>    <span class="hljs-keyword">int</span> max=<span class="hljs-number">100</span>,min=<span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">int</span> ran2 = (<span class="hljs-keyword">int</span>) (Math.random()*(max-min)+min); <br>     System.out.println(ran2);<br> &#125;<br> <br></code></pre></td></tr></table></figure><p>至于第三种方法虽然不常用，但是也是一种思路。方法返回从1970年1月1日0时0分0秒（这与UNIX系统有关）到现在的一个long型的毫秒数，取模之后即可得到所需范围内的随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> max=<span class="hljs-number">100</span>,min=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">long</span> randomNum = System.currentTimeMillis();<br><span class="hljs-keyword">int</span> ran3 = (<span class="hljs-keyword">int</span>) (randomNum%(max-min)+min);<br>System.out.println(ran3);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法移除K个数字</title>
    <link href="/blog/2021/02/01/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%A7%BB%E9%99%A4K%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
    <url>/blog/2021/02/01/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%A7%BB%E9%99%A4K%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>题目描述：有一 十进制正整数，移除其中的 K 个数，使剩下的数字是所有可能中最大的。 假设： 字符串的长度一定大于等于 K 字符串不会以 0 开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：<span class="hljs-number">1432219</span><br>           <span class="hljs-number">3</span><br> <br>输出：<span class="hljs-number">4329</span><br></code></pre></td></tr></table></figure><p>算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Stack;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteK</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>String num=scanner.nextLine();<br><span class="hljs-keyword">int</span> k=scanner.nextInt();<br>String resulteString=DeleteK.removeK(num, k);<br>System.out.println(resulteString);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span>   <span class="hljs-keyword">static</span> String <span class="hljs-title">removeK</span><span class="hljs-params">(String num,<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>String result=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//根据数值比较进行入栈移除</span><br>Stack&lt;Integer&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.length(); i++) &#123;<br><span class="hljs-keyword">int</span> temp=num.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-comment">//进行比较操作</span><br><span class="hljs-keyword">while</span> (stack.size()!=<span class="hljs-number">0</span>&amp;&amp;stack.peek()&lt;temp&amp;&amp;k&gt;<span class="hljs-number">0</span>) &#123;<br>stack.pop();<br>k--;<br>&#125;<br><span class="hljs-comment">//比较完成后，执行入栈操作</span><br><span class="hljs-keyword">if</span> (stack.size()!=<span class="hljs-number">0</span>||temp!=<span class="hljs-number">0</span>) &#123;<br>stack.push(temp);<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果存在数据全部存入栈中，但是k的值不为0的</span><br><span class="hljs-keyword">while</span> (k&gt;<span class="hljs-number">0</span>&amp;&amp;stack.size()!=<span class="hljs-number">0</span>) &#123;<br>stack.pop();<br>k--;<br>&#125;<br><br><span class="hljs-comment">//将数据从栈中全部取出</span><br><span class="hljs-keyword">while</span> (stack.size()!=<span class="hljs-number">0</span>) &#123;<br>result=stack.pop()+result;<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot工具集成</title>
    <link href="/blog/2021/02/01/SpringBoot%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90/"/>
    <url>/blog/2021/02/01/SpringBoot%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h1 id="整合-JavaMail"><a href="#整合-JavaMail" class="headerlink" title="整合 JavaMail"></a>整合 JavaMail</h1><p>本次测试演示带模板的邮件，使用 Freemark 实现邮件的模板。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"> 添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>添加配置<br>在 application.properties 中添加<br>这里的密码需要设置的是<span class="hljs-number">163</span>的第三方工具访问密码<br># javamail 配置<br>spring.mail.host=smtp<span class="hljs-number">.163</span>.com<br>spring.mail.username=<span class="hljs-number">13738137546</span>@<span class="hljs-number">163.</span>com<br>spring.mail.password=<br>spring.mail.properties.mail.smtp.auth=<span class="hljs-keyword">true</span><br>spring.mail.properties.mail.smtp.starttls.enable=<span class="hljs-keyword">true</span><br>spring.mail.properties.mail.smtp.starttls.required=<span class="hljs-keyword">true</span><br> <br> <br> 编码<br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableConfigurationProperties(MailProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaMailComponent</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String template = <span class="hljs-string">&quot;mail.ftl&quot;</span>;<br> <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> FreeMarkerConfigurer freeMarkerConfigurer;<br><br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br> <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MailProperties mailProperties;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>map.put(<span class="hljs-string">&quot;email&quot;</span>, email);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取内容</span><br>String text = <span class="hljs-keyword">this</span>.getTextByTemplate(template, map);<br><span class="hljs-comment">// 发送</span><br><span class="hljs-keyword">this</span>.send(email, text);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getTextByTemplate</span><span class="hljs-params">(String template, Map&lt;String, Object&gt; model)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">return</span> FreeMarkerTemplateUtils<br>.processTemplateIntoString(<span class="hljs-keyword">this</span>.freeMarkerConfigurer.getConfiguration().getTemplate(template), model);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">send</span><span class="hljs-params">(String email, String text)</span> <span class="hljs-keyword">throws</span> MessagingException, UnsupportedEncodingException </span>&#123;<br>MimeMessage message = <span class="hljs-keyword">this</span>.javaMailSender.createMimeMessage();<br>MimeMessageHelper helper = <span class="hljs-keyword">new</span> MimeMessageHelper(message, <span class="hljs-keyword">true</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>InternetAddress from = <span class="hljs-keyword">new</span> InternetAddress();<br>from.setAddress(<span class="hljs-keyword">this</span>.mailProperties.getUsername());<br>from.setPersonal(<span class="hljs-string">&quot;崔笑颜&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>helper.setFrom(from);<br>helper.setTo(email);<br>helper.setSubject(<span class="hljs-string">&quot;SpringBoot 发送的第一封邮件&quot;</span>);<br>helper.setText(text, <span class="hljs-keyword">true</span>);<br><span class="hljs-keyword">this</span>.javaMailSender.send(message);<br><span class="hljs-keyword">return</span> text;<br>&#125;<br>&#125;<br> <br>在 src/main/resources 下的 template 目录下创建名为 mail.ftl 的文件，其内容如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div style=<span class="hljs-string">&quot;width: 600px; text-align: left; margin: 0 auto;&quot;</span>&gt;<br>&lt;h1 style=&quot;color: #005da7;&quot;&gt;崔笑颜&lt;/h1&gt;<br>&lt;div style=&quot;border-bottom: 5px solid #005da7; height: 2px; width: 100%;&quot;&gt;&lt;/div&gt;<br>&lt;div style=<span class="hljs-string">&quot;border: 1px solid #005da7; font-size: 16px; line-height: 50px; padding: 20px;&quot;</span>&gt;<br>&lt;div&gt;$&#123;email&#125;，您好！&lt;/div&gt;<br>&lt;div&gt;<br>这是个测试<br>&lt;/div&gt;<br>&lt;div&gt;<br>想了解更多信息，请访问 &lt;a href=<span class="hljs-string">&quot;https://bk.cuixiaoyan.xyz/&quot;</span>&gt;https:<span class="hljs-comment">//bk.cuixiaoyan.xyz/&lt;/a&gt;</span><br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br>测试<br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailTest</span> </span>&#123;<br> <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JavaMailComponent javaMailComponent;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">this</span>.javaMailComponent.sendMail(<span class="hljs-string">&quot;56696508@qq.com&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="整合定时任务"><a href="#整合定时任务" class="headerlink" title="整合定时任务"></a>整合定时任务</h1><h2 id="Scheduled-方式"><a href="#Scheduled-方式" class="headerlink" title="Scheduled 方式"></a>Scheduled 方式</h2><h3 id="任务类"><a href="#任务类" class="headerlink" title="任务类"></a>任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Schedule</span> </span>&#123;<br> <br><span class="hljs-meta">@Scheduled(fixedRate = 2000)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">task</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;启动定时任务:&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 @Scheduled 定义任务执行时间，代码中表示每隔 2 秒执行一次任务。</p><h3 id="开启定时计划"><a href="#开启定时计划" class="headerlink" title="开启定时计划"></a>开启定时计划</h3><p>只需在 Spring Boot 的启动类上添加 @EnableScheduling 后，启动项目即可。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-schedule_1567762142429.jpg" alt="springboot-web-schedule"></p><h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><p>默认情况下，Spring Task 使用一条线程串行的执行所有的定时任务。为了提高执行效率，我们需要手动编写一个线程池实现定时任务的并行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncTaskConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SchedulingConfigurer</span>, <span class="hljs-title">AsyncConfigurer</span> </span>&#123;<br> <br>    <span class="hljs-comment">//线程池线程数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> corePoolSize = <span class="hljs-number">5</span>;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ThreadPoolTaskScheduler <span class="hljs-title">taskScheduler</span><span class="hljs-params">()</span> </span>&#123;<br>        ThreadPoolTaskScheduler scheduler = <span class="hljs-keyword">new</span> ThreadPoolTaskScheduler();<br>        scheduler.initialize();<span class="hljs-comment">//初始化线程池</span><br>        scheduler.setPoolSize(corePoolSize);<span class="hljs-comment">//线程池容量</span><br>        <span class="hljs-keyword">return</span> scheduler;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Executor <span class="hljs-title">getAsyncExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>        Executor executor = <span class="hljs-keyword">this</span>.taskScheduler();<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AsyncUncaughtExceptionHandler <span class="hljs-title">getAsyncUncaughtExceptionHandler</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configureTasks</span><span class="hljs-params">(ScheduledTaskRegistrar scheduledTaskRegistrar)</span> </span>&#123;<br>        scheduledTaskRegistrar.setTaskScheduler(taskScheduler());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="整合-Swagger2"><a href="#整合-Swagger2" class="headerlink" title="整合 Swagger2"></a>整合 Swagger2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;<br>&lt;version&gt;2.7.0&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;<br>&lt;version&gt;2.7.0&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>重新创建一个配置类，如下：<br> <br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Configuration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">accessToken</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;api&quot;</span>)<span class="hljs-comment">// 定义组</span><br>                .select() <span class="hljs-comment">// 选择那些路径和 api 会生成 document</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.cxy.template.controller&quot;</span>)) <span class="hljs-comment">// 拦截的包路径</span><br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;/*/.*&quot;</span>))<span class="hljs-comment">// 拦截的接口路径</span><br>                .build() <span class="hljs-comment">// 创建</span><br>                .apiInfo(apiInfo()); <span class="hljs-comment">// 配置说明</span><br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<span class="hljs-comment">//</span><br>                .title(<span class="hljs-string">&quot;Spring Boot 之 Web 篇&quot;</span>)<span class="hljs-comment">// 标题</span><br>                .description(<span class="hljs-string">&quot;spring boot Web 相关内容&quot;</span>)<span class="hljs-comment">// 描述</span><br>                .termsOfServiceUrl(<span class="hljs-string">&quot;https://bk.cuixiaoyan.xyz/&quot;</span>)<span class="hljs-comment">//</span><br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;moonlightL&quot;</span>, <span class="hljs-string">&quot;https://bk.cuixiaoyan.xyz/&quot;</span>, <span class="hljs-string">&quot;cuixiaoyande@163.com&quot;</span>))<span class="hljs-comment">// 联系</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<span class="hljs-comment">// 版本</span><br>                .build();<br>    &#125;<br> <br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 解决静态资源无法访问</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br>        <span class="hljs-comment">// 解决swagger无法访问</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/swagger-ui.html&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        <span class="hljs-comment">// 解决swagger的js文件无法访问</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    &#125;<br> <br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>为了能更好的说明接口信息，我们还可以在 Controller 类上使用 Swagger2 相关注解说明信息。 我们以 FastJsonController 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value = &quot;FastJson测试&quot;, tags = &#123; &quot;测试接口&quot; &#125;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonController</span> </span>&#123;<br> <br><span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span><br><span class="hljs-meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, dataType = &quot;string&quot;, paramType = &quot;query&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/test/&#123;name&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br> <br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(name);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br> <br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，上边的方法是用 @GetMapping 注解，如果只是使用 @RequestMapping 注解，不配置 method 属性，那么 API 文档会生成 7 种请求方式。</p><p>启动项目，打开浏览器访问 <a href="http://localhost:8080/swagger-ui.html![WX20190906-173719@2x](https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190906-173719@2x_1567762664793.png)">http://localhost:8080/swagger-ui.html![WX20190906-173719@2x](https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190906-173719@2x_1567762664793.png)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合</title>
    <link href="/blog/2021/02/01/SpringBoot%E6%95%B4%E5%90%88/"/>
    <url>/blog/2021/02/01/SpringBoot%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="配置-AOP-切面"><a href="#配置-AOP-切面" class="headerlink" title="配置 AOP 切面"></a>配置 AOP 切面</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>编写切面类<br>使用 <span class="hljs-meta">@Component</span>，<span class="hljs-meta">@Aspect</span> 标记到切面类上：<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeAspect</span> </span>&#123;<br> <br><span class="hljs-meta">@Around(&quot;execution(* com.light.springboot.controller.FastJsonController..*(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">method</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br> <br>System.out.println(<span class="hljs-string">&quot;=====Aspect处理=======&quot;</span>);<br>Object[] args = pjp.getArgs();<br><span class="hljs-keyword">for</span> (Object arg : args) &#123;<br>System.out.println(<span class="hljs-string">&quot;参数为:&quot;</span> + arg);<br>&#125;<br> <br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br> <br>Object object = pjp.proceed();<br> <br>System.out.println(<span class="hljs-string">&quot;Aspect 耗时:&quot;</span> + (System.currentTimeMillis() - start));<br> <br><span class="hljs-keyword">return</span> object;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>请求 FastJsonController 控制器的方法，结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-08_1567733306478.jpg" alt="springboot-web-08"></p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java">友好页面<br>先演示非友好页面，修改 FastJsonController 类中的 test 方法：<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br><br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><span class="hljs-comment">// 模拟异常</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br> <br>当系统报错时，返回到页面的内容通常是一些杂乱的代码段，这种显示对用户来说不友好，因此我们需要自定义一个友好的提示系统异常的页面。<br> <br>在 src/main/resources 下创建 /<span class="hljs-keyword">public</span>/error，在该目录下再创建一个名为 5xx.html 文件，该页面的内容就是当系统报错时返回给用户浏览的内容：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;系统错误&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;系统内部错误&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>路径时固定的，Spring Boot 会在系统报错时将返回视图指向该目录下的文件。<br>上边处理的 5xx 状态码的问题，接下来解决 <span class="hljs-number">404</span> 状态码的问题。<br> <br>当出现 <span class="hljs-number">404</span> 的情况时，用户浏览的页面也不够友好，因此我们也需要自定义一个友好的页面给用户展示。<br> <br>在 /<span class="hljs-keyword">public</span>/error 目录下再创建一个名为 <span class="hljs-number">404.</span>html 的文件：<br> <br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;访问异常&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;找不到页面&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br>全局异常捕获<br>如果项目前后端是通过 JSON 进行数据通信，则当出现异常时可以常用如下方式处理异常信息。<br> <br>编写一个类充当全局异常的处理类，需要使用 <span class="hljs-meta">@ControllerAdvice</span> 和 <span class="hljs-meta">@ExceptionHandler</span> 注解：<br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalDefaultExceptionHandler</span> </span>&#123;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理 Exception 类型的异常</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">defaultExceptionHandler</span><span class="hljs-params">(Exception e)</span> </span>&#123;<br><br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, e.getMessage());<br><span class="hljs-keyword">return</span> map;<br>&#125;<br>&#125;<br>其中，方法名为任意名，入参一般使用 Exception 异常类，方法返回值可自定义。<br> <br></code></pre></td></tr></table></figure><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>&lt;groupId&gt;commons-io&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>&lt;version&gt;2.4&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>编写一个实体类，用于封装返回信息：<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInfo</span> </span>&#123;<br> <br><span class="hljs-keyword">private</span> String path;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileInfo</span><span class="hljs-params">(String path)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.path = path;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPath</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> path;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPath</span><span class="hljs-params">(String path)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.path = path;<br>&#125;<br><br>&#125;<br>编写 Controller，用于处理文件上传下载：<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br> <br><span class="hljs-keyword">private</span> String path = <span class="hljs-string">&quot;d:\\&quot;</span>;<br> <br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileInfo <span class="hljs-title">upload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>System.out.println(file.getName());<br>System.out.println(file.getOriginalFilename());<br>System.out.println(file.getSize());<br> <br>File localFile = <span class="hljs-keyword">new</span> File(path, file.getOriginalFilename());<br> <br>file.transferTo(localFile);<br> <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FileInfo(localFile.getAbsolutePath());<br>&#125;<br> <br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(path, id + <span class="hljs-string">&quot;.jpg&quot;</span>));<br>OutputStream outputStream = response.getOutputStream();) &#123;<br> <br>response.setContentType(<span class="hljs-string">&quot;application/x-download&quot;</span>);<br>response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + id + <span class="hljs-string">&quot;.jpg&quot;</span>);<br> <br>IOUtils.copy(inputStream, outputStream);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h1 id="CORS-支持"><a href="#CORS-支持" class="headerlink" title="CORS 支持"></a>CORS 支持</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java">前端页面<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br> <br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;跨域测试&lt;/title&gt;<br>&lt;/head&gt;<br> <br>&lt;body&gt;<br>    &lt;button id=&quot;test&quot;&gt;测试&lt;/button&gt;<br>    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(function() &#123;<br>        $(<span class="hljs-string">&quot;#test&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, function() &#123;<br>            $.ajax(&#123;<br>                <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://localhost:8080/fastjson/test&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>                <span class="hljs-string">&quot;dataType&quot;</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>                <span class="hljs-string">&quot;success&quot;</span>: function(data) &#123;<br>                    console.log(data);<br>                &#125;<br>            &#125;)<br>        &#125;);<br>    &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br> <br>&lt;/html&gt;<br> <br>前端服务器启动端口为 <span class="hljs-number">8088</span> 与后端服务器 <span class="hljs-number">8080</span> 不同源，因此出现跨域的问题。<br> <br>现在开始解决跨域问题，可以两种维度控制客户端请求。<br>粗粒度控制：<br> <br>方式一<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title">corsConfigurer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>              registry.addMapping(<span class="hljs-string">&quot;/fastjson/**&quot;</span>)<br>                      .allowedOrigins(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<span class="hljs-comment">// 允许 8088 端口访问</span><br>          &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br> <br>方式二<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/fastjson/**&quot;</span>)<br>              .allowedOrigins(<span class="hljs-string">&quot;http://localhost:8088&quot;</span>);<span class="hljs-comment">// 允许 8088 端口访问</span><br>    &#125;<br>&#125;<br>细粒度控制：<br>在 FastJsonController 类中的方法上添加 <span class="hljs-meta">@CrossOrigin(origins=&quot;xx&quot;)</span> 注解：<br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-meta">@CrossOrigin(origins=&quot;http://localhost:8088&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br><br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><span class="hljs-keyword">return</span> user;<br>&#125;<br>在使用该注解时，需要注意 <span class="hljs-meta">@RequestMapping</span> 使用的请求方式类型，即 GET 或 POST。<br> <br> <br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义</title>
    <link href="/blog/2021/01/31/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <url>/blog/2021/01/31/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义-Servlet"><a href="#自定义-Servlet" class="headerlink" title="自定义 Servlet"></a>自定义 Servlet</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> 编写 Servlet<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>doPost(req, resp);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>resp.getWriter().write(<span class="hljs-string">&quot;自定义 Servlet&quot;</span>);<br>&#125;<br><br>&#125;<br> <br>注册 Servlet<br>将 Servelt 注册成 Bean。在上文创建的 WebConfig 类中添加如下代码：<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">servletRegistrationBean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> ServletTest(),<span class="hljs-string">&quot;/servletTest&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-04_1567661032166.jpg" alt="springboot-web-04"></p><h1 id="自定义过滤器-第三方过滤器"><a href="#自定义过滤器-第三方过滤器" class="headerlink" title="自定义过滤器/第三方过滤器"></a>自定义过滤器/第三方过滤器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">编写过滤器<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=======初始化过滤器=========&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br> <br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br> <br>filterChain.doFilter(request, response);<br> <br>System.out.println(<span class="hljs-string">&quot;filter 耗时：&quot;</span> + (System.currentTimeMillis() - start));<br> <br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=======销毁过滤器=========&quot;</span>);<br>&#125;<br> <br>&#125;<br> <br> 注册过滤器<br>要是该过滤器生效，有两种方式：<br><span class="hljs-number">1.</span>使用 <span class="hljs-meta">@Component</span> 注解<br><span class="hljs-number">2.</span>添加到过滤器链中，此方式适用于使用第三方的过滤器。将过滤器写到 WebConfig 类中，如下：<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">timeFilter</span><span class="hljs-params">()</span> </span>&#123;<br>FilterRegistrationBean registrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br><br>TimeFilter timeFilter = <span class="hljs-keyword">new</span> TimeFilter();<br>registrationBean.setFilter(timeFilter);<br><br>List&lt;String&gt; urls = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>urls.add(<span class="hljs-string">&quot;/*&quot;</span>);<br>registrationBean.setUrlPatterns(urls);<br><br><span class="hljs-keyword">return</span> registrationBean;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>结果如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-05_1567661159541.jpg" alt="springboot-web-05"></p><h1 id="自定义监听器"><a href="#自定义监听器" class="headerlink" title="自定义监听器"></a>自定义监听器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">编写监听器<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListenerTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;监听器初始化...&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br> <br>&#125;<br> <br>&#125;<br> <br>注册监听器<br>注册监听器为 Bean，在 WebConfig 配置类中添加如下代码：<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletListenerRegistrationBean&lt;ListenerTest&gt; <span class="hljs-title">servletListenerRegistrationBean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletListenerRegistrationBean&lt;ListenerTest&gt;(<span class="hljs-keyword">new</span> ListenerTest());<br>&#125;<br> <br>针对自定义 Servlet、Filter 和 Listener 的配置，还有另一种方式：<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootWebApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextInitializer</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    <span class="hljs-comment">// 配置 Servlet</span><br>        servletContext.addServlet(<span class="hljs-string">&quot;servletTest&quot;</span>,<span class="hljs-keyword">new</span> ServletTest())<br>          .addMapping(<span class="hljs-string">&quot;/servletTest&quot;</span>);<br>        <span class="hljs-comment">// 配置过滤器</span><br>        servletContext.addFilter(<span class="hljs-string">&quot;timeFilter&quot;</span>,<span class="hljs-keyword">new</span> TimeFilter())<br>          .addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST),<span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;/*&quot;</span>);<br>        <span class="hljs-comment">// 配置监听器</span><br>        servletContext.addListener(<span class="hljs-keyword">new</span> ListenerTest());<br>    &#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(SpringbootWebApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-06_1567661262946.jpg" alt="springboot-web-06"></p><h1 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">编写拦截器<br>使用 <span class="hljs-meta">@Component</span> 让 Spring 管理其生命周期：<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;========preHandle=========&quot;</span>);<br>System.out.println(((HandlerMethod)handler).getBean().getClass().getName());<br>System.out.println(((HandlerMethod)handler).getMethod().getName());<br><br>request.setAttribute(<span class="hljs-string">&quot;startTime&quot;</span>, System.currentTimeMillis());<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>System.out.println(<span class="hljs-string">&quot;========postHandle=========&quot;</span>);<br>Long start = (Long) request.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;耗时:&quot;</span>+(System.currentTimeMillis() - start));<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>System.out.println(<span class="hljs-string">&quot;========afterCompletion=========&quot;</span>);<br>Long start = (Long) request.getAttribute(<span class="hljs-string">&quot;startTime&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;耗时:&quot;</span>+(System.currentTimeMillis() - start));<br><br>System.out.println(exception);<br>&#125;<br> <br>&#125;<br> <br>注册拦截器<br>编写拦截器后，我们还需要将其注册到拦截器链中，如下配置：<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TimeInterceptor timeInterceptor;<br><br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>registry.addInterceptor(timeInterceptor);<br>&#125;<br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>请求一个 controller ，结果如下：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-web-07_1567661364759.jpg" alt="springboot-web-07"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-Web-Fastjson</title>
    <link href="/blog/2021/01/31/SpringBoot-Web-Fastjson/"/>
    <url>/blog/2021/01/31/SpringBoot-Web-Fastjson/</url>
    
    <content type="html"><![CDATA[<h1 id="整合模板引擎"><a href="#整合模板引擎" class="headerlink" title="整合模板引擎"></a>整合模板引擎</h1><p>由于 jsp 不被 SpringBoot 推荐使用，所以模板引擎主要介绍 Freemarker 和 Thymeleaf。</p><h2 id="Freemarker"><a href="#Freemarker" class="headerlink" title="Freemarker"></a>Freemarker</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">添加 Freemarker 依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>添加 Freemarker 模板配置<br>在 application.properties 中添加如下内容：<br>spring.freemarker.allow-request-override=<span class="hljs-keyword">false</span><br>spring.freemarker.cache=<span class="hljs-keyword">true</span><br>spring.freemarker.check-template-location=<span class="hljs-keyword">true</span><br>spring.freemarker.charset=UTF-<span class="hljs-number">8</span><br>spring.freemarker.content-type=text/html<br>spring.freemarker.expose-request-attributes=<span class="hljs-keyword">false</span><br>spring.freemarker.expose-session-attributes=<span class="hljs-keyword">false</span><br>spring.freemarker.expose-spring-macro-helpers=<span class="hljs-keyword">false</span><br>spring.freemarker.prefix=<br>spring.freemarker.suffix=.ftl<br> <br>Freemarker 案例演示<br>在 controller 包中创建 FreemarkerController：<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;freemarker&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreemarkerController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span> </span>&#123;<br><br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello Freemarker&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br>&#125;<br>在 templates 目录中创建名为 hello.ftl 文件，内容如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;$&#123;msg&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br></code></pre></td></tr></table></figure><h3 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboog-5-1_1567562182671.jpg" alt="springboog-5-1"></p><h2 id="整合-Thymeleaf"><a href="#整合-Thymeleaf" class="headerlink" title="整合 Thymeleaf"></a>整合 Thymeleaf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">添加 Thymeleaf 依赖<br>在 pom.xml 文件中添加：<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br> <br>添加 Thymeleaf 模板配置<br>在 application.properties 中添加如下内容：<br>spring.thymeleaf.cache=<span class="hljs-keyword">true</span><br>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.thymeleaf.encoding=UTF-<span class="hljs-number">8</span><br>spring.thymeleaf.content-type=text/html<br>上述配置都是默认值。<br> <br>Thymeleaf 案例演示<br>在 controller 包中创建 ThymeleafController:<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span> </span>&#123;<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello Thymeleaf&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br>&#125;<br> <br>在 template 目录下创建名为 hello.html 的文件，内容如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;/css/index.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2 th:text=&quot;$&#123;msg&#125;&quot;&gt;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br></code></pre></td></tr></table></figure><h3 id="结果如下：-1"><a href="#结果如下：-1" class="headerlink" title="结果如下："></a>结果如下：</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboog-5-2_1567562330507.jpg" alt="springboog-5-2"></p><h2 id="整合-Fastjson"><a href="#整合-Fastjson" class="headerlink" title="整合 Fastjson"></a>整合 Fastjson</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">添加依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;1.2.35&lt;/version&gt;<br>&lt;/dependency&gt;<br> <br>整合 Fastjson<br>创建一个配置管理类 WebConfig ，如下：<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br> <br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> HttpMessageConverters <span class="hljs-title">fastJsonHttpMessageConverters</span><span class="hljs-params">()</span> </span>&#123;<br>FastJsonHttpMessageConverter fastJsonHttpMessageConverter = <span class="hljs-keyword">new</span> FastJsonHttpMessageConverter();<br> <br>FastJsonConfig fastJsonConfig = <span class="hljs-keyword">new</span> FastJsonConfig();<br>fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);<br><br>fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);<br><br>HttpMessageConverter&lt;?&gt; converter = fastJsonHttpMessageConverter;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpMessageConverters(converter);<br> <br>&#125;<br>&#125;<br> <br>演示案例：<br>创建一个实体类 User： 记得get set<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br> <br><span class="hljs-keyword">private</span> Integer id;<br><br><span class="hljs-keyword">private</span> String username;<br><br><span class="hljs-keyword">private</span> String password;<br><br><span class="hljs-meta">@JSONField(format=&quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br> <br>&#125;<br> <br>创建控制器类 FastjsonController :<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonController</span> </span>&#123;<br> <br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User();<br><br>user.setId(<span class="hljs-number">1</span>);<br>user.setUsername(<span class="hljs-string">&quot;jack&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;jack123&quot;</span>);<br>user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="结果如下图："><a href="#结果如下图：" class="headerlink" title="结果如下图："></a>结果如下图：</h3><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/springboot-06-1_1567562545811.jpg" alt="springboot-06-1">日期格式与我们修改的内容格式一致，说明 Fastjson 整合成功。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置logback</title>
    <link href="/blog/2021/01/31/SpringBoot%E9%85%8D%E7%BD%AElogback/"/>
    <url>/blog/2021/01/31/SpringBoot%E9%85%8D%E7%BD%AElogback/</url>
    
    <content type="html"><![CDATA[<h1 id="配置日志文件"><a href="#配置日志文件" class="headerlink" title="配置日志文件"></a>配置日志文件</h1><p>spring boot 默认会加载 classpath:logback-spring.xml 或者 classpath:logback-spring.groovy。</p><p>如需要自定义文件名称，在 application.properties 中配置 logging.config 选项即可。</p><p>在 src/main/resources 下创建 logback-spring.xml 文件，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;configuration&gt;<br>    &lt;!-- 文件输出格式 --&gt;<br>    &lt;property name=<span class="hljs-string">&quot;PATTERN&quot;</span> value=<span class="hljs-string">&quot;%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) |-%-5level [%thread] %c [%L] -| %msg%n&quot;</span> /&gt;<br>    &lt;!-- test文件路径 --&gt;<br>    &lt;property name=<span class="hljs-string">&quot;TEST_FILE_PATH&quot;</span> value=<span class="hljs-string">&quot;d:/test.log&quot;</span> /&gt;<br>    &lt;!-- pro文件路径 --&gt;<br>    &lt;property name=<span class="hljs-string">&quot;PRO_FILE_PATH&quot;</span> value=<span class="hljs-string">&quot;/opt/test/log&quot;</span> /&gt;<br> <br>    &lt;!-- 开发环境 --&gt;<br>    &lt;springProfile name=<span class="hljs-string">&quot;dev&quot;</span>&gt;<br>        &lt;appender name=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;<br>            &lt;encoder&gt;<br>                &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;<br>            &lt;/encoder&gt;<br>        &lt;/appender&gt;<br>        &lt;logger name=<span class="hljs-string">&quot;com.light.springboot&quot;</span> level=<span class="hljs-string">&quot;debug&quot;</span> /&gt;<br>        &lt;root level=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;appender-ref ref=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br> <br>    &lt;!-- 测试环境 --&gt;<br>    &lt;springProfile name=<span class="hljs-string">&quot;test&quot;</span>&gt;<br>        &lt;!-- 每天产生一个文件 --&gt;<br>        &lt;appender name=<span class="hljs-string">&quot;TEST-FILE&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;<br>            &lt;!-- 文件路径 --&gt;<br>            &lt;file&gt;$&#123;TEST_FILE_PATH&#125;&lt;/file&gt;<br>            &lt;rollingPolicy <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;<br>                &lt;!-- 文件名称 --&gt;<br>                &lt;fileNamePattern&gt;$&#123;TEST_FILE_PATH&#125;/info.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;<br>                &lt;!-- 文件最大保存历史数量 --&gt;<br>                &lt;MaxHistory&gt;100&lt;/MaxHistory&gt;<br>            &lt;/rollingPolicy&gt;<br>            &lt;layout <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;<br>                &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;<br>            &lt;/layout&gt;<br>        &lt;/appender&gt;<br>        &lt;logger name=<span class="hljs-string">&quot;com.light.springboot&quot;</span> level=<span class="hljs-string">&quot;debug&quot;</span> /&gt;<br>        &lt;root level=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;appender-ref ref=<span class="hljs-string">&quot;TEST-FILE&quot;</span> /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br> <br>    &lt;!-- 生产环境 --&gt;<br>    &lt;springProfile name=<span class="hljs-string">&quot;prod&quot;</span>&gt;<br>        &lt;appender name=<span class="hljs-string">&quot;PROD_FILE&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;<br>            &lt;file&gt;$&#123;PRO_FILE_PATH&#125;&lt;/file&gt;<br>            &lt;rollingPolicy <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;<br>                &lt;fileNamePattern&gt;$&#123;PRO_FILE_PATH&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;<br>                &lt;MaxHistory&gt;100&lt;/MaxHistory&gt;<br>            &lt;/rollingPolicy&gt;<br>            &lt;layout <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;<br>                &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;<br>            &lt;/layout&gt;<br>        &lt;/appender&gt;<br>        &lt;root level=<span class="hljs-string">&quot;warn&quot;</span>&gt;<br>            &lt;appender-ref ref=<span class="hljs-string">&quot;PROD_FILE&quot;</span> /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>其中，springProfile 标签的 name 属性对应 application.properties 中的 spring.profiles.active 的配置。</p><p>即 spring.profiles.active 的值可以看作是日志配置文件中对应的 springProfile 是否生效的开关。</p><h1 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h1><p>下面列出 Spring Boot 开发中常用的注解：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">@Configuration                 # 作用于类上，相当于一个 xml 配置文件<br>@Bean                          # 作用于方法上，相当于 xml 配置中的 &lt;bean&gt;<br>@SpringBootApplication         # Spring Boot的核心注解，是一个组合注解，用于启动类上<br>@EnableAutoConfiguration       # 启用自动配置，允许加载第三方 Jar 包的配置<br>@ComponentScan                 # 默认扫描 @SpringBootApplication 所在类的同级目录以及它的子目录<br>@PropertySource                # 加载 properties 文件<br>@Value                         # 将配置文件的属性注入到 Bean 中特定的成员变量<br>@EnableConfigurationProperties # 开启一个特性，让配置文件的属性可以注入到 Bean 中，与 @ConfigurationProperties 结合使用<br>@ConfigurationProperties       # 关联配置文件中的属性到 Bean 中<br>@Import                        # 加载指定 Class 文件，其生命周期被 Spring 管理<br>@ImportResource                # 加载 xml 文件<br></code></pre></td></tr></table></figure><h1 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h1><h2 id="属性装配"><a href="#属性装配" class="headerlink" title="属性装配"></a>属性装配</h2><p>有两种方式：使用 @Value 注解和 Environment 对象。 在 application.properties 中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">ds.userName=root<br>ds.password=tiger<br>ds.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test</span><br>ds.driverClassName=com.mysql.jdbc.Driver<br> <br>以上是自定义的配置。<br>创建一个配置类，如下：<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;ds.userName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String userName;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Environment environment;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ds.userName:&quot;</span> + <span class="hljs-keyword">this</span>.userName);<br>        System.out.println(<span class="hljs-string">&quot;ds.password:&quot;</span> + <span class="hljs-keyword">this</span>.environment.getProperty(<span class="hljs-string">&quot;ds.password&quot;</span>));<br>    &#125;<br>&#125;<br> <br>通过 <span class="hljs-meta">@Value</span> 获取 config.userName 配置；通过 environment 获取 config.password 配置。<br> <br>测试：<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ConfigurableApplicationContext context = SpringApplication.run(SpringbootApplication.class, args);<br>        context.getBean(WebConfig.class).show();<br>    &#125;<br>&#125;<br> <br>打印结果：<br>userName:root<br>password:tiger<br></code></pre></td></tr></table></figure><h2 id="对象装配"><a href="#对象装配" class="headerlink" title="对象装配"></a>对象装配</h2><p>创建一个封装类： 省略 get set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;ds&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceProperties</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> String url;<br> <br>    <span class="hljs-keyword">private</span> String driverClassName;<br> <br>    <span class="hljs-keyword">private</span> String userName;<br> <br>    <span class="hljs-keyword">private</span> String password;<br> <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ds.url=&quot;</span> + <span class="hljs-keyword">this</span>.url);<br>        System.out.println(<span class="hljs-string">&quot;ds.driverClassName=&quot;</span> + <span class="hljs-keyword">this</span>.driverClassName);<br>        System.out.println(<span class="hljs-string">&quot;ds.userName=&quot;</span> + <span class="hljs-keyword">this</span>.userName);<br>        System.out.println(<span class="hljs-string">&quot;ds.password=&quot;</span> +<span class="hljs-keyword">this</span>.password);<br>    &#125;<br> <br>&#125;<br>测试：<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ConfigurableApplicationContext context = SpringApplication.run(SpringbootApplication.class, args);<br>        context.getBean(DataSourceProperties.class).show();<br>    &#125;<br>&#125;<br> <br>打印结果<br>ds.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test</span><br>ds.driverClassName=com.mysql.jdbc.Driver<br>ds.userName=root<br>ds.password=tiger<br></code></pre></td></tr></table></figure><h1 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h1><p>打包的形式有两种：jar 和 war。</p><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><p>默认情况下，通过 maven 执行 package 命令后，会生成 jar 包，且该 jar 包会内置了 tomcat 容器，因此我们可以通过 java -jar 就可以运行项目</p><h2 id="war"><a href="#war" class="headerlink" title="war"></a>war</h2><p>让 SpringbootApplication 类继承 SpringBootServletInitializer 并重写 configure 方法，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder application)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> application.sources(SpringbootApplication.class);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootApplication.class, args);<br>    &#125;<br>&#125;<br>修改 pom.xml 文件，将 jar 改成 war，如下：<br>&lt;packaging&gt;war&lt;/packaging&gt;<br>移除内置 tomcat：<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;exclusions&gt;<br>&lt;exclusion&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>&lt;/exclusion&gt;<br>&lt;/exclusions&gt;<br>&lt;/dependency&gt;<br>&lt;!-- Servlet API --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>&lt;version&gt;3.1.0&lt;/version&gt;<br>&lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>打包成功后，将 war 包部署到 tomcat 容器中运行即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基本命令加RabbitMq安装</title>
    <link href="/blog/2021/01/25/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8A%A0RabbitMq%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2021/01/25/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8A%A0RabbitMq%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<ol><li>查看安装的Docker信息 docker info</li><li>查看Docker版本 docker version</li></ol><h1 id="镜像类命令"><a href="#镜像类命令" class="headerlink" title="镜像类命令"></a>镜像类命令</h1><ol><li>查看镜像 docker images</li><li>删除镜像 根据imageId或者imageName:tag删除本地镜像 docker rmi &lt;imageId|imageName:tag&gt;</li><li>拉取镜像 docker pull <a href="imagename:tag">imageName:tag</a></li><li>上传镜像到仓库 docker push <a href="imagename:tag">imageName:tag</a></li><li>保存镜像为tar包 docker save registry:latest &gt; /data/registry.tar</li><li>搜索镜像 docker search</li><li>导入镜像（用本地的tar包导入镜像） docker load –i</li><li>给镜像重新打tag docker tag <a href="imagename:tag">imageName:tag</a></li><li>构建镜像 docker build -t<img src="" alt="img">&lt;&gt;</li></ol><h1 id="容器类命令"><a href="#容器类命令" class="headerlink" title="容器类命令"></a>容器类命令</h1><ol><li>查询正在运行的容器 查询所有容器 docker ps docker ps -a</li><li>删除容器 删除的容器只能是停止的，非正在运行的容器 docker rm &lt;containerId|containerName&gt;</li><li>开启停止的容器 docker start &lt;containerId|containerName&gt;</li><li>停止容器 docker stop &lt;containerId|containerName&gt;</li><li>杀死容器 docker kill &lt;containerId|containerName&gt;</li><li>从容器中取日志 docker logs &lt;containerId|containerName&gt;</li><li>显示一个运行的容器里面的进程信息 docker top &lt;containerId|containerName&gt;</li><li>重启容器 docker restart &lt;containerId|containerName&gt;</li><li>从容器里面拷贝文件/目录到本地一个路径 docker cp &lt;containerId|containerName&gt;:/container_path to_path</li><li>启动容器 在容器中运行”echo”命令，输出”helloword” docker run image_name echo “hello word”</li><li>交互式进入容器中 docker run -i -t image_name /bin/bash</li><li>后台运行容器使用–d参数(后台运行) docker run -d image_name</li></ol><h1 id="Docker下安装rabbitmq"><a href="#Docker下安装rabbitmq" class="headerlink" title="Docker下安装rabbitmq"></a>Docker下安装rabbitmq</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">拉取镜像 <br>docker pull rabbitmq:3-management<br> <br>启动镜像<br>docker <span class="hljs-builtin-name">run</span> -d --hostname my-rabbit --name rabbit -v /data/rabbitmq:/var/lib/rabbitmq -e <span class="hljs-attribute">RABBITMQ_DEFAULT_USER</span>=admin -e <span class="hljs-attribute">RABBITMQ_DEFAULT_PASS</span>=admin -p 15672:15672 -p 5672:5672 rabbitmq:3-management<br></code></pre></td></tr></table></figure><p>完成后访问：<a href="http://ip:15672/">http://ip:15672</a> 用户名admin 密码 admin 也可以自己设置密码</p><p>是不是很简单 我自己在物理机上装了好几次 还是没有成功 docker 两句命令</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot入门设置</title>
    <link href="/blog/2021/01/25/SpringBoot%E5%85%A5%E9%97%A8%E8%AE%BE%E7%BD%AE/"/>
    <url>/blog/2021/01/25/SpringBoot%E5%85%A5%E9%97%A8%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。好就对了</p><h1 id="环境搭建maven项目"><a href="#环境搭建maven项目" class="headerlink" title="环境搭建maven项目"></a>环境搭建maven项目</h1><h2 id="pom-xml-中"><a href="#pom-xml-中" class="headerlink" title="pom.xml 中"></a>pom.xml 中</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 定义公共资源版本 --&gt;<br>&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;<br>    &lt;relativePath /&gt;<br>&lt;/parent&gt;<br> <br>&lt;properties&gt;<br>    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>&lt;/properties&gt;<br> <br>&lt;dependencies&gt;<br>    &lt;!-- 上边引入 parent，因此 下边无需指定版本 --&gt;<br>    &lt;!-- 包含 mvc,aop 等jar资源 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br> <br>&lt;build&gt;<br>    &lt;plugins&gt;<br>        &lt;plugin&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>        &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><h2 id="创建目录和配置文件"><a href="#创建目录和配置文件" class="headerlink" title="创建目录和配置文件"></a>创建目录和配置文件</h2><p>创建 src/main/resources 源文件目录，并在该目录下创建 application.properties 文件、static 和 templates 的文件夹。</p><p>application.properties：用于配置项目运行所需的配置数据。</p><p>static：用于存放静态资源，如：css、js、图片等。</p><p>templates：用于存放模板文件。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190902-094158@2x_1567388546384.png" alt="WX20190902-094158@2x"></p><h2 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h2><p>放在包下 com.cxy.template 不用单独建文件夹放 保持同级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 该注解指定项目为springboot，由此类当作程序入口</span><br><span class="hljs-comment"> 自动装配 web 依赖的环境</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>在com.cxy.template 下创建一个Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@GetMapping(&quot;/helloworld&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">helloworld</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:8080/helloworld">http://localhost:8080/helloworld</a> 这里建议增加热部署插件 <a href="https://bk.cuixiaoyan.xyz/archives/jrebel">idea 激活 jrebel</a></p><h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>pplication.properties 是 springboot 在运行中所需要的配置信息。</p><p>当我们在开发阶段，使用自己的机器开发，测试的时候需要用的测试服务器测试，上线时使用正式环境的服务器。</p><p>这三种环境需要的配置信息都不一样，当我们切换环境运行项目时，需要手动的修改多出配置信息，非常容易出错。</p><p>为了解决上述问题，springboot 提供多环境配置的机制，让开发者非常容易的根据需求而切换不同的配置环境。</p><p>在 src/main/resources 目录下创建三个配置文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">application-dev.properties：用于开发环境<br>application-test.properties：用于测试环境<br>application-prod.properties：用于生产环境<br> <br>我们可以在这个三个配置文件中设置不同的信息，application.properties 配置公共的信息。<br> <br>在 application.properties 中配置：<br>spring.profiles.active=dev<br> <br></code></pre></td></tr></table></figure><p>切换项目启动的环境不仅对读取配置文件信息有效，也可以对 Bean 有效。</p><p>当我们需要对不同环境使用不同的 Bean 时，可以通过 @Profile 注解进行区分，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanConfiguration</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;dev&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Runnable <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开发环境使用的 Bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> () -&gt; &#123;&#125;;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Runnable <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;测试环境使用的 Bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> () -&gt; &#123;&#125;;<br>    &#125;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;pro&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Runnable <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生成环境使用的 Bean&quot;</span>);<br>        <span class="hljs-keyword">return</span> () -&gt; &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当启动项目后，Spring 会根据 spring.profiles.active 的值实例化对应的 Bean。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装Docker</title>
    <link href="/blog/2021/01/25/centos7%E5%AE%89%E8%A3%85Docker/"/>
    <url>/blog/2021/01/25/centos7%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要用Docker"><a href="#为什么要用Docker" class="headerlink" title="为什么要用Docker"></a>为什么要用Docker</h1><p>全凭自己理解 我又不是专业的运维 搞这个干嘛 这种想法可不行哦</p><ol><li>安装软件方便快捷 例如rabbitmq 之前在本地怎么安装都访问不到web管理页面 但是docker就两句话 最后的效果是一样的</li><li>能节省服务器一部分资源 我的服务器确实太小了</li><li>而且像我这种小白白 安装错了 直接停止 删除镜像就可以了</li><li>安装在服务器上 恐怕要去谷歌 如何完全卸载xxx啦</li></ol><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>目前，CentOS 仅发行版本中的内核支持 Docker。 Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。 Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><p><strong>两种方式 二选一</strong></p><h2 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#查看你当前的内核版本</span><br>uname -r<br><br><span class="hljs-meta">#安装 Docker</span><br>yum -y install docker<br><br><span class="hljs-meta">#启动 Docker 后台服务</span><br>service docker start<br><br><span class="hljs-meta">#测试运行 hello-world,由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><h1 id="使用脚本安装-Docker"><a href="#使用脚本安装-Docker" class="headerlink" title="使用脚本安装 Docker"></a>使用脚本安装 Docker</h1><p>1、使用 sudo 或 root 权限登录 Centos。 2、确保 yum 包更新到最新。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#确保 yum 包更新到最新</span><br>sudo yum update<br><br><span class="hljs-meta">#执行 Docker 安装脚本,执行这个脚本会添加 docker.repo 源并安装 Docker。</span><br>curl -fsSL https:<span class="hljs-comment">//get.docker.com/ | sh</span><br><br><span class="hljs-meta">#启动 Docker 进程</span><br>sudo service docker start<br><br><span class="hljs-meta">#验证 docker 是否安装成功并在容器中执行一个测试的镜像</span><br>sudo docker run hello-world<br></code></pre></td></tr></table></figure><h2 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h2><p>docker version<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190828-091709@2x_1566955051972.png" alt="WX20190828-091709@2x"></p><p>到此安装成功 最后推荐一款 管理界面 个人使用是免费的 足够啦<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190828-092421@2x_1566955505633.png" alt="WX20190828-092421@2x"></p><p><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8docker">为什么要用Docker</a><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">前提条件</a><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85-docker">使用脚本安装 Docker</a><a href="https://bk.cuixiaoyan.xyz/archives/docker#%E6%9F%A5%E7%9C%8Bdocker%E7%89%88%E6%9C%AC">查看Docker版本</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的数学工具类Math</title>
    <link href="/blog/2021/01/24/java%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B7%A5%E5%85%B7%E7%B1%BBMath/"/>
    <url>/blog/2021/01/24/java%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B7%A5%E5%85%B7%E7%B1%BBMath/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>java.util.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作。</p><h2 id="基本的方法"><a href="#基本的方法" class="headerlink" title="基本的方法"></a>基本的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;获取绝对值。有多种重载，absolutely绝对地<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">ceil</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;向上取整，ceil是天花板的意思<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">floor</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;向下取整，floor是地板的意思<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">round</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;四舍六入五成双（看下面代码的注释），round有大约，完整的意思<br> <br></code></pre></td></tr></table></figure><h2 id="四种方法一起通过代码演示一遍"><a href="#四种方法一起通过代码演示一遍" class="headerlink" title="四种方法一起通过代码演示一遍"></a>四种方法一起通过代码演示一遍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//abs方法，取绝对值</span><br>        System.out.println(Math.abs(<span class="hljs-number">3.14</span>)); <span class="hljs-comment">//3.14</span><br>        System.out.println(Math.abs(<span class="hljs-number">0</span>));    <span class="hljs-comment">//0</span><br>        System.out.println(Math.abs(-<span class="hljs-number">2.2</span>)); <span class="hljs-comment">//2.2</span><br> <br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br> <br>        <span class="hljs-comment">//ceil方法，向上取整，往大的靠</span><br>        System.out.println(Math.ceil(<span class="hljs-number">3.2</span>));  <span class="hljs-comment">//4.0</span><br>        System.out.println(Math.ceil(<span class="hljs-number">3.8</span>));  <span class="hljs-comment">//4.0</span><br>        System.out.println(Math.ceil(-<span class="hljs-number">3.2</span>)); <span class="hljs-comment">//-3.0</span><br>        System.out.println(Math.ceil(-<span class="hljs-number">3.8</span>)); <span class="hljs-comment">//-3.0</span><br> <br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        <br>        <span class="hljs-comment">//floor方法，向下取整，往小的靠</span><br>        System.out.println(Math.floor(<span class="hljs-number">3.2</span>));  <span class="hljs-comment">//3.0</span><br>        System.out.println(Math.floor(<span class="hljs-number">3.8</span>));  <span class="hljs-comment">//3.0</span><br>        System.out.println(Math.floor(-<span class="hljs-number">3.2</span>)); <span class="hljs-comment">//-4.0</span><br>        System.out.println(Math.floor(-<span class="hljs-number">3.8</span>)); <span class="hljs-comment">//-4.0</span><br> <br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br> <br>        <span class="hljs-comment">//【注意，面试高频】round方法，四舍 六入 五成双</span><br>        <span class="hljs-comment">//先看看四舍六入，如果出现负数，先转成正数，再四舍六入，最后加上负号</span><br>        System.out.println(Math.round(<span class="hljs-number">3.4</span>));  <span class="hljs-comment">//3</span><br>        System.out.println(Math.round(<span class="hljs-number">3.6</span>));  <span class="hljs-comment">//4</span><br>        System.out.println(Math.round(-<span class="hljs-number">3.4</span>)); <span class="hljs-comment">//-3</span><br>        System.out.println(Math.round(-<span class="hljs-number">3.6</span>)); <span class="hljs-comment">//-4</span><br>        <span class="hljs-comment">//五成双是什么意思呢？当出现0.5结尾的时候，就给它再加上+0.5，5不就成双了</span><br>        <span class="hljs-comment">//接着再对相加的结果进行floor运算</span><br>        System.out.println(Math.round(-<span class="hljs-number">2.5</span>));  <span class="hljs-comment">//-2</span><br>        System.out.println(Math.floor(-<span class="hljs-number">2.5</span> + <span class="hljs-number">0.5</span>));  <span class="hljs-comment">//与Math.round(-2.5)结果一致</span><br> <br>System.out.println(Math.round(<span class="hljs-number">2.5</span>));  <span class="hljs-comment">//3</span><br>        System.out.println(Math.floor(<span class="hljs-number">2.5</span> + <span class="hljs-number">0.5</span>));  <span class="hljs-comment">//与Math.round(2.5)结果一致</span><br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h2 id="圆周率Math-PI"><a href="#圆周率Math-PI" class="headerlink" title="圆周率Math.PI"></a>圆周率Math.PI</h2><p>在Math类的源码中，我们可以看到，它自定义的圆周率 PI = 3.14159265358979323846</p><p>以后的计算如果需要用到PI，尽量用已经定义好的圆周率，非常精确</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql入门</title>
    <link href="/blog/2021/01/24/mysql%E5%85%A5%E9%97%A8/"/>
    <url>/blog/2021/01/24/mysql%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h1><p>是数据库对象，实现数据库的快速查询</p><p>使用索引的原因：实现数据库的快速查询，提高查询速度</p><h1 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <br><span class="hljs-number">1</span>，普通索引<br>最基本的索引，对字段数据的类型和值没有任何限制，数据类型可以任意，字段的值可以为空也可以重复。<br> <br><span class="hljs-number">2</span>，主键索引<br>给主键字段添加的索引、<br>主键特点：唯一且非空<br> <br><span class="hljs-number">3</span>，唯一索引<br>给唯一字段添加的索引<br>唯一索引和主键索引的区别：<br>唯一索引：只有唯一，可以有空值<br>主键索引：唯一且非空<br><br><span class="hljs-number">4</span>，全文索引<br>适用于给一大串文本添加的索引，只可以给字符串数据类型添加<br>字符串数据类型（<span class="hljs-type">char</span> <span class="hljs-type">varchar</span> text）<br><br><span class="hljs-number">5</span>，空间索引<br>字段的数据类型只能是空间数据类型，且改字段的值必须为 非空 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>空间数据类型 geometry point linestring polygon<br><br><span class="hljs-number">6</span>，复合索引<br>给多个字段添加的索引<br>注意：如果使用了复合索引，查询条件中只有使用了第一个字段，该索引才会被触发<br>例如（id name）只有查询条件中使用了id字段，索引才会被使用<br>如果查询条件只有name字段，则索引不会被触发<br> <br></code></pre></td></tr></table></figure><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，自动创建索引<br>在创建表的时候，给表添加了主键和唯一约束时，数据库给自动的给主键约束和唯一约束创建对应的主键索引和唯一索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">unique</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br>查询表中的索引语法为：<span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> 表名<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br><br><span class="hljs-number">2</span>，手动创建索引<br> <br>a，创建表时创建索引<br><br><br><span class="hljs-number">1</span>，创建普通索引、<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>index (sno)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br><br><span class="hljs-number">2</span>，唯一索引的创建<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br><span class="hljs-keyword">unique</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br><span class="hljs-keyword">unique</span> index (sno)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br><span class="hljs-number">3</span>，创建主键索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br><span class="hljs-keyword">primary</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br><span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> (sno)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br> <br><span class="hljs-number">4</span>，创建全文索引、只有：只能给字符串数据类型添加<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>fulltext index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>fulltext key (sinfo)<br>);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br> <br><span class="hljs-number">5</span>，创建复合索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名<span class="hljs-number">1</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">2</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">3</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><br><span class="hljs-comment">---创建表index_student,给sno 和 sname 添加复合索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>index (sno,sname)<br>);<br> <br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br><span class="hljs-number">6</span>，创建空间索引<br>注意：只能给空间数据类型添加，且该字段的值不能为空 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名<span class="hljs-number">1</span> 字段类型<span class="hljs-number">1</span>,<br>....,<br>spatial index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br>);<br><br><span class="hljs-comment">---创建表index_student,给sloc字段（是point字段类型）添加空间索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>sloc point <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>spatial index (sloc)<br>);<br><br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br><br>b，创建表后使用“<span class="hljs-keyword">create</span> index ”创建索引<br><span class="hljs-keyword">create</span> [ <span class="hljs-keyword">unique</span><span class="hljs-operator">|</span>fulltext<span class="hljs-operator">|</span>spatial ] index 索引名称 [索引的类型] <span class="hljs-keyword">on</span> 表名 (字段名<span class="hljs-number">1</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">2</span>[(长度)] [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>])<br> <br>需要注意的是：使用<span class="hljs-keyword">create</span> index这种创建索引的方式不能创建主键索引<br> <br>(<span class="hljs-number">1</span>)，创建普通索引<br><span class="hljs-comment">---创建表index_student,给表sno添加普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">create</span> index index_student_sno <span class="hljs-keyword">on</span> index_student (sno);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">2</span>)，创建唯一索引<br><span class="hljs-comment">---创建表index_student,给表sname添加唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index index_student_sname <span class="hljs-keyword">on</span> index_student (sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">3</span>)，创建全文索引 fulltext<br><span class="hljs-comment">---创建表index_student,给表sinfo添加全文索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><span class="hljs-keyword">create</span> fulltext index index_student_sinfo <span class="hljs-keyword">on</span> index_student (sinfo);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br><br> <br>(<span class="hljs-number">4</span>)，创建空间索引<br><span class="hljs-comment">---创建表index_student,给表sloc添加空间索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sloc point <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><span class="hljs-keyword">create</span> spatial index index_student_sloc <span class="hljs-keyword">on</span> index_student (sloc);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">5</span>)，创建复合索引<br><span class="hljs-comment">---创建表index_student,给表sno和sname添加复合索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">create</span> index index_student_sno_sname <span class="hljs-keyword">on</span> index_student (sno, sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>c，给已有表添加索引“<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>”<br><br>(<span class="hljs-number">1</span>)添加普通索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sno添加普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> index (sno)<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">2</span>)添加唯一索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sname添加唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> index (sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">3</span>)添加主键索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sno添加主键索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> (sno);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br><br><br>(<span class="hljs-number">4</span>)添加全文索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> fulltext [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sinfo添加全文索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sinfo <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> fulltext index(sinfo);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">5</span>)添加空间索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> spatial [index<span class="hljs-operator">|</span>key] [索引名] [索引类型] (字段名 [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sloc添加空间索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>),<br>sloc point <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> spatial index (sloc);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br>(<span class="hljs-number">6</span>)添加复合索引<br>语法为：<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> index<span class="hljs-operator">|</span>key [索引名] [索引类型] (字段名<span class="hljs-number">1</span> [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>], 字段名<span class="hljs-number">2</span> [长度] [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>])<br><span class="hljs-comment">---创建表index_student,给表sno和sname添加复合索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> index_student(<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">5</span>),<br>age <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">add</span> index (sno,sname);<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> index_student;<br> <br> <br></code></pre></td></tr></table></figure><h1 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 删除<br>语法为<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> index<span class="hljs-operator">|</span>key 索引名称<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> index_student <span class="hljs-keyword">drop</span> index sno;<br><br><span class="hljs-number">2</span>，使用<span class="hljs-keyword">drop</span> index 删除<br>语法为<span class="hljs-keyword">drop</span> index 索引名称 <span class="hljs-keyword">on</span> 表名<br><br>注意：使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 方式不能删除主键索引<br>  删除主键索引的方式为：<br>  a,<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span><br>  b,使用<span class="hljs-keyword">drop</span> index进行删除<br> <br></code></pre></td></tr></table></figure><h1 id="数据的插入"><a href="#数据的插入" class="headerlink" title="数据的插入"></a>数据的插入</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs sql">(<span class="hljs-number">1</span>)为所有字段插入数据<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 [(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....)] <span class="hljs-keyword">values</span><span class="hljs-operator">|</span><span class="hljs-keyword">value</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...)<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><span class="hljs-comment">---为表中所有字段插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sno,sname,age,sex,email) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot;张三&quot;, <span class="hljs-number">20</span>, &quot;男&quot;, &quot;zhangsan@163.com&quot;);<br><br><span class="hljs-comment">---另一种写法表后面不写字段名，则插入值的顺序要与表结构相同</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,&quot;李四&quot;, <span class="hljs-number">21</span>, &quot;女&quot;, &quot;lisi@163.com&quot;);<br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br> <br> <br>(<span class="hljs-number">2</span>)为指定字段插入数据<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....) <span class="hljs-keyword">values</span><span class="hljs-operator">|</span><span class="hljs-keyword">value</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...)<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><span class="hljs-comment">---给表中sname和age插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sname,age) <span class="hljs-keyword">values</span> (&quot;王五&quot;, <span class="hljs-number">18</span>);<br><br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br> <br>(<span class="hljs-number">3</span>)使用<span class="hljs-keyword">SET</span>方式插入数据<br>语法为：<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>字段值<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>字段值<span class="hljs-number">2</span>,....;<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><span class="hljs-comment">---使用set方式给表中所有字段插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">set</span> sno<span class="hljs-operator">=</span><span class="hljs-number">4</span>,sname<span class="hljs-operator">=</span>&quot;皮皮&quot;,age<span class="hljs-operator">=</span><span class="hljs-number">17</span>,sex<span class="hljs-operator">=</span>&quot;男&quot;,email<span class="hljs-operator">=</span>&quot;pipi@16.com&quot;;<br><br><span class="hljs-comment">---使用set方式给指定的字段插入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">set</span> sname<span class="hljs-operator">=</span>&quot;彬彬&quot;,age<span class="hljs-operator">=</span><span class="hljs-number">2</span>,email<span class="hljs-operator">=</span>&quot;binbin@163.com&quot;;<br><br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><br> <br>(<span class="hljs-number">4</span>)同时插入多条数据<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 [(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....)] <span class="hljs-keyword">values</span><span class="hljs-operator">|</span><span class="hljs-keyword">value</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3.</span>...),....;<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---给所有字段插入多条数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sno,sname,age,sex,email) <br><span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>,&quot;小红&quot;,<span class="hljs-number">15</span>,&quot;女&quot;,&quot;xiaohong@163.com&quot;),(<span class="hljs-number">7</span>,&quot;小二&quot;,<span class="hljs-number">17</span>,&quot;男&quot;,&quot;xiaoer@163.com&quot;);<br><br><span class="hljs-comment">---给指定字段插入多条数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (sname,age,email) <br><span class="hljs-keyword">values</span> (&quot;小花&quot;,<span class="hljs-number">14</span>,&quot;xiaohua@163.com&quot;),(&quot;小强&quot;,<span class="hljs-number">11</span>,&quot;xiaoqiang@163.com&quot;);<br><br><span class="hljs-comment">---查询表student中的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br> <br> <br>(<span class="hljs-number">5</span>)插入查询结果<br>语法为：<span class="hljs-keyword">insert</span> [<span class="hljs-keyword">into</span>] 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....) <span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3.</span>....<span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 条件;<br>注意：插入表的字段和查询的字段个数和类型要保持一致<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---创建t_student表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;女&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---将student表中的数据查询结果插入到t_student表中</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_student <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_student;<br> <br> <br></code></pre></td></tr></table></figure><h1 id="数据的更新"><a href="#数据的更新" class="headerlink" title="数据的更新"></a>数据的更新</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，更新指定数据<br>语法为：<span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>[,字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,....] <span class="hljs-keyword">where</span> 条件<br><br><span class="hljs-comment">---创建一张表student（sno主键 自动增长 sname 非空 age sex默认男 email唯一）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">8</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> &quot;男&quot;,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br><br><span class="hljs-comment">---更新指定数据</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> sname<span class="hljs-operator">=</span>&quot;张老大&quot; <span class="hljs-keyword">where</span> sname<span class="hljs-operator">=</span>&quot;张三&quot;;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><br> <br><span class="hljs-number">2</span>，更新全部数据<br>语法为：<span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>[,字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,....] <br> <br><span class="hljs-comment">---更新全部数据 将表中年龄都修改为18</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">18</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br> <br></code></pre></td></tr></table></figure><h1 id="数据的删除"><a href="#数据的删除" class="headerlink" title="数据的删除"></a>数据的删除</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，删除指定数据<br>语法为：<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br><br><span class="hljs-comment">---删除student表中sno大于2的学生信息</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sno<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>;<br> <br> <br><span class="hljs-number">2</span>，删除全部数据<br>语法为：<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br><br><span class="hljs-comment">---删除student表的全部数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br> <br> <br><span class="hljs-number">3</span>，<span class="hljs-keyword">truncate</span>关键字删除数据<br>语法为：<span class="hljs-keyword">truncate</span> 表名<br> <br><span class="hljs-number">4</span>，<span class="hljs-keyword">truncate</span>与<span class="hljs-keyword">delete</span>删除全部记录的区别：<br> <br>a，<span class="hljs-keyword">delete</span>是数据操纵语言DML 而<span class="hljs-keyword">truncate</span>是数据定义语言DDL<br><br>b，<span class="hljs-keyword">delete</span>删除数据是一条一条删除<br><span class="hljs-keyword">truncate</span>删除数据是保留表结构，直接删除数据，删除后表的状态相当于新表<br><span class="hljs-keyword">truncate</span>的效率比<span class="hljs-keyword">delete</span>高<br><br>c，<span class="hljs-keyword">delete</span>删除数据，会显示删除行数<br><span class="hljs-keyword">truncate</span>不会显示<br><br>d，删除记录后，再次向表添加数据，自增的值会在原来最大值<span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">truncate</span>删除记录后，会从<span class="hljs-number">1</span>开始自增<br><br>e，<span class="hljs-keyword">delete</span>操作可以回滚即删除的数据可以恢复<br><span class="hljs-keyword">truncate</span>操作隐士提交，删除的数据不能恢复<br> <br> <br></code></pre></td></tr></table></figure><h1 id="创建emp表"><a href="#创建emp表" class="headerlink" title="创建emp表"></a>创建emp表</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <br> <br>用户用不同的方式从数据库中获取自己所需要的数据<br>是数据库操作中非常重要且频繁的操作<br> <br><span class="hljs-comment">---创建新库test</span><br><span class="hljs-comment">---在test库中创建emp(雇员表)</span><br>emp(雇员编号empno<br>雇员名称ename<br>雇员职位job<br>雇员领导mgr<br>雇员入职日期hiredate<br>雇员月薪sal<br>雇员津贴comm<br>雇员部门编号deptno<br><br><span class="hljs-keyword">create</span> database test;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>empno <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>job <span class="hljs-type">varchar</span>(<span class="hljs-number">9</span>),<br>mgr <span class="hljs-type">int</span>(<span class="hljs-number">4</span>),<br>hiredate <span class="hljs-type">date</span>,<br>sal <span class="hljs-type">decimal</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>comm <span class="hljs-type">decimal</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>deptno <span class="hljs-type">int</span>(<span class="hljs-number">2</span>)<br>);<br> <br><span class="hljs-comment">---同时插入多条数据</span><br> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp <span class="hljs-keyword">values</span><br>(<span class="hljs-number">7369</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7902</span>, <span class="hljs-string">&#x27;1980-12-17&#x27;</span>, <span class="hljs-number">800</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7499</span>, <span class="hljs-string">&#x27;Allen&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-02-20&#x27;</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">300</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7521</span>, <span class="hljs-string">&#x27;Ward&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-02-22&#x27;</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;manager&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-04-02&#x27;</span>, <span class="hljs-number">2975</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7654</span>, <span class="hljs-string">&#x27;Maritn&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-09-28&#x27;</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;Blake&#x27;</span>, <span class="hljs-string">&#x27;manager&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-05-01&#x27;</span>, <span class="hljs-number">2850</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7782</span>, <span class="hljs-string">&#x27;Clark&#x27;</span>, <span class="hljs-string">&#x27;manager&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-06-09&#x27;</span>, <span class="hljs-number">2450</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>), (<span class="hljs-number">7788</span>, <span class="hljs-string">&#x27;Scott&#x27;</span>, <span class="hljs-string">&#x27;analyst&#x27;</span>, <span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;1987-04-19&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-string">&#x27;president&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;1981-11-17&#x27;</span>, <span class="hljs-number">5000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>), (<span class="hljs-number">7844</span>, <span class="hljs-string">&#x27;Turner&#x27;</span>, <span class="hljs-string">&#x27;salesman&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-09-08&#x27;</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7876</span>, <span class="hljs-string">&#x27;Adams&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7788</span>, <span class="hljs-string">&#x27;1987-05-23&#x27;</span>, <span class="hljs-number">1100</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7900</span>, <span class="hljs-string">&#x27;James&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-12-03&#x27;</span>, <span class="hljs-number">950</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">30</span>), (<span class="hljs-number">7902</span>, <span class="hljs-string">&#x27;Ford&#x27;</span>, <span class="hljs-string">&#x27;analyst&#x27;</span>, <span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;1981-12-03&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">7934</span>, <span class="hljs-string">&#x27;Miller&#x27;</span>, <span class="hljs-string">&#x27;clerk&#x27;</span>, <span class="hljs-number">7782</span>, <span class="hljs-string">&#x27;1982-01-23&#x27;</span>, <span class="hljs-number">1300</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>);<br> <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br> <br> <br> <br><span class="hljs-number">2</span>，以上表创建完成之后进行单表查询<br> <br>a，查询所有字段<br>语法<span class="hljs-number">1</span>为：<span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名<br>语法<span class="hljs-number">2</span>为：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名<br> <br>b，查询指定字段<br>语法为：<span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名<br><span class="hljs-comment">---查询雇员表中雇员姓名，职位，部门号，薪资</span><br><span class="hljs-keyword">select</span> ename,job,deptno,sal <span class="hljs-keyword">from</span> emp;<br> <br>c，去重<span class="hljs-keyword">distinct</span>的使用<br>语法为：<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名<br><span class="hljs-comment">---查询雇员在哪个部门号中</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> deptno <span class="hljs-keyword">from</span> emp;<br><span class="hljs-comment">---查询雇员部门号及职位</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> deptno,job <span class="hljs-keyword">from</span> emp;<br>注意：<span class="hljs-keyword">distinct</span>使用到多个字段上时，只有多个字段的值都相同时才去重<br> <br><br>d，查询时算术运算符的使用<br> <span class="hljs-operator">+</span>   <span class="hljs-operator">-</span>   <span class="hljs-operator">*</span>  <span class="hljs-operator">/</span>(div)   v<span class="hljs-operator">%</span>(mod)<br><span class="hljs-comment">---查询每个雇员的年薪</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br> <br>e，给字段起别名<br>语法为：<span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span> [<span class="hljs-keyword">as</span>] 别名,字段名<span class="hljs-number">2</span>,字段名<span class="hljs-number">3</span>,....<span class="hljs-keyword">from</span> 表名;<br><span class="hljs-comment">---查询每个雇员的年薪，别名为yearsal</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp;<br>注意：如果别名中有空格特殊符号，需要使用单引号括起来<br><span class="hljs-comment">---查询每个雇员的年薪，别名为yearsal&amp;年薪 或者别名为 yearsal 年薪</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;yearsal&amp;年薪&#x27;</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;yearsal 年薪&#x27;</span> <span class="hljs-keyword">from</span> emp;<br> <br></code></pre></td></tr></table></figure><h2 id="查询结果排序"><a href="#查询结果排序" class="headerlink" title="查询结果排序"></a>查询结果排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">默认升序 <span class="hljs-keyword">asc</span><br>降序 <span class="hljs-keyword">desc</span><br> <br><span class="hljs-number">1</span>，在单个字段中排序<br>语法为：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段  <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span><br><span class="hljs-comment">---查询雇员信息按雇员薪资升序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">asc</span>;<br><span class="hljs-comment">---由于默认的排序方式是升序，所以asc可以省略</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal;<br><br><span class="hljs-number">2</span>，在多个字段中使用排序<br>语法为：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名<span class="hljs-number">1</span>  <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>,字段名<span class="hljs-number">2</span>  <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span>desc....<br><span class="hljs-comment">---查询雇员信息，先按雇员薪资升序排，如薪资相同则按入职日期降序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal,hiredate <span class="hljs-keyword">desc</span>;<br>注意：排序可以起别名<br><span class="hljs-comment">---查询雇员的年薪给年薪起个别名yearsal,按年薪降序排序</span><br><span class="hljs-keyword">select</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">as</span> yearsal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> yearsal <span class="hljs-keyword">desc</span>;<br> <br></code></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs sql">是用户按照一定条件查询，查询满足条件的部分记录<br>语法格式：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 条件<br> <br>(<span class="hljs-number">1</span>)比较运算符的使用   <span class="hljs-operator">=</span>    <span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>      <span class="hljs-operator">&gt;=</span>      <span class="hljs-operator">&lt;=</span>      <span class="hljs-operator">!=</span>       <span class="hljs-operator">&lt;&gt;</span><br><span class="hljs-comment">---查询部门号为20的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br><span class="hljs-comment">---查询薪资大于等于3000的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">3000</span>;<br><span class="hljs-comment">---查询薪资小于3000的雇员名称，薪资，职位</span><br><span class="hljs-keyword">select</span> ename,sal,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal<span class="hljs-operator">&lt;</span><span class="hljs-number">3000</span>;<br><span class="hljs-comment">---查询名为Smith的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span>&quot;Smith&quot;;<br>注意：MySQL默认不区分大小写，如果要区分大小写则可以使用<span class="hljs-type">binary</span>关键字<br><span class="hljs-comment">---binary的使用</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-type">binary</span> ename<span class="hljs-operator">=</span>&quot;Smith&quot;;<br><br>(<span class="hljs-number">2</span>) [<span class="hljs-keyword">not</span>] <span class="hljs-keyword">between</span> <span class="hljs-keyword">and</span>的使用 <br>可以查询某区间范围的记录<br><span class="hljs-comment">---查询薪资在1200-3000之间的雇员信息</span><br><span class="hljs-comment">---between后面是开始值，and后面是结束值，不能颠倒。包括边界</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">between</span> <span class="hljs-number">1200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br><span class="hljs-comment">---查询薪资不在1200-3000范围之内的雇员姓名，薪资</span><br><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">not</span> <span class="hljs-keyword">between</span> <span class="hljs-number">1200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br> <br>(<span class="hljs-number">3</span>)[<span class="hljs-keyword">not</span>] <span class="hljs-keyword">in</span>的使用<br>语法格式为：<span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 字段名 <span class="hljs-keyword">in</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>,...)<br><span class="hljs-comment">---查询雇员姓名是smith,scott,king的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">in</span>(&quot;smith&quot;,&quot;scott&quot;,&quot;king&quot;);<br><span class="hljs-comment">---查询雇员姓名不是smith,scott,king的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(&quot;smith&quot;,&quot;scott&quot;,&quot;king&quot;);<br> <br>(<span class="hljs-number">4</span>)<span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> 或者 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>  判断某个字段是否为空<br><span class="hljs-comment">---查询雇员中，有津贴的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">---查询雇员中，没有津贴的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> comm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br> <br>(<span class="hljs-number">5</span>)模糊查询<br>可查询以XX开头，以XX结尾，包含XX，第几个是X<br><span class="hljs-operator">%</span>：指任意长度的字符<br>_：匹配一个字符<br>语法为：<span class="hljs-keyword">select</span> 查询内容<span class="hljs-keyword">from</span>表名<span class="hljs-keyword">where</span>字段名<span class="hljs-keyword">like</span><br><span class="hljs-comment">---查询雇员姓名以S开头的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;S%&quot;;<br><span class="hljs-comment">---查询雇员姓名以S结尾的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;%S&quot;;<br><span class="hljs-comment">---查询雇员姓名包含S的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;%S%&quot;;<br><span class="hljs-comment">---查询雇员姓名第二个字符是L的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;_L%&quot;;<br><span class="hljs-comment">---查询雇员姓名长度是5的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span>&quot;_____&quot;;<br> <br>(<span class="hljs-number">6</span>)条件中的逻辑运算符<br><span class="hljs-keyword">and</span>：查询时，只有满足所有条件的记录才会被查询出来<br><span class="hljs-keyword">select</span> 查询内容<span class="hljs-keyword">from</span>表名<span class="hljs-keyword">where</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> 条件<span class="hljs-number">2</span> and....<br><span class="hljs-comment">---查询雇员表中部门号为20 职位是clerk的雇员姓名 部门编号 职位</span><br><span class="hljs-keyword">select</span> ename,deptno,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> job<span class="hljs-operator">=</span>&quot;clerk&quot;;<br><span class="hljs-comment">---查询部门号为30，薪资在1500-3000之间的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">and</span> sal <span class="hljs-keyword">between</span> <span class="hljs-number">1500</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3000</span>;<br><br><span class="hljs-keyword">or</span>：查询时，只要满足任一条件记录就能被查询出来<br><span class="hljs-keyword">select</span> 查询内容<span class="hljs-keyword">from</span>表名<span class="hljs-keyword">where</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> 条件<span class="hljs-number">2</span> or....<br><span class="hljs-comment">---查询雇员表中部门号为20 或者职位是clerk的雇员姓名 部门编号 职位</span><br><span class="hljs-keyword">select</span> ename,deptno,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span>&quot;clerk&quot;;<br> <br> <br></code></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名 <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span> limit a,b <br>注意：<br>(a代表从哪条记录开始，b代表每页显示的条数) 且默认第一条数据的值为<span class="hljs-number">0</span><br>如果limit与<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 连用的时候，先排序再分页<br><span class="hljs-comment">---显示第一页雇员信息 例如每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">0</span>,<span class="hljs-number">4</span>;<br><span class="hljs-comment">---显示第二页雇员信息 每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">4</span>,<span class="hljs-number">4</span>;<br><span class="hljs-comment">---显示第三页雇员信息 每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">8</span>,<span class="hljs-number">4</span>;<br><span class="hljs-comment">---显示第n页雇员信息 每页显示4条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit (n<span class="hljs-number">-1</span>)<span class="hljs-operator">*</span><span class="hljs-number">4</span>,<span class="hljs-number">4</span>;<br> <br> <br></code></pre></td></tr></table></figure><h1 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h1><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs sql">a，字符函数 <br>(<span class="hljs-number">1</span>)concat() 拼接字符串<br><span class="hljs-comment">---查询雇员信息，以指定格式输出</span><br>雇员姓名：XX,薪资：XX,职位：XX,入职日期：XX,年薪：XX,<br><span class="hljs-keyword">select</span> concat(&quot;雇员姓名：&quot;,ename,&quot;，薪资：&quot;,sal,&quot;，职位：&quot;,job,&quot;，入职日期：&quot;,hiredate,&quot;，年薪：&quot;,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span>) <span class="hljs-keyword">from</span> emp;<br><br>(<span class="hljs-number">2</span>)length()计算字符串的长度<br><span class="hljs-comment">---查询雇员姓名长度是5的雇员信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> length(ename)<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><br>(<span class="hljs-number">3</span>)<span class="hljs-built_in">lower</span>()  <span class="hljs-built_in">upper</span>()转换大小写<br><span class="hljs-comment">---查询雇员姓名 大写的雇员姓名 小写的雇员姓名</span><br><span class="hljs-keyword">select</span> ename,<span class="hljs-built_in">lower</span>(ename),<span class="hljs-built_in">upper</span>(ename) <span class="hljs-keyword">from</span> emp;<br><br>(<span class="hljs-number">4</span>)replace()在指定的字符串中，将某子串替换为新的字符串<br>replace(目标字符串,查找的子串,新字符串)<br><span class="hljs-comment">---将helloWord字符串中的hello替换为hi</span><br><span class="hljs-keyword">select</span> replace(&quot;helloworld&quot;,&quot;hello&quot;,&quot;hi&quot;) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">---另一种写法为</span><br><span class="hljs-keyword">select</span> replace(&quot;helloworld&quot;,&quot;hello&quot;,&quot;hi&quot;);<br><br>(<span class="hljs-number">5</span>)<span class="hljs-built_in">substring</span>()截取子串<br><span class="hljs-built_in">substring</span>(目标字符串,开始位置,长度)  注意开始索引是从<span class="hljs-number">1</span>开始的。<br><span class="hljs-comment">---截取雇员姓名的前4个字符</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(ename,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">from</span> emp;<br> <br> <br>b，数值函数<br><span class="hljs-number">1</span>，<span class="hljs-built_in">abs</span>()  作用是：取绝对值<br><span class="hljs-keyword">select</span>(<span class="hljs-number">1</span>),(<span class="hljs-number">-1</span>);<br> <br><span class="hljs-number">2</span>，pi()  作用是：获取圆周率<br><span class="hljs-keyword">select</span> pi();<br> <br><span class="hljs-number">3</span>，<span class="hljs-built_in">mod</span>() 作用是：取余<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">mod</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-number">5</span>，pow() 作用是：求一个数的n次方<br><span class="hljs-keyword">select</span> pow(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br> <br><span class="hljs-number">6</span>，<span class="hljs-built_in">ceil</span>() 向上取整  <span class="hljs-built_in">floor</span>()向下取整<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">ceil</span>(<span class="hljs-number">5.43</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-number">5.7</span>);<br> <br><span class="hljs-number">7</span>，round(num) 代表返回四舍五入的整数<br>round(num,n)返回四舍五入n位小数<br><span class="hljs-keyword">select</span> round(<span class="hljs-number">5.4</span>),round(<span class="hljs-number">6.8</span>),round(<span class="hljs-number">5.34</span>,<span class="hljs-number">1</span>),round(<span class="hljs-number">6.789</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-number">8</span>，<span class="hljs-keyword">truncate</span>(num,n) n的值可以为<span class="hljs-number">0</span>,<span class="hljs-number">1</span>，<span class="hljs-number">2</span>,<span class="hljs-number">3</span>，<span class="hljs-number">4.</span>..其中n为<span class="hljs-number">0</span>时代表截取整数<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">truncate</span>(<span class="hljs-number">5.3</span>,<span class="hljs-number">0</span>),<span class="hljs-keyword">truncate</span>(<span class="hljs-number">5.67</span>,<span class="hljs-number">1</span>),<span class="hljs-keyword">truncate</span>(<span class="hljs-number">5.789</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-number">9</span>，rand() 获取浮点类型的随机数，范围是<span class="hljs-number">0</span><span class="hljs-number">-1.0</span>。包括<span class="hljs-number">0</span>但不包含<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> rand(),rand(),rand();<br> <br> <br>c，时间日期函数<br><span class="hljs-number">1</span>，now() 获取<span class="hljs-keyword">SQL</span>执行时当前日期和时间 包括年月日 时分秒<br><span class="hljs-keyword">select</span> now();<br> <br><span class="hljs-number">2</span>，curdate()获取当前日期 只包括年月日<br><span class="hljs-keyword">select</span> curdate()<br><br><span class="hljs-number">3</span>，curtime()获取当前时间 只包括时分秒<br><span class="hljs-keyword">select</span> curtime();<br><br><span class="hljs-number">4</span>，sysdate()获取函数执行时的日期和时间<br><span class="hljs-keyword">select</span> sysdate(),now(),sleep(<span class="hljs-number">3</span>),sysdate(),now();<br><br><span class="hljs-number">5</span>，dayofyear()获取某个日期是所在年份的第几天<br> week()获取某个日期是所在年份的第几周<br> <span class="hljs-keyword">select</span> dayofyear(now()),week(now());<br><br><span class="hljs-number">6</span>，datediff()计算两个日期之间的时间间隔<br><span class="hljs-comment">---计算2019.1.1日距离现在时间间隔</span><br><span class="hljs-keyword">select</span> datediff(&quot;2019-12-30&quot;,now());<br> <br><span class="hljs-number">7</span>，date_add(),date_sub() 实现日期的加减运算<br>date_add(日期, 时间间隔类型关键字<span class="hljs-type">interval</span>, 时间间隔类型对应的表达式, 时间间隔类型)<br> day_hour  <span class="hljs-number">1</span>_12 代表<span class="hljs-number">1</span>天<span class="hljs-number">12</span>个小时<br> year_month <span class="hljs-number">2</span>_1 代表<span class="hljs-number">2</span>年<span class="hljs-number">1</span>个月<br> <br> <span class="hljs-keyword">select</span> date_add(now(), <span class="hljs-type">interval</span> &quot;2_1&quot; year_month)<br> <span class="hljs-keyword">select</span> date_sub(now(), <span class="hljs-type">interval</span> <span class="hljs-number">10</span> <span class="hljs-keyword">day</span>);<br> <br>e，流程控制函数<br><span class="hljs-number">1</span>，if(条件,t,f) 如果条件成立返回t，否则返回f<br><span class="hljs-keyword">select</span> if(<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>,&quot;1大于2&quot;,&quot;1小于2&quot;);<br><span class="hljs-comment">---查询雇员的薪资，如果薪资&gt;=3000，输入“高薪”，否则“低薪”</span><br><span class="hljs-keyword">select</span> sal,if(sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">3000</span>,&quot;高薪&quot;,&quot;低薪&quot;) &quot;薪资水平&quot; <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-number">2</span>，ifnull(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>) 如果值<span class="hljs-number">1</span>不为空则返回值<span class="hljs-number">1</span>，否则返回值<span class="hljs-number">2</span><br><span class="hljs-comment">---查询雇员的年薪</span><br><span class="hljs-keyword">select</span> sal,comm,(sal<span class="hljs-operator">+</span>comm)<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp; 此语句达不到想要的效果<br><span class="hljs-keyword">select</span> (sal<span class="hljs-operator">+</span>ifnull(comm,<span class="hljs-number">0</span>))<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> sal,comm,(sal<span class="hljs-operator">+</span>ifnull(comm,<span class="hljs-number">0</span>))<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">3</span>，<span class="hljs-built_in">nullif</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>) 如果值<span class="hljs-number">1</span>等于值<span class="hljs-number">2</span>返回<span class="hljs-keyword">null</span>，否则返回值<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">nullif</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<span class="hljs-built_in">nullif</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-number">4</span>，   <span class="hljs-keyword">case</span> 值<br><span class="hljs-keyword">when</span> 值<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">1</span><br><span class="hljs-keyword">when</span> 值<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">else</span> 其他结果<br><span class="hljs-keyword">end</span><br> <span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> &quot;这是结果1&quot; <span class="hljs-keyword">when</span> <span class="hljs-number">2</span> <span class="hljs-keyword">then</span> &quot;这是结果2&quot; <span class="hljs-keyword">else</span> &quot;这是其他结果&quot; <span class="hljs-keyword">end</span>;<br> <br><span class="hljs-number">5</span>，   <span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> 条件 <span class="hljs-keyword">then</span> 结果<span class="hljs-number">1</span><br><span class="hljs-keyword">when</span> 条件 <span class="hljs-keyword">then</span> 结果<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">else</span> 其他结果<br><span class="hljs-keyword">end</span><br>示例为：<span class="hljs-comment">---查询雇员薪资，如果薪资&gt;=3000返回“高薪”，否则“低薪”</span><br><span class="hljs-keyword">select</span> sal,<span class="hljs-keyword">case</span><br><span class="hljs-keyword">when</span> sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">3000</span> <span class="hljs-keyword">then</span> &quot;高薪&quot;<br><span class="hljs-keyword">else</span> &quot;低薪&quot;<br><span class="hljs-keyword">end</span> &quot;薪资水平&quot;<br><span class="hljs-keyword">from</span> emp;<br> <br></code></pre></td></tr></table></figure><h2 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h2><p>定义：操作一组数据(多行记录)返回一个结果，也叫分组函数 大多用于统计 例如：统计各部门中雇员的人数。统计各部门中最高和最低薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>，<span class="hljs-built_in">count</span>()统计表中记录的数目<br><span class="hljs-comment">---查询emp表中有多少条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp;<br> <br>另一条语法是<span class="hljs-built_in">count</span>(exp)统计exp值非空的记录数目<br><span class="hljs-comment">---查询雇员表中，有多少位雇员有津贴</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(comm) <span class="hljs-keyword">from</span> emp;<br> <br>另一条语法是<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(exp)) 返回表达式exp的值不重复且非空的总记录数目<br><span class="hljs-comment">---统计雇员表中有多少位雇员是领导</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(mgr)) <span class="hljs-keyword">from</span> emp;<span class="hljs-comment">--统计的是除董事长外的领导人数</span><br><span class="hljs-comment">---统计雇员表中包含董事长的领导数 需要用到ifnull函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(ifnull(mgr,<span class="hljs-number">1</span>))) <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-number">2</span>，<span class="hljs-built_in">sum</span>(exp) 返回表达式值的总和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal) <span class="hljs-keyword">from</span> emp;<br><br>另一条语法是<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">distinct</span>(exp))返回不重复的表达式exp的总和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal),<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">distinct</span>(sal)) <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-number">3</span>，<span class="hljs-built_in">avg</span>(exp)返回表达式值的平均值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp;<br> <br>另一条语法是<span class="hljs-built_in">avg</span>(<span class="hljs-keyword">distinct</span>(exp))返回不重复的表达式exp的平均值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(<span class="hljs-keyword">distinct</span>(sal)) <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-number">4</span>，<span class="hljs-built_in">max</span>()  <span class="hljs-built_in">min</span>() <br><span class="hljs-built_in">max</span>(emp)返回表达式值的最大值<br><span class="hljs-built_in">min</span>(emp)返回表达式值的最小值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(sal),<span class="hljs-built_in">max</span>(sal) <span class="hljs-keyword">from</span> emp;<br> <br></code></pre></td></tr></table></figure><h2 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法为：<br><span class="hljs-keyword">select</span> 查询内容<br><span class="hljs-keyword">from</span> 表名<br>[<span class="hljs-keyword">where</span> 条件]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名<span class="hljs-number">1</span>,分组字段名<span class="hljs-number">2</span>,...]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名 <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>]<br>[limit]<br> <br>示例如下：<br> <span class="hljs-comment">---求每个部门的人数</span><br> <span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br> <span class="hljs-comment">---求每个部门的平均工资</span><br> <span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br> <span class="hljs-comment">---求每个部门中最高工资和人数</span><br> <span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">max</span>(sal),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br> <span class="hljs-comment">---求每个岗位的人数</span><br> <span class="hljs-keyword">select</span> job,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job;<br> <span class="hljs-comment">---显示每个部门不同岗位的人数</span><br> <span class="hljs-keyword">select</span> deptno,job,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br> <br>注意事项<span class="hljs-number">1</span>：如果查询字段，没有在多行函数中，则必须是分组字段<br><span class="hljs-keyword">select</span> ename,job,<span class="hljs-built_in">sum</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job; 此语句运行后会报错<br> <br>注意事项<span class="hljs-number">2</span>：如果没有<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 则查询字段不能与多行函数一起查询<br><span class="hljs-keyword">select</span> sal,empto <span class="hljs-keyword">from</span> emp; 合法<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal),empto <span class="hljs-keyword">from</span> emp;不合法<br> <br>注意事项<span class="hljs-number">3</span>：不允许在<span class="hljs-keyword">where</span>条件中使用多行函数<br> <br></code></pre></td></tr></table></figure><h2 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法为：<br><span class="hljs-keyword">select</span> 查询内容<br><span class="hljs-keyword">from</span> 表名<br>[<span class="hljs-keyword">where</span> 条件]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段]<br>[<span class="hljs-keyword">having</span> 条件]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>]<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">from</span> <span class="hljs-comment">---where过滤---group by---having过滤</span><br>示例如下：<br><span class="hljs-comment">---每个部门不同岗位的人数，且人数大于2</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),deptno,job <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>;<br><span class="hljs-comment">---在emp表中列出工资最小值小于2000的职位</span><br><span class="hljs-keyword">select</span> job,<span class="hljs-built_in">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job <span class="hljs-keyword">having</span> <span class="hljs-built_in">min</span>(sal)<span class="hljs-operator">&lt;</span><span class="hljs-number">2000</span>;<br><span class="hljs-comment">---查询每个职位的最低薪资</span><br><span class="hljs-keyword">select</span> job,<span class="hljs-built_in">min</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job;<br><span class="hljs-comment">---列出平均工资大于1200的部门和职位搭配组合</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(avg) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job <span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(sal)<span class="hljs-operator">&gt;</span><span class="hljs-number">1200</span>;<br><span class="hljs-comment">---求每个部门不同职位的平均工资</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql子查询</title>
    <link href="/blog/2021/01/24/mysql%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/blog/2021/01/24/mysql%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1g8kqx5e1oouz">https://cloud.tencent.com/developer/support-plan?invite_code=1g8kqx5e1oouz</a></p><h1 id="子查询定义"><a href="#子查询定义" class="headerlink" title="子查询定义"></a>子查询定义</h1><p>在一个表表达中可以调用另一个表表达式，这个被调用的表表达式叫做子查询（subquery），我么也称作子选择（subselect）或内嵌选择（inner select）。子查询的结果传递给调用它的表表达式继续处理。</p><h1 id="子查询分类"><a href="#子查询分类" class="headerlink" title="子查询分类"></a>子查询分类</h1><h2 id="按返回结果集分类"><a href="#按返回结果集分类" class="headerlink" title="按返回结果集分类"></a>按返回结果集分类</h2><p>子查询按返回结果集的不同分为4种：表子查询，行子查询，列子查询和标量子查询。 表子查询：返回的结果集是一个行的集合，N行N列（N&gt;=1）。表子查询经常用于父查询的FROM子句中。 行子查询：返回的结果集是一个列的集合，一行N列（N&gt;=1）。行子查询可以用于福查询的FROM子句和WHERE子句中。 列子查询：返回的结果集是一个行的集合，N行一列（N&gt;=1）。 标量子查询：返回的结果集是一个标量集合，一行一列，也就是一个标量值。可以指定一个标量表达式的任何地方，都可以用一个标量子查询。</p><p>从定义上讲，每个标量子查询也是一个行子查询和一个列子查询，反之则不是；每个行子查询和列子查询也是一个表子查询，反之也不是。</p><h2 id="按照对返回结果的调用方法"><a href="#按照对返回结果的调用方法" class="headerlink" title="按照对返回结果的调用方法"></a>按照对返回结果的调用方法</h2><p>子查询按对返回结果集的调用方法，可分为where型子查询，from型子查询及exists型子查询。</p><p>where型子查询：（把内层查询结果当作外层查询的比较条件）定义：where型的子查询就是把内层查询的结果当作外层查询的条件。 from型子查询：（把内层的查询结果供外层再次查询）定义：from子查询就是把子查询的结果(内存里的一张表)当作一张临时表，然后再对它进行处理。 exists型子查询：（把外层查询结果拿到内层，看内层的查询是否成立）定义：exists子查询就是对外层表进行循环，再对内表进行内层查询。和in ()差不多，但是它们还是有区别的。主要是看两个张表大小差的程度。若子查询表大则用exists（内层索引），子查询表小则用in（外层索引）；</p><h1 id="使用子查询原则"><a href="#使用子查询原则" class="headerlink" title="使用子查询原则"></a>使用子查询原则</h1><p>1.一个子查询必须放在圆括号中。 2.将子查询放在比较条件的右边以增加可读性。子查询不包含 ORDER BY 子句。对一个 SELECT 语句只能用一个 ORDER BY 子句，并且如果指定了它就必须放在主 SELECT 语句的最后。 3.在子查询中可以使用两种比较条件：单行运算符(&gt;, =, &gt;=, &lt;, &lt;&gt;, &lt;=) 和多行运算符(IN, ANY, ALL)。</p><h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><h2 id="创建测试表"><a href="#创建测试表" class="headerlink" title="创建测试表"></a>创建测试表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> PLAYERS<br>    (PLAYERNO      <span class="hljs-type">INTEGER</span>      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    NAME           <span class="hljs-type">CHAR</span>(<span class="hljs-number">15</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    INITIALS       <span class="hljs-type">CHAR</span>(<span class="hljs-number">3</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    BIRTH_DATE     <span class="hljs-type">DATE</span>                 ,<br>    SEX            <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    JOINED         <span class="hljs-type">SMALLINT</span>     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    STREET         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    HOUSENO        <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>)              ,<br>    POSTCODE       <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)              ,<br>    TOWN           <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    PHONENO        <span class="hljs-type">CHAR</span>(<span class="hljs-number">13</span>)             ,<br>    LEAGUENO       <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>)              ,<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>    (PLAYERNO));<br> <br><span class="hljs-keyword">CREATE</span>   <span class="hljs-keyword">TABLE</span> PENALTIES<br>        (PAYMENTNO      <span class="hljs-type">INTEGER</span>      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         PLAYERNO       <span class="hljs-type">INTEGER</span>      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         PAYMENT_DATE   <span class="hljs-type">DATE</span>         <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         AMOUNT         <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>         <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>    (PAYMENTNO));<br></code></pre></td></tr></table></figure><p>注：表players为球员信息基本表，表penalties为有过罚款记录的球员信息列表。</p><h2 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Everett&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;1948-09-01&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1975</span>, <span class="hljs-string">&#x27;Stoney Road&#x27;</span>,<span class="hljs-string">&#x27;43&#x27;</span>, <span class="hljs-string">&#x27;3575NH&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-237893&#x27;</span>, <span class="hljs-string">&#x27;2411&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;Parmenter&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;1964-06-25&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1977</span>, <span class="hljs-string">&#x27;Haseltine Lane&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;1234KK&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-476537&#x27;</span>, <span class="hljs-string">&#x27;8467&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Wise&#x27;</span>, <span class="hljs-string">&#x27;GWS&#x27;</span>, <span class="hljs-string">&#x27;1963-05-11&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1981</span>, <span class="hljs-string">&#x27;Edgecombe Way&#x27;</span>,<span class="hljs-string">&#x27;39&#x27;</span>, <span class="hljs-string">&#x27;9758VB&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-347689&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;Newcastle&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;1962-07-08&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1980</span>, <span class="hljs-string">&#x27;Station Road&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;6584WO&#x27;</span>, <span class="hljs-string">&#x27;Inglewood&#x27;</span>, <span class="hljs-string">&#x27;070-458458&#x27;</span>, <span class="hljs-string">&#x27;2983&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">27</span>, <span class="hljs-string">&#x27;Collins&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>, <span class="hljs-string">&#x27;1964-12-28&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1983</span>, <span class="hljs-string">&#x27;Long Drive&#x27;</span>,<span class="hljs-string">&#x27;804&#x27;</span>, <span class="hljs-string">&#x27;8457DK&#x27;</span>, <span class="hljs-string">&#x27;Eltham&#x27;</span>, <span class="hljs-string">&#x27;079-234857&#x27;</span>, <span class="hljs-string">&#x27;2513&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Collins&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;1963-06-22&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1983</span>, <span class="hljs-string">&#x27;Old Main Road&#x27;</span>,<span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;1294QK&#x27;</span>, <span class="hljs-string">&#x27;Midhurst&#x27;</span>, <span class="hljs-string">&#x27;010-659599&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">39</span>, <span class="hljs-string">&#x27;Bishop&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;1956-10-29&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1980</span>, <span class="hljs-string">&#x27;Eaton Square&#x27;</span>,<span class="hljs-string">&#x27;78&#x27;</span>, <span class="hljs-string">&#x27;9629CD&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-393435&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">44</span>, <span class="hljs-string">&#x27;Baker&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;1963-01-09&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1980</span>, <span class="hljs-string">&#x27;Lewis Street&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>, <span class="hljs-string">&#x27;4444LJ&#x27;</span>, <span class="hljs-string">&#x27;Inglewood&#x27;</span>, <span class="hljs-string">&#x27;070-368753&#x27;</span>, <span class="hljs-string">&#x27;1124&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">57</span>, <span class="hljs-string">&#x27;Brown&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;1971-08-17&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1985</span>, <span class="hljs-string">&#x27;Edgecombe Way&#x27;</span>,<span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;4377CB&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-473458&#x27;</span>, <span class="hljs-string">&#x27;6409&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">83</span>, <span class="hljs-string">&#x27;Hope&#x27;</span>, <span class="hljs-string">&#x27;PK&#x27;</span>, <span class="hljs-string">&#x27;1956-11-11&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1982</span>, <span class="hljs-string">&#x27;Magdalene Road&#x27;</span>,<span class="hljs-string">&#x27;16A&#x27;</span>, <span class="hljs-string">&#x27;1812UP&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-353548&#x27;</span>, <span class="hljs-string">&#x27;1608&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Miller&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;1963-05-14&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1972</span>, <span class="hljs-string">&#x27;High Street&#x27;</span>,<span class="hljs-string">&#x27;33A&#x27;</span>, <span class="hljs-string">&#x27;5746OP&#x27;</span>, <span class="hljs-string">&#x27;Douglas&#x27;</span>, <span class="hljs-string">&#x27;070-867564&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;Parmenter&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;1963-02-28&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1979</span>, <span class="hljs-string">&#x27;Haseltine Lane&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;6494SG&#x27;</span>, <span class="hljs-string">&#x27;Stratford&#x27;</span>, <span class="hljs-string">&#x27;070-494593&#x27;</span>, <span class="hljs-string">&#x27;6524&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">104</span>, <span class="hljs-string">&#x27;Moorman&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;1970-05-10&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1984</span>, <span class="hljs-string">&#x27;Stout Street&#x27;</span>,<span class="hljs-string">&#x27;65&#x27;</span>, <span class="hljs-string">&#x27;9437AO&#x27;</span>, <span class="hljs-string">&#x27;Eltham&#x27;</span>, <span class="hljs-string">&#x27;079-987571&#x27;</span>, <span class="hljs-string">&#x27;7060&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PLAYERS <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">112</span>, <span class="hljs-string">&#x27;Bailey&#x27;</span>, <span class="hljs-string">&#x27;IP&#x27;</span>, <span class="hljs-string">&#x27;1963-10-01&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">1984</span>, <span class="hljs-string">&#x27;Vixen Road&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;6392LK&#x27;</span>, <span class="hljs-string">&#x27;Plymouth&#x27;</span>, <span class="hljs-string">&#x27;010-548745&#x27;</span>, <span class="hljs-string">&#x27;1319&#x27;</span>);<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,  <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;1980-12-08&#x27;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;1981-05-05&#x27;</span>, <span class="hljs-number">75</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;1983-09-10&#x27;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>,<span class="hljs-number">104</span>, <span class="hljs-string">&#x27;1984-12-08&#x27;</span>, <span class="hljs-number">50</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;1980-12-08&#x27;</span>, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>,  <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;1980-12-08&#x27;</span>, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;1982-12-30&#x27;</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> PENALTIES <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;1984-11-12&#x27;</span>, <span class="hljs-number">75</span>);<br></code></pre></td></tr></table></figure><h2 id="表子查询实例"><a href="#表子查询实例" class="headerlink" title="表子查询实例"></a>表子查询实例</h2><p>如：获取编号小于10的男性球员的号码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <span class="hljs-keyword">from</span> (<br>    <span class="hljs-keyword">select</span> playerno, sex <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span>) <br><span class="hljs-keyword">as</span> players10 <span class="hljs-keyword">where</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="行子查询实例"><a href="#行子查询实例" class="headerlink" title="行子查询实例"></a>行子查询实例</h2><p>如：获取和100号球员性别相同并且居住在同一城市的球员号码。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> (sex, town) <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">select</span> sex, town <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>说明：子查询的结果是带有两个值的一行：（’M’,’stratford’）。这个值和一个行表达式（sex,town）进行比较。</p><h2 id="标量子查询实例"><a href="#标量子查询实例" class="headerlink" title="标量子查询实例"></a>标量子查询实例</h2><p>可以指定一个标量表达式的任何地方，几乎都可以使用一个标量子查询。 如：获取和27号球员出生在同一年的球员的号码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(birth_date) <span class="hljs-operator">=</span> <br>    (<span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(birth_date) <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> <span class="hljs-number">27</span>) <br><span class="hljs-keyword">and</span> playerno <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">27</span>;<br></code></pre></td></tr></table></figure><p>上面语句等同于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno <span class="hljs-keyword">from</span> players <span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(birth_date) <span class="hljs-operator">=</span> <span class="hljs-number">1964</span> <span class="hljs-keyword">and</span> playerno <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">27</span>;<br></code></pre></td></tr></table></figure><h2 id="列子查询实例"><a href="#列子查询实例" class="headerlink" title="列子查询实例"></a>列子查询实例</h2><p> 由于列子查询返回的结果集是 N 行一列，因此不能直接使用 =  &gt;  &lt;  &gt;=  &lt;=  &lt;&gt; 这些比较标量结果的操作符。在列子查询中可以使用 IN、ANY（SOME）和ALL操作符：   IN：在指定项内，同 IN(项1,项2,…)。   ANY：与比较操作符联合使用，ANY关键字必须接在一个比较操作符的后面，表示与子查询返回的任何值比较为 TRUE ，则返回 TRUE 。   SOME：ANY 的别名，较少使用。   ALL：与比较操作符联合使用，ALL关键字必须接在一个比较操作符的后面，表示与子查询返回的所有值比较都为 TRUE ，则返回 TRUE 。</p><p>  实例1（in）：获取球员性别为女的所有球员的球员号，名字及所在城市。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno, name, town <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> playerno <span class="hljs-keyword">in</span> <br>    (<span class="hljs-keyword">select</span> playerno <br>    <span class="hljs-keyword">from</span> players <br>    <span class="hljs-keyword">where</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;F&#x27;</span>);<br></code></pre></td></tr></table></figure><p>实例2（any）：获取至少比同城的另一球员年轻的所有球员的号码，日期和居住城市。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno, birth_date, town <br><span class="hljs-keyword">from</span> players <span class="hljs-keyword">as</span> p1 <br><span class="hljs-keyword">where</span> birth_date <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span> <br>    (<span class="hljs-keyword">select</span> birth_date <br>    <span class="hljs-keyword">from</span> players <span class="hljs-keyword">as</span> p2 <br>    <span class="hljs-keyword">where</span> p1.town <span class="hljs-operator">=</span> p2.town);<br></code></pre></td></tr></table></figure><p>实例3（all）：获取最老球员的号码，名字及生日。（即出生日期数值小于或等于所有其它球员的球员）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> playerno, name, birth_date <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> birth_date <span class="hljs-operator">&lt;=</span> <span class="hljs-keyword">all</span> <br>    (<span class="hljs-keyword">select</span> birth_date <br>    <span class="hljs-keyword">from</span> players);<br></code></pre></td></tr></table></figure><p>XISTS关键字表示存在。使用EXISTS关键字时，内层查询语句不返回查询的记录，而是返回一个真假值，如果内层查询语句查询到满足条件的记录，只要子查询中至少返回一个值，则EXISTS语句的值就为True。就返回true，否则返回false。当返回的值为true时，外层查询语句将进行查询，否则不进行查询。NOT EXISTS刚好与之相反。exists的用法和in ()差不多，但是它们还是有区别的。主要是看两个张表大小差的程度。若子查询表大则用exists（内层索引），子查询表小则用in（外层索引）;</p><p>  实例1（exists）：获取那些至少支付了一次罚款的球员的名字和首字母。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> name, initials <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> <br>    (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> penalties <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> players.playerno);<br></code></pre></td></tr></table></figure><p>实例2（not exists）：获取那些从来没有罚款的球员的名字和首字母。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> name, initials <br><span class="hljs-keyword">from</span> players <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <br>    (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> penalties <br>    <span class="hljs-keyword">where</span> playerno <span class="hljs-operator">=</span> players.playerno);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java语言描述数据结构与算法</title>
    <link href="/blog/2021/01/20/java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/blog/2021/01/20/java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>冒泡排序 插入排序 选择排序 希尔排序 快速排序 归并排序 二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">package</span> com.demo.test;<br> <br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//随机输入n个数,存放在数组a中</span><br>    Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">int</span> n=scanner.nextInt();<br>    <span class="hljs-keyword">int</span> a[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    <span class="hljs-comment">//这是第一种输入方法</span><br>    <span class="hljs-comment">/*for (int i=0;i&lt;n;i++) &#123;</span><br><span class="hljs-comment">    a[i]=scanner.nextInt();</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//这是第二种输入方法</span><br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(k&lt;n) &#123;<br>    a[k]=scanner.nextInt();<br>    k++;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span>[] b=choicSort(a);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;b.length;j++) &#123;<br>    System.out.print(b[j]+<span class="hljs-string">&quot;  &quot;</span>);<br>    &#125;<br>    &#125;<br>    <br><br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;array.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;array.length-i;j++) &#123;<br><span class="hljs-keyword">if</span> (array[j]&gt;array[j+<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-keyword">int</span> temp=array[j];<br>array[j]=array[j+<span class="hljs-number">1</span>];<br>array[j+<span class="hljs-number">1</span>]=temp;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//插入排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] insertSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;array.length;i++) &#123;<br><span class="hljs-keyword">int</span> j=i;<br><span class="hljs-keyword">int</span> temp=array[i];<br><span class="hljs-keyword">while</span> (j&gt;<span class="hljs-number">0</span>&amp;&amp;array[j-<span class="hljs-number">1</span>]&gt;temp) &#123;<br>array[j]=array[j-<span class="hljs-number">1</span>];<br>j--;<br>&#125;<br>array[j]=temp;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//选择排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] choicSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length-<span class="hljs-number">1</span>;i++) &#123;<br><span class="hljs-keyword">int</span> min=i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;array.length;j++) &#123;<br><span class="hljs-keyword">if</span> (array[j]&lt;array[min]) &#123;<br>min=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (min!=i) &#123;<br><span class="hljs-keyword">int</span> temp=array[i];<br>array[i]=array[min];<br>array[min]=temp;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//希尔排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] shellSort(<span class="hljs-keyword">int</span>[] array) &#123;<br><span class="hljs-keyword">int</span> step=(array.length-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (step&gt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=step;i&lt;array.length;i++) &#123;<br><span class="hljs-keyword">int</span> j=i;<br><span class="hljs-keyword">int</span> temp=array[i];<br><span class="hljs-keyword">while</span>(j&gt;(step-<span class="hljs-number">1</span>)&amp;&amp;array[j-step]&gt;=temp) &#123;<br>array[j]=array[j-step];<br>j=j-step;<br>&#125;<br>array[j]=temp;<br>&#125;<br>step=step/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>reQuickSort(array,<span class="hljs-number">0</span>,array.length-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reQuickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (left&gt;=right) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> partition=partitionIt(array,left,right);<br>reQuickSort(array,left,partition-<span class="hljs-number">1</span>);<br>reQuickSort(array,partition+<span class="hljs-number">1</span>,right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partitionIt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i=left;<br><span class="hljs-keyword">int</span> j=right+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> povit=array[left];<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">while</span> (i&lt;right&amp;&amp;array[++i]&lt;povit) &#123;&#125;<br><span class="hljs-keyword">while</span> (j&gt;<span class="hljs-number">0</span>&amp;&amp;array[--j]&gt;povit) &#123;&#125;<br><span class="hljs-keyword">if</span> (i&lt;j) &#123;<br>swap(array,i,j);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>swap(array,left,j);<br><span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br><span class="hljs-keyword">int</span> temp=array[i];<br>array[i]=array[j];<br>array[j]=temp;<br>&#125;<br> <br> <br><span class="hljs-comment">//归并排序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] a,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)&#123;<br>        <span class="hljs-keyword">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>            sort(a,low,mid);<br>            sort(a,mid+<span class="hljs-number">1</span>,high);<br>            <span class="hljs-comment">//左右归并</span><br>            merge(a,low,mid,high);<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>     <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[high-low+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> i= low;<br>        <span class="hljs-keyword">int</span> j = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 把较小的数先移到新数组中</span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;a[j])&#123;<br>                temp[k++] = a[i++];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                temp[k++] = a[j++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 把左边剩余的数移入数组 </span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid)&#123;<br>            temp[k++] = a[i++];<br>        &#125;<br>        <span class="hljs-comment">// 把右边边剩余的数移入数组</span><br>        <span class="hljs-keyword">while</span>(j&lt;=high)&#123;<br>            temp[k++] = a[j++];<br>        &#125;<br>        <span class="hljs-comment">// 把新数组中的数覆盖nums数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;x&lt;temp.length;x++)&#123;<br>            a[x+low] = temp[x];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySerach</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i=left;<br><span class="hljs-keyword">int</span> j=right;<br><span class="hljs-keyword">int</span> mid=(i+j)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (i&gt;j) &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (array[mid]&gt;value) &#123;<br><span class="hljs-keyword">return</span> binarySerach(array,<span class="hljs-number">0</span>,mid-<span class="hljs-number">1</span>,value);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(array[mid]&lt;value)&#123;<br><span class="hljs-keyword">return</span> binarySerach(array,mid+<span class="hljs-number">1</span>,right,value);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br><br>&#125;<br><br>&#125;<br> <br> <br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql行列转换</title>
    <link href="/blog/2021/01/20/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/"/>
    <url>/blog/2021/01/20/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>需求是将以下两种表样式互相转换：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190821-153724@2x_1566373118554.png" alt="WX20190821-153724@2x"></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190821-153732@2x_1566373118567.png" alt="WX20190821-153732@2x">score_1转score_2，如下： 这里也可以用来统计数据</p><p>如果等于1 就加一 不然就不加 SUM(IF(C.question_type = ‘1’, 1, 0)) AS ‘论述’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ID<br>    ,<span class="hljs-built_in">max</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数学&#x27;</span> <span class="hljs-keyword">then</span> score <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数学&#x27;</span><br>    ,<span class="hljs-built_in">max</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span> <span class="hljs-keyword">then</span> score <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;英语&#x27;</span><br>    ,<span class="hljs-built_in">max</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;法律&#x27;</span> <span class="hljs-keyword">then</span> score <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;法律&#x27;</span><br><span class="hljs-keyword">from</span> score_1<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id;<br></code></pre></td></tr></table></figure><p>score_2转score_1：两种引号不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <br>    ,<span class="hljs-string">&#x27;数学&#x27;</span> <span class="hljs-keyword">as</span> course<br>    ,`数学` <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> score_2<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br><span class="hljs-keyword">select</span> id <br>    ,<span class="hljs-string">&#x27;英语&#x27;</span> <span class="hljs-keyword">as</span> course<br>    ,`英语` <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> score_2<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br><span class="hljs-keyword">select</span> id <br>    ,<span class="hljs-string">&#x27;法律&#x27;</span> <span class="hljs-keyword">as</span> course<br>    ,`法律` <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> score_2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>左连接-右连接-内连接-全外连接的4者区别</title>
    <link href="/blog/2021/01/20/%E5%B7%A6%E8%BF%9E%E6%8E%A5-%E5%8F%B3%E8%BF%9E%E6%8E%A5-%E5%86%85%E8%BF%9E%E6%8E%A5-%E5%85%A8%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%844%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/01/20/%E5%B7%A6%E8%BF%9E%E6%8E%A5-%E5%8F%B3%E8%BF%9E%E6%8E%A5-%E5%86%85%E8%BF%9E%E6%8E%A5-%E5%85%A8%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%844%E8%80%85%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="基本定义："><a href="#基本定义：" class="headerlink" title="基本定义："></a>基本定义：</h1><p>　　left join （左连接）：返回包括左表中的所有记录和右表中连接字段相等的记录。</p><p>　　right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。</p><p>　　inner join （等值连接或者叫内连接）：只返回两个表中连接字段相等的行。</p><p>　　full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录。</p><p>举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">　A表　　　　　　　　　　<br> <br>　　id　  name　　<br> <br>　　<span class="hljs-number">1</span>　　小王<br> <br>　　<span class="hljs-number">2</span>　　小李<br> <br>　　<span class="hljs-number">3</span>　　小刘<br> <br>　　B表<br> <br>　　id　　A_id　　job<br> <br>　　<span class="hljs-number">1</span>　　<span class="hljs-number">2</span>　　　　老师<br> <br>　　<span class="hljs-number">2</span>　　<span class="hljs-number">4</span>　　　　程序员<br></code></pre></td></tr></table></figure><h2 id="内连接：（只有2张表匹配的行才能显示）"><a href="#内连接：（只有2张表匹配的行才能显示）" class="headerlink" title="内连接：（只有2张表匹配的行才能显示）"></a>内连接：（只有2张表匹配的行才能显示）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　只能得到一条记录<br> <br>　　小李　　老师<br></code></pre></td></tr></table></figure><h2 id="左连接：（左边的表不加限制）"><a href="#左连接：（左边的表不加限制）" class="headerlink" title="左连接：（左边的表不加限制）"></a>左连接：（左边的表不加限制）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　三条记录<br> <br>　　小王　　<span class="hljs-keyword">null</span><br> <br>　　小李　　老师<br> <br>　　小刘　　<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h2 id="右连接：（右边的表不加限制）"><a href="#右连接：（右边的表不加限制）" class="headerlink" title="右连接：（右边的表不加限制）"></a>右连接：（右边的表不加限制）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　两条记录<br> <br>　　小李　　老师<br> <br>　　<span class="hljs-keyword">null</span>　　程序员<br></code></pre></td></tr></table></figure><h2 id="全外连接：-左右2张表都不加限制）"><a href="#全外连接：-左右2张表都不加限制）" class="headerlink" title="全外连接：(左右2张表都不加限制）"></a>全外连接：(左右2张表都不加限制）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.job <span class="hljs-keyword">from</span> A a  <span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span> B b <span class="hljs-keyword">on</span> a.id<span class="hljs-operator">=</span>b.A_id<br> <br>　　四条数据<br> <br>　　小王　　<span class="hljs-keyword">null</span><br> <br>　　小李　　老师<br> <br>　　小刘　　<span class="hljs-keyword">null</span><br> <br>　　<span class="hljs-keyword">null</span>　　程序员<br></code></pre></td></tr></table></figure><p>注：在sql中l外连接包括左连接（left join ）和右连接（right join），全外连接（full join），等值连接（inner join）又叫内连接。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql基本操作命令汇总</title>
    <link href="/blog/2021/01/19/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/blog/2021/01/19/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a>关于数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建数据库<br><span class="hljs-keyword">create</span> database h_test;        <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据库<br><span class="hljs-keyword">show</span> databases;  <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据库信息    <br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database h_test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改数据库的编码，可使用上一条语句查看是否修改成功<br><span class="hljs-keyword">alter</span> database h_test <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk <span class="hljs-keyword">collate</span> gbk_bin;      <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除数据库<br><span class="hljs-keyword">drop</span> database h_test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>综上，可以直接创建数据库且设置编码方式<br><span class="hljs-keyword">CREATE</span> DATABASE h_test <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首先选定操作的数据库<br>use h_test;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表student<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br>  name  <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据表<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看数据表信息，后面加上参数<span class="hljs-operator">/</span>G可使结果更加美观<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看表的的字段信息<br><span class="hljs-keyword">desc</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改表名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student rename [<span class="hljs-keyword">to</span>] h_student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改字段名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student change name stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改字段的数据类型<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student modify id <span class="hljs-type">int</span>(<span class="hljs-number">20</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加字段<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student <span class="hljs-keyword">add</span> grade <span class="hljs-type">float</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除字段<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student <span class="hljs-keyword">drop</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改字段的位置<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student modify stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">first</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> h_student modify id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) after age;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除数据表<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> h_student;<br></code></pre></td></tr></table></figure><h2 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h2><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190820-155510@2x_1566287798018.png" alt="WX20190820-155510@2x"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>作用：提高表中数据的查询速度 1.普通索引 2.唯一性索引 3.全文索引 4.单列索引 5.多列索引 6.空间索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建索引<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>一.创建表的时候创建索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>        字段名 数据类型[完整性约束条件],<br>        ...<br>        字段名 数据类型,<br>        [<span class="hljs-keyword">UNIQUE</span><span class="hljs-operator">|</span>FULLTEXT<span class="hljs-operator">|</span>SPATIAL] INDEX<span class="hljs-operator">|</span>KEY<br>  );<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-1.</span>创建普通索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  INDEX (id)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>可以插入一条数据,查看索引是否被使用<br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test1 <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> \G;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-2.</span>创建唯一性索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test2(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  <span class="hljs-keyword">UNIQUE</span> INDEX unique_id(id <span class="hljs-keyword">asc</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-3.</span>创建全文索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test3(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  FULLTEXT INDEX fulltext_name(name)<br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-4.</span>创建单列索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test4(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  INDEX single_name(name(<span class="hljs-number">20</span>))<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-5.</span>创建多列索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test5(<br>  id  <span class="hljs-type">INT</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  age <span class="hljs-type">INT</span>,<br>  INDEX multi(id,name(<span class="hljs-number">20</span>))<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-number">-6.</span>创建空间索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test6(<br>  id  <span class="hljs-type">INT</span>,<br>  space GEOMETRY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  SPATIAL INDEX sp(space)<br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-comment">---------------------------------------------------</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>二.使用<span class="hljs-keyword">create</span> index语句在已经存在的表上创建索引<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首先新建一个表,这个表没有索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span>,<br>  age <span class="hljs-type">int</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  intro <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>  g GEOMETRY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-1.</span>创建普通索引<br><span class="hljs-keyword">create</span> index index_id <span class="hljs-keyword">on</span> student(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-2.</span>创建唯一性索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index uniqueidx <span class="hljs-keyword">on</span> student(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-3.</span>创建单列索引<br><span class="hljs-keyword">create</span> index singleidx <span class="hljs-keyword">on</span> student(age);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-4.</span>创建多列索引<br><span class="hljs-keyword">create</span> index mulitidx <span class="hljs-keyword">on</span> student(name(<span class="hljs-number">20</span>),intro(<span class="hljs-number">40</span>));<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-5.</span>创建全文索引<br><span class="hljs-keyword">create</span> fulltext index fulltextidx <span class="hljs-keyword">on</span> student(name);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2</span><span class="hljs-number">-6.</span>创建空间索引<br><span class="hljs-keyword">create</span> spatial index spatidx <span class="hljs-keyword">on</span> student(g); <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>三.使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>语句在已经存在的表上创建索引<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除student表，重新创建<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span>,<br>  age <span class="hljs-type">int</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  intro <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>  space GEOMETRY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-1.</span>创建普通索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> index index_id(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-2.</span>创建唯一性索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> uniqueidx(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-3.</span>创建单列索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> index singleidx (age);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-4.</span>创建多列索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> index multidx(name(<span class="hljs-number">20</span>),intro(<span class="hljs-number">40</span>));<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-5.</span>创建全文索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> fulltext index fulltextidx(name);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3</span><span class="hljs-number">-6.</span>创建空间索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> spatial index spatidx(space);<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除索引，有下面两种方式<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>使用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>删除索引fulltextidx<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">drop</span> index fulltextidx;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>使用<span class="hljs-keyword">drop</span> index删除索引spatidx<br><span class="hljs-keyword">drop</span> index spatidx <span class="hljs-keyword">on</span> student;<br> <br></code></pre></td></tr></table></figure><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>重新建立表student<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  grade <span class="hljs-type">float</span><br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入一条数据，也可以少某个字段的同时也少对应的数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(id,name,grade) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">70</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>也可以不指定字段名，但要注意顺序<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>也可以这样添加数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">set</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>,name<span class="hljs-operator">=</span>&quot;howie&quot;,grade<span class="hljs-operator">=</span><span class="hljs-number">90</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>同时添加多条数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span><br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>),<br>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;howie&#x27;</span>,<span class="hljs-number">80</span>);<br></code></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>更新id<span class="hljs-operator">=</span><span class="hljs-number">1</span>的数据<br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span>&quot;howie1&quot;,grade<span class="hljs-operator">=</span><span class="hljs-number">60</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>批量更新,如果没有<span class="hljs-keyword">where</span>子句，会更新表中所有对应数据<br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">4</span>;<br> <br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除id<span class="hljs-operator">=</span><span class="hljs-number">6</span>的数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>批量删除数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除所有数据,DDL(数据定义语言)语句 <span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> student也可以删除表内所有数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><h2 id="单表查询和多表操作"><a href="#单表查询和多表操作" class="headerlink" title="单表查询和多表操作"></a>单表查询和多表操作</h2><p>单表查询：如何从数据库中获取你需要的数据 多表查询：实际开发中，需要进行2张表以上进行操作</p><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>建立表student<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  grade <span class="hljs-type">float</span>,<br>  <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>(id)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (name,grade) <span class="hljs-keyword">values</span><br>(&quot;howie1&quot;,<span class="hljs-number">40</span>),<br>(&quot;howie1&quot;,<span class="hljs-number">50</span>),<br>(&quot;howie2&quot;,<span class="hljs-number">50</span>),<br>(&quot;howie3&quot;,<span class="hljs-number">60</span>),<br>(&quot;howie4&quot;,<span class="hljs-number">70</span>),<br>(&quot;howie5&quot;,<span class="hljs-number">80</span>),<br>(&quot;howie6&quot;,<span class="hljs-keyword">null</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询全部<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询某个字段<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>条件查询,查询id<span class="hljs-operator">=</span><span class="hljs-number">2</span>学生的信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">in</span>关键字查询,也可以使用<span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-keyword">IN</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">between</span> <span class="hljs-keyword">and</span>关键字查询<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-keyword">between</span> <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>空值(<span class="hljs-keyword">NULL</span>)查询，使用<span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>来判断<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> grade <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">distinct</span>关键字查询<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> name <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">like</span>关键字查询,查询以h开头，e结尾的数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;h%e&quot;;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">and</span>关键字多条件查询,<span class="hljs-keyword">or</span>关键字的使用也是类似<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span> <span class="hljs-keyword">and</span> grade<span class="hljs-operator">&gt;</span><span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>聚合函数<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-built_in">count</span>()函数,<span class="hljs-built_in">sum</span>()函数,<span class="hljs-built_in">avg</span>()函数,<span class="hljs-built_in">max</span>()函数,<span class="hljs-built_in">min</span>()函数<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>对查询结果进行排序<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>分组查询<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>单独使用<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>分组<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>和聚合函数一起使用<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),grade <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span>和<span class="hljs-keyword">having</span>关键字一起使用<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(grade),name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(grade) <span class="hljs-operator">&gt;</span><span class="hljs-number">100</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>使用limit限制查询结果的数量<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student limit <span class="hljs-number">5</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student limit <span class="hljs-number">2</span>,<span class="hljs-number">2</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">desc</span> limit <span class="hljs-number">2</span>,<span class="hljs-number">2</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>函数,mysql提供了许多函数<br><span class="hljs-keyword">select</span> concat(id,<span class="hljs-string">&#x27;:&#x27;</span>,name,<span class="hljs-string">&#x27;:&#x27;</span>,grade) <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>为表取别名<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> stu <span class="hljs-keyword">where</span> stu.name<span class="hljs-operator">=</span>&quot;howie&quot;;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>为字段取别名,<span class="hljs-keyword">as</span>关键字也可以不写<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">as</span> stu_name,grade stu_grade <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><p>1.了解外键 2.了解关联关系 3.了解各种连接查询多表的数据 4.了解子查询，会使用各种关键字以及比较运算符查询多表中的数据</p><p>外键 外键是指引用另一个表中的一列或者多列，被引用的列应该具有主键约束或者唯一性约束，用于建立和加强两个数据表之间的连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表class,student<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> class(<br>   id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>   classname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>   stu_id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>,<br>   stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>   cid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>      <span class="hljs-comment">-- 表示班级id，它就是class表的外键</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_ID <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(cid) <span class="hljs-keyword">references</span> class(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> FK_ID;<br></code></pre></td></tr></table></figure><h2 id="操作关联表"><a href="#操作关联表" class="headerlink" title="操作关联表"></a>操作关联表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>数据表有三种关联关系，多对一、多对多、一对一<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>学生(student)和班级(class)是多对一关系，添加数据<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首选添加外键约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_ID <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(cid) <span class="hljs-keyword">references</span> class(id);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加数据,这两个表便有了关联若插入中文在终端显示空白，可设置<span class="hljs-keyword">set</span> names <span class="hljs-string">&#x27;gbk&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> class <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,&quot;软件一班&quot;),(<span class="hljs-number">2</span>,&quot;软件二班&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,&quot;howie&quot;,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,&quot;howie1&quot;,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,&quot;howie2&quot;,<span class="hljs-number">1</span>),(<span class="hljs-number">4</span>,&quot;howie3&quot;,<span class="hljs-number">2</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>交叉连接<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">cross</span> <span class="hljs-keyword">join</span> class;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>内连接，该功能也可以使用<span class="hljs-keyword">where</span>语句实现<br><span class="hljs-keyword">select</span> student.stu_name,class.classname <span class="hljs-keyword">from</span> student <span class="hljs-keyword">join</span> class <span class="hljs-keyword">on</span> class.id<span class="hljs-operator">=</span>student.cid;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>外连接<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>首先在student,class表中插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> class <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,&quot;软件三班&quot;);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>左连接，右连接<br><span class="hljs-keyword">select</span> s.stu_id,s.stu_name,c.classname <span class="hljs-keyword">from</span> student s <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> class c <span class="hljs-keyword">on</span> c.id<span class="hljs-operator">=</span>s.cid;<br><span class="hljs-keyword">select</span> s.stu_id,s.stu_name,c.classname <span class="hljs-keyword">from</span> student s <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> class c <span class="hljs-keyword">on</span> c.id<span class="hljs-operator">=</span>s.cid;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>复合条件连接查询就是添加过滤条件<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>子查询<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">in</span>关键字子查询跟上面的<span class="hljs-keyword">in</span>关键字查询类似<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> cid <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">exists</span>关键字查询,相当于测试，不产生数据，只返回<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>，只有返回<span class="hljs-literal">true</span>，外层才会执行，具体看下图<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">12</span>);   <span class="hljs-comment">-- 外层不会执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>);    <span class="hljs-comment">-- 外层会执行</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">any</span>关键字查询<br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> cid<span class="hljs-operator">&gt;</span><span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">all</span>关键字查询<br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span><span class="hljs-keyword">any</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> class);<br></code></pre></td></tr></table></figure><h1 id="事务与存储过程"><a href="#事务与存储过程" class="headerlink" title="事务与存储过程"></a>事务与存储过程</h1><p>事务的概念，会开启、提交和回滚事务 事务的四种隔离级别 创建存储过程 调用、查看、修改和删除存储过程</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> transaction;  <span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">commit</span>;             <span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">rollback</span>;           <span class="hljs-comment">-- 取消事务(回滚)</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表account，插入数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>  money <span class="hljs-type">float</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(name,money) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3000</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>利用事务实现转账功能，首先开启事务，然后执行语句，提交事务<br><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>事务的提交，通过这个命令查看mysql提交方式<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>; <span class="hljs-comment">-- 若为1，表示自动提交，为0，就要手动提交</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>若事务的提交方式为手动提交<br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 设置为手动提交</span><br><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>现在执行<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account 可以看到转账成功，若此时退出数据库重新登录，会看到各账户余额没有改变，所以一定要用<span class="hljs-keyword">commit</span>语句提交事务，否则会失败<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>事务的回滚，别忘记设置为手动提交的模式<br><span class="hljs-keyword">start</span> transaction;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>若此时a不想转账给b，可以使用事务的回滚<br><span class="hljs-keyword">rollback</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>事务的隔离级别<br>read uncommitted;<br>read committed;<br>repeatable read;<br>serializable;<br></code></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建查看student表的存储过程<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建student表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student( <br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment, <br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>), <br>  grade <span class="hljs-type">float</span> <br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span>  <span class="hljs-comment">-- 将mysql的结束符设置为//</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> Proc()<br>  <span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br>  <span class="hljs-keyword">end</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;   <span class="hljs-comment">-- 将mysql的结束符设置为;</span><br><span class="hljs-keyword">call</span> Proc();  <span class="hljs-comment">-- 这样就可以调用该存储过程</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>变量的使用,mysql中变量不用事前申明，在用的时候直接用“@变量名”使用就可以<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@number</span><span class="hljs-operator">=</span><span class="hljs-number">100</span>; <span class="hljs-comment">-- 或set @num:=1;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>定义条件和处理程序<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>光标的使用<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>声明光标<br><span class="hljs-keyword">DECLARE</span> <span class="hljs-operator">*</span> cursor_name<span class="hljs-operator">*</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statement<br><span class="hljs-number">2.</span> 光标<span class="hljs-keyword">OPEN</span>语句<br><span class="hljs-keyword">OPEN</span> cursor_name<br><span class="hljs-number">3.</span> 光标<span class="hljs-keyword">FETCH</span>语句<br><span class="hljs-keyword">FETCH</span> cursor_name <span class="hljs-keyword">INTO</span> var_name [, var_name] ...<br><span class="hljs-number">4.</span> 光标<span class="hljs-keyword">CLOSE</span>语句<br><span class="hljs-keyword">CLOSE</span> cursor_name<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>流程控制的使用  不做介绍<br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>定义存储过程<br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> proc1(<span class="hljs-keyword">in</span> name <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>),<span class="hljs-keyword">out</span> num <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> num <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span>name;<br><span class="hljs-keyword">end</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>调用存储过程<br><span class="hljs-keyword">call</span> proc1(&quot;tom&quot;,<span class="hljs-variable">@num</span>) <span class="hljs-comment">-- 查找名为tom学生人数</span><br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看存储过程<br> <span class="hljs-keyword">show</span> <span class="hljs-keyword">procedure</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;p%&#x27;</span> \G <span class="hljs-comment">-- 获得以p开头的存储过程信息</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改存储过程<br>alter &#123;procedure|function&#125; sp_name[characteristic...]<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除存储过程<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> proc1;<br></code></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>如何创建视图 查看、修改、更新、删除视图</p><h2 id="视图的基本操作"><a href="#视图的基本操作" class="headerlink" title="视图的基本操作"></a>视图的基本操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在单表上创建视图,重新创建student表，插入数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  math <span class="hljs-type">float</span>,<br>  chinese <span class="hljs-type">float</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(name,math,chinese) <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;howie1&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>),<br>(<span class="hljs-string">&#x27;howie2&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>),<br>(<span class="hljs-string">&#x27;howie3&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>开始创建视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> math,chinese,math<span class="hljs-operator">+</span>chinese <span class="hljs-keyword">from</span> student;  <span class="hljs-comment">-- 下图可看出创建成功</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>也可以创建自定义字段名称的视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_view2(math,chin,sum) <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> math,chinese,math<span class="hljs-operator">+</span>chinese <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在多表上创建视图，创建表stu_info，插入数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu_info(<br>  id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> auto_increment,<br>  class <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>  addr <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu_info(class,addr) <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;anhui&#x27;</span>),<br>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;fujian&#x27;</span>),<br>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;guangdong&#x27;</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建视图stu_class<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_class(id,name,class) <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> student.id,student.name,stu_info.class <span class="hljs-keyword">from</span> <br>student,stu_info <span class="hljs-keyword">where</span> student.id<span class="hljs-operator">=</span>stu_info.id;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查看视图<br><span class="hljs-keyword">desc</span> stu_class;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;stu_class&#x27;</span>\G<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_class\G<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> chinese <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>更新视图<br><span class="hljs-keyword">update</span> stu_view <span class="hljs-keyword">set</span> chinese<span class="hljs-operator">=</span><span class="hljs-number">100</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;haha&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> stu_view2 <span class="hljs-keyword">where</span> math<span class="hljs-operator">=</span><span class="hljs-number">100</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除视图<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> if <span class="hljs-keyword">exists</span> stu_view2;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAOP原理分析</title>
    <link href="/blog/2021/01/19/SpringAOP%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/blog/2021/01/19/SpringAOP%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring核心知识"><a href="#Spring核心知识" class="headerlink" title="Spring核心知识"></a>Spring核心知识</h1><p>Spring是一个开源框架，Spring是于2003年兴起的一个轻量级的Java开发框架，由Rod Johnson在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转(IoC)和面向切面(AOP)。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式)轻量级开源框架。</p><p>为什么说Spring是一个一站式的轻量级开源框架呢？EE开发可分成三层架构，针对JavaEE的三层结构，每一层Spring都提供了不同的解决技术。</p><p>• WEB层：SpringMVC</p><p>• 业务层：Spring的IoC</p><p>• 持久层：Spring的JDBCTemplate(Spring的JDBC模板，ORM模板用于整合其他的持久层框架)</p><p>从上面的简要介绍中，我们要知道Spring的核心有两部分：</p><p>• IoC：控制反转。</p><p>举例来说，在之前的操作中，比方说有一个类，我们想要调用类里面的方法(不是静态方法)，就要创建类的对象，使用对象调用方法实现。对于Spring来说，Spring创建对象的过程，不是在代码里面实现的，而是交给Spring来进行配置实现的。</p><p>AOP：面向切面编程。</p><h1 id="SpringAOP原理"><a href="#SpringAOP原理" class="headerlink" title="SpringAOP原理"></a>SpringAOP原理</h1><p>AOP编程技术 什么是AOP编程 AOP: Aspect Oriented Programming 面向切面编程。 　　面向切面编程(也叫面向方面)：Aspect Oriented Programming(AOP),是目前软件开发中的一个热点。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 　　AOP是OOP的延续，是（Aspect Oriented Programming）的缩写，意思是面向切面（方面）编程。 　　主要的功能是：日志记录，性能统计，安全控制，事务处理，异常处理等等。 　　主要的意图是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改 变这些行为的时候不影响业务逻辑的代码。</p><p>　　可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP实际是GoF设计模式的延续，设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP可以说也是这种目标的一种实现。</p><p>假设把应用程序想成一个立体结构的话，OOP的利刃是纵向切入系统，把系统划分为很多个模块（如：用户模块，文章模块等等），而AOP的利刃是横向切入系统，提取各个模块可能都要重复操作的部分（如：权限检查，日志记录等等）。由此可见，AOP是OOP的一个有效补充。</p><p>注意：AOP不是一种技术，实际上是编程思想。凡是符合AOP思想的技术，都可以看成是AOP的实现。</p><p>Aop， aspect object programming 面向切面编程</p><p>功能： 让关注点代码与业务代码分离！</p><p>关注点</p><p>关注点,重复代码就叫做关注点；</p><p>切面</p><p>关注点形成的类，就叫切面(类)！</p><p>面向切面编程，就是指 对很多功能都有的重复的代码抽取，再在运行的时候网业务方法上动态植入“切面类代码”。</p><p>切入点</p><p>执行目标对象方法，动态植入切面代码。</p><p>可以通过切入点表达式，指定拦截哪些类的哪些方法； 给指定的类在运行的时候植入切面类代码。</p><h1 id="AOP底层实现原理"><a href="#AOP底层实现原理" class="headerlink" title="AOP底层实现原理"></a>AOP底层实现原理</h1><p>代理设计模式</p><p>什么是代理模式</p><p>通过代理控制对象的访问,可以详细访问某个对象的方法，在这个方法调用处理，或调用后处理。既(AOP微实现) ,AOP核心技术面向切面编程。</p><p>代理模式应用场景</p><p>SpringAOP、事物原理、日志打印、权限控制、远程调用、安全代理 可以隐蔽真实角色</p><p>代理的分类</p><p>静态代理(静态定义代理类)</p><p>动态代理(动态生成代理类)</p><p>Jdk自带动态代理</p><p>Cglib 、javaassist（字节码操作库）</p><p>静态代理</p><p>什么是静态代理</p><p>由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p><p>静态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;已经保存数据...&quot;</span>);<br>    &#125;<br>&#125;<br>代理类<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> IUserDao target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoProxy</span><span class="hljs-params">(IUserDao iuserDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = iuserDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开启事物...&quot;</span>);<br>        target.save();<br>        System.out.println(<span class="hljs-string">&quot;关闭事物...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理</p><p>什么是动态代理</p><p>1.代理对象,不需要实现接口</p><p>2.代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)</p><p>3.动态代理也叫做:JDK代理,接口代理</p><p>JDK动态代理</p><p>1)原理：是根据类加载器和接口创建代理类（此代理类是接口的实现类，所以必须使用接口 面向接口生成代理，位于java.lang.reflect包下）</p><p>2)实现方式：</p><p>通过实现InvocationHandler接口创建自己的调用处理器 IvocationHandler handler = new InvocationHandlerImpl(…);</p><p>通过为Proxy类指定ClassLoader对象和一组interface创建动态代理类Class clazz = Proxy.getProxyClass(classLoader,new Class[]{…});</p><p>通过反射机制获取动态代理类的构造函数，其参数类型是调用处理器接口类型Constructor constructor = clazz.getConstructor(new Class[]);</p><p>通过构造函数创建代理类实例，此时需将调用处理器对象作为参数被传入Interface Proxy = (Interface)constructor.newInstance(new Object[] (handler));</p><p>缺点：jdk动态代理，必须是面向接口，目标业务类必须实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 每次生成动态代理类对象时,实现了InvocationHandler接口的调用处理器对象 </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvocationHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target;<span class="hljs-comment">// 这其实业务实现类对象，用来调用具体的业务方法</span><br>    <span class="hljs-comment">// 通过构造函数传入目标对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvocationHandlerImpl</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Object result = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;调用开始处理&quot;</span>);<br>        result = method.invoke(target, args);<br>        System.out.println(<span class="hljs-string">&quot;调用结束处理&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException, InstantiationException,</span><br><span class="hljs-function">            IllegalAccessException, IllegalArgumentException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">// 被代理对象</span><br>        IUserDao userDao = <span class="hljs-keyword">new</span> UserDao();<br>        InvocationHandlerImpl invocationHandlerImpl = <span class="hljs-keyword">new</span> InvocationHandlerImpl(userDao);<br>        ClassLoader loader = userDao.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = userDao.getClass().getInterfaces();<br>        <span class="hljs-comment">// 主要装载器、一组接口及调用处理动态代理实例</span><br>        IUserDao newProxyInstance = (IUserDao) Proxy.newProxyInstance(loader, interfaces, invocationHandlerImpl);<br>        newProxyInstance.save();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>CGLIB动态代理与JDK动态区别</p><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p><p>而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p><p>Spring中。</p><p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p><p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p><p>3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。 CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。 因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</p><h1 id="AOP编程使用"><a href="#AOP编程使用" class="headerlink" title="AOP编程使用"></a>AOP编程使用</h1><p>注解版本实现AOP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;  开启事物注解权限<br><span class="hljs-meta">@Aspect</span>                         指定一个类为切面类       <br><span class="hljs-meta">@Pointcut(&quot;execution(* com.service.UserService.add(..))&quot;)</span>  指定切入点表达式<br><span class="hljs-meta">@Before(&quot;pointCut_()&quot;)</span>              前置通知: 目标方法之前执行<br><span class="hljs-meta">@After(&quot;pointCut_()&quot;)</span>               后置通知：目标方法之后执行（始终执行）<br><span class="hljs-meta">@AfterReturning(&quot;pointCut_()&quot;)</span>       返回后通知： 执行方法结束前执行(异常不执行)<br><span class="hljs-meta">@AfterThrowing(&quot;pointCut_()&quot;)</span>           异常通知:  出现异常时候执行<br><span class="hljs-meta">@Around(&quot;pointCut_()&quot;)</span>              环绕通知： 环绕目标方法执行<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopLog</span> </span>&#123;<br><br>    <span class="hljs-comment">// 前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 后置通知</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 运行通知</span><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">returning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;运行通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;异常通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.service.UserService.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知开始&quot;</span>);<br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>XML方式实现AOP</p><p>Xml实现aop编程： 1） 引入jar文件 【aop 相关jar， 4个】 2） 引入aop名称空间 3）aop 配置 * 配置切面类 （重复执行代码形成的类） * aop配置 拦截哪些方法 / 拦截到方法后应用通知代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>    xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:p=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span><br>    xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>    xmlns:aop=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br>    xsi:schemaLocation=<span class="hljs-string">&quot;</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">        http://www.springframework.org/schema/context</span><br><span class="hljs-string">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="hljs-string">        http://www.springframework.org/schema/aop</span><br><span class="hljs-string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;<br><br>    &lt;!-- dao 实例 --&gt;<br><br>    &lt;bean id=&quot;userService&quot; class=&quot;com.service.UserService&quot;&gt;&lt;/bean&gt;<br>    &lt;!-- 切面类 --&gt;<br>    &lt;bean id=&quot;aop&quot; class=&quot;com.aop2.AopLog2&quot;&gt;&lt;/bean&gt;<br>    &lt;!-- Aop配置 --&gt;<br>    &lt;aop:config&gt;<br>        &lt;!-- 定义一个切入点表达式： 拦截哪些方法 --&gt;<br>        &lt;aop:pointcut expression=<span class="hljs-string">&quot;execution(* com.service.UserService.*(..))&quot;</span><br>            id=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>        &lt;!-- 切面 --&gt;<br>        &lt;aop:aspect ref=<span class="hljs-string">&quot;aop&quot;</span>&gt;<br>            &lt;!-- 环绕通知 --&gt;<br>            &lt;aop:around method=<span class="hljs-string">&quot;around&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 前置通知： 在目标方法调用前执行 --&gt;<br>            &lt;aop:before method=<span class="hljs-string">&quot;begin&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 后置通知： --&gt;<br>            &lt;aop:after method=<span class="hljs-string">&quot;after&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 返回后通知 --&gt;<br>            &lt;aop:after-returning method=<span class="hljs-string">&quot;afterReturning&quot;</span><br>                pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>            &lt;!-- 异常通知 --&gt;<br>            &lt;aop:after-throwing method=<span class="hljs-string">&quot;afterThrowing&quot;</span><br>                pointcut-ref=<span class="hljs-string">&quot;pt&quot;</span> /&gt;<br>        &lt;/aop:aspect&gt;<br>    &lt;/aop:config&gt;<br><br>&lt;/beans&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopLog2</span> </span>&#123;<br><br>    <span class="hljs-comment">// 前置通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// 后置通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 运行通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">returning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;运行通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 异常通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;异常通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 环绕通知</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知开始&quot;</span>);<br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/aop#spring%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86">Spring核心知识</a><a href="https://bk.cuixiaoyan.xyz/archives/aop#springaop%E5%8E%9F%E7%90%86">SpringAOP原理</a><a href="https://bk.cuixiaoyan.xyz/archives/aop#aop%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">AOP底层实现原理</a><a href="https://bk.cuixiaoyan.xyz/archives/aop#aop%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8">AOP编程使用</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现多线程的三种方法</title>
    <link href="/blog/2021/01/19/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/blog/2021/01/19/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Java虚拟机（JVM，是运行所有Java程序的抽象计算机，是Java语言的运行环境）允许应用程序并发地运行多个线程。在Java语言中，多线程的实现一般有以下三种方法：</p><p>1、实现Runnable接口，并实现该接口的run()方法。</p><p>　　①自定义类并实现Runnable接口，实现run()方法。</p><p>　　②创建Thread对象，用实现Runnable接口的对象作为参数实例化该Thread对象。</p><p>　　③调用Thread的start()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;　　<span class="hljs-comment">//创建线程类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Thread body&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread thread = <span class="hljs-keyword">new</span> MyThread();<br>        Thread t = <span class="hljs-keyword">new</span> Thread(thread);<br>        t.run();　　<span class="hljs-comment">//开启线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、继承Thread类，重写run()方法。</p><p>　　Thread本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，启动线程的唯一方法就是通过Thread类的start()方法。start()方法是一个native（本地）方法，它将启动一个新线程，并执行run()方法（Thread中提供的run()方法是一个空方法）。这种方式通过自定义类直接extends Thread，并重写run()方法，就可以启动新线程并执行自己定义的run()方法。需要注意的是，当start()方法调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行多线程代码是由操作系统决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;    <span class="hljs-comment">//创建线程类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Thread body&quot;</span>);    <span class="hljs-comment">//线程的方法体</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread thread = <span class="hljs-keyword">new</span> MyThread();<br>        thread.run();    <span class="hljs-comment">//开启线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、实现Callable接口，重写call()方法。</p><p>　　Callable对象实际是属于Executor框架中的功能类，Callable接口与Runnable接口类似，但是提供了比Runnable更强大 的功能，主要表现为以下三点：</p><p>　　①Callable可以在任务结束后提供一个返回值，Runnable无法提供这个功能。</p><p>　　②Callable中的call方法可以抛出异常，而Runnable的run()方法不能抛出异常。</p><p>　　③运行Callable可以拿到一个Future对象，Future对象表示异步计算的结果。它提供了检查计算是否完成的方法。由于线程属于异步计算模型，所以无法从其他线程中得到方法的返回值，在这种情况下，就可以使用Future来监视目标线程调用call()方法的情况，当调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法结束返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableAndFuture</span></span>&#123;　　<span class="hljs-comment">//创建线程类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExecutorService threadPool = Executors.newSingleThreadExecutor();<br>        <span class="hljs-comment">//启动线程</span><br>        Future&lt;String&gt; future = threadPool.submit(<span class="hljs-keyword">new</span> CallableTest());<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;waiting thread to finish&quot;</span>);<br>            System.out.println(future.get());　　<span class="hljs-comment">//等待线程结束，并获取返回结果</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　在以上三种方式中，前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。当需要实现多线程时，一般推荐实现Runnable接口的方式，原因如下：首先，Thread类定义了多种方法可以被派生类使用或重写，但是只有run方法是必须被重写的，在run方法中实现这个线程的主要功能。这当然是实现Runnable接口所需的同样的方法。而且，很多Java开发人员认为，一个人仅在它们需要被加强或修改时才会被继承。因此，如果没有必要重写Thread类中的其他方法，那么通过继承Thread的实现方式和实现Runnable接口的效果相同，在这种情况下最好通过Runnable接口的方式来创建线程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java集合面试20问</title>
    <link href="/blog/2021/01/18/java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%9520%E9%97%AE/"/>
    <url>/blog/2021/01/18/java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%9520%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<ol><li>HashMap的内部实现原理是什么？</li></ol><p>HashMap内部实现原理是数组+链表，通过散列算法将key值散列到数组中，如果到相同的位置，则通过拉链法解决散列冲突。在JDK8中新增了红黑树结构，当HashMap中的散列冲突链表结构超过8个数据时，会从链表结构转换为红黑树结构。</p><ol><li>HashMap的key值能否是null，如果能，key=null如何存储以及如何读取的？如果不能，为什么？</li></ol><p>HashMap的key值可以是null。如果key=null，则会将它放置在数组下标为0的位置。</p><ol><li>HashMap如何实现扩容？</li></ol><p>HashMap扩容和初始容器大小与负载因子有关。HashMap的初始容器大小为16，默认的负载因子为0.75，当实际容量超过16*0.75=12个元素时会进行扩容。扩容后的容器大小是扩容前的2倍，第一次扩容后的容器大小为32。</p><ol><li>设置HashMap的容量有没有注意的地方，为什么？</li></ol><p>指定HashMap的容量时，建议是2的幂次方。</p><p>HashMap在寻址是会key的hash值与容器长度做与运算，(n - 1) &amp; hash。当n的长度为2的幂次方时，n-1的二进制形式就会是111111，这样与操作效率会非常的快。</p><ol><li>HashMap是否是线程安全的？如果不是，多线程下并发操作它可能会带来什么问题？如果是，它是怎么实现的？</li></ol><p>HashMap不是线程安全的。如果在多线程下并发操作不仅会导致脏数据，甚至可能会造成死循环。（关于死循环产生的原因参考<a href="https://www.cnblogs.com/yulinfeng/p/8558983.html%EF%BC%89">https://www.cnblogs.com/yulinfeng/p/8558983.html）</a></p><ol><li>LinkedHashMap的内部实现原理是什么？它是否支持key=null？</li></ol><p>LinkedHashMap是插入有序的Map集合。它直接继承了HashMap，所以很多都直接复用了HashMap方法，所以也支持key=null。它在内部除了沿用HashMap的底层结构，还单独维护了一个双向链表，在对Map进行put操作时，同时还会将数据写到了链表的尾部，保证了插入有序。</p><ol><li>TreeMap的内部实现原理是什么？它是否支持key=null？</li></ol><p>TreeMap结构也是有序的，不同的是它是字典有序，由于它底层是红黑树结构，插入时会进行比较key值的顺序，所以不允许key=null的情况。</p><ol><li>介绍下Hashtable</li></ol><p>Hashtable是线程安全的Map类型，但它的线程安全代价是为整个散列表加锁，效率很低，几乎已经废弃。如果要使用线程安全的Map，应该使用ConcurrentHashMap，它的实现是分段锁，能最大的提高效率。</p><ol><li>以上三种Map类型分别可以应用到哪些场景？你在哪些场景下使用过？</li></ol><p>HashMap的使用场景很多，这个使用场景就太多了，比如用作本地缓存。</p><p>LinkedHashMap因为它的链表结构可以实现LRU（最近最少使用），即缓存空间有限，当元素多余缓存空间，可淘汰掉最近最少使用的元素。在LinkedHashMap维护了一个accessOrder字段，默认为false，当设置为true时，如果访问一个key值，就会将这个元素放置链表头部，这样在链表尾部的元素就是不常用的元素，空间不足直接remove末尾的元素即可。所以当要实现LRU缓存时，就可以将accessOrder设置为true实现。</p><p>TreeMap没有实际应用过，如果有需要排序的场景则使用TreeMap</p><p>Set 10. HashSet的内部实现原理是什么，它有什么特点？</p><p>HashSet集合的特点是不允许有重复的元素，且无序的，允许null值。它在内部维护一个HashMap，存储在HashSet中的元素实际上存储在HashMap的key中。</p><ol><li>LinkedHashSet的内部实现原理是什么，它有什么特点？</li></ol><p>LinkedHashSet继承自HashMap，在内部维护一个双向链表保证插入有序，允许null值。</p><ol><li>TreeSet的内部实现原理是什么，它有什么特点？</li></ol><p>TreeSet是一个有序的集合，它的作用是提供有序的Set集合，TreeSet是基于TreeMap实现的。不允许有null值。</p><ol><li>以上三种Set类型分别可以应用到哪些场景？你在哪些场景下使用过？</li></ol><p>HashSet可应用于批量查询时去重。</p><p>如果需要返回的数据和入参的数据顺序一致则可以使用LinkedHashSet。</p><p>List 14. ArrayList的内部实现原理什么？</p><p>底层通过数组实现，创建一个ArrayList对象实例时不会初始化数组，当插入第一条数据时会创建一个大小为10的数组。</p><ol><li>既然ArrayList的底层实现是数组，那定义ArrayList时，需要定义它的大小吗？</li></ol><p>可以不用定义容器的大小，默认大小为10，当容量大小不足时此时将会进行扩容。</p><ol><li>ArrayList的扩容机制是什么？</li></ol><p>每次新增的容量是旧容量的一半，扩容后调用System.arraycopy方法拷贝到新的数组。</p><ol><li>如果初始化ArrayList时，定义一个容量大小为11，此时扩容了几次，容量大小为16呢？</li></ol><p>不进行扩容。</p><ol><li>LinkedList的内部实现原理是什么？</li></ol><p>底层通过链表实现，所以不存在扩容。</p><ol><li>Vector和ArrayList、LinkedList的区别？</li></ol><p>Vector是线程安全的额，ArrayList、LinkedList不是线程安全的。Vector的线程安全是为每个方法加上synchronized关键字，效率不高，不常用。</p><ol><li>ArrayList与LinkedList分别可以应用到哪些场景？</li></ol><p>大多数情况下使用ArrayList，因为ArrayList是数组实现，它随机读取的速度更快，但插入指定位置慢；LinkedList由于是链表实现，所以随机读取的速度慢，但插入指定位置快。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装ElasticSearch6</title>
    <link href="/blog/2021/01/18/centos7%E5%AE%89%E8%A3%85ElasticSearch6/"/>
    <url>/blog/2021/01/18/centos7%E5%AE%89%E8%A3%85ElasticSearch6/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是-ElasticSearch"><a href="#什么是-ElasticSearch" class="headerlink" title="什么是 ElasticSearch"></a>什么是 ElasticSearch</h1><p>ElasticSearch是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>索引：含有相同属性的文档集合</p><p>类型：索引可以定义一个或多个类型，文档必须属于一个类型</p><p>文档：可以被索引的基础数据单位</p><p>分片：每个索引都有多个分片，每个分片都是 Lucene 索引</p><p>备份：拷贝一份分片就完成分片的备份</p><h2 id="形象比喻："><a href="#形象比喻：" class="headerlink" title="形象比喻："></a>形象比喻：</h2><p>百货大楼里有各式各样的商品，例如书籍、笔、水果等。书籍可以根据内容划分成不同种类，如科技类、教育类、悬疑推理等。悬疑推理类的小说中比较有名气的有《福尔摩斯探案集》、《白夜行》等。</p><p>百货大楼 –&gt; ElasticSearch 数据库</p><p>书籍 –&gt; 索引</p><p>悬疑推理 –&gt; 类型</p><p>白夜行 –&gt; 文档</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>需要JDK1.8 和 NodeJS 最新版的7 慎重考虑需要需要JDK 11 登陆<a href="https://www.elastic.co/cn/downloads/past-releases">老版本下载</a> 官网下载文件。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-094122@2x_1565919762389.png" alt="WX20190816-094122@2x">解压到 /use 目录下<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-094419@2x_1565919900521.png" alt="WX20190816-094419@2x"></p><p>因为 Elasticsearch 可以执行脚本文件，为了安全性，默认不允许通过 root 用户启动服务。我们需要新创建用户名和用户组启动服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">#增加 es 组<br>groupadd es<br><br>#增加 es 用户并附加到 es 组<br>useradd es -g es -<span class="hljs-keyword">p</span> es<br><br>#给目录权限 进入到你解压的位置 输入<span class="hljs-keyword">pwd</span> 将路径拷贝到 es 后面<br>chown -R <span class="hljs-keyword">e</span><span class="hljs-variable">s:es</span> /usr/elasticsearch-<span class="hljs-number">5.6</span>.<span class="hljs-number">1</span><br><br>#使用es用户<br>su es<br></code></pre></td></tr></table></figure><p>默认情况下，Elasticsearch 只允许本机访问，如果需要远程访问，需要修改其配置文件 特别注意 要和上下文对齐 不要多空格 和少空格</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> config/elasticsearch.yml<br><br># 去掉 network.host 前边的注释，将它的值改成<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>network.hos<span class="hljs-variable">t:</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><br><br><br># 在文件末尾添加 <span class="hljs-number">2</span> 段配置 这里是为了解决跨域问题 web管理界面<br><br>http.cors.enabled: true<br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">bin/elasticsearch 或 bin/elasticsearch -d # -d 表示后台启动<br></code></pre></td></tr></table></figure><h1 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h1><p>先不后台启动 错误会直接打印 调试没有问题之后 后台启动 可能会出现的问题 6也会遇到</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vim">elasticsearch5.<span class="hljs-number">0</span>启动失败，出现如下提示：<br><br>1、Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=&#x27;Cannot allocate memory&#x27; (errno=12)<br><br>由于elasticsearch5.<span class="hljs-number">0</span>默认分配jvm空间大小为<span class="hljs-number">2</span>g，修改jvm空间分配<br><br># <span class="hljs-keyword">vim</span> config/jvm.<span class="hljs-keyword">options</span><br>-Xms2g<br>-Xmx2g<br>修改为  还是同样的错误的话 继续往下调 <br>-Xms512m<br>-Xmx512m<br><br><br><span class="hljs-number">2</span>、<span class="hljs-built_in">max</span> <span class="hljs-keyword">number</span> of threads [<span class="hljs-number">1024</span>] <span class="hljs-keyword">for</span> user [elasticsearch] <span class="hljs-keyword">is</span> too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">2048</span>]<br>修改 /etc/security/limits.d/<span class="hljs-number">90</span>-nproc.<span class="hljs-keyword">conf</span> <br><br>*          soft    nproc     <span class="hljs-number">1024</span><br><br>*          soft    nproc     <span class="hljs-number">2048</span><br><br><br><br><span class="hljs-number">3</span>、<span class="hljs-built_in">max</span> virtual memory areas <span class="hljs-keyword">vm</span>.max_map_count [<span class="hljs-number">65530</span>] <span class="hljs-keyword">is</span> too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">262144</span>]<br><br>修改/etc/sysctl.<span class="hljs-keyword">conf</span>配置文件，<br><br><span class="hljs-keyword">cat</span> /etc/sysctl.<span class="hljs-keyword">conf</span> | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">vm</span>.max_map_count<br><span class="hljs-keyword">vm</span>.max_map_count=<span class="hljs-number">262144</span><br><br>如果不存在则添加<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;vm.max_map_count=262144&quot;</span> &gt;&gt;/etc/sysctl.<span class="hljs-keyword">conf</span><br><br><br><br><span class="hljs-number">4</span>、<span class="hljs-built_in">max</span> <span class="hljs-keyword">file</span> descriptors [<span class="hljs-number">65535</span>] <span class="hljs-keyword">for</span> elasticsearch process likely too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">65536</span>]<br><br><br><br>ulimit -n <span class="hljs-number">65536</span><br><br><br><br><br><br>以下是在<span class="hljs-number">5.5</span>.<span class="hljs-number">1</span>是踩过的坑<br><br><br><br><span class="hljs-number">5</span>、启动异常：ERROR: bootstrap checks failed<br><br>system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk<br><br><br><br>问题原因：因为Centos6不支持SecComp，而ES默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。详见 ：http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/elastic/elasticsearch/issues/<span class="hljs-number">22899</span><br><br><br><br>解决方法：在elasticsearch.yml中配置bootstrap.system_call_filter为false，注意要在Memory下面:<br>bootstrap.memory_lock: false<br>bootstrap.system_call_filter: false<br><br><br><br><span class="hljs-number">6</span>、logstash使用rpm包安装的时候没有配置init的启动脚本<br><br>默认情况使用rpm包安装完logstash之后没有启动脚本。官网给了一个脚本，需要根据不同的系统版本生成对应的启动脚本，而且官网没有给明使用方法，对于新用户来说算是个坑，不过在终端可以查看到脚本的使用帮助# /usr/share/logstash/bin/<span class="hljs-built_in">system</span>-install --<span class="hljs-keyword">help</span><br><br>生成启动脚本，centos6使用sysv参数，centos7使用systemd<br><br># /usr/share/logstash/bin/<span class="hljs-built_in">system</span>-install /etc/logstash/startup.<span class="hljs-keyword">options</span> sysv<br><br>Successfully created <span class="hljs-built_in">system</span> startup script <span class="hljs-keyword">for</span> Logstash<br></code></pre></td></tr></table></figure><p>启动成功 你的ip 9200 默认端口<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-100353@2x_1565921056554.png" alt="WX20190816-100353@2x"></p><h1 id="head插件"><a href="#head插件" class="headerlink" title="head插件"></a>head插件</h1><p>查看内容显示效果不友好，因此，我们需要安装一个名为 elasticsearch-head 的插件，让内容显示效果比较舒适。需要安装nodejs githup下载 端口9100</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> elasticsearch-head-master<br><br>npm install<br><br>npm run start<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190816-100733@2x_1565921326422.png" alt="WX20190816-100733@2x"></p><p>后面是我整合啦spring boot</p>]]></content>
    
    
    
    <tags>
      
      <tag>centos7</tag>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB 与 MySQL 的区别</title>
    <link href="/blog/2021/01/18/MongoDB%E4%B8%8E%20MySQL%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2021/01/18/MongoDB%E4%B8%8E%20MySQL%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>概念区别<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190815-134731@2x_1565848087636.png" alt="WX20190815-134731@2x">关键字和函数区别<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190815-134744@2x_1565848087719.png" alt="WX20190815-134744@2x">语句区别 创建表/集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.insertOne( &#123;<br>    user_id: &quot;abc123&quot;,<br>    age: <span class="hljs-number">55</span>,<br>    status: &quot;A&quot;<br> &#125; )<br> <br>相当于 <br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> people (<br>    id MEDIUMINT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    user_id <span class="hljs-type">Varchar</span>(<span class="hljs-number">30</span>),<br>    age Number,<br>    status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (id)<br>)<br></code></pre></td></tr></table></figure><p>新增字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.updateMany(<br>    &#123; &#125;,<br>    &#123; $set: &#123; join_date: new Date() &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> people <span class="hljs-keyword">ADD</span> join_date DATETIME<br></code></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.updateMany(<br>    &#123; &#125;,<br>    &#123; $unset: &#123; &quot;join_date&quot;: &quot;&quot; &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> people <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> join_date<br></code></pre></td></tr></table></figure><p>创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.createIndex( &#123; user_id: 1 &#125; )<br> <br>相当于 <span class="hljs-keyword">CREATE</span> INDEX idx_user_id_asc <span class="hljs-keyword">ON</span> people(user_id)<br></code></pre></td></tr></table></figure><p>删除表/集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.drop()<br> <br>相当于 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> people<br></code></pre></td></tr></table></figure><p>新增记录/文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.insertOne(<br>   &#123; user_id: &quot;bcd001&quot;, age: 45, status: &quot;A&quot; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> people(user_id,age,status) <span class="hljs-keyword">VALUES</span> (&quot;bcd001&quot;,<span class="hljs-number">45</span>,&quot;A&quot;)<br></code></pre></td></tr></table></figure><p>简单查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people<br> <br>db.people.find(<br>    &#123; &#125;,<br>    &#123; user_id: 1, status: 1 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> id,user_id,status <span class="hljs-keyword">FROM</span> people<br> <br>db.people.find(<br>    &#123; &#125;,<br>    &#123; user_id: 1, status: 1, _id: 0 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> user_id, status <span class="hljs-keyword">FROM</span> people<br></code></pre></td></tr></table></figure><p>条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; status: &quot;A&quot; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;<br> <br>db.people.find(<br>    &#123; status: &quot;A&quot; &#125;,<br>    &#123; user_id: 1, status: 1, _id: 0 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> user_id, status <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;<br></code></pre></td></tr></table></figure><p>非查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; status: &#123; $ne: &quot;A&quot; &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">!=</span> &quot;A&quot;<br></code></pre></td></tr></table></figure><p>且查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; status: &quot;A&quot;,<br>      age: 50 &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">AND</span> age <span class="hljs-operator">=</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>或查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; $or: [ &#123; status: &quot;A&quot; &#125; ,<br>             &#123; age: 50 &#125; ] &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">OR</span> age <span class="hljs-operator">=</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>大于查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>    &#123; age: &#123; $gt: 25 &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>小于查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>   &#123; age: &#123; $lt: 25 &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>范围查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find(<br>   &#123; age: &#123; $gt: 25, $lte: 50 &#125; &#125;<br>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span> <span class="hljs-keyword">AND</span>   age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find( &#123; user_id: /bc/ &#125; ) 或 db.people.find( &#123; user_id: &#123; $regex: /bc/ &#125; &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-keyword">like</span> &quot;%bc%&quot;<br> <br>db.people.find( &#123; user_id: /^bc/ &#125; ) 或 db.people.find( &#123; user_id: &#123; $regex: /^bc/ &#125; &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-keyword">like</span> &quot;bc%&quot;<br></code></pre></td></tr></table></figure><p>排序查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find( &#123; status: &quot;A&quot; &#125; ).sort( &#123; user_id: 1 &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> user_id <span class="hljs-keyword">ASC</span><br> <br>db.people.find( &#123; status: &quot;A&quot; &#125; ).sort( &#123; user_id: -1 &#125; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> user_id <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p>统计查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.<span class="hljs-built_in">count</span>() 或 db.people.find().<span class="hljs-built_in">count</span>()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> people<br> <br>db.people.count( &#123; user_id: &#123; $exists: true &#125; &#125; ) 或 db.people.find( &#123; user_id: &#123; $exists: true &#125; &#125; ).count()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(user_id) <span class="hljs-keyword">FROM</span> people<br> <br>db.people.count( &#123; age: &#123; $gt: 30 &#125; &#125; ) 或 db.people.find( &#123; age: &#123; $gt: 30 &#125; &#125; ).count()<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>去重查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.distinct( &quot;status&quot; )<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(status) <span class="hljs-keyword">FROM</span> people<br></code></pre></td></tr></table></figure><p>分页查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.findOne() 或 db.people.find().limit(<span class="hljs-number">1</span>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people LIMIT <span class="hljs-number">1</span><br> <br>db.people.find().limit(<span class="hljs-number">5</span>).<span class="hljs-keyword">skip</span>(<span class="hljs-number">10</span>)<br> <br>相当于 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people LIMIT <span class="hljs-number">5</span> <span class="hljs-keyword">SKIP</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>查询计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.find( &#123; status: &quot;A&quot; &#125; ).explain()<br> <br>相当于 EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;<br></code></pre></td></tr></table></figure><p>修改记录/文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.updateMany(<br>   &#123; age: &#123; $gt: 25 &#125; &#125;,<br>   &#123; $set: &#123; status: &quot;C&quot; &#125; &#125;<br>);<br> <br>相当于 <span class="hljs-keyword">UPDATE</span> people <span class="hljs-keyword">SET</span> status <span class="hljs-operator">=</span> &quot;C&quot; <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span>;<br> <br>db.people.updateMany(<br>   &#123; status: &quot;A&quot; &#125; ,<br>   &#123; $inc: &#123; age: 3 &#125; &#125;<br>);<br> <br>相当于 <span class="hljs-keyword">UPDATE</span> people <span class="hljs-keyword">SET</span> age <span class="hljs-operator">=</span> age <span class="hljs-operator">+</span> <span class="hljs-number">3</span> <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot;;<br></code></pre></td></tr></table></figure><p>删除记录/文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.people.deleteMany( &#123; status: &quot;D&quot; &#125; );<br> <br>相当于 <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> people <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;D&quot;;<br> <br>db.people.deleteMany(&#123;&#125;);<br> <br>相当于 <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> people;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gradle使用本地jar包</title>
    <link href="/blog/2021/01/16/gradle%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0jar%E5%8C%85/"/>
    <url>/blog/2021/01/16/gradle%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0jar%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>有很多时候 我们需要用到自己的jar包 特殊原因 你明白的</p><p>1.在项目根目录(与src同级目录)创建lib文件夹，并将jar包拷贝进去。</p><p>2.在build.gradle文件中的dependencies中添加如下脚本： compile fileTree(dir: ‘lib’, include: [ ‘*.jar’])</p><p>3.运行gradle build即可将jar文件打到工程Jar包中。<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190815-103617@2x_1565836606994.png" alt="WX20190815-103617@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pdf 转 图片</title>
    <link href="/blog/2021/01/16/pdf%E8%BD%AC%E5%9B%BE%E7%89%87/"/>
    <url>/blog/2021/01/16/pdf%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>这里使用到的jar包 是 // <a href="https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox">https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox</a> compile group: ‘org.apache.pdfbox’, name: ‘fontbox’, version: ‘1.8.16’ // <a href="https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox">https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox</a> compile group: ‘org.apache.pdfbox’, name: ‘pdfbox’, version: ‘1.8.16’</p><p>pdf转单页图片 合并一张的工具库 前往<a href="https://bk.cuixiaoyan.xyz/archives/zhuantupian">aspose-words word转图片</a> 下载使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将pdf转成一张图片</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pdffile</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPDFBinary</span><span class="hljs-params">(String pdffile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//文件流</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(pdffile);<br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(pdffile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br> <br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br>PDDocument doc = PDDocument.load(inputStream);<br><span class="hljs-comment">//获取pdf文件 页数</span><br>List&lt;PDPage&gt; pages = doc.getDocumentCatalog().getAllPages();<br> <br>List&lt;BufferedImage&gt; imageList = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br>BufferedImage image = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pages.size(); i++) &#123;<br>PDPage page = (PDPage)pages.get(i); <span class="hljs-comment">// 获取第i页</span><br>image = page.convertToImage();<br>imageList.add(image);<br><span class="hljs-comment">//合并一张</span><br>image = MergeImage.mergeImage(<span class="hljs-keyword">false</span>, imageList);<br>&#125;<br> <br><span class="hljs-keyword">boolean</span> png = ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent +<span class="hljs-string">&quot;/&quot;</span>+ fileName + <span class="hljs-string">&quot;.png&quot;</span>));<br><span class="hljs-keyword">if</span>(png == <span class="hljs-keyword">false</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换失败&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>;<br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><p>pdf 每页转图片 放到文件夹内 转换成压缩包 也可以不放压缩包 随意 压缩包工具类 <a href="https://bk.cuixiaoyan.xyz/archives/yasuo">java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将pdf 转化为 图片分页 压缩包</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getPDFBinarys</span><span class="hljs-params">(String pdffile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//文件流</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(pdffile);<br>PDDocument doc = PDDocument.load(inputStream);<br> <br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(pdffile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br><span class="hljs-comment">//获取pdf文件 页数</span><br>List&lt;PDPage&gt; pages = doc.getDocumentCatalog().getAllPages();<br> <br>BufferedImage image = <span class="hljs-keyword">null</span>;<br> <br><span class="hljs-comment">//创建同名文件夹</span><br><span class="hljs-keyword">new</span> File(parent+<span class="hljs-string">&quot;/&quot;</span>+ fileName).mkdir();<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pages.size(); i++) &#123;<br>PDPage page = (PDPage) pages.get(i); <span class="hljs-comment">// 获取第i页</span><br>image = page.convertToImage();<br>ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent +<span class="hljs-string">&quot;/&quot;</span>+ fileName +<span class="hljs-string">&quot;/&quot;</span>+ <span class="hljs-string">&quot;第&quot;</span>+ i +<span class="hljs-string">&quot;页&quot;</span> + fileName + <span class="hljs-string">&quot;.png&quot;</span>));<br> <br>&#125;<br> <br><span class="hljs-comment">//压缩同名文件夹</span><br>    File f = <span class="hljs-keyword">new</span> File(parent  +<span class="hljs-string">&quot;/&quot;</span> + fileName );<br>            <span class="hljs-keyword">new</span> CompactAlgorithm(<span class="hljs-keyword">new</span> File( parent+ <span class="hljs-string">&quot;/&quot;</span>,f.getName()+<span class="hljs-string">&quot;.zip&quot;</span>)).zipFiles(f);<br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br> <br> <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>+pages.size()+<span class="hljs-string">&quot;页&quot;</span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aspose-words java word 转换 服务器乱码解决</title>
    <link href="/blog/2021/01/16/aspose-words-java-word%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
    <url>/blog/2021/01/16/aspose-words-java-word%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>在本机测试是好的 但是到服务器就乱码 想到pdf是一种为打印设计的文档格式，可能跟字体相关。而且转出来的pdf中文都是空心方框，不是单纯的乱码，很有可能是缺少字体渲染不出来造成的。 服务器上用fc-list命令查看字体，果然没有中文字体 接下来将本机Windows的字体上传到CentOS服务器上。 具体操作： 也可以直接使用我的字体 经测试没问题 有的系统版本的原因 也会导致乱码 链接: <a href="https://pan.baidu.com/s/1Fj6pqfNDi__sdBJthdFCFg">https://pan.baidu.com/s/1Fj6pqfNDi__sdBJthdFCFg</a> 提取码: k35v 将Windows上字体文件 C:\Windows\Fonts目录，复制到CentOS的/usr/share/fonts目录 重启服务器</p><p>如果你转换的文档中有 公式系列的话 那么还需要再导入一种公式字体 这里已经准备好啦 链接: <a href="https://pan.baidu.com/s/1c8WYZMcqVeRHc23vVe3xrQ">https://pan.baidu.com/s/1c8WYZMcqVeRHc23vVe3xrQ</a> 提取码: c329<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190809-100929@2x_1565316592563.png" alt="WX20190809-100929@2x">同样需要重启服务器</p><p><strong>已知问题 着重号无法转换 官网也为给出解决方案</strong><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6_1565316729182.jpg" alt="未命名文件"></p><h1 id="aspose-words-word转图片"><a href="#aspose-words-word转图片" class="headerlink" title="aspose-words word转图片"></a>aspose-words word转图片</h1><p>这里所用到的jar包 和这里所用的的一样 <a href="https://bk.cuixiaoyan.xyz/archives/wordpdf">jar包下载 和谐文件</a> 将word转换为单张图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-comment">// 将word 转化为图片一张</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">parseFileToBase64_PNG</span><span class="hljs-params">(String wordfile)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br><span class="hljs-comment">//文件流</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(wordfile);<br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(wordfile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br> <br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br>List&lt;BufferedImage&gt; bufferedImages = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br>BufferedImage image = <span class="hljs-keyword">null</span>;<br>bufferedImages = wordToImg(inputStream);<br>image = MergeImage.mergeImage(<span class="hljs-keyword">false</span>, bufferedImages);<br> <br><span class="hljs-keyword">boolean</span> png = ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent + <span class="hljs-string">&quot;/&quot;</span> + fileName + <span class="hljs-string">&quot;.png&quot;</span>));<span class="hljs-comment">// 写入流中</span><br> <br> <br><span class="hljs-keyword">if</span>(png == <span class="hljs-keyword">false</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换失败&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: word和txt文件转换图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;BufferedImage&gt; <span class="hljs-title">wordToImg</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">if</span> (!isWordLicense()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-keyword">try</span> &#123;<br> <br>Document doc = <span class="hljs-keyword">new</span> Document(inputStream);<br>ImageSaveOptions options = <span class="hljs-keyword">new</span> ImageSaveOptions(SaveFormat.PNG);<br>options.setPrettyFormat(<span class="hljs-keyword">true</span>);<br>options.setUseAntiAliasing(<span class="hljs-keyword">true</span>);<br>options.setUseHighQualityRendering(<span class="hljs-keyword">true</span>);<br><span class="hljs-keyword">int</span> pageCount = doc.getPageCount();<br> <br>List&lt;BufferedImage&gt; imageList = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pageCount; i++) &#123;<br>OutputStream output = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>options.setPageIndex(i);<br> <br>doc.save(output, options);<br>ImageInputStream imageInputStream = ImageIO.createImageInputStream(parse(output));<br>imageList.add(ImageIO.read(imageInputStream));<br>&#125;<br><span class="hljs-keyword">return</span> imageList;<br> <br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 验证aspose.word组件是否授权：无授权的文件有水印和试用标记</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWordLicense</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// InputStream inputStream = new</span><br><span class="hljs-comment">// FileInputStream(&quot;D:\\Workspaces\\TestFilters\\lib\\license.xml&quot;);</span><br><span class="hljs-comment">// 避免文件遗漏</span><br>String licensexml = <span class="hljs-string">&quot;&lt;License&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Data&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Products&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Total for Java&lt;/Product&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Words for Java&lt;/Product&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Products&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;EditionType&gt;Enterprise&lt;/EditionType&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SubscriptionExpiry&gt;20991231&lt;/SubscriptionExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;LicenseExpiry&gt;20991231&lt;/LicenseExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SerialNumber&gt;23dcc79f-44ec-4a23-be3a-03c1632404e9&lt;/SerialNumber&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/Data&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Signature&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Signature&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/License&gt;&quot;</span>;<br>InputStream inputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(licensexml.getBytes());<br>com.aspose.words.License license = <span class="hljs-keyword">new</span> com.aspose.words.License();<br>license.setLicense(inputStream);<br>result = <span class="hljs-keyword">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br> <br><span class="hljs-comment">// outputStream转inputStream</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteArrayInputStream <span class="hljs-title">parse</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>baos = (ByteArrayOutputStream) out;<br>ByteArrayInputStream swapStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br><span class="hljs-keyword">return</span> swapStream;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>新建一个工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br> <br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: transformation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 多张图片合成</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: cuixy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2019-07-26 17:10</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeImage</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并任数量的图片成一张图片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> isHorizontal</span><br><span class="hljs-comment">     *            true代表水平合并，fasle代表垂直合并</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> imgs</span><br><span class="hljs-comment">     *            待合并的图片数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title">mergeImage</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isHorizontal, List&lt;BufferedImage&gt; imgs)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 生成新图片</span><br>        BufferedImage destImage = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 计算新图片的长和高</span><br>        <span class="hljs-keyword">int</span> allw = <span class="hljs-number">0</span>, allh = <span class="hljs-number">0</span>, allwMax = <span class="hljs-number">0</span>, allhMax = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 获取总长、总宽、最长、最宽</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; imgs.size(); i++) &#123;<br>            BufferedImage img = imgs.get(i);<br>            allw += img.getWidth();<br> <br>            <span class="hljs-keyword">if</span> (imgs.size() != i + <span class="hljs-number">1</span>) &#123;<br>                allh += img.getHeight() + <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                allh += img.getHeight();<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (img.getWidth() &gt; allwMax) &#123;<br>                allwMax = img.getWidth();<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (img.getHeight() &gt; allhMax) &#123;<br>                allhMax = img.getHeight();<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-comment">// 创建新图片</span><br>        <span class="hljs-keyword">if</span> (isHorizontal) &#123;<br>            destImage = <span class="hljs-keyword">new</span> BufferedImage(allw, allhMax, BufferedImage.TYPE_INT_RGB);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            destImage = <span class="hljs-keyword">new</span> BufferedImage(allwMax, allh, BufferedImage.TYPE_INT_RGB);<br>        &#125;<br> <br>        <span class="hljs-comment">// 注释，分隔线从灰色变成纯黑</span><br>        <span class="hljs-comment">// Graphics2D g2 = (Graphics2D) destImage.getGraphics();</span><br>        <span class="hljs-comment">// g2.setBackground(Color.LIGHT_GRAY);</span><br>        <span class="hljs-comment">// g2.clearRect(0, 0, allw, allh);</span><br>        <span class="hljs-comment">// g2.setPaint(Color.RED);</span><br> <br>        <span class="hljs-comment">// 合并所有子图片到新图片</span><br>        <span class="hljs-keyword">int</span> wx = <span class="hljs-number">0</span>, wy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; imgs.size(); i++) &#123;<br>            BufferedImage img = imgs.get(i);<br>            <span class="hljs-keyword">int</span> w1 = img.getWidth();<br>            <span class="hljs-keyword">int</span> h1 = img.getHeight();<br>            <span class="hljs-comment">// 从图片中读取RGB</span><br>            <span class="hljs-keyword">int</span>[] ImageArrayOne = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[w1 * h1];<br>            ImageArrayOne = img.getRGB(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, w1, h1, ImageArrayOne, <span class="hljs-number">0</span>, w1); <span class="hljs-comment">// 逐行扫描图像中各个像素的RGB到数组中</span><br>            <span class="hljs-keyword">if</span> (isHorizontal) &#123; <span class="hljs-comment">// 水平方向合并</span><br>                destImage.setRGB(wx, <span class="hljs-number">0</span>, w1, h1, ImageArrayOne, <span class="hljs-number">0</span>, w1); <span class="hljs-comment">// 设置上半部分或左半部分的RGB</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 垂直方向合并</span><br>                destImage.setRGB(<span class="hljs-number">0</span>, wy, w1, h1, ImageArrayOne, <span class="hljs-number">0</span>, w1); <span class="hljs-comment">// 设置上半部分或左半部分的RGB</span><br>            &#125;<br> <br>            wx += w1;<br>            wy += h1 + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> destImage;<br>    &#125;<br> <br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><p>将word转换为单页 每页为一张图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * word 转每页pdf</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> wordfile</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">parseFileToBase64_PNG1</span><span class="hljs-params">(String wordfile)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br><span class="hljs-keyword">if</span> (!isWordLicense()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-comment">// 声明一个</span><br>InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(wordfile);<br> <br> <br> <br><span class="hljs-comment">//文件 获取文件名字</span><br>File file = <span class="hljs-keyword">new</span> File(wordfile);<br>String name = file.getName();<br><span class="hljs-comment">//截取不带后缀名的字段</span><br>String fileName = name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-comment">//文件上传路径</span><br>String parent = file.getParent();<br> <br><span class="hljs-comment">//创建同名文件夹</span><br><span class="hljs-keyword">new</span> File(parent+<span class="hljs-string">&quot;/&quot;</span>+ fileName).mkdir();<br> <br>List&lt;BufferedImage&gt; bufferedImages = wordToImg1(inputStream);<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bufferedImages.size(); i++)&#123;<br>ImageIO.write(bufferedImages.get(i), <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-keyword">new</span> File(parent +<span class="hljs-string">&quot;/&quot;</span>+ fileName +<span class="hljs-string">&quot;/&quot;</span>+ <span class="hljs-string">&quot;第&quot;</span>+ i +<span class="hljs-string">&quot;页&quot;</span> + fileName + <span class="hljs-string">&quot;.png&quot;</span>));<br>&#125;<br> <br> <br><br> <br><span class="hljs-comment">//关闭流</span><br>inputStream.close();<br> <br> <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="图片转换为base64-前台预览"><a href="#图片转换为base64-前台预览" class="headerlink" title="图片转换为base64 前台预览"></a>图片转换为base64 前台预览</h1><p>业务需求 word转换成在线预览 结合<a href="https://bk.cuixiaoyan.xyz/archives/zhuantupian">这里是word转图片</a> 也可以直接转换为在线预览</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">parseFileToBase64_PNG1</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-keyword">int</span> pageNum)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">// String png_base64 = &quot;&quot;;</span><br>List&lt;BufferedImage&gt; bufferedImages = <span class="hljs-keyword">new</span> ArrayList&lt;BufferedImage&gt;();<br>BufferedImage image = <span class="hljs-keyword">null</span>;<br>ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<span class="hljs-comment">// io流</span><br>bufferedImages = wordToImg1(inputStream, pageNum);<br>image = mergeImage(<span class="hljs-keyword">false</span>, bufferedImages);<br>ImageIO.write(image, <span class="hljs-string">&quot;png&quot;</span>, baos);<span class="hljs-comment">// 写入流中</span><br> <br><span class="hljs-keyword">byte</span>[] bytes = baos.toByteArray();<span class="hljs-comment">// 转换成字节</span><br>BASE64Encoder encoder = <span class="hljs-keyword">new</span> BASE64Encoder();<br>String png_base64 = encoder.encodeBuffer(bytes).trim();<span class="hljs-comment">// 转换成base64串</span><br>png_base64 = png_base64.replaceAll(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replaceAll(<span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">// 删除</span><br><br><span class="hljs-keyword">return</span> png_base64;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>aspose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aspose-words java word 转pdf</title>
    <link href="/blog/2021/01/15/aspose-words-java-word%E8%BD%ACpdf/"/>
    <url>/blog/2021/01/15/aspose-words-java-word%E8%BD%ACpdf/</url>
    
    <content type="html"><![CDATA[<p>和谐版jar包 加激活 去除水印 转换从此无限制 就算是在服务器上也不需要安装其他工具 目前最好 使用 方便快捷 jar包下载地址 链接: <a href="https://pan.baidu.com/s/1tlbueAQq5bxPNgncS7GgoA">https://pan.baidu.com/s/1tlbueAQq5bxPNgncS7GgoA</a> 提取码: p35p</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * word to pdf</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> inPath  word 全路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> outPath 生成的pdf 全路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> an</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">docPdf</span><span class="hljs-params">(String inPath, String outPath)</span>   </span>&#123;<br> <br><span class="hljs-keyword">if</span> (!isWordLicense()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br> <br><span class="hljs-keyword">try</span> &#123;<br>String path = outPath.substring(<span class="hljs-number">0</span>, outPath.lastIndexOf(File.separator));<br>File file = <span class="hljs-keyword">null</span>;<br>file = <span class="hljs-keyword">new</span> File(path);<br><span class="hljs-keyword">if</span> (!file.exists()) &#123;<span class="hljs-comment">//创建文件夹</span><br>file.mkdirs();<br>&#125;<br>file = <span class="hljs-keyword">new</span> File(outPath);<span class="hljs-comment">// 新建一个空白pdf文档</span><br>FileOutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>Document doc = <span class="hljs-keyword">new</span> Document(inPath); <span class="hljs-comment">// Address是将要被转化的word文档</span><br>doc.save(os, SaveFormat.PDF);<span class="hljs-comment">// 全面支持DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF,</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">// EPUB, XPS, SWF 相互转换</span><br><span class="hljs-keyword">return</span> outPath;<br>&#125;<br> <br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 验证aspose.word组件是否授权：无授权的文件有水印和试用标记</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWordLicense</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// InputStream inputStream = new</span><br><span class="hljs-comment">// FileInputStream(&quot;D:\\Workspaces\\TestFilters\\lib\\license.xml&quot;);</span><br><span class="hljs-comment">// 避免文件遗漏</span><br>String licensexml = <span class="hljs-string">&quot;&lt;License&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Data&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Products&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Total for Java&lt;/Product&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;Product&gt;Aspose.Words for Java&lt;/Product&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Products&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;EditionType&gt;Enterprise&lt;/EditionType&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SubscriptionExpiry&gt;20991231&lt;/SubscriptionExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;LicenseExpiry&gt;20991231&lt;/LicenseExpiry&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;SerialNumber&gt;23dcc79f-44ec-4a23-be3a-03c1632404e9&lt;/SerialNumber&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/Data&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;Signature&gt;\n&quot;</span><br>+ <span class="hljs-string">&quot;sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=\n&quot;</span><br>+ <span class="hljs-string">&quot;&lt;/Signature&gt;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/License&gt;&quot;</span>;<br>InputStream inputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(licensexml.getBytes());<br>com.aspose.words.License license = <span class="hljs-keyword">new</span> com.aspose.words.License();<br>license.setLicense(inputStream);<br>result = <span class="hljs-keyword">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br> <br><span class="hljs-comment">// outputStream转inputStream</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteArrayInputStream <span class="hljs-title">parse</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>baos = (ByteArrayOutputStream) out;<br>ByteArrayInputStream swapStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br><span class="hljs-keyword">return</span> swapStream;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>aspose</tag>
      
      <tag>word</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将数字金额转为大写中文金额</title>
    <link href="/blog/2021/01/13/%E5%B0%86%E6%95%B0%E5%AD%97%E9%87%91%E9%A2%9D%E8%BD%AC%E4%B8%BA%E5%A4%A7%E5%86%99%E4%B8%AD%E6%96%87%E9%87%91%E9%A2%9D/"/>
    <url>/blog/2021/01/13/%E5%B0%86%E6%95%B0%E5%AD%97%E9%87%91%E9%A2%9D%E8%BD%AC%E4%B8%BA%E5%A4%A7%E5%86%99%E4%B8%AD%E6%96%87%E9%87%91%E9%A2%9D/</url>
    
    <content type="html"><![CDATA[<p>输入数字金额参数，运行程序得到其对应的大写中文金额；例如：输入— 12.56，输出— 12.56:壹拾贰元伍角陆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Title</span>: ConvertUpMoney </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:  将数字金额转为大写汉字金额</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2019年6月18日 下午10:52:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertUpMoney</span> </span>&#123;<br><br><span class="hljs-comment">//大写数字</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] NUMBERS = &#123;<span class="hljs-string">&quot;零&quot;</span>,<span class="hljs-string">&quot;壹&quot;</span>,<span class="hljs-string">&quot;贰&quot;</span>,<span class="hljs-string">&quot;叁&quot;</span>,<span class="hljs-string">&quot;肆&quot;</span>,<span class="hljs-string">&quot;伍&quot;</span>,<span class="hljs-string">&quot;陆&quot;</span>,<span class="hljs-string">&quot;柒&quot;</span>,<span class="hljs-string">&quot;捌&quot;</span>,<span class="hljs-string">&quot;玖&quot;</span>&#125;;<br><span class="hljs-comment">// 整数部分的单位</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] IUNIT = &#123;<span class="hljs-string">&quot;元&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;万&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;亿&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;万&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>&#125;;<br>    <span class="hljs-comment">//小数部分的单位</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] DUNIT = &#123;<span class="hljs-string">&quot;角&quot;</span>,<span class="hljs-string">&quot;分&quot;</span>,<span class="hljs-string">&quot;厘&quot;</span>&#125;;<br><br><span class="hljs-comment">//转成中文的大写金额</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toChinese</span><span class="hljs-params">(String str)</span> </span>&#123;<br><span class="hljs-comment">//判断输入的金额字符串是否符合要求</span><br><span class="hljs-keyword">if</span> (StringUtils.isBlank(str) || !str.matches(<span class="hljs-string">&quot;(-)?[\\d]*(.)?[\\d]*&quot;</span>)) &#123;<br>System.out.println(<span class="hljs-string">&quot;抱歉，请输入数字！&quot;</span>);<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;0&quot;</span>.equals(str) || <span class="hljs-string">&quot;0.00&quot;</span>.equals(str) || <span class="hljs-string">&quot;0.0&quot;</span>.equals(str)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;零元&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//判断是否存在负号&quot;-&quot;</span><br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span>(str.startsWith(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>flag = <span class="hljs-keyword">true</span>;<br>str = str.replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br>str = str.replaceAll(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//去掉&quot;,&quot;</span><br>String integerStr;<span class="hljs-comment">//整数部分数字</span><br>String decimalStr;<span class="hljs-comment">//小数部分数字</span><br><br><br><span class="hljs-comment">//初始化：分离整数部分和小数部分</span><br><span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;.&quot;</span>)&gt;<span class="hljs-number">0</span>) &#123;<br>integerStr = str.substring(<span class="hljs-number">0</span>,str.indexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>decimalStr = str.substring(str.indexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;.&quot;</span>)==<span class="hljs-number">0</span>) &#123;<br>integerStr = <span class="hljs-string">&quot;&quot;</span>;<br>decimalStr = str.substring(<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>integerStr = str;<br>decimalStr = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//beyond超出计算能力，直接返回</span><br><span class="hljs-keyword">if</span>(integerStr.length()&gt;IUNIT.length) &#123;<br>System.out.println(str+<span class="hljs-string">&quot;：超出计算能力&quot;</span>);<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-keyword">int</span>[] integers = toIntArray(integerStr);<span class="hljs-comment">//整数部分数字</span><br><span class="hljs-comment">//判断整数部分是否存在输入012的情况</span><br><span class="hljs-keyword">if</span> (integers.length&gt;<span class="hljs-number">1</span> &amp;&amp; integers[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;抱歉，请输入数字！&quot;</span>);<br><span class="hljs-keyword">if</span> (flag) &#123;<br>str = <span class="hljs-string">&quot;-&quot;</span>+str;<br>&#125;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-keyword">boolean</span> isWan = isWan5(integerStr);<span class="hljs-comment">//设置万单位</span><br><span class="hljs-keyword">int</span>[] decimals = toIntArray(decimalStr);<span class="hljs-comment">//小数部分数字</span><br>String result = getChineseInteger(integers,isWan)+getChineseDecimal(decimals);<span class="hljs-comment">//返回最终的大写金额</span><br><span class="hljs-keyword">if</span>(flag)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;负&quot;</span>+result;<span class="hljs-comment">//如果是负数，加上&quot;负&quot;</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//将字符串转为int数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] toIntArray(String number) &#123;<br><span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[number.length()];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;number.length();i++) &#123;<br>array[i] = Integer.parseInt(number.substring(i,i+<span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-comment">//将整数部分转为大写的金额</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getChineseInteger</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] integers,<span class="hljs-keyword">boolean</span> isWan)</span> </span>&#123;<br>StringBuffer chineseInteger = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">int</span> length = integers.length;<br><span class="hljs-keyword">if</span> (length == <span class="hljs-number">1</span> &amp;&amp; integers[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++) &#123;<br>String key = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(integers[i] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">13</span>)<span class="hljs-comment">//万（亿）</span><br>key = IUNIT[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">9</span>) &#123;<span class="hljs-comment">//亿</span><br>key = IUNIT[<span class="hljs-number">8</span>];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">5</span> &amp;&amp; isWan) &#123;<span class="hljs-comment">//万</span><br>key = IUNIT[<span class="hljs-number">4</span>];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((length - i) == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//元</span><br>key = IUNIT[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">if</span>((length - i)&gt;<span class="hljs-number">1</span> &amp;&amp; integers[i+<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>) &#123;<br>key += NUMBERS[<span class="hljs-number">0</span>];<br>&#125;<br>&#125;<br>chineseInteger.append(integers[i]==<span class="hljs-number">0</span>?key:(NUMBERS[integers[i]]+IUNIT[length - i -<span class="hljs-number">1</span>]));<br>&#125;<br><span class="hljs-keyword">return</span> chineseInteger.toString();<br>&#125;<br><span class="hljs-comment">//将小数部分转为大写的金额</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getChineseDecimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] decimals)</span> </span>&#123;<br>StringBuffer chineseDecimal = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;decimals.length;i++) &#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>chineseDecimal.append(decimals[i]==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;&quot;</span>:(NUMBERS[decimals[i]]+DUNIT[i]));<br>&#125;<br><span class="hljs-keyword">return</span> chineseDecimal.toString();<br>&#125;<br><span class="hljs-comment">//判断当前整数部分是否已经是达到【万】</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWan5</span><span class="hljs-params">(String integerStr)</span> </span>&#123;<br><span class="hljs-keyword">int</span> length = integerStr.length();<br><span class="hljs-keyword">if</span>(length &gt; <span class="hljs-number">4</span>) &#123;<br>String subInteger = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(length &gt; <span class="hljs-number">8</span>) &#123;<br>subInteger = integerStr.substring(length- <span class="hljs-number">8</span>,length -<span class="hljs-number">4</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>subInteger = integerStr.substring(<span class="hljs-number">0</span>,length - <span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-keyword">return</span> Integer.parseInt(subInteger) &gt; <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String number = <span class="hljs-string">&quot;12.56&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;1234567890563886.123&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;1600&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;156,0&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;-156,0&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;0.12&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;0.0&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;01.12&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;0125&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;-0125&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>number = <span class="hljs-string">&quot;sdw5655&quot;</span>;<br>System.out.println(number+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(number));<br><br>System.out.println(<span class="hljs-keyword">null</span>+<span class="hljs-string">&quot;: &quot;</span>+ConvertUpMoney.toChinese(<span class="hljs-keyword">null</span>));<br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类3</title>
    <link href="/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB3/"/>
    <url>/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB3/</url>
    
    <content type="html"><![CDATA[<p>在Java中，工具类定义了一组公共方法，这篇文章将介绍Java中使用最频繁及最通用的Java工具类。以下工具类、方法按使用流行度排名，参考数据来源于Github上随机选取的5万个开源项目源码。</p><p>一. org.apache.commons.io.IOUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">closeQuietly：关闭一个IO流、socket、或者selector且不抛出异常，通常放在<span class="hljs-keyword">finally</span>块<br>toString：转换IO流、 Uri、 <span class="hljs-keyword">byte</span>[]为String<br>copy：IO流数据复制，从输入流写到输出流中，最大支持2GB<br>toByteArray：从输入流、URI获取<span class="hljs-keyword">byte</span>[]<br>write：把字节. 字符等写入输出流<br>toInputStream：把字符转换为输入流<br>readLines：从输入流中读取多行数据，返回List&lt;String&gt;<br>copyLarge：同copy，支持2GB以上数据的复制<br>lineIterator：从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败<br></code></pre></td></tr></table></figure><p>二. org.apache.commons.io.FileUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">deleteDirectory：删除文件夹<br>readFileToString：以字符形式读取文件内容<br>deleteQueitly：删除文件或文件夹且不会抛出异常<br>copyFile：复制文件<br>writeStringToFile：把字符写到目标文件，如果文件不存在，则创建<br>forceMkdir：强制创建文件夹，如果该文件夹父级目录不存在，则创建父级<br>write：把字符写到指定文件中<br>listFiles：列举某个目录下的文件(根据过滤器)<br>copyDirectory：复制文件夹<br>forceDelete：强制删除文件<br></code></pre></td></tr></table></figure><p>三. org.apache.commons.lang.StringUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">isBlank：字符串是否为空 (trim后判断)<br>isEmpty：字符串是否为空 (不trim并判断)<br>equals：字符串是否相等<br>join：合并数组为单一字符串，可传分隔符<br>split：分割字符串<br>EMPTY：返回空字符串<br>trimToNull：trim后为空字符串则转换为<span class="hljs-keyword">null</span><br>replace：替换字符串<br></code></pre></td></tr></table></figure><p>四. org.apache.http.util.EntityUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">toString：把Entity转换为字符串<br>consume：确保Entity中的内容全部被消费。可以看到源码里又一次消费了Entity的内容，假如用户没有消费，那调用Entity时候将会把它消费掉<br>toByteArray：把Entity转换为字节流<br>consumeQuietly：和consume一样，但不抛异常<br>getContentCharset：获取内容的编码<br></code></pre></td></tr></table></figure><p>五. org.apache.commons.lang3.StringUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">isBlank：字符串是否为空 (trim后判断)<br>isEmpty：字符串是否为空 (不trim并判断)<br>equals：字符串是否相等<br>join：合并数组为单一字符串，可传分隔符<br>split：分割字符串<br>EMPTY：返回空字符串<br>replace：替换字符串<br>capitalize：首字符大写<br></code></pre></td></tr></table></figure><p>六. org.apache.commons.io.FilenameUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">getExtension：返回文件后缀名<br>getBaseName：返回文件名，不包含后缀名<br>getName：返回文件全名<br>concat：按命令行风格组合文件路径(详见方法注释)<br>removeExtension：删除后缀名<br>normalize：使路径正常化<br>wildcardMatch：匹配通配符<br>seperatorToUnix：路径分隔符改成unix系统格式的，即/<br>getFullPath：获取文件路径，不包括文件名<br>isExtension：检查文件后缀名是不是传入参数(List&lt;String&gt;)中的一个<br></code></pre></td></tr></table></figure><p>七. org.springframework.util.StringUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">hasText：检查字符串中是否包含文本<br>hasLength：检测字符串是否长度大于<span class="hljs-number">0</span><br>isEmpty：检测字符串是否为空（若传入为对象，则判断对象是否为<span class="hljs-keyword">null</span>）<br>commaDelimitedStringToArray：逗号分隔的String转换为数组<br>collectionToDelimitedString：把集合转为CSV格式字符串<br>replace 替换字符串<br><span class="hljs-number">7.</span> delimitedListToStringArray：相当于split<br>uncapitalize：首字母小写<br>collectionToDelimitedCommaString：把集合转为CSV格式字符串<br>tokenizeToStringArray：和split基本一样，但能自动去掉空白的单词<br></code></pre></td></tr></table></figure><p>八. org.apache.commons.lang.ArrayUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">contains：是否包含某字符串<br>addAll：添加整个数组<br>clone：克隆一个数组<br>isEmpty：是否空数组<br>add：向数组添加元素<br>subarray：截取数组<br>indexOf：查找某个元素的下标<br>isEquals：比较数组是否相等<br>toObject：基础类型数据数组转换为对应的Object数组<br></code></pre></td></tr></table></figure><p>九. org.apache.commons.lang.StringEscapeUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">参考十五：org.apache.commons.lang3.StringEscapeUtils<br></code></pre></td></tr></table></figure><p>十. org.apache.http.client.utils.URLEncodedUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">format：格式化参数，返回一个HTTP POST或者HTTP PUT可用application/x-www-form-urlencoded字符串<br>parse：把String或者URI等转换为List&lt;NameValuePair&gt;<br></code></pre></td></tr></table></figure><p>十一. org.apache.commons.codec.digest.DigestUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">md5Hex：MD5加密，返回<span class="hljs-number">32</span>位字符串<br>sha1Hex：SHA-<span class="hljs-number">1</span>加密<br>sha256Hex：SHA-<span class="hljs-number">256</span>加密<br>sha512Hex：SHA-<span class="hljs-number">512</span>加密<br>md5：MD5加密，返回<span class="hljs-number">16</span>位字符串<br></code></pre></td></tr></table></figure><p>十二. org.apache.commons.collections.CollectionUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">isEmpty：是否为空<br>select：根据条件筛选集合元素<br>transform：根据指定方法处理集合元素，类似List的map()<br>filter：过滤元素，雷瑟List的filter()<br>find：基本和select一样<br>collect：和transform 差不多一样，但是返回新数组<br>forAllDo：调用每个元素的指定方法<br>isEqualCollection：判断两个集合是否一致<br></code></pre></td></tr></table></figure><p>十三. org.apache.commons.lang3.ArrayUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">contains：是否包含某个字符串<br>addAll：添加整个数组<br>clone：克隆一个数组<br>isEmpty：是否空数组<br>add：向数组添加元素<br>subarray：截取数组<br>indexOf：查找某个元素的下标<br>isEquals：比较数组是否相等<br>toObject：基础类型数据数组转换为对应的Object数组<br></code></pre></td></tr></table></figure><p>十四. org.apache.commons.beanutils.PropertyUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">getProperty：获取对象属性值<br>setProperty：设置对象属性值<br>getPropertyDiscriptor：获取属性描述器<br>isReadable：检查属性是否可访问<br>copyProperties：复制属性值，从一个对象到另一个对象<br>getPropertyDiscriptors：获取所有属性描述器<br>isWriteable：检查属性是否可写<br>getPropertyType：获取对象属性类型<br></code></pre></td></tr></table></figure><p>十五. org.apache.commons.lang3.StringEscapeUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">unescapeHtml4：转义html<br>escapeHtml4：反转义html<br>escapeXml：转义xml<br>unescapeXml：反转义xml<br>escapeJava：转义unicode编码<br>escapeEcmaScript：转义EcmaScript字符<br>unescapeJava：反转义unicode编码<br>escapeJson：转义json字符<br>escapeXml10：转义Xml10<br>这个现在已经废弃了，建议使用commons-text包里面的方法。<br></code></pre></td></tr></table></figure><p>十六. org.apache.commons.beanutils.BeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">copyPeoperties：复制属性值，从一个对象到另一个对象<br>getProperty：获取对象属性值<br>setProperty：设置对象属性值<br>populate：根据Map给属性复制<br>copyPeoperty：复制单个值，从一个对象到另一个对象<br>cloneBean：克隆bean实例<br></code></pre></td></tr></table></figure><p>现在你只要了解了以上16种最流行的工具类方法，你就不必要再自己写工具类了，不必重复造轮子。大部分工具类方法通过其名字就能明白其用途，如果不清楚的，可以看下别人是怎么用的，或者去网上查询其用法。</p><p>另外，工具类，根据阿里开发手册，包名如果要使用util不能带s，工具类命名为 XxxUtils</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类2</title>
    <link href="/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB2/"/>
    <url>/blog/2021/01/13/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB2/</url>
    
    <content type="html"><![CDATA[<p>一、当相同元素为String时 方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * List去重</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title">removeDuplicate</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>    LinkedHashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> LinkedHashSet&lt;String&gt;(list.size());<br>    set.addAll(list);<br>    list.clear();<br>    list.addAll(set);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list= list.stream().distinct().collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p>二、当相同元素为对象时 方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注意Comparator.comparing要根据参数的类型进行选择</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;GroupVO&gt; <span class="hljs-title">removeDuplicateGroupVO</span><span class="hljs-params">(List&lt;GroupVO&gt; groupVOS)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> groupVOS.stream().collect(<br>            Collectors.collectingAndThen(<br>                    Collectors.toCollection(<br>                            () -&gt; <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(GroupVO::getId))<br>                    ), ArrayList::<span class="hljs-keyword">new</span><br>            )<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Person&gt; <span class="hljs-title">removeDupliById</span><span class="hljs-params">(List&lt;Person&gt; persons)</span> </span>&#123;<br>      Set&lt;Person&gt; personSet = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;((o1, o2) -&gt; o1.getId().compareTo(o2.getId()));<br>      personSet.addAll(persons);<br> <br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(personSet);<br>  &#125;<br></code></pre></td></tr></table></figure><p>方法三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Predicate&lt;T&gt; <span class="hljs-title">distinctByKey</span><span class="hljs-params">(Function&lt;? <span class="hljs-keyword">super</span> T, Object&gt; keyExtractor)</span> </span>&#123;<br>      Map&lt;Object, Boolean&gt; map = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br>      <span class="hljs-keyword">return</span> t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="hljs-keyword">null</span>;<br>  &#125;<br> <br><span class="hljs-comment">// remove duplicate</span><br>persons.stream().filter(distinctByKey(p -&gt; p.getId())).forEach(p -&gt; System.out.println(p));<br></code></pre></td></tr></table></figure><p>方法一：简单粗暴，直接使用copy()，如果目标存在，先使用delete()删除，再复制；</p><p>方法二：使用输入输出流。（代码注释部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg2;<br> <br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br><span class="hljs-comment">/******************</span><br><span class="hljs-comment"> * 文件的复制</span><br><span class="hljs-comment"> *******************/</span><br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2_3</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入指定文件夹路径：&quot;</span>);<br>        String oldpath = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入目标文件夹路径：&quot;</span>);<br>        String newpath = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入要复制的文件名：&quot;</span>);<br>        String filename = sc.next();<br>        copy(filename, oldpath, newpath);<br>        System.out.println(<span class="hljs-string">&quot;复制完成！&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(String filename, String oldpath, String newpath)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        File oldpaths = <span class="hljs-keyword">new</span> File(oldpath + <span class="hljs-string">&quot;/&quot;</span> + filename);<br>        File newpaths = <span class="hljs-keyword">new</span> File(newpath + <span class="hljs-string">&quot;/&quot;</span> + filename);<br>        <span class="hljs-keyword">if</span> (!newpaths.exists()) &#123;<br>            Files.copy(oldpaths.toPath(), newpaths.toPath());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            newpaths.delete();<br>            Files.copy(oldpaths.toPath(), newpaths.toPath());<br>        &#125;<br> <br>        <span class="hljs-comment">// String newfile = &quot;&quot;;</span><br>        <span class="hljs-comment">// newfile += newpaths;</span><br>        <span class="hljs-comment">// FileInputStream in = new FileInputStream(oldpaths);</span><br>        <span class="hljs-comment">// File file = new File(newfile);</span><br>        <span class="hljs-comment">// if (!file.exists()) &#123;</span><br>        <span class="hljs-comment">// file.createNewFile();</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// FileOutputStream out = new FileOutputStream(newpaths);</span><br>        <span class="hljs-comment">// byte[] buffer = new byte[1024];</span><br>        <span class="hljs-comment">// int c;</span><br>        <span class="hljs-comment">// while ((c = in.read(buffer)) != -1) &#123;</span><br>        <span class="hljs-comment">// for (int i = 0; i &lt; c; i++) &#123;</span><br>        <span class="hljs-comment">// out.write(buffer[i]);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// in.close();</span><br>        <span class="hljs-comment">// out.close();</span><br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩"><a href="#java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩" class="headerlink" title="java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩"></a>java实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: transformation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: cuixy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2019-07-26 14:30</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipOutputStream;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 压缩算法类</span><br><span class="hljs-comment"> * 实现文件压缩，文件夹压缩，以及文件和文件夹的混合压缩</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ljheee</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompactAlgorithm</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 完成的结果文件--输出的压缩文件</span><br><span class="hljs-comment">     */</span><br>    File targetFile;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CompactAlgorithm</span><span class="hljs-params">()</span> </span>&#123;&#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CompactAlgorithm</span><span class="hljs-params">(File target)</span> </span>&#123;<br>        targetFile = target;<br>        <span class="hljs-keyword">if</span> (targetFile.exists())<br>            targetFile.delete();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcfile</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFiles</span><span class="hljs-params">(File srcfile)</span> </span>&#123;<br> <br>        ZipOutputStream out = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            out = <span class="hljs-keyword">new</span> ZipOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(targetFile));<br> <br>            <span class="hljs-keyword">if</span>(srcfile.isFile())&#123;<br>                zipFile(srcfile, out, <span class="hljs-string">&quot;&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                File[] list = srcfile.listFiles();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>                    compress(list[i], out, <span class="hljs-string">&quot;&quot;</span>);<br>                &#125;<br>            &#125;<br> <br>            System.out.println(<span class="hljs-string">&quot;压缩完毕&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>)<br>                    out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩文件夹里的文件</span><br><span class="hljs-comment">     * 起初不知道是文件还是文件夹--- 统一调用该方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> out</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basedir</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compress</span><span class="hljs-params">(File file, ZipOutputStream out, String basedir)</span> </span>&#123;<br>        <span class="hljs-comment">/* 判断是目录还是文件 */</span><br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-keyword">this</span>.zipDirectory(file, out, basedir);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.zipFile(file, out, basedir);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩单个文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcfile</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFile</span><span class="hljs-params">(File srcfile, ZipOutputStream out, String basedir)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!srcfile.exists())<br>            <span class="hljs-keyword">return</span>;<br> <br>        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        FileInputStream in = <span class="hljs-keyword">null</span>;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> len;<br>            in = <span class="hljs-keyword">new</span> FileInputStream(srcfile);<br>            out.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(basedir + srcfile.getName()));<br> <br>            <span class="hljs-keyword">while</span> ((len = in.read(buf)) &gt; <span class="hljs-number">0</span>) &#123;<br>                out.write(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>)<br>                    out.closeEntry();<br>                <span class="hljs-keyword">if</span> (in != <span class="hljs-keyword">null</span>)<br>                    in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压缩文件夹</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dir</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> out</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basedir</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipDirectory</span><span class="hljs-params">(File dir, ZipOutputStream out, String basedir)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!dir.exists())<br>            <span class="hljs-keyword">return</span>;<br> <br>        File[] files = dir.listFiles();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>            <span class="hljs-comment">/* 递归 */</span><br>            compress(files[i], out, basedir + dir.getName() + <span class="hljs-string">&quot;/&quot;</span>);<br>        &#125;<br>    &#125;<br> <br> <br> <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//压缩测试</span><br>File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/Users/cuixiaoyan/Downloads/浏览器下载&quot;</span>);<br><span class="hljs-keyword">new</span> CompactAlgorithm(<span class="hljs-keyword">new</span> File( <span class="hljs-string">&quot;/Users/cuixiaoyan/Downloads/&quot;</span>,f.getName()+<span class="hljs-string">&quot;.zip&quot;</span>)).zipFiles(f);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中实现List自定义排序</title>
    <link href="/blog/2021/01/11/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0List%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <url>/blog/2021/01/11/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0List%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whty.entity;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.whty.test;<br> <br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">import</span> com.whty.entity.User;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-number">20</span>));<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;spark&quot;</span>, <span class="hljs-number">19</span>));<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;hive&quot;</span>, <span class="hljs-number">21</span>));<br><br><span class="hljs-keyword">for</span>(User user :list) &#123;<br>System.out.println(<span class="hljs-string">&quot;排序前：&quot;</span> + user.toString());<br>&#125;<br><span class="hljs-comment">//实现排序</span><br>Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;User&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(User u1, User u2)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(u1.getAge() &gt; u2.getAge()) &#123;<br><span class="hljs-comment">//return -1:即为正序排序</span><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (u1.getAge() == u2.getAge()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//return 1: 即为倒序排序</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;);<br><br><span class="hljs-keyword">for</span>(User user :list) &#123;<br>System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span> + user.toString());<br>&#125;<br>&#125;<br>&#125;<br> <br> <br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">排序前：User [id=<span class="hljs-number">1</span>, name=java, age=<span class="hljs-number">20</span>]<br>排序前：User [id=<span class="hljs-number">2</span>, name=spark, age=<span class="hljs-number">19</span>]<br>排序前：User [id=<span class="hljs-number">3</span>, name=hive, age=<span class="hljs-number">21</span>]<br>排序后：User [id=<span class="hljs-number">3</span>, name=hive, age=<span class="hljs-number">21</span>]<br>排序后：User [id=<span class="hljs-number">1</span>, name=java, age=<span class="hljs-number">20</span>]<br>排序后：User [id=<span class="hljs-number">2</span>, name=spark, age=<span class="hljs-number">19</span>]<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类</title>
    <link href="/blog/2021/01/11/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/blog/2021/01/11/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>java中，StringUtils类中的一些常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isBlank</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否为空或长度为0或由空白符(whitespace)构成</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isBlank</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;\t \n \f \r&quot;</span>) = <span class="hljs-keyword">true</span> <span class="hljs-comment">//对于制表符、换行符、换页符和回车符StringUtils.isBlank()均识为空白符</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;\b&quot;</span>) = <span class="hljs-keyword">false</span> <span class="hljs-comment">//&quot;\b&quot;为单词边界符</span><br>StringUtils.isBlank(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isBlank(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">false</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isNotBlank</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否不为空且长度不为0且不由空白符(whitespace)构成，等于!isBlank(String str)</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isNotBlank</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;\t \n \f \r&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;\b&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotBlank(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">true</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否为空，为空的标准是str==null或str.length()==0</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isEmpty</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">true</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span> <span class="hljs-comment">//注意在StringUtils中空格作非空处理</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isEmpty(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">false</span><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isNotEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//判断某字符串是否非空，等于!isEmpty(String str)</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">isNotEmpty</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">false</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">false</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot;bob&quot;</span>) = <span class="hljs-keyword">true</span><br>StringUtils.isNotEmpty(<span class="hljs-string">&quot; bob &quot;</span>) = <span class="hljs-keyword">true</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">trim</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的控制符(control characters, char &lt;= 32),如果输入为null则返回null</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">trim</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.trim(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.trim(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">trimToNull</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的控制符(control characters, char &lt;= 32),如果变为null或&quot;&quot;，则返回null</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">trimToNull</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss&quot;</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.trimToNull(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">trimToEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的控制符(control characters, char &lt;= 32),如果变为null或&quot;&quot;，则返回&quot;&quot;</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">trimToEmpty</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.trimToEmpty(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">strip</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的空白符(whitespace)，如果输入为null则返回null(注意和trim()的区别)：</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">strip</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.strip(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;\b&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss \b&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.strip(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">stripToNull</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的空白符(whitespace)，如果变为null或&quot;&quot;，则返回null(注意和trimToNull()的区别)：</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">stripToNull</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-keyword">null</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-keyword">null</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;\b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss \b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br> <br><span class="hljs-function">String <span class="hljs-title">stripToEmpty</span><span class="hljs-params">(String str)</span></span><br><span class="hljs-function"><span class="hljs-comment">//去掉字符串两端的空白符(whitespace)，如果变为null或&quot;&quot;，则返回&quot;&quot;(注意和trimToEmpty()的区别)：</span></span><br><span class="hljs-function">StringUtils.<span class="hljs-title">stripToNull</span><span class="hljs-params">(<span class="hljs-keyword">null</span>)</span> </span>= <span class="hljs-string">&quot;&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;&quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; &quot;</span>) = <span class="hljs-string">&quot;&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \b \t \n \f \r &quot;</span>) = <span class="hljs-string">&quot;\b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; \n\tss \b&quot;</span>) = <span class="hljs-string">&quot;ss \b&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; d d dd &quot;</span>) = <span class="hljs-string">&quot;d d dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot;dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br>StringUtils.stripToNull(<span class="hljs-string">&quot; dd &quot;</span>) = <span class="hljs-string">&quot;dd&quot;</span><br> <br></code></pre></td></tr></table></figure><p>java中我们会常用一些判断如IP、电子邮箱、电话号码的是不是合法，那么我们怎么来判断呢，答案就是利用正则表达式来判断了，废话不多说，下面就是上代码。</p><p>1:判断是否是正确的IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 用正则表达式进行判断</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isIPAddressByRegex</span><span class="hljs-params">(String str)</span> </span>&#123;<br>            String regex = <span class="hljs-string">&quot;\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;&quot;</span>;<br>            <span class="hljs-comment">// 判断ip地址是否与正则表达式匹配</span><br>            <span class="hljs-keyword">if</span> (str.matches(regex)) &#123;<br>                String[] arr = str.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                    <span class="hljs-keyword">int</span> temp = Integer.parseInt(arr[i]);<br>                    <span class="hljs-comment">//如果某个数字不是0到255之间的数 就返回false</span><br>                    <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || temp &gt; <span class="hljs-number">255</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>2:判断是否是正确的邮箱地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*正则表达式验证邮箱</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (email == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(email)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            String regex = <span class="hljs-string">&quot;\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*&quot;</span>;<br>           <span class="hljs-keyword">return</span> email.matches(regex);<br>  &#125;<br></code></pre></td></tr></table></figure><p>3:判断是否是手机号码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*正则表达式验证手机</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">orPhoneNumber</span><span class="hljs-params">(String phoneNumber)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (phoneNumber == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(phoneNumber))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>           String regex = <span class="hljs-string">&quot;^1[3|4|5|8][0-9]\\d&#123;8&#125;$&quot;</span>;<br>           <span class="hljs-keyword">return</span> phoneNumber.matches(regex);<br>    &#125;<br></code></pre></td></tr></table></figure><p>代码如下 收藏备用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工具类，实现阴阳历互转</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> luohao</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LunarCalendar</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持转换的最小农历年份</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_YEAR = <span class="hljs-number">1900</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持转换的最大农历年份</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_YEAR = <span class="hljs-number">2099</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公历每月前的天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] DAYS_BEFORE_MONTH = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">59</span>, <span class="hljs-number">90</span>, <span class="hljs-number">120</span>, <span class="hljs-number">151</span>, <span class="hljs-number">181</span>, <span class="hljs-number">212</span>, <span class="hljs-number">243</span>, <span class="hljs-number">273</span>, <span class="hljs-number">304</span>, <span class="hljs-number">334</span>, <span class="hljs-number">365</span>&#125;;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来表示1900年到2099年间农历年份的相关信息，共24位bit的16进制表示，其中：</span><br><span class="hljs-comment">     * 1. 前4位表示该年闰哪个月；</span><br><span class="hljs-comment">     * 2. 5-17位表示农历年份13个月的大小月分布，0表示小，1表示大；</span><br><span class="hljs-comment">     * 3. 最后7位表示农历年首（正月初一）对应的公历日期。</span><br><span class="hljs-comment">     * 以2014年的数据0x955ABF为例说明：</span><br><span class="hljs-comment">     *                  1001 0101 0101 1010 1011 1111</span><br><span class="hljs-comment">     *                闰九月                                  农历正月初一对应公历1月31号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] LUNAR_INFO = &#123;<br>            <span class="hljs-comment">/*1900*/</span><br>            <span class="hljs-number">0x84B6BF</span>,<br>            <span class="hljs-comment">/*1901-1910*/</span><br>            <span class="hljs-number">0x04AE53</span>, <span class="hljs-number">0x0A5748</span>, <span class="hljs-number">0x5526BD</span>, <span class="hljs-number">0x0D2650</span>, <span class="hljs-number">0x0D9544</span>, <span class="hljs-number">0x46AAB9</span>, <span class="hljs-number">0x056A4D</span>, <span class="hljs-number">0x09AD42</span>, <span class="hljs-number">0x24AEB6</span>, <span class="hljs-number">0x04AE4A</span>,<br>            <span class="hljs-comment">/*1911-1920*/</span><br>            <span class="hljs-number">0x6A4DBE</span>, <span class="hljs-number">0x0A4D52</span>, <span class="hljs-number">0x0D2546</span>, <span class="hljs-number">0x5D52BA</span>, <span class="hljs-number">0x0B544E</span>, <span class="hljs-number">0x0D6A43</span>, <span class="hljs-number">0x296D37</span>, <span class="hljs-number">0x095B4B</span>, <span class="hljs-number">0x749BC1</span>, <span class="hljs-number">0x049754</span>,<br>            <span class="hljs-comment">/*1921-1930*/</span><br>            <span class="hljs-number">0x0A4B48</span>, <span class="hljs-number">0x5B25BC</span>, <span class="hljs-number">0x06A550</span>, <span class="hljs-number">0x06D445</span>, <span class="hljs-number">0x4ADAB8</span>, <span class="hljs-number">0x02B64D</span>, <span class="hljs-number">0x095742</span>, <span class="hljs-number">0x2497B7</span>, <span class="hljs-number">0x04974A</span>, <span class="hljs-number">0x664B3E</span>,<br>            <span class="hljs-comment">/*1931-1940*/</span><br>            <span class="hljs-number">0x0D4A51</span>, <span class="hljs-number">0x0EA546</span>, <span class="hljs-number">0x56D4BA</span>, <span class="hljs-number">0x05AD4E</span>, <span class="hljs-number">0x02B644</span>, <span class="hljs-number">0x393738</span>, <span class="hljs-number">0x092E4B</span>, <span class="hljs-number">0x7C96BF</span>, <span class="hljs-number">0x0C9553</span>, <span class="hljs-number">0x0D4A48</span>,<br>            <span class="hljs-comment">/*1941-1950*/</span><br>            <span class="hljs-number">0x6DA53B</span>, <span class="hljs-number">0x0B554F</span>, <span class="hljs-number">0x056A45</span>, <span class="hljs-number">0x4AADB9</span>, <span class="hljs-number">0x025D4D</span>, <span class="hljs-number">0x092D42</span>, <span class="hljs-number">0x2C95B6</span>, <span class="hljs-number">0x0A954A</span>, <span class="hljs-number">0x7B4ABD</span>, <span class="hljs-number">0x06CA51</span>,<br>            <span class="hljs-comment">/*1951-1960*/</span><br>            <span class="hljs-number">0x0B5546</span>, <span class="hljs-number">0x555ABB</span>, <span class="hljs-number">0x04DA4E</span>, <span class="hljs-number">0x0A5B43</span>, <span class="hljs-number">0x352BB8</span>, <span class="hljs-number">0x052B4C</span>, <span class="hljs-number">0x8A953F</span>, <span class="hljs-number">0x0E9552</span>, <span class="hljs-number">0x06AA48</span>, <span class="hljs-number">0x6AD53C</span>,<br>            <span class="hljs-comment">/*1961-1970*/</span><br>            <span class="hljs-number">0x0AB54F</span>, <span class="hljs-number">0x04B645</span>, <span class="hljs-number">0x4A5739</span>, <span class="hljs-number">0x0A574D</span>, <span class="hljs-number">0x052642</span>, <span class="hljs-number">0x3E9335</span>, <span class="hljs-number">0x0D9549</span>, <span class="hljs-number">0x75AABE</span>, <span class="hljs-number">0x056A51</span>, <span class="hljs-number">0x096D46</span>,<br>            <span class="hljs-comment">/*1971-1980*/</span><br>            <span class="hljs-number">0x54AEBB</span>, <span class="hljs-number">0x04AD4F</span>, <span class="hljs-number">0x0A4D43</span>, <span class="hljs-number">0x4D26B7</span>, <span class="hljs-number">0x0D254B</span>, <span class="hljs-number">0x8D52BF</span>, <span class="hljs-number">0x0B5452</span>, <span class="hljs-number">0x0B6A47</span>, <span class="hljs-number">0x696D3C</span>, <span class="hljs-number">0x095B50</span>,<br>            <span class="hljs-comment">/*1981-1990*/</span><br>            <span class="hljs-number">0x049B45</span>, <span class="hljs-number">0x4A4BB9</span>, <span class="hljs-number">0x0A4B4D</span>, <span class="hljs-number">0xAB25C2</span>, <span class="hljs-number">0x06A554</span>, <span class="hljs-number">0x06D449</span>, <span class="hljs-number">0x6ADA3D</span>, <span class="hljs-number">0x0AB651</span>, <span class="hljs-number">0x095746</span>, <span class="hljs-number">0x5497BB</span>,<br>            <span class="hljs-comment">/*1991-2000*/</span><br>            <span class="hljs-number">0x04974F</span>, <span class="hljs-number">0x064B44</span>, <span class="hljs-number">0x36A537</span>, <span class="hljs-number">0x0EA54A</span>, <span class="hljs-number">0x86B2BF</span>, <span class="hljs-number">0x05AC53</span>, <span class="hljs-number">0x0AB647</span>, <span class="hljs-number">0x5936BC</span>, <span class="hljs-number">0x092E50</span>, <span class="hljs-number">0x0C9645</span>,<br>            <span class="hljs-comment">/*2001-2010*/</span><br>            <span class="hljs-number">0x4D4AB8</span>, <span class="hljs-number">0x0D4A4C</span>, <span class="hljs-number">0x0DA541</span>, <span class="hljs-number">0x25AAB6</span>, <span class="hljs-number">0x056A49</span>, <span class="hljs-number">0x7AADBD</span>, <span class="hljs-number">0x025D52</span>, <span class="hljs-number">0x092D47</span>, <span class="hljs-number">0x5C95BA</span>, <span class="hljs-number">0x0A954E</span>,<br>            <span class="hljs-comment">/*2011-2020*/</span><br>            <span class="hljs-number">0x0B4A43</span>, <span class="hljs-number">0x4B5537</span>, <span class="hljs-number">0x0AD54A</span>, <span class="hljs-number">0x955ABF</span>, <span class="hljs-number">0x04BA53</span>, <span class="hljs-number">0x0A5B48</span>, <span class="hljs-number">0x652BBC</span>, <span class="hljs-number">0x052B50</span>, <span class="hljs-number">0x0A9345</span>, <span class="hljs-number">0x474AB9</span>,<br>            <span class="hljs-comment">/*2021-2030*/</span><br>            <span class="hljs-number">0x06AA4C</span>, <span class="hljs-number">0x0AD541</span>, <span class="hljs-number">0x24DAB6</span>, <span class="hljs-number">0x04B64A</span>, <span class="hljs-number">0x6a573D</span>, <span class="hljs-number">0x0A4E51</span>, <span class="hljs-number">0x0D2646</span>, <span class="hljs-number">0x5E933A</span>, <span class="hljs-number">0x0D534D</span>, <span class="hljs-number">0x05AA43</span>,<br>            <span class="hljs-comment">/*2031-2040*/</span><br>            <span class="hljs-number">0x36B537</span>, <span class="hljs-number">0x096D4B</span>, <span class="hljs-number">0xB4AEBF</span>, <span class="hljs-number">0x04AD53</span>, <span class="hljs-number">0x0A4D48</span>, <span class="hljs-number">0x6D25BC</span>, <span class="hljs-number">0x0D254F</span>, <span class="hljs-number">0x0D5244</span>, <span class="hljs-number">0x5DAA38</span>, <span class="hljs-number">0x0B5A4C</span>,<br>            <span class="hljs-comment">/*2041-2050*/</span><br>            <span class="hljs-number">0x056D41</span>, <span class="hljs-number">0x24ADB6</span>, <span class="hljs-number">0x049B4A</span>, <span class="hljs-number">0x7A4BBE</span>, <span class="hljs-number">0x0A4B51</span>, <span class="hljs-number">0x0AA546</span>, <span class="hljs-number">0x5B52BA</span>, <span class="hljs-number">0x06D24E</span>, <span class="hljs-number">0x0ADA42</span>, <span class="hljs-number">0x355B37</span>,<br>            <span class="hljs-comment">/*2051-2060*/</span><br>            <span class="hljs-number">0x09374B</span>, <span class="hljs-number">0x8497C1</span>, <span class="hljs-number">0x049753</span>, <span class="hljs-number">0x064B48</span>, <span class="hljs-number">0x66A53C</span>, <span class="hljs-number">0x0EA54F</span>, <span class="hljs-number">0x06AA44</span>, <span class="hljs-number">0x4AB638</span>, <span class="hljs-number">0x0AAE4C</span>, <span class="hljs-number">0x092E42</span>,<br>            <span class="hljs-comment">/*2061-2070*/</span><br>            <span class="hljs-number">0x3C9735</span>, <span class="hljs-number">0x0C9649</span>, <span class="hljs-number">0x7D4ABD</span>, <span class="hljs-number">0x0D4A51</span>, <span class="hljs-number">0x0DA545</span>, <span class="hljs-number">0x55AABA</span>, <span class="hljs-number">0x056A4E</span>, <span class="hljs-number">0x0A6D43</span>, <span class="hljs-number">0x452EB7</span>, <span class="hljs-number">0x052D4B</span>,<br>            <span class="hljs-comment">/*2071-2080*/</span><br>            <span class="hljs-number">0x8A95BF</span>, <span class="hljs-number">0x0A9553</span>, <span class="hljs-number">0x0B4A47</span>, <span class="hljs-number">0x6B553B</span>, <span class="hljs-number">0x0AD54F</span>, <span class="hljs-number">0x055A45</span>, <span class="hljs-number">0x4A5D38</span>, <span class="hljs-number">0x0A5B4C</span>, <span class="hljs-number">0x052B42</span>, <span class="hljs-number">0x3A93B6</span>,<br>            <span class="hljs-comment">/*2081-2090*/</span><br>            <span class="hljs-number">0x069349</span>, <span class="hljs-number">0x7729BD</span>, <span class="hljs-number">0x06AA51</span>, <span class="hljs-number">0x0AD546</span>, <span class="hljs-number">0x54DABA</span>, <span class="hljs-number">0x04B64E</span>, <span class="hljs-number">0x0A5743</span>, <span class="hljs-number">0x452738</span>, <span class="hljs-number">0x0D264A</span>, <span class="hljs-number">0x8E933E</span>,<br>            <span class="hljs-comment">/*2091-2099*/</span><br>            <span class="hljs-number">0x0D5252</span>, <span class="hljs-number">0x0DAA47</span>, <span class="hljs-number">0x66B53B</span>, <span class="hljs-number">0x056D4F</span>, <span class="hljs-number">0x04AE45</span>, <span class="hljs-number">0x4A4EB9</span>, <span class="hljs-number">0x0A4D4C</span>, <span class="hljs-number">0x0D1541</span>, <span class="hljs-number">0x2D92B5</span><br>    &#125;;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将农历日期转换为公历日期</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year                               农历年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month                              农历月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> monthDay                   农历日</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> isLeapMonth        该月是否是闰月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回农历日期对应的公历日期，year0, month1, day2.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] lunarToSolar(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> monthDay, <span class="hljs-keyword">boolean</span> isLeapMonth) &#123;<br> <br>        <span class="hljs-keyword">int</span> dayOffset;<br> <br>        <span class="hljs-keyword">int</span> leapMonth;<br> <br>        <span class="hljs-keyword">int</span> i;<br> <br>        <span class="hljs-keyword">if</span> (year &lt; MIN_YEAR || year &gt; MAX_YEAR || month &lt; <span class="hljs-number">1</span> || month &gt; <span class="hljs-number">12</span><br>                || monthDay &lt; <span class="hljs-number">1</span> || monthDay &gt; <span class="hljs-number">30</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                    <span class="hljs-string">&quot;Illegal lunar date, must be like that:\n\t&quot;</span> +<br>                            <span class="hljs-string">&quot;year : 1900~2099\n\t&quot;</span> +<br>                            <span class="hljs-string">&quot;month : 1~12\n\t&quot;</span> +<br>                            <span class="hljs-string">&quot;day : 1~30&quot;</span>);<br>        &#125;<br>        dayOffset = (LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0x001F</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (((LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0x0060</span>) &gt;&gt; <span class="hljs-number">5</span>) == <span class="hljs-number">2</span>) &#123;<br>            dayOffset += <span class="hljs-number">31</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; month; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; (<span class="hljs-number">0x80000</span> &gt;&gt; (i - <span class="hljs-number">1</span>))) == <span class="hljs-number">0</span>) &#123;<br>                dayOffset += <span class="hljs-number">29</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dayOffset += <span class="hljs-number">30</span>;<br>            &#125;<br>        &#125;<br>        dayOffset += monthDay;<br> <br>        leapMonth = (LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0xf00000</span>) &gt;&gt; <span class="hljs-number">20</span>;<br> <br>        <span class="hljs-comment">// 这一年有闰月</span><br> <br>        <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (month &gt; leapMonth || (month == leapMonth &amp;&amp; isLeapMonth)) &#123;<br> <br>                <span class="hljs-keyword">if</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; (<span class="hljs-number">0x80000</span> &gt;&gt; (month - <span class="hljs-number">1</span>))) == <span class="hljs-number">0</span>) &#123;<br>                    dayOffset += <span class="hljs-number">29</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dayOffset += <span class="hljs-number">30</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (dayOffset &gt; <span class="hljs-number">366</span> || (year % <span class="hljs-number">4</span> != <span class="hljs-number">0</span> &amp;&amp; dayOffset &gt; <span class="hljs-number">365</span>)) &#123;<br>            year += <span class="hljs-number">1</span>;<br> <br>            <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>) &#123;<br>                dayOffset -= <span class="hljs-number">366</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dayOffset -= <span class="hljs-number">365</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">int</span>[] solarInfo = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">13</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> iPos = DAYS_BEFORE_MONTH[i];<br> <br>            <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i &gt; <span class="hljs-number">2</span>) &#123;<br> <br>                iPos += <span class="hljs-number">1</span>;<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i == <span class="hljs-number">2</span> &amp;&amp; iPos + <span class="hljs-number">1</span> == dayOffset) &#123;<br> <br>                solarInfo[<span class="hljs-number">1</span>] = i;<br> <br>                solarInfo[<span class="hljs-number">2</span>] = dayOffset - <span class="hljs-number">31</span>;<br> <br>                <span class="hljs-keyword">break</span>;<br> <br>            &#125;<br>            <span class="hljs-keyword">if</span> (iPos &gt;= dayOffset) &#123;<br>                solarInfo[<span class="hljs-number">1</span>] = i;<br>                iPos = DAYS_BEFORE_MONTH[i - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i &gt; <span class="hljs-number">2</span>) &#123;<br>                    iPos += <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (dayOffset &gt; iPos) &#123;<br>                    solarInfo[<span class="hljs-number">2</span>] = dayOffset - iPos;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dayOffset == iPos) &#123;<br>                    <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i == <span class="hljs-number">2</span>) &#123;<br>                        solarInfo[<span class="hljs-number">2</span>] = DAYS_BEFORE_MONTH[i] - DAYS_BEFORE_MONTH[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        solarInfo[<span class="hljs-number">2</span>] = DAYS_BEFORE_MONTH[i] - DAYS_BEFORE_MONTH[i - <span class="hljs-number">1</span>];<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    solarInfo[<span class="hljs-number">2</span>] = dayOffset;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        solarInfo[<span class="hljs-number">0</span>] = year;<br>        <span class="hljs-keyword">return</span> solarInfo;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将公历日期转换为农历日期，且标识是否是闰月</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> monthDay</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回公历日期对应的农历日期，year0，month1，day2，leap3</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] solarToLunar(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> monthDay) &#123;<br>        <span class="hljs-keyword">int</span>[] lunarDate = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>];<br>        Date baseDate = <span class="hljs-keyword">new</span> GregorianCalendar(<span class="hljs-number">1900</span>, <span class="hljs-number">0</span>, <span class="hljs-number">31</span>).getTime();<br>        Date objDate = <span class="hljs-keyword">new</span> GregorianCalendar(year, month - <span class="hljs-number">1</span>, monthDay).getTime();<br>        <span class="hljs-keyword">int</span> offset = (<span class="hljs-keyword">int</span>) ((objDate.getTime() - baseDate.getTime()) / <span class="hljs-number">86400000L</span>);<br>        <span class="hljs-comment">// 用offset减去每农历年的天数计算当天是农历第几天</span><br>        <span class="hljs-comment">// iYear最终结果是农历的年份, offset是当年的第几天</span><br>        <span class="hljs-keyword">int</span> iYear, daysOfYear = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (iYear = MIN_YEAR; iYear &lt;= MAX_YEAR &amp;&amp; offset &gt; <span class="hljs-number">0</span>; iYear++) &#123;<br>            daysOfYear = daysInLunarYear(iYear);<br>            offset -= daysOfYear;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>) &#123;<br>            offset += daysOfYear;<br>            iYear--;<br>        &#125;<br>        <span class="hljs-comment">// 农历年份</span><br>        lunarDate[<span class="hljs-number">0</span>] = iYear;<br>        <span class="hljs-keyword">int</span> leapMonth = leapMonth(iYear);<br>        <span class="hljs-comment">// 闰哪个月,1-12</span><br>        <span class="hljs-keyword">boolean</span> isLeap = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 用当年的天数offset,逐个减去每月（农历）的天数，求出当天是本月的第几天</span><br>        <span class="hljs-keyword">int</span> iMonth, daysOfMonth = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (iMonth = <span class="hljs-number">1</span>; iMonth &lt;= <span class="hljs-number">13</span> &amp;&amp; offset &gt; <span class="hljs-number">0</span>; iMonth++) &#123;<br>            daysOfMonth = daysInLunarMonth(iYear, iMonth);<br>            offset -= daysOfMonth;<br>        &#125;<br>        <span class="hljs-comment">// 当前月超过闰月，要校正</span><br>        <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span> &amp;&amp; iMonth &gt; leapMonth) &#123;<br>            --iMonth;<br>            <span class="hljs-keyword">if</span> (iMonth == leapMonth) &#123;<br>                isLeap = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// offset小于0时，也要校正</span><br>        <span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>) &#123;<br>            offset += daysOfMonth;<br>            --iMonth;<br>        &#125;<br>        lunarDate[<span class="hljs-number">1</span>] = iMonth;<br>        lunarDate[<span class="hljs-number">2</span>] = offset + <span class="hljs-number">1</span>;<br>        lunarDate[<span class="hljs-number">3</span>] = isLeap ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> lunarDate;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历year年month月的总天数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year   要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month        要计算的月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> daysInMonth(year, month, <span class="hljs-keyword">false</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历year年month月的总天数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year   要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month        要计算的月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> leap   当月是否是闰月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回天数，如果闰月是错误的，返回0.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">boolean</span> leap)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> leapMonth = leapMonth(year);<br>        <span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果本年有闰月且month大于闰月时，需要校正</span><br>        <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span> &amp;&amp; month &gt; leapMonth) &#123;<br>            offset = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 不考虑闰月</span><br>        <span class="hljs-keyword">if</span> (!leap) &#123;<br>            <span class="hljs-keyword">return</span> daysInLunarMonth(year, month + offset);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 传入的闰月是正确的月份</span><br>            <span class="hljs-keyword">if</span> (leapMonth != <span class="hljs-number">0</span> &amp;&amp; leapMonth == month) &#123;<br>                <span class="hljs-keyword">return</span> daysInLunarMonth(year, month + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历 year年的总天数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year 将要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回传入年份的总天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInLunarYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i, sum = <span class="hljs-number">348</span>;<br>        <span class="hljs-keyword">if</span> (leapMonth(year) != <span class="hljs-number">0</span>) &#123;<br>            sum = <span class="hljs-number">377</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> monthInfo = LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0x0FFF80</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0x80000</span>; i &gt; <span class="hljs-number">0x7</span>; i &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((monthInfo &amp; i) != <span class="hljs-number">0</span>) &#123;<br>                sum += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历 year年month月的总天数，总共有13个月包括闰月</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year  将要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month 将要计算的月份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回农历 year年month月的总天数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">daysInLunarMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; (<span class="hljs-number">0x100000</span> &gt;&gt; month)) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">29</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">30</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 传回农历 year年闰哪个月 1-12 , 没闰传回 0</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year 将要计算的年份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 传回农历 year年闰哪个月1-12, 没闰传回 0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leapMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ((LUNAR_INFO[year - MIN_YEAR] &amp; <span class="hljs-number">0xF00000</span>)) &gt;&gt; <span class="hljs-number">20</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Arrays.toString(solarToLunar(<span class="hljs-number">2019</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>)));<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>在做项目的时候遇到一个业务需要对图片进行旋转，于是找到一个工具类，亲测有效；在此与大家共享，需要用时可以直接用哈！ 一、旋转工具类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> zh.test.utils;<br> <br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图片旋转工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RotateImage</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对图片进行旋转</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src   被旋转图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> angel 旋转角度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 旋转后的图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title">Rotate</span><span class="hljs-params">(Image src, <span class="hljs-keyword">int</span> angel)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> src_width = src.getWidth(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">int</span> src_height = src.getHeight(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 计算旋转后图片的尺寸</span><br>        Rectangle rect_des = CalcRotatedSize(<span class="hljs-keyword">new</span> Rectangle(<span class="hljs-keyword">new</span> Dimension(<br>                src_width, src_height)), angel);<br>        BufferedImage res = <span class="hljs-keyword">null</span>;<br>        res = <span class="hljs-keyword">new</span> BufferedImage(rect_des.width, rect_des.height,<br>                BufferedImage.TYPE_INT_RGB);<br>        Graphics2D g2 = res.createGraphics();<br>        <span class="hljs-comment">// 进行转换</span><br>        g2.translate((rect_des.width - src_width) / <span class="hljs-number">2</span>,<br>                (rect_des.height - src_height) / <span class="hljs-number">2</span>);<br>        g2.rotate(Math.toRadians(angel), src_width / <span class="hljs-number">2</span>, src_height / <span class="hljs-number">2</span>);<br> <br>        g2.drawImage(src, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算旋转后的图片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src   被旋转的图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> angel 旋转角度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 旋转后的图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Rectangle <span class="hljs-title">CalcRotatedSize</span><span class="hljs-params">(Rectangle src, <span class="hljs-keyword">int</span> angel)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果旋转的角度大于90度做相应的转换</span><br>        <span class="hljs-keyword">if</span> (angel &gt;= <span class="hljs-number">90</span>) &#123;<br>            <span class="hljs-keyword">if</span> (angel / <span class="hljs-number">90</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">int</span> temp = src.height;<br>                src.height = src.width;<br>                src.width = temp;<br>            &#125;<br>            angel = angel % <span class="hljs-number">90</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">double</span> r = Math.sqrt(src.height * src.height + src.width * src.width) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">double</span> len = <span class="hljs-number">2</span> * Math.sin(Math.toRadians(angel) / <span class="hljs-number">2</span>) * r;<br>        <span class="hljs-keyword">double</span> angel_alpha = (Math.PI - Math.toRadians(angel)) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">double</span> angel_dalta_width = Math.atan((<span class="hljs-keyword">double</span>) src.height / src.width);<br>        <span class="hljs-keyword">double</span> angel_dalta_height = Math.atan((<span class="hljs-keyword">double</span>) src.width / src.height);<br> <br>        <span class="hljs-keyword">int</span> len_dalta_width = (<span class="hljs-keyword">int</span>) (len * Math.cos(Math.PI - angel_alpha<br>                - angel_dalta_width));<br>        <span class="hljs-keyword">int</span> len_dalta_height = (<span class="hljs-keyword">int</span>) (len * Math.cos(Math.PI - angel_alpha<br>                - angel_dalta_height));<br>        <span class="hljs-keyword">int</span> des_width = src.width + len_dalta_width * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> des_height = src.height + len_dalta_height * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rectangle(<span class="hljs-keyword">new</span> Dimension(des_width, des_height));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二、调用工具类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> zh.test.controller;<br> <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> zh.test.utils.RotateImage;<br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试图片旋转</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.POST)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testImgRotate</span><span class="hljs-params">(MultipartFile multipartFile)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        BufferedImage src = ImageIO.read(multipartFile.getInputStream());<br>        <span class="hljs-comment">//顺时针旋转90度</span><br>        BufferedImage des1 = RotateImage.Rotate(src, <span class="hljs-number">90</span>);<br>        ImageIO.write(des1, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:/90.jpg&quot;</span>));<br>        <span class="hljs-comment">//顺时针旋转180度</span><br>        BufferedImage des2 = RotateImage.Rotate(src, <span class="hljs-number">180</span>);<br>        ImageIO.write(des2, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/180.jpg&quot;</span>));<br>        <span class="hljs-comment">//顺时针旋转270度</span><br>        BufferedImage des3 = RotateImage.Rotate(src, <span class="hljs-number">270</span>);<br>        ImageIO.write(des3, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/270.jpg&quot;</span>));<br> <br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea取消警告</title>
    <link href="/blog/2021/01/11/idea%E5%8F%96%E6%B6%88%E8%AD%A6%E5%91%8A/"/>
    <url>/blog/2021/01/11/idea%E5%8F%96%E6%B6%88%E8%AD%A6%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>右边那五颜六色的一堆东西 是警告 如果是报错还是会提醒的哦<br>打开设置 搜索 inspections<br><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/BC0B365A-0200-45E5-B6E9-0DD5A2E557DA_1564123100369.png" alt="BC0B365A-0200-45E5-B6E9-0DD5A2E557DA"></p><h1 id="java判断中文汉字工具类"><a href="#java判断中文汉字工具类" class="headerlink" title="java判断中文汉字工具类"></a>java判断中文汉字工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wlkj.util;<br><br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChineseUtil</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断中文字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> c</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isChinese</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span>&#123;<br>    Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);<br>    <span class="hljs-keyword">if</span>(ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS ||<br>       ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS ||<br>       ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A ||<br>       ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B ||<br>       ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION ||<br>       ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS ||<br>       ub == Character.UnicodeBlock.GENERAL_PUNCTUATION)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包含中文字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsChinese</span><span class="hljs-params">(String str)</span></span>&#123;<br>    <span class="hljs-keyword">char</span>[] ch = str.toCharArray();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : ch)&#123;<br>        <span class="hljs-keyword">if</span>(isChinese(c))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否中文（非标点符号）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> c</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isChineseWord</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br><span class="hljs-keyword">char</span>[] ch = &#123;c&#125;;<br>Pattern pattern = Pattern.compile(<span class="hljs-string">&quot;([\u4E00-\uFA29]|[\uE7C7-\uE7F3])&quot;</span>);<br>Matcher matcher = pattern.matcher(<span class="hljs-keyword">new</span> String(ch));<br><span class="hljs-keyword">return</span> matcher.find();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包含汉字（非标点符号）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsChineseWords</span><span class="hljs-params">(String name)</span> </span>&#123;<br>Pattern pattern = Pattern.compile(<span class="hljs-string">&quot;^.*([\u4E00-\uFA29]|[\uE7C7-\uE7F3])+.*$&quot;</span>);<br>Matcher matcher = pattern.matcher(name);<br><span class="hljs-keyword">return</span> matcher.find();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转换成拼音字母缩写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> abbr</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toPinyinAbbr</span><span class="hljs-params">(String str)</span></span>&#123;<br>String abbr = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : str.toCharArray())&#123;<br><span class="hljs-keyword">if</span>(ChineseUtil.isChineseWord(c))&#123;<br>abbr += PinyinHelper.toHanyuPinyinStringArray(c)[<span class="hljs-number">0</span>].substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase();<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> abbr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(isChinese(<span class="hljs-string">&#x27;め&#x27;</span>));<span class="hljs-comment">// false</span><br>System.out.println(isChineseWord(<span class="hljs-string">&#x27;我&#x27;</span>));<span class="hljs-comment">// true</span><br>System.out.println(containsChinese(<span class="hljs-string">&quot;a我b&quot;</span>));<span class="hljs-comment">// true</span><br>System.out.println(containsChineseWords(<span class="hljs-string">&quot;a，b&quot;</span>)); <span class="hljs-comment">// false</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql系统知识梳理</title>
    <link href="/blog/2021/01/10/Mysql%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <url>/blog/2021/01/10/Mysql%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>1 数据库分类</p><p>　　MySQL Oracle redis</p><p>2 MySQL 存储引擎有哪些</p><p>　　ENGINE=InnoDB 提供事务安全表，支持外键。</p><p>　　MyISAM</p><p>　　Memory数据存入内存中，如果内存出现异常或事重启关机，所有数据都会消失</p><p>3 事务</p><p>　　概念：逻辑上的一组sql语句，组成这组操作的sql语句，要么成功，要么失败。</p><p>3.1 事务四大特性ACID</p><p>　　原子性(Atomicity)：事务是一个不可分割的单位，事务中的sql语句，要么全都发生，要么都不发生。</p><p>　　一致性(Consistency)：事务发生前后，数据的完整性必须保持一致。</p><p>　　隔离性(Isolation)：当并发访问数据库的时候，一个正在执行的事务在执行完前，对于其他的会话是不可见的，多个并发的事务之间的数据库相互隔离。</p><p>　　持久性(Durability)：一个事务一旦被提交，数据库中的数据改变就是持久性的。如果出了错误也不能撤销。</p><p>3.2 事务隔离级别</p><p>　　对于同时运行的几个事务，当这些事务同时访问数据库时，如果不采取隔离措施就会导致各种并发问题。由此引出隔离级别的概念，总有4个，由低到高，可逐步解决脏读，不可重复读，幻读等问题。</p><p>　　Default spring：默认隔离级别，使用数据库默认的事务隔离级别</p><p>　　read_uncommitied：读未提交，一个会话可以读取其他事务未提交的更新结果，一旦这个事务被回滚了，导致这个会话的结果不正确了。</p><p>　　read_commited：读已提交，一个会话只能读取其他事务已经提交的更新结果，否则，等待。但是其他会话可以修改这个事务中被读取的记录，而不必等待事务结束。导致了，一个事务中两个相同的读取操作，其结果可能不同。</p><p>　　repeatable_read：重复读取，在数据读取出来后加锁，直到这个事务执行结束。</p><p>　　serlalizable：串行化，不管多少事务，只有执行完一个事务的所有子事务后，才可以执行另外一个事务里的所有子事务。</p><p>3.3 数据库设置的隔离级别read_commited</p><p>　　可以避免脏读，且具有较好的并发性能，可能出现的问题场景，可以使用悲观锁或乐观锁控制。</p><p>4 悲观锁和乐观锁，以及使用场景</p><p>　　悲观排他后，不能修改数据，即在数据被操作的时候，锁定数据不被访问。</p><p>　　乐观排他后，可以修改数据，即假设数据一般情况下不会造成冲突。</p><p>5 如何实现分页</p><p>　　使用sql语句关键字limit</p><p>6 数据库三大范式</p><p>1NF：对属性的原子性约束，要求属性具有原子性，不可再分解。</p><p>2NF：对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性。</p><p>3NF：对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。</p><p>7 Mysql有哪些索引：fulltext、hash、btree、rtree</p><p>8 什么时候该建立索引</p><p>　　1）表的主键、外键必须有索引</p><p>　　2）数据量超过300的表应该有索引</p><p>　　3）经常与其他表进行连接的表，在连接字段上应该建立索引</p><p>　　4）经常出现在where子句中的字段，特别是大表的字段，应该建立索引</p><p>9 sql关键字执行顺序：select-&gt;from-&gt;where-&gt;group by-&gt;having-&gt;order by</p><p>10 explain包含哪些列</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7Nginx的SSl证书安装</title>
    <link href="/blog/2021/01/10/Centos7Nginx%E7%9A%84SSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2021/01/10/Centos7Nginx%E7%9A%84SSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>注意路径</p><p>可见，nginx缺少SSL模块支持。这是因为我当年建站的时候根本没用到SSL啊，所以以前编译nginx的时候使用了不带SSL支持的默认编译参数。 为了让nginx添加SSL模块，只能重新编译它。但是，如何在现有nginx的基础上，添加一个支持SSL的编译参数呢？首先要找回原来编译nginx时的编译参数，然后再加上支持SSL的编译参数。如果不这样做，那么编译出来的nginx可能就会有问题（某些旧的编译参数被去掉了，使得nginx不能支持某些功能）。 所以先查看旧的nginx的编译参数：nginx -V 大写V 输出的信息中，最重要的一句是： configure arguments: –prefix=/usr/local/nginx 可见，当时我编译nginx的时候，只是指定了一个安装路径，没有其他特殊的编译参数。那么现在事情就好办了：回到nginx的源码目录下，加上SSL支持参数重新编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">./configure --prefix=/usr/local/nginx --with-http_ssl_module<br>make<br></code></pre></td></tr></table></figure><p>注意，此时千万不能手快直接 make install！因为我原来的nginx还有一堆的配置文件，不能被覆盖。我们应该只覆盖编译出来的nginx可执行程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cp /usr/local/nginx/sbin/nginx ~/<br>cp objs/nginx /usr/local/nginx/sbin/<br></code></pre></td></tr></table></figure><p>其中，objs/nginx 是新编译出来的nginx可执行程序。 覆盖之后，再尝试重新启动nginx，就没有问题了。</p><p>接下来安装证书<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190724-133740@2x_1563946759206.png" alt="WX20190724-133740@2x">一个证书 针对一个域名<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190724-133807@2x_1563946759366.png" alt="WX20190724-133807@2x">进入nginx 目录下创建一个 mkdir cert 将两个文件上传到这个目录下 建议将文件重命名为 zhzq.pem 和 zhzq.key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">编辑 vim nginx.conf<br> <br>server &#123;<br>    listen <span class="hljs-number">80</span>;<br>    listen <span class="hljs-number">443</span> ssl;<br>    server_name ; 你的域名<br>    ssl off;<br>    ssl_certificate ../cert/zhzq.pem;<br>    ssl_certificate_key ../cert/zhzq.key;<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1<span class="hljs-number">.1</span> TLSv1<span class="hljs-number">.2</span>;<br>    ssl_prefer_server_ciphers on;<br>  <br>&#125;<br> <br></code></pre></td></tr></table></figure><p>重新载入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">../sbin/nginx -s reload<br># 如果上面的命令不起作用，也可以重启<br>../sbin/nginx -s stop<br>../sbin/nginx<br></code></pre></td></tr></table></figure><p>https 443 开放对应的端口 访问就可以了</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java将PDF转为Word、图片、SVG、XPS、Html、PDF。</title>
    <link href="/blog/2021/01/10/java%E5%B0%86PDF%E8%BD%AC%E4%B8%BAWord%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81SVG%E3%80%81XPS%E3%80%81Html%E3%80%81PDF%E3%80%82/"/>
    <url>/blog/2021/01/10/java%E5%B0%86PDF%E8%BD%AC%E4%B8%BAWord%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81SVG%E3%80%81XPS%E3%80%81Html%E3%80%81PDF%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍通过Java编程来实现PDF文档转换的方法。包括：</p><ol><li><p>PDF转为Word</p></li><li><p>PDF转为图片</p></li><li><p>PDF转为Html</p></li><li><p>PDF转为SVG</p><p>4.1 将PDF每一页转为单个的SVG</p><p>4.2 将一个包含多页的PDF文档转为一个SVG</p></li><li><p>PDF转为XPS</p></li><li><p>PDF转为PDF/A</p></li></ol><p>使用工具：Free Spire.PDF for Java（免费版）</p><p>Jar文件获取及导入：</p><p>方法1：通过官网下载<a href="https://www.e-iceblue.cn/Downloads/Free-Spire-PDF-JAVA.html">下载jar包</a>。下载后，解压文件，并将lib文件夹下的Spire.Pdf.jar文件导入Java程序。</p><p>方法2：可通过maven仓库安装导入。参考<a href="https://www.e-iceblue.cn/licensing/install-spirepdf-for-java-from-maven-repository.html">导入方法</a></p><h2 id="PDF-转Word"><a href="#PDF-转Word" class="headerlink" title="PDF 转Word"></a>PDF 转Word</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToWord.docx&quot;</span>,FileFormat.DOCX);<br></code></pre></td></tr></table></figure><h2 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h2><p>支持的图片格式包括Jpeg, Jpg, Png, Bmp, Tiff, Gif, EMF等。这里以保存为Png格式为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.spire.pdf.*;<br> <br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDFtoimage</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br> <br>PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>BufferedImage image;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; pdf.getPages().getCount();i++)&#123;<br>    image = pdf.saveAsImage(i);<br>    File file = <span class="hljs-keyword">new</span> File( String.format(<span class="hljs-string">&quot;ToImage-img-%d.png&quot;</span>, i));<br>    ImageIO.write(image, <span class="hljs-string">&quot;PNG&quot;</span>, file);<br>&#125;<br>pdf.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PDF转Html"><a href="#PDF转Html" class="headerlink" title="PDF转Html"></a>PDF转Html</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToHTML.html&quot;</span>, FileFormat.HTML);<br></code></pre></td></tr></table></figure><h2 id="PDF转SVG"><a href="#PDF转SVG" class="headerlink" title="PDF转SVG"></a>PDF转SVG</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转为单个svg</span><br>PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToSVG.svg&quot;</span>, FileFormat.SVG);<br><span class="hljs-comment">//多页pdf转为一个svg</span><br>PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;sampe.pdf&quot;</span>);<br>pdf.getConvertOptions().setOutputToOneSvg(<span class="hljs-keyword">true</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToOneSvg.svg&quot;</span>,FileFormat.SVG);<br></code></pre></td></tr></table></figure><h2 id="PDF-转XPS"><a href="#PDF-转XPS" class="headerlink" title="PDF 转XPS"></a>PDF 转XPS</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br>pdf.saveToFile(<span class="hljs-string">&quot;ToXPS.xps&quot;</span>, FileFormat.XPS);<br></code></pre></td></tr></table></figure><h2 id="PDF转PDF-A"><a href="#PDF转PDF-A" class="headerlink" title="PDF转PDF/A"></a>PDF转PDF/A</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.spire.pdf.*;<br><span class="hljs-keyword">import</span> com.spire.pdf.graphics.PdfMargins;<br><span class="hljs-keyword">import</span> java.awt.geom.Dimension2D;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDFtoPDFA</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[]args)</span></span>&#123;<br>        <span class="hljs-comment">//加载测试文档</span><br>        PdfDocument pdf = <span class="hljs-keyword">new</span> PdfDocument();<br>        pdf.loadFromFile(<span class="hljs-string">&quot;test.pdf&quot;</span>);<br> <br>        <span class="hljs-comment">//转换为Pdf_A_1_B格式</span><br>        PdfNewDocument newDoc = <span class="hljs-keyword">new</span> PdfNewDocument();<br>        newDoc.setConformance(PdfConformanceLevel.Pdf_A_1_B);<br>        PdfPageBase page;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; pdf.getPages().getCount();i++) &#123;<br>            page = pdf.getPages().get(i);<br>            Dimension2D size = page.getSize();<br>            PdfPageBase p = newDoc.getPages().add(size, <span class="hljs-keyword">new</span> PdfMargins(<span class="hljs-number">0</span>));<br>            page.createTemplate().draw(p, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br> <br>        <span class="hljs-comment">//保存结果文件</span><br>        newDoc.save(<span class="hljs-string">&quot;ToPDFA.pdf&quot;</span>);<br>        newDoc.close();<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf-%E8%BD%ACword">PDF 转Word</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%AC%E5%9B%BE%E7%89%87">PDF转图片</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%AChtml">PDF转Html</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%ACsvg">PDF转SVG</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf-%E8%BD%ACxps">PDF 转XPS</a><a href="https://bk.cuixiaoyan.xyz/archives/PDF#pdf%E8%BD%ACpdfa">PDF转PDF/A</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决IntellijIDEA部署JavaWeb项目404问题</title>
    <link href="/blog/2021/01/10/%E8%A7%A3%E5%86%B3IntellijIDEA%E9%83%A8%E7%BD%B2JavaWeb%E9%A1%B9%E7%9B%AE404%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2021/01/10/%E8%A7%A3%E5%86%B3IntellijIDEA%E9%83%A8%E7%BD%B2JavaWeb%E9%A1%B9%E7%9B%AE404%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>首先你要保证 你和同事的版本保持一致 jdk 和 tomcat 重中之重 检查一下Project Structure的配置，首先是project：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/2_1563416756399.png" alt="2">Modules-Sources如下图：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/3_1563416756457.png" alt="3">Modules-Paths中没什么需要特别修改的地方。 Modules-Dependencis如下图： 不用勾选<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/4_1563416756561.png" alt="4">Liraires如下图所示：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/5_1563416756527.png" alt="5">Facets如下，路径一定不要配错，不如一定404，如下图： 尤其是从eclipse 导入尤其注意<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/6_1563416756587.png" alt="6">最后就是Artifacts:<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/7_1563416756592.png" alt="7">项目到这就配置完了，有些路径一定要结合自己的项目来配置。</p><p>接下来配置tomcat：<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/8_1563416765804.png" alt="8">不加就是/目录<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/9_1563416765774.png" alt="9"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postman的基础功能</title>
    <link href="/blog/2021/01/10/Postman%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/"/>
    <url>/blog/2021/01/10/Postman%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>前后端分离 接口调试工具<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/20180523232921542_1563331603653.png" alt="20180523232921542"></p><p>1.表单提交<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190717-104908@2x_1563331761801.png" alt="WX20190717-104908@2x"></p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190717-104757@2x_1563331703420.png" alt="WX20190717-104757@2x">2.json提交 下图中，当我们选择JSON(application/json) 是会自动帮我们设置 headers 为 application/json<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/2018052400054291_1563331856704.png" alt="2018052400054291"></p><h2 id="下面就是很多系统会需要登陆之后-才能模拟效果"><a href="#下面就是很多系统会需要登陆之后-才能模拟效果" class="headerlink" title="下面就是很多系统会需要登陆之后 才能模拟效果"></a>下面就是很多系统会需要登陆之后 才能模拟效果</h2><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190717-105157@2x_1563331933756.png" alt="WX20190717-105157@2x"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Postman</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现下雪特效</title>
    <link href="/blog/2021/01/06/js%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%AA%E7%89%B9%E6%95%88/"/>
    <url>/blog/2021/01/06/js%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%AA%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>直接上代码 放到你的script 标签中 具体效果参考博客页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)</span>&#123;<br>$.fn.snow = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)</span>&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).html(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-built_in">document</span>).height(),<br>documentWidth= $(<span class="hljs-built_in">document</span>).width(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.extend(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-built_in">Math</span>.random() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-built_in">Math</span>.random(),<br>sizeFlake = options.minSize + <span class="hljs-built_in">Math</span>.random() * options.maxSize,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">5000</span>;<br>$flake.clone().appendTo(<span class="hljs-string">&#x27;body&#x27;</span>).css(&#123;<br>left: startPositionLeft,<br>opacity: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br>color: options.flakeColor<br>&#125;).animate(&#123;<br>top: endPositionTop,<br>left: endPositionLeft,<br>opacity: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>$(<span class="hljs-built_in">this</span>).remove()<br>&#125;);<br>&#125;, options.newOn);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.fn.snow(&#123; <br>    minSize: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    maxSize: <span class="hljs-number">30</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    newOn: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装redis</title>
    <link href="/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85redis/"/>
    <url>/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85redis/</url>
    
    <content type="html"><![CDATA[<p>在CentOS和Red Hat系统中，首先添加EPEL仓库，然后更新yum源：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo yum install epel-<span class="hljs-keyword">release</span><br>sudo yum <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>然后安装Redis数据库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum -y <span class="hljs-keyword">install</span> redis<br></code></pre></td></tr></table></figure><p>安装好后启动Redis服务即可：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo systemctl <span class="hljs-literal">start</span> redis<br></code></pre></td></tr></table></figure><p>这里同样可以使用redis-cli进入Redis命令行模式操作。</p><p>另外，为了可以使Redis能被远程连接，需要修改配置文件，路径为/etc/redis.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>redis.conf<br></code></pre></td></tr></table></figure><p>需要修改的地方： 直接搜索 requirepass</p><p>首先，注释这一行： 另外，推荐给Redis设置密码，取消注释这一行：</p><p>#requirepass foobared</p><p>foobared即当前密码，可以自行修改为 这里我设置成root</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#bind 127.0.0.1</span><br> <br><span class="hljs-attribute">requirepass</span> root <br></code></pre></td></tr></table></figure><p>然后重启Redis服务，使用的命令如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart redis</span><br></code></pre></td></tr></table></figure><p>ps: 其他命令</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gauss">systemctl start redis.service <span class="hljs-meta">#启动redis服务器</span><br> <br>systemctl <span class="hljs-keyword">stop</span> redis.service <span class="hljs-meta">#停止redis服务器</span><br> <br>systemctl restart redis.service <span class="hljs-meta">#重新启动redis服务器</span><br> <br>systemctl status redis.service <span class="hljs-meta">#获取redis服务器的运行状态</span><br> <br>systemctl <span class="hljs-keyword">enable</span> redis.service <span class="hljs-meta">#开机启动redis服务器</span><br> <br>systemctl <span class="hljs-keyword">disable</span> redis.service <span class="hljs-meta">#开机禁用redis服务器</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Nginx</title>
    <link href="/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/blog/2021/01/06/Centos7%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-是C语言开发的-所以要安装gcc编译器。"><a href="#Nginx-是C语言开发的-所以要安装gcc编译器。" class="headerlink" title="Nginx 是C语言开发的,所以要安装gcc编译器。"></a>Nginx 是C语言开发的,所以要安装gcc编译器。</h1><ol><li>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">yum</span> <span class="hljs-comment">install</span> <span class="hljs-literal">-</span><span class="hljs-comment">y</span> <span class="hljs-comment">gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span>++<br></code></pre></td></tr></table></figure><ol><li>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y pcre pcre-devel<br></code></pre></td></tr></table></figure><p>3.zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum install -y <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel<br></code></pre></td></tr></table></figure><p>4.OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y openssl openssl-devel<br></code></pre></td></tr></table></figure><p>下载nginx 到一个自己创建到文件夹中 随意</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载 wget https:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.13</span>.<span class="hljs-number">0</span>.tar.gz<br>解压 tar -zxvf nginx-<span class="hljs-number">1.10</span>.<span class="hljs-number">1</span>.tar.gz<br>进入 cd nginx-<span class="hljs-number">1.10</span>.<span class="hljs-number">1</span><br>配置 ./configure<br>编译 make<br>安装 make install<br>一次完成也可以 .<span class="hljs-regexp">/configure --prefix=/</span>opt<span class="hljs-regexp">/software/</span>nginx &amp;&amp; make install<br>配置环境变量：（注意是sbin不是bin） <br>echo <span class="hljs-string">&#x27;export PATH=$PATH:/opt/software/nginx/sbin&#x27;</span> &gt; <span class="hljs-regexp">/etc/</span>profile.d/nginx.sh<br></code></pre></td></tr></table></figure><p>环境变量生效 source /etc/profile 查看安装路径 whereis nginx</p><p>前提进入安装路径里面 sbin 目录下 cd /opt/software/nginx/sbin/ 启动 ./nginx 查看进程 ps aux|grep nginx 重启 先停止再启动（推荐）：</p><p>./nginx -s quit ./nginx</p><p>有很多时候只改配置 不用重启了就 当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，即可将配置信息在 nginx 中生效，如下：</p><p>./nginx -s reload</p><p>默认端口为80 不用加 直接外部IP 访问 就能访问到页面</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装mysql5.7</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85mysql/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="先检查系统是否装有mysql"><a href="#先检查系统是否装有mysql" class="headerlink" title="先检查系统是否装有mysql"></a>先检查系统是否装有mysql</h2><p>rpm -qa | grep mysql 这里执行安装命令是无效的，因为centos-7默认是Mariadb，所以执行以下命令只是更新Mariadb数据库 yum install mysql 删除 yum remove mysql</p><h2 id="下载mysql的repo源"><a href="#下载mysql的repo源" class="headerlink" title="下载mysql的repo源"></a>下载mysql的repo源</h2><p>wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></p><h2 id="安装mysql-community-release-el7-5-noarch-rpm包"><a href="#安装mysql-community-release-el7-5-noarch-rpm包" class="headerlink" title="安装mysql-community-release-el7-5.noarch.rpm包"></a>安装mysql-community-release-el7-5.noarch.rpm包</h2><p>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>sudo yum install mysql-server</p><h3 id="这里可能会报错-请注意"><a href="#这里可能会报错-请注意" class="headerlink" title="这里可能会报错 请注意"></a>这里可能会报错 请注意</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Package: mysql-community-libs<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: systemd<br><span class="hljs-keyword">Error: </span>Package: mysql-community-server<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)<br><span class="hljs-keyword">Error: </span>Package: mysql-community-client<span class="hljs-string">-5</span>.6.35<span class="hljs-string">-2</span>.el7.x86_64 (mysql56-community)<br>           Requires: libc.so.6(GLIBC_2.17)(64bit)<br> You could try using --skip-broken to work around the problem<br> You could try running: rpm -Va --nofiles --nodigest<br> <br></code></pre></td></tr></table></figure><h3 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h3><p>yum install glibc.i686 yum list libstdc++*</p><p>然后登陆 没有密码直接回车跳过 mysql -u root -p</p><h3 id="登录时有可能报这样的错：ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2-，原因是-var-lib-mysql的访问权限问题。下面的命令把-var-lib-mysql的拥有者改为当前用户："><a href="#登录时有可能报这样的错：ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2-，原因是-var-lib-mysql的访问权限问题。下面的命令把-var-lib-mysql的拥有者改为当前用户：" class="headerlink" title="登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户："></a>登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户：</h3><p>sudo chown -R openscanner:openscanner /var/lib/mysql</p><p>重启mysql service mysqld restart</p><p>这里密码设置的为root</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysql &gt; use mysql;<br>mysql &gt; update user set password=password(<span class="hljs-string">&#x27;root&#x27;</span>) where user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql &gt; <span class="hljs-keyword">exit</span>;<br> <br></code></pre></td></tr></table></figure><p>再重启 登陆mysql 加上远程访问权限 为root添加远程连接的能力。链接密码为 “root”（不包括双引号）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> root@&quot;%&quot; IDENTIFIED <span class="hljs-keyword">BY</span> &quot;root&quot;;　　<br></code></pre></td></tr></table></figure><h1 id="最后最后-非常重要-查询不区分大小写表名"><a href="#最后最后-非常重要-查询不区分大小写表名" class="headerlink" title="最后最后 非常重要 查询不区分大小写表名"></a>最后最后 非常重要 查询不区分大小写表名</h1><p>vim /etc/my.cnf 在[mysqld]节点下，加入一行： lower_case_table_names=1<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190710-151220@2x_1562742772778.png" alt="WX20190710-151220@2x">重启数据库 连接工具测试连接<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/5E7E7FBB-4F4B-4C82-83E0-F98203469C7A_1562742912107.png" alt="5E7E7FBB-4F4B-4C82-83E0-F98203469C7A"></p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装tomcat9</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85tomcat9/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85tomcat9/</url>
    
    <content type="html"><![CDATA[<h2 id="首先检查是否安装好jdk-和配置好运行环境-还有就是名字和路径"><a href="#首先检查是否安装好jdk-和配置好运行环境-还有就是名字和路径" class="headerlink" title="首先检查是否安装好jdk 和配置好运行环境 还有就是名字和路径"></a>首先检查是否安装好jdk 和配置好运行环境 还有就是名字和路径</h2><p>输入命令：Java -version，如果显示JDK版本号，则证明已经安装了JDK。</p><p>输入命令：echo $JAVA_HOME，如果显示路径，则证明配置了环境变量。</p><p>如果没有参考 <a href="http://47.100.236.144:888/archives/centos7-jdk">安装jdk</a> tomcat 下载地址 [tomcat9]( <a href="https://pan.baidu.com/s/171M_rXvsyKNI5jAY8nwd1Q">https://pan.baidu.com/s/171M_rXvsyKNI5jAY8nwd1Q</a> 提取码: 3r8q )</p><ol><li>cd /usr/local/ 进入此目录下面 创建 mkdir tomcat</li><li>进入tomcat 文件夹下面 将云盘安装包放入 解压</li><li>tar -zxvf apache-tomcat-9.0.21.tar.gz</li><li>再进入 cd apache-tomcat-9.0.21/bin/startup.sh 启动tomcat</li><li>启动 /usr/local/tomcat/apache-tomcat-9.0.21/bin/startup.sh</li><li>关闭 /usr/local/tomcat/apache-tomcat-9.0.21/bin/shutdown.sh</li><li>重启 建议 ps -ef | grep tomcat 查询 tomcat 占用的pid</li><li>kill -9 pid 再启动</li><li>ip 加端口能访问到 就成功了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装jdk</title>
    <link href="/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85jdk/"/>
    <url>/blog/2021/01/05/Centos7%E5%AE%89%E8%A3%85jdk/</url>
    
    <content type="html"><![CDATA[<p>请注意版本和文件名 是否一致 按照你的地址来!</p><ol><li>先进入 cd /usr/local/</li><li>创建一个放jdk的文件夹 mkdir java</li><li>进入 cd java</li><li>通过工具 finalshell 直接把安装包放到Java文件夹下</li><li>tar -zxv -f jdk-8u211-linux-x64.tar.gz 解压出来 [jdk 下载地址](链接: <a href="https://pan.baidu.com/s/1KjBBvHRxj4QHWkAnsIQGbQ">https://pan.baidu.com/s/1KjBBvHRxj4QHWkAnsIQGbQ</a> 提取码: n1bp 复制这段内容后打开百度网盘手机App，操作更方便哦)</li></ol><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/1562571285905_1562571317802.jpg" alt="1562571285905"></p><h2 id="上面步骤已经安装完成了-下面配置环境变量"><a href="#上面步骤已经安装完成了-下面配置环境变量" class="headerlink" title="上面步骤已经安装完成了 下面配置环境变量"></a>上面步骤已经安装完成了 下面配置环境变量</h2><p>vim /etc/profile 打开之后按键盘【i】键进入编辑模式，将下面的内容复制到底部：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_211<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/jre/</span>lib<span class="hljs-regexp">/ext:$JAVA_HOME/</span>lib/tools.jar<br>export PATH JAVA_HOME CLASSPATH<br> <br></code></pre></td></tr></table></figure><p>配置完成后，最重要的一步就是使文件立即生效。命令如下： source /etc/profile</p><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>java -version echo $JAVA_HOME<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190708-154036@2x_1562571647150.png" alt="WX20190708-154036@2x">说明安装成功，环境变量也配置成功！</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器</title>
    <link href="/blog/2021/01/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/blog/2021/01/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>24岁以下自动获取学生身份 所以入手一年用来部署自己的博客和项目 经过比较几个大厂的vps 推荐阿里云 <a href="https://promotion.aliyun.com/ntms/act/campus2018.html">购买地址</a></p><p>这里我买的是第二款<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-140757@2x_1562479700993.png" alt="WX20190707-140757@2x">购买完成之后在控制台 查看自己的ECS 云服务器<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141000@2x_1562479814153.png" alt="WX20190707-141000@2x">在网络与安全中 安全组 配置 下面还需要添加安全组 用来后面在外部访问各种端口 这里我比较懒 就直接将全部端口开放 当然这是不太安全的<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141206@2x_1562480012754.png" alt="WX20190707-141206@2x"></p><p>再回到实例 加入安全组<img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/WX20190707-141549@2x_1562480182400.png" alt="WX20190707-141549@2x"></p><p>最后用远程连接工具连接上之后 就开始云服务之旅啦</p>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis经典9种设计模式</title>
    <link href="/blog/2021/01/04/Mybatis%E7%BB%8F%E5%85%B89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2021/01/04/Mybatis%E7%BB%8F%E5%85%B89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。</p><h2 id="Mybatis至少遇到了以下的设计模式的使用"><a href="#Mybatis至少遇到了以下的设计模式的使用" class="headerlink" title="Mybatis至少遇到了以下的设计模式的使用"></a>Mybatis至少遇到了以下的设计模式的使用</h2><h2 id="1、Builder模式"><a href="#1、Builder模式" class="headerlink" title="1、Builder模式"></a>1、Builder模式</h2><p>例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder。</p><h2 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h2><p>例如SqlSessionFactory、ObjectFactory、MapperProxyFactory。</p><h2 id="3、单例模式"><a href="#3、单例模式" class="headerlink" title="3、单例模式"></a>3、单例模式</h2><p>例如ErrorContext和LogFactory。</p><h2 id="4、代理模式"><a href="#4、代理模式" class="headerlink" title="4、代理模式"></a>4、代理模式</h2><p>Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果。</p><h2 id="5、组合模式"><a href="#5、组合模式" class="headerlink" title="5、组合模式"></a>5、组合模式</h2><p>例如SqlNode和各个子类ChooseSqlNode等。</p><h2 id="6、模板方法模式"><a href="#6、模板方法模式" class="headerlink" title="6、模板方法模式"></a>6、模板方法模式</h2><p>例如BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler。</p><h2 id="7、适配器模式"><a href="#7、适配器模式" class="headerlink" title="7、适配器模式"></a>7、适配器模式</h2><p>例如Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现。</p><h2 id="8、装饰者模式"><a href="#8、装饰者模式" class="headerlink" title="8、装饰者模式"></a>8、装饰者模式</h2><p>例如Cache包中的cache.decorators子包中等各个装饰者的实现。</p><h2 id="9、迭代器模式"><a href="#9、迭代器模式" class="headerlink" title="9、迭代器模式"></a>9、迭代器模式</h2><p>例如迭代器模式PropertyTokenizer。</p><p><strong>接下来挨个模式进行解读，先介绍模式自身的知识，然后解读在Mybatis中怎样应用了该模式。</strong></p><h2 id="一、Builder模式"><a href="#一、Builder模式" class="headerlink" title="一、Builder模式"></a>一、Builder模式</h2><p>Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis环境的初始化过程中，SqlSessionFactoryBuilder会调用XMLConfigBuilder读取所有的MybatisMapConfig.xml和所有的Mapper.xml文件，构建Mybatis运行的核心对象Configuration对象，然后将该Configuration对象作为参数构建一个SqlSessionFactory对象。</p><p>其中XMLConfigBuilder在构建Configuration对象时，也会调用XMLMapperBuilder用于读取*Mapper文件，而XMLMapperBuilder会使用XMLStatementBuilder来读取和build所有的SQL语句。</p><p>在这个过程中，有一个相似的特点，就是这些Builder会读取文件或者配置，然后做大量的XpathParser解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。</p><p><strong>对于builder的具体类，方法都大都用build*开头，比如SqlSessionFactoryBuilder为例，它包含以下方法：</strong></p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>即根据不同的输入参数来构建SqlSessionFactory这个工厂对象。</p><h2 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h2><p>在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</p><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>SqlSession可以认为是一个Mybatis工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。</p><p><strong>在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,<br><span class="hljs-keyword">boolean</span> autoCommit) &#123;<br>Transaction tx = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">final</span> Environment environment = configuration.getEnvironment();<br><span class="hljs-keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br>tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br><span class="hljs-keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>closeTransaction(tx); <span class="hljs-comment">// may have fetched a connection so lets call</span><br><span class="hljs-comment">// close()</span><br><span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>ErrorContext.instance().reset();<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。</p><p>在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。</p><p><strong>而对于LogFactory，它的实现代码：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> final <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Constructor&lt;? <span class="hljs-keyword">extends</span> Log&gt; logConstructor;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">LogFactory</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-comment">// disable construction</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-function"><span class="hljs-title">getLog</span>(<span class="hljs-params">Class&lt;?&gt; aClass</span>)</span> &#123;<br><span class="hljs-keyword">return</span> getLog(aClass.getName());<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>这里有个特别的地方，是Log变量的的类型是Constructor&lt;? extends Log&gt;，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。</p><h2 id="三、单例模式"><a href="#三、单例模式" class="headerlink" title="三、单例模式"></a>三、单例模式</h2><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。</p><p><strong>ErrorContext的单例实现代码：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ErrorContext</span> &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">ErrorContext</span>&gt; LOCAL</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;ErrorContext&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ErrorContext</span>(<span class="hljs-params"></span>)</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ErrorContext <span class="hljs-title">instance</span>(<span class="hljs-params"></span>)</span> &#123;<br>ErrorContext context = LOCAL.<span class="hljs-keyword">get</span>();<br><span class="hljs-keyword">if</span> (context == <span class="hljs-literal">null</span>) &#123;<br>context = <span class="hljs-keyword">new</span> ErrorContext();<br>LOCAL.<span class="hljs-keyword">set</span>(context);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>构造函数是private修饰，具有一个static的局部instance变量和一个获取instance变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。</p><p>只是这里有个有趣的地方是，LOCAL的静态实例变量使用了ThreadLocal修饰，也就是说它属于每个线程各自的数据，而在instance()方法中，先获取本线程的该实例，如果没有就创建该线程独有的ErrorContext。</p><h2 id="四、代理模式"><a href="#四、代理模式" class="headerlink" title="四、代理模式"></a>四、代理模式</h2><p>代理模式可以认为是Mybatis的核心使用的模式，正是由于这个模式，我们只需要编写Mapper.java接口，不需要实现，由Mybatis后台帮我们完成具体SQL的执行。</p><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p><p><strong>代理模式包含如下角色：</strong></p><h3 id="1-Subject"><a href="#1-Subject" class="headerlink" title="1.Subject:"></a>1.Subject:</h3><p>抽象主题角色</p><h3 id="2-Proxy"><a href="#2-Proxy" class="headerlink" title="2.Proxy:"></a>2.Proxy:</h3><p>代理主题角色</p><h3 id="3-RealSubject"><a href="#3-RealSubject" class="headerlink" title="3.RealSubject:"></a>3.RealSubject:</h3><p>真实主题角色</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务； 当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author </span>Lasse Voss</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxyFactory</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> final Class&lt;T&gt; mapperInterface;<br><span class="hljs-keyword">private</span> final <span class="hljs-built_in">Map</span>&lt;Method, MapperMethod&gt; methodCache = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;Method, MapperMethod&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">MapperProxyFactory</span>(<span class="hljs-params">Class&lt;T&gt; mapperInterface</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.mapperInterface = mapperInterface;<br>&#125;<br><br><span class="hljs-keyword">public</span> Class&lt;T&gt; <span class="hljs-function"><span class="hljs-title">getMapperInterface</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> mapperInterface;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;Method, MapperMethod&gt; <span class="hljs-function"><span class="hljs-title">getMethodCache</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> methodCache;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">&quot;unchecked&quot;</span>)<br><span class="hljs-keyword">protected</span> T <span class="hljs-function"><span class="hljs-title">newInstance</span>(<span class="hljs-params">MapperProxy&lt;T&gt; mapperProxy</span>)</span> &#123;<br><span class="hljs-keyword">return</span> (T) <span class="hljs-built_in">Proxy</span>.newProxyInstance(mapperInterface.getClassLoader(), <span class="hljs-keyword">new</span> Class[] &#123; mapperInterface &#125;,<br>mapperProxy);<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-function"><span class="hljs-title">newInstance</span>(<span class="hljs-params">SqlSession sqlSession</span>)</span> &#123;<br>final MapperProxy&lt;T&gt; mapperProxy = <span class="hljs-keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);<br><span class="hljs-keyword">return</span> newInstance(mapperProxy);<br>&#125;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>在这里，先通过T newInstance(SqlSession sqlSession)方法会得到一个MapperProxy对象，然后调用T newInstance(MapperProxymapperProxy)生成代理对象然后返回。</p><p><strong>而查看MapperProxy的代码，可以看到如下内容：</strong></p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxy</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span>, <span class="hljs-title">Serializable</span> &#123;</span><br><br>@Override<br><span class="hljs-keyword">public</span> Object invoke(Object proxy, <span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">method</span>, <span class="hljs-title">Object</span>[] <span class="hljs-title">args</span>) <span class="hljs-title">throws</span> <span class="hljs-title">Throwable</span> &#123;</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br><span class="hljs-keyword">return</span> method.invoke(this, args);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDefaultMethod(<span class="hljs-function"><span class="hljs-keyword">method</span>)) &#123;</span><br><span class="hljs-keyword">return</span> invokeDefaultMethod(proxy, <span class="hljs-function"><span class="hljs-keyword">method</span>, <span class="hljs-title">args</span>);</span><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br><span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>&#125;<br><span class="hljs-keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(<span class="hljs-function"><span class="hljs-keyword">method</span>);</span><br><span class="hljs-keyword">return</span> mapperMethod.execute(sqlSession, args);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>非常典型的，该MapperProxy类实现了InvocationHandler接口，并且实现了该接口的invoke方法。</p><p>通过这种方式，我们只需要编写Mapper.java接口类，当真正执行一个Mapper接口的时候，就会转发给MapperProxy.invoke方法，而该方法则会调用后续的sqlSession.cud&gt;executor.execute&gt;prepareStatement等一系列方法，完成SQL的执行和返回。</p><h2 id="五、组合模式"><a href="#五、组合模式" class="headerlink" title="五、组合模式"></a>五、组合模式</h2><p>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。</p><p>组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。</p><p>在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fce4762c12a74809aacc0143f05a2ce7~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>Mybatis支持动态SQL的强大功能，比如下面的这个SQL：</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;org.format.dynamicproxy.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="xml">    UPDATE users</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            , age = #</span><span class="hljs-template-variable">&#123;age&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;birthday != null and birthday != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="xml">            , birthday = #</span><span class="hljs-template-variable">&#123;birthday&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">    where id = $</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br><span class="xml">复制代码</span><br></code></pre></td></tr></table></figure><p>在这里面使用到了trim、if等动态元素，可以根据条件来生成不同情况下的SQL；</p><p>在DynamicSqlSource.getBoundSql方法里，调用了rootSqlNode.apply(context)方法，apply方法是所有的动态节点都实现的接口：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">SqlNode</span> &#123;<br><span class="hljs-built_in">bool</span>ean apply(DynamicContext context);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>对于实现该SqlSource接口的所有节点，就是整个组合模式树的各个节点：</strong></p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于TextSqlNode，因为它是最底层的叶子节点，所以直接将对应的内容append到SQL语句中：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public boolean apply(DynamicContext context) &#123;<br>GenericTokenParser parser = create<span class="hljs-constructor">Parser(<span class="hljs-params">new</span> BindingTokenParser(<span class="hljs-params">context</span>, <span class="hljs-params">injectionFilter</span>)</span>);<br>context.append<span class="hljs-constructor">Sql(<span class="hljs-params">parser</span>.<span class="hljs-params">parse</span>(<span class="hljs-params">text</span>)</span>);<br>return <span class="hljs-literal">true</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>但是对于IfSqlNode，就需要先做判断，如果判断通过，仍然会调用子元素的SqlNode，即contents.apply方法，实现递归的解析。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">DynamicContext context</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;<br>contents.apply(context);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="六、模板方法模式"><a href="#六、模板方法模式" class="headerlink" title="六、模板方法模式"></a>六、模板方法模式</h2><p>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。</p><p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。</p><p>模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>其中的BaseExecutor就采用了模板方法模式，它实现了大部分的SQL执行逻辑，然后把以下几个方法交给子类定制化完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> List&lt;BatchResult&gt; <span class="hljs-title">doFlushStatements</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds,</span></span><br><span class="hljs-function"><span class="hljs-params">ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>该模板方法类有几个子类的具体实现，使用了不同的策略：</strong></p><h3 id="1-简单SimpleExecutor"><a href="#1-简单SimpleExecutor" class="headerlink" title="1.简单SimpleExecutor"></a>1.简单SimpleExecutor</h3><p>每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。（可以是Statement或PrepareStatement对象）</p><h3 id="2-重用ReuseExecutor"><a href="#2-重用ReuseExecutor" class="headerlink" title="2.重用ReuseExecutor"></a>2.重用ReuseExecutor</h3><p>执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。（可以是Statement或PrepareStatement对象）</p><h3 id="3-批量BatchExecutor"><a href="#3-批量BatchExecutor" class="headerlink" title="3.批量BatchExecutor"></a>3.批量BatchExecutor</h3><p>执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理的；BatchExecutor相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是Statement或PrepareStatement对象）</p><p><strong>比如在SimpleExecutor中这样实现update方法：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>Statement stmt = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Configuration configuration = ms.getConfiguration();<br>StatementHandler <span class="hljs-keyword">handler</span> = configuration.newStatementHandler(<span class="hljs-keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">null</span>);<br>stmt = prepareStatement(<span class="hljs-keyword">handler</span>, ms.getStatementLog());<br><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">handler</span>.<span class="hljs-title">update</span><span class="hljs-params">(stmt)</span></span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>closeStatement(stmt);<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="七、适配器模式"><a href="#七、适配器模式" class="headerlink" title="七、适配器模式"></a>七、适配器模式</h2><p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6f7fcb8510047b0bc2e09172782ef02~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>在Mybatsi的logging包中，有一个Log接口：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> interface Log &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isDebugEnabled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTraceEnabled</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s, Throwable e)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span></span>;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>该接口定义了Mybatis直接使用的日志方法，而Log接口具体由谁来实现呢？Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df50a29785f432996b49e42d807ac60~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>比如对于Log4jImpl的实现来说，该实现持有了org.apache.log4j.Logger的实例，然后所有的日志方法，均委托该实例来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4jImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">Log</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> FQCN = Log4jImpl.class.getName();<br><br><span class="hljs-keyword">private</span> Logger log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Log4jImpl</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> clazz</span>)</span> &#123;<br>log = Logger.getLogger(clazz);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isDebugEnabled</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> log.isDebugEnabled();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isTraceEnabled</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> log.isTraceEnabled();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s, Throwable e</span>)</span> &#123;<br>log.log(FQCN, Level.ERROR, s, e);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.ERROR, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">debug</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.DEBUG, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">trace</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.TRACE, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">warn</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)</span> &#123;<br>log.log(FQCN, Level.WARN, s, <span class="hljs-literal">null</span>);<br>&#125;<br><br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="八、装饰者模式"><a href="#八、装饰者模式" class="headerlink" title="八、装饰者模式"></a>八、装饰者模式</h2><p>装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46cf5d22d32b4882b35d19fdce820371~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>在mybatis中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对PerpetualCache永久缓存进行缓存策略等方便的控制。如下图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb8621391df348aab88431138a1d2d30~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p><strong>用于装饰PerpetualCache的标准装饰器共有8个（全部在org.apache.ibatis.cache.decorators包中）：</strong></p><h3 id="1-FifoCache："><a href="#1-FifoCache：" class="headerlink" title="1.FifoCache："></a>1.FifoCache：</h3><p>先进先出算法，缓存回收策略</p><h3 id="2-LoggingCache："><a href="#2-LoggingCache：" class="headerlink" title="2.LoggingCache："></a>2.LoggingCache：</h3><p>输出缓存命中的日志信息</p><h3 id="3-LruCache："><a href="#3-LruCache：" class="headerlink" title="3.LruCache："></a>3.LruCache：</h3><p>最近最少使用算法，缓存回收策略</p><h3 id="4-ScheduledCache："><a href="#4-ScheduledCache：" class="headerlink" title="4.ScheduledCache："></a>4.ScheduledCache：</h3><p>调度缓存，负责定时清空缓存</p><h3 id="5-SerializedCache："><a href="#5-SerializedCache：" class="headerlink" title="5.SerializedCache："></a>5.SerializedCache：</h3><p>缓存序列化和反序列化存储</p><h3 id="6-SoftCache："><a href="#6-SoftCache：" class="headerlink" title="6.SoftCache："></a>6.SoftCache：</h3><p>基于软引用实现的缓存管理策略</p><h3 id="7-SynchronizedCache："><a href="#7-SynchronizedCache：" class="headerlink" title="7.SynchronizedCache："></a>7.SynchronizedCache：</h3><p>同步的缓存装饰器，用于防止多线程并发访问</p><h3 id="8-WeakCache："><a href="#8-WeakCache：" class="headerlink" title="8.WeakCache："></a>8.WeakCache：</h3><p><strong>基于弱引用实现的缓存管理策略</strong></p><p>另外，还有一个特殊的装饰器TransactionalCache：事务性的缓存</p><p>正如大多数持久层框架一样，mybatis缓存同样分为一级缓存和二级缓存</p><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1.一级缓存"></a>1.一级缓存</h3><p>又叫本地缓存，是PerpetualCache类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在SqlSession（DefaultSqlSession）中，所以一级缓存的生命周期与SqlSession是相同的。</p><h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2.二级缓存"></a>2.二级缓存</h3><p>又叫自定义缓存，实现了Cache接口的类都可以作为二级缓存，所以可配置如encache等的第三方缓存。二级缓存以namespace名称空间为其唯一标识，被保存在Configuration核心配置对象中。</p><h3 id="3-二级缓存对象"><a href="#3-二级缓存对象" class="headerlink" title="3.二级缓存对象"></a>3.二级缓存对象</h3><p>默认类型为PerpetualCache，如果配置的缓存是默认类型，则mybatis会根据配置自动追加一系列装饰器。</p><p><strong>Cache对象之间的引用顺序为：</strong></p><p>SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p><h2 id="九、迭代器模式"><a href="#九、迭代器模式" class="headerlink" title="九、迭代器模式"></a>九、迭代器模式</h2><p>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1308f1e7c444af9ae7e66110668ccac~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>Java的Iterator就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：</p><p>![img](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>比如Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertyTokenizer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">PropertyTokenizer</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> indexedName;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> index;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> children;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PropertyTokenizer</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fullname</span>)</span> &#123;<br>int delim = fullname.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>name = fullname.substring(<span class="hljs-number">0</span>, delim);<br>children = fullname.substring(delim + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>name = fullname;<br>children = <span class="hljs-literal">null</span>;<br>&#125;<br>indexedName = name;<br>delim = name.indexOf(<span class="hljs-string">&#x27;[&#x27;</span>);<br><span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>index = name.substring(delim + <span class="hljs-number">1</span>, name.length() - <span class="hljs-number">1</span>);<br>name = name.substring(<span class="hljs-number">0</span>, delim);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getIndex</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getIndexedName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> indexedName;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getChildren</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> children;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> children != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PropertyTokenizer <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PropertyTokenizer(children);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<br><span class="hljs-string">&quot;Remove is not supported, as it has no meaning in the context of properties.&quot;</span>);<br>&#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>可以看到，这个类传入一个字符串到构造函数，然后提供了iterator方法对解析后的子串进行遍历，是一个很常用的方法类。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单点登录（SSO）</title>
    <link href="/blog/2021/01/01/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/"/>
    <url>/blog/2021/01/01/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单点登录又称之为Single Sign On，简称SSO，单点登录可以通过基于用户会话的共享，他分文两种，先来看第一种，那就是他的原理是分布式会话来实现。</p><p>比如说现在有个一级域名为 <a href="http://www.imooc.com/">www.imooc.com</a> ，是教育类网站，但是慕课网有其他的产品线，可以通过构建二级域名提供服务给用户访问，比如： music.imooc.com ， blog.imooc.com 等等，分别为慕课音乐以及慕课博客等，用户只需要在其中一个站点登录，那么其他站点也会随之而登录。</p><p>也就是说，用户自始至终只在某一个网站下登录后，那么他所产生的会话，就共享给了其他的网站，实现了单点网站登录后，同时间接登录了其他的网站，那么这个其实就是单点登录，他们的会话是共享的，都是同一个用户会话。</p><h2 id="Cookie-Redis-实现-SSO"><a href="#Cookie-Redis-实现-SSO" class="headerlink" title="Cookie + Redis 实现 SSO"></a>Cookie + Redis 实现 SSO</h2><p>那么之前我们所实现的分布式会话后端是基于redis的，如此会话可以流窜在后端的任意系统，都能获取到缓存中的用户数据信息，前端通过使用cookie，可以保证在同域名的一级二级下获取，那么这样一来，cookie中的信息userid和token是可以在发送请求的时候携带上的，这样从前端请求后端后是可以获取拿到的，这样一来，其实用户在某一端登录注册以后，其实cookie和redis中都会带有用户信息，只要用户不退出，那么就能在任意一个站点实现登录了。</p><p>那么这个原理主要也是cookie和网站的依赖关系，顶级域名 <a href="http://www.imooc.com/">www.imooc.com</a> 和 *.imooc.com的cookie值是可以共享的，可以被携带至后端的，比如设置为 .imooc.com，.t.mukewang.com，如此是OK的。<br> 二级域名自己的独立cookie是不能共享的，不能被其他二级域名获取，比如：music.imooc.com的cookie是不能被mtv.imooc.com共享，两者互不影响，要共享必须设置为.imooc.com。</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/00e2afe7458740a8bec8c2326e3ab6b1~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h2 id="顶级域名不同怎么办"><a href="#顶级域名不同怎么办" class="headerlink" title="顶级域名不同怎么办?"></a>顶级域名不同怎么办?</h2><p>上一节单点登录是基于相同顶级域名做的，那么如果顶级域名都不一样，咋办？比如 <a href="http://www.imooc.com/">www.imooc.com</a> 要和<a href="http://www.mukewang.com/">www.mukewang.com</a> 的会话实现共享，这个时候又该如何？！如下图，这个时候的cookie由于顶级域名不同，就不能实现cookie跨域了，每个站点各自请求到服务端，cookie无法同步。比如，<a href="http://www.imooc.com/">www.imooc.com</a> 下的用户发起请求后会有cookie，但是他又访问了<a href="http://www.abc.com/">www.abc.com</a> ，由于cookie无法携带，所以会要你二次登录。<br> 那么遇到顶级域名不同却又要实现单点登录该如何实现呢？我们来参考下面一张图： <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/668be1732242402a8a8f83534b883774~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>如上图所示，多个系统之间的登录会通过一个独立的登录系统去做验证，它就相当于是一个中介公司，整合了所有人，你要看房经过中介允许拿钥匙就行，实现了统一的登录。那么这个就称之为CAS系统，CAS全称为Central Authentication Service即中央认证服务，是一个单点登录的解决方案，可以用于不同顶级域名之间的单点登录。</p><p>过程解析 <img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/fe338ecce616416d868e91c8058ce0e1~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><p>用户首次登录时流程如下：</p><p>1)、用户浏览器访问系统A需登录受限资源，此时进行登录检查，发现未登录，然后进行获取票据操作，发现没有票据。</p><p>2)、系统A发现该请求需要登录，将请求重定向到认证中心，获取全局票据操作，没有，进行登录。</p><p>3)、认证中心呈现登录页面，用户登录，登录成功后，认证中心重定向请求到系统A，并附上认证通过令牌，此时认证中心同时生成了全局票据。</p><p>4)、此时再次进行登录检查，发现未登录，然后再次获取票据操作，此时可以获得票据(令牌)，系统A与认证中心通信，验证令牌有效,证明用户已登录。</p><p>5)、系统A将受限资源返给用户</p><p>已登录用户首次访问应用群中系统B时：</p><p>1)、浏览器访问另一应用B需登录受限资源，此时进行登录检查，发现未登录，然后进行获取票据操作，发现没有票据。</p><p>2)、系统B发现该请求需要登录，将请求重定向到认证中心，获取全局票据操作，获取全局票据，可以获得，认证中心发现已经登录。</p><p>3)、认证中心发放临时票据(令牌)，并携带该令牌重定向到系统B。</p><p>4)、此时再次进行登录检查，发现未登录，然后再次获取票据操作，此时可以获得票据(令牌)，系统B与认证中心通信，验证令牌有效,证明用户已登录。</p><p>5)、系统B将受限资源返回给客户端。</p><p>全局票据的意义就是判断用户是否已经在认证中心登陆过。<br> 临时票据的意义是签发给用户一个登陆的认证。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SSOController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisOperator redisOperator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TOKEN = <span class="hljs-string">&quot;redis_user_token&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TICKET = <span class="hljs-string">&quot;redis_user_ticket&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_TMP_TICKET = <span class="hljs-string">&quot;redis_tmp_ticket&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COOKIE_USER_TICKET = <span class="hljs-string">&quot;cookie_user_ticket&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String returnUrl,</span></span><br><span class="hljs-function"><span class="hljs-params">                        Model model,</span></span><br><span class="hljs-function"><span class="hljs-params">                        HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                        HttpServletResponse response)</span> </span>&#123;<br><br>        model.addAttribute(<span class="hljs-string">&quot;returnUrl&quot;</span>, returnUrl);<br><br>        <span class="hljs-comment">// 1. 获取userTicket门票，如果cookie中能够获取到，证明用户登录过，此时签发一个一次性的临时票据并且回跳</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br><br>        <span class="hljs-keyword">boolean</span> isVerified = verifyUserTicket(userTicket);<br>        <span class="hljs-keyword">if</span> (isVerified) &#123;<br>            String tmpTicket = createTmpTicket();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + returnUrl + <span class="hljs-string">&quot;?tmpTicket=&quot;</span> + tmpTicket;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 用户从未登录过，第一次进入则跳转到CAS的统一登录页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验CAS全局用户门票</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userTicket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifyUserTicket</span><span class="hljs-params">(String userTicket)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 0. 验证CAS门票不能为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userTicket)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 验证CAS门票是否有效</span><br>        String userId = redisOperator.get(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userId)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 验证门票对应的user会话是否存在</span><br>        String userRedis = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userRedis)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CAS的统一登录接口</span><br><span class="hljs-comment">     *      目的：</span><br><span class="hljs-comment">     *          1. 登录后创建用户的全局会话                 -&gt;  uniqueToken</span><br><span class="hljs-comment">     *          2. 创建用户全局门票，用以表示在CAS端是否登录  -&gt;  userTicket</span><br><span class="hljs-comment">     *          3. 创建用户的临时票据，用于回跳回传          -&gt;  tmpTicket</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/doLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doLogin</span><span class="hljs-params">(String username,</span></span><br><span class="hljs-function"><span class="hljs-params">                          String password,</span></span><br><span class="hljs-function"><span class="hljs-params">                          String returnUrl,</span></span><br><span class="hljs-function"><span class="hljs-params">                          Model model,</span></span><br><span class="hljs-function"><span class="hljs-params">                          HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                          HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        model.addAttribute(<span class="hljs-string">&quot;returnUrl&quot;</span>, returnUrl);<br><br>        <span class="hljs-comment">// 0. 判断用户名和密码必须不为空</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(username) ||<br>                StringUtils.isBlank(password)) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;errmsg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 实现登录</span><br>        Users userResult = userService.queryUserForLogin(username,<br>                MD5Utils.getMD5Str(password));<br>        <span class="hljs-keyword">if</span> (userResult == <span class="hljs-keyword">null</span>) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;errmsg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 实现用户的redis会话</span><br>        String uniqueToken = UUID.randomUUID().toString().trim();<br>        UsersVO usersVO = <span class="hljs-keyword">new</span> UsersVO();<br>        BeanUtils.copyProperties(userResult, usersVO);<br>        usersVO.setUserUniqueToken(uniqueToken);<br>        redisOperator.set(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userResult.getId(),<br>                JsonUtils.objectToJson(usersVO));<br><br>        <span class="hljs-comment">// 3. 生成ticket门票，全局门票，代表用户在CAS端登录过</span><br>        String userTicket = UUID.randomUUID().toString().trim();<br><br>        <span class="hljs-comment">// 3.1 用户全局门票需要放入CAS端的cookie中</span><br>        setCookie(COOKIE_USER_TICKET, userTicket, response);<br><br>        <span class="hljs-comment">// 4. userTicket关联用户id，并且放入到redis中，代表这个用户有门票了，可以在各个景区游玩</span><br>        redisOperator.set(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket, userResult.getId());<br><br>        <span class="hljs-comment">// 5. 生成临时票据，回跳到调用端网站，是由CAS端所签发的一个一次性的临时ticket</span><br>        String tmpTicket = createTmpTicket();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * userTicket: 用于表示用户在CAS端的一个登录状态：已经登录</span><br><span class="hljs-comment">         * tmpTicket: 用于颁发给用户进行一次性的验证的票据，有时效性</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 举例：</span><br><span class="hljs-comment">         *      我们去动物园玩耍，大门口买了一张统一的门票，这个就是CAS系统的全局门票和用户全局会话。</span><br><span class="hljs-comment">         *      动物园里有一些小的景点，需要凭你的门票去领取一次性的票据，有了这张票据以后就能去一些小的景点游玩了。</span><br><span class="hljs-comment">         *      这样的一个个的小景点其实就是我们这里所对应的一个个的站点。</span><br><span class="hljs-comment">         *      当我们使用完毕这张临时票据以后，就需要销毁。</span><br><span class="hljs-comment">         */</span><br><br><span class="hljs-comment">//        return &quot;login&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + returnUrl + <span class="hljs-string">&quot;?tmpTicket=&quot;</span> + tmpTicket;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/verifyTmpTicket&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IMOOCJSONResult <span class="hljs-title">verifyTmpTicket</span><span class="hljs-params">(String tmpTicket,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 使用一次性临时票据来验证用户是否登录，如果登录过，把用户会话信息返回给站点</span><br>        <span class="hljs-comment">// 使用完毕后，需要销毁临时票据</span><br>        String tmpTicketValue = redisOperator.get(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(tmpTicketValue)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 0. 如果临时票据OK，则需要销毁，并且拿到CAS端cookie中的全局userTicket，以此再获取用户会话</span><br>        <span class="hljs-keyword">if</span> (!tmpTicketValue.equals(MD5Utils.getMD5Str(tmpTicket))) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 销毁临时票据</span><br>            redisOperator.del(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket);<br>        &#125;<br><br>        <span class="hljs-comment">// 1. 验证并且获取用户的userTicket</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br>        String userId = redisOperator.get(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userId)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 验证门票对应的user会话是否存在</span><br>        String userRedis = redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userRedis)) &#123;<br>            <span class="hljs-keyword">return</span> IMOOCJSONResult.errorUserTicket(<span class="hljs-string">&quot;用户票据异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 验证成功，返回OK，携带用户会话</span><br>        <span class="hljs-keyword">return</span> IMOOCJSONResult.ok(JsonUtils.jsonToPojo(userRedis, UsersVO.class));<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IMOOCJSONResult <span class="hljs-title">logout</span><span class="hljs-params">(String userId,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  HttpServletRequest request,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 0. 获取CAS中的用户门票</span><br>        String userTicket = getCookie(request, COOKIE_USER_TICKET);<br><br>        <span class="hljs-comment">// 1. 清除userTicket票据，redis/cookie</span><br>        deleteCookie(COOKIE_USER_TICKET, response);<br>        redisOperator.del(REDIS_USER_TICKET + <span class="hljs-string">&quot;:&quot;</span> + userTicket);<br><br>        <span class="hljs-comment">// 2. 清除用户全局会话（分布式会话）</span><br>        redisOperator.del(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + userId);<br><br>        <span class="hljs-keyword">return</span> IMOOCJSONResult.ok();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建临时票据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">createTmpTicket</span><span class="hljs-params">()</span> </span>&#123;<br>        String tmpTicket = UUID.randomUUID().toString().trim();<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisOperator.set(REDIS_TMP_TICKET + <span class="hljs-string">&quot;:&quot;</span> + tmpTicket,<br>                    MD5Utils.getMD5Str(tmpTicket), <span class="hljs-number">600</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmpTicket;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCookie</span><span class="hljs-params">(String key,</span></span><br><span class="hljs-function"><span class="hljs-params">                           String val,</span></span><br><span class="hljs-function"><span class="hljs-params">                           HttpServletResponse response)</span> </span>&#123;<br><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(key, val);<br>        cookie.setDomain(<span class="hljs-string">&quot;sso.com&quot;</span>);<br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteCookie</span><span class="hljs-params">(String key,</span></span><br><span class="hljs-function"><span class="hljs-params">                              HttpServletResponse response)</span> </span>&#123;<br><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(key, <span class="hljs-keyword">null</span>);<br>        cookie.setDomain(<span class="hljs-string">&quot;sso.com&quot;</span>);<br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        cookie.setMaxAge(-<span class="hljs-number">1</span>);<br>        response.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getCookie</span><span class="hljs-params">(HttpServletRequest request, String key)</span> </span>&#123;<br><br>        Cookie[] cookieList = request.getCookies();<br>        <span class="hljs-keyword">if</span> (cookieList == <span class="hljs-keyword">null</span> || StringUtils.isBlank(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        String cookieValue = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; cookieList.length; i ++) &#123;<br>            <span class="hljs-keyword">if</span> (cookieList[i].getName().equals(key)) &#123;<br>                cookieValue = cookieList[i].getValue();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> cookieValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>单点登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>业务和技术</title>
    <link href="/blog/2020/12/28/%E4%B8%9A%E5%8A%A1%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    <url>/blog/2020/12/28/%E4%B8%9A%E5%8A%A1%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p> 身处业务的我们，技术上如何自拔？</p><p>文章目录概述自我回顾业务与技术的困扰带着问题思考什么是技术和业务业务技术技术和业务的关系业务与为解决业务而衍生的业务对待业务的态度因你在团队的角色不同而不同从所谓的业务代码中跳出如何轻松、漂亮的搞定业务……</p><p>看了网上的学习方法，也综合了一下他人的意见，总结下来，想来自我学习以及自我提升的方式，大抵就是如下三种了</p><ol><li> 从文字视图中学习</li><li> 向身边的人学习</li><li> 向自己学习</li></ol><p>其中向自己学习最为靠谱。</p><p>而向自己学习最有效的方法，就是自省。</p><p>“曾子曰: 吾日三省吾身，为人谋而不忠乎? 与朋友交而不信乎? 传不习乎?”</p><p>“古人诚不我欺”。总结，是自省反馈出来的一种结果。写这篇文章，希望不只是自己能够学到东西，进行成长，也希望能将自己的思考和经验传播出来，与大家共勉。</p><p>从年初到年末，从一个技术人员 仅 3 人的小手游公司到了如今开发团队近 200 人的中大型公司。</p><p>下面从工作和个人成长两个方面进行入手，剖析一下自己。</p><p>工作上，从一个人埋头干活，到主导跨 4，5 个小部门共同协作的技术经理以及现在作为一个小组的 leader，作为员工，如何在业务中继续成长下去以及如何在公司体现出自己的不可替代性（技术和业务上的），也让公司看到你的潜力（你的成长能为公司为团队带来的收益）；作为小组 leader，如何更好的带好自己的小组（这点在后面并没有讲到，明年见）；</p><p>另外，自己技术上的成长。也许我扯一大堆的技术名词，并不是很直观，简单粗暴的讲，就是从一个日流量不到万级的游戏到如今日流量亿级的项目以及其他大大小小高流量项目的开发。</p><p>稍微从技术层面说就是 Java 的单体 SpringBoot 项目发展到基于 Dubbo、SpringBoot 的，使用到分布式事务，分布式锁，分布式数据分片，负载、限流、熔断、降级、链路追踪、elasticsearch、消息队列、缓存 redis、自动化部署、apollo、Sentinel 等一大堆名词和技术搭建的高并发高可用服务化项目；</p><p>凭我这浅薄的知识，至少目前不可能用自己理解的概念来把上面列到的一些知识点的原理来进行讲解，自己对其也只是懂个大概，更不想误人子弟，仅仅讲点自己也似懂非懂的概念。自己目前对其理解的，就是很多开发所处的，调用接口使用的这个层次。原理知识，以后会慢慢道来。余生漫漫，请君勿急。</p><p>篇幅有限，开始想着能写很多，但是思考下来，关于技术和业务就能写一大篇的文字。</p><p>相信很多开发经常会被业务代码所困扰，绝大多数都是有梦想的程序猿，大家都有着一个想使用代码改变世界的梦，当初我选择软件工程这个专业，原因之一就是我觉得我哥使用代码开发一个网站出来是一件牛逼哄哄的事情。</p><p>现在倒是觉得，比如开发一个 GitHub 开源项目的 star 几千上万才是牛逼哄哄的事情了。</p><p>在工作中，天天写业务代码，自己如何在技术上进步？大家是不是也经常心生疑惑，我以前也困扰过（自己的老大在总结中点醒了我，对技术有追求，但是并没有很好的结合业务。自己也好好进行了反省，搜集了很多资料，也询问了另外的大佬，如何更好的处理业务和技术），现在倒是觉得贴合业务更加能够提升打磨自己的技术以及增加自己在公司的不可替代性。</p><p>看到有文章这样比喻业务与技术，写业务代码学习的技术就像游戏中升级打怪一样，开始打小怪，经验值很高，越到后面经验值越少，打小怪已经不能提升经验值了。这个时候就需要打一些更高级的怪，刷一些有挑战的副本了，没看到哪个游戏只要一直打小怪就能升到顶级的。 成为技术大牛的路也是类似的，你要不断的提升自己的水平，然后面临更大的挑战，通过应对这些挑战从而使自己水平更上一级，然后如此往复，最终达到技术大牛甚至业界大牛的境界，写业务代码只是这个打怪升级路上的一个挑战而已。业务代码都写不好的程序员肯定无法成为技术大牛，但只把业务代码写好的程序员也还不能成为技术大牛。对应自己所处的角色，更好的挖掘出自己的潜力与提升实力，创造出更多的价值。</p><p>再说一个现实中的问题，工作都是基于业务来驱动的，国内基本所有公司（抛开研究不讲，广义上来说，所有的技术都是为业务服务的）都是业务来驱动的。 阿里的中间件团队，也是业务驱动而成立的团队（为了解决阿里内部复杂的业务场景、飞速的业务增长、高并发的大促洪峰、层出不穷的稳定性问题而成立的团队），只是做的事情比我们的高大上（高分布式 RPC 服务框架、高可靠分布式消息中间件、分布式数据层、海量数据存储、实时计算、系统性能优化、架构高可用等），后面会介绍到因业务需要而衍生高深技术。</p><h2 id="带着问题思考"><a href="#带着问题思考" class="headerlink" title="带着问题思考"></a>带着问题思考</h2><p>作为开发人员，如何面对 “CRUD，天天写业务代码” 这个事情，可以思考下面的几个问题</p><ol><li> 什么是技术和业务</li><li> 业务和技术的关系</li><li> 业务与为解决业务而衍生的业务</li><li> 对待业务的态度因你在团队的角色不同而不同</li><li> 如何从所谓的业务代码中学习深入</li></ol><h3 id="什么是技术和业务"><a href="#什么是技术和业务" class="headerlink" title="什么是技术和业务"></a>什么是技术和业务</h3><p>接下来就从业务和技术来入手进行分析了。</p><p>回归到这两个词的定义。</p><p>维基百科是这么解释的：</p><h4 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h4><p><strong>业务是指某种有目的的工作或工作项目。</strong> 考虑到企业已经成为现代社会最常见的活动主体，故可为业务作现实定义，即企业运用科学方法和生产工艺生产出可交付用户使用的产品与服务，并以此为企业带来利益的行为。</p><p>不只是为企业，能为人类本身带来利益的需求，都可以称之为业务。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p><strong>技术可以指人类对机器、硬件或人造器皿的运用，但它也可以包含更广的架构，如系统、组织方法学和技巧</strong></p><p>它是知识进化的主体，由社会形塑或形塑社会。如电脑等新技术的增生使人们相信技术是社会进化的决定性力量，换句话说，它是驱动改变的自发性动力。</p><p>通过人为创造条件，让指定的事件能够按照人类的意愿发生，这就是技术。</p><p>比如取火，最早人类只能靠打雷等自然现象产生火。</p><p>取火其实就是一个业务目标，要解决的是人类自己的问题，这就是业务，实际就是人类的利益。这个时候人类并没有生火的技术，只能靠不断的加木材，保持火不熄灭。</p><p>后来人们发现了钻木取火：只要用一个干的木棍，在另一个干木表面快速的转动，就可以生火。这个办法让人类可以自行创造火源，就产生了钻木取火的技术。</p><p>但是双手快速转动木棍钻木取火，并不是所有人都能够做得到的，需要很多力量和速度，对人的要求太高。为了解决快速转动的问题，就有人采用弓弦来提升木棍转动的速度。</p><p>业务目标是为了取火，钻木取火这个技术的出现解决了这个问题。</p><p>钻木取火的效率不高，影响了业务（取火）的效率，就有了进一步改进的动机，改进转动木棍的方式，产生了弓弦转动木棍的技术。</p><p>再用比较现代化的业务来进行说明一下</p><p>比如取款就是一种业务，ATM 机内运转的软件，要解决的业务就是取款。（取款是为了交易，当初交易不方便，于是便有了移动支付，聚合支付等等） 比如买火车票也是业务，12306 这个网站就是为解决买车票的业务服务的。（春运买票不易，于是出现了抢票软件，加速软件等等）</p><p>实现软件 / 网站功能的系统，架构，框架等便是技术（而技术本身又可能是建立在其他技术之上的）。</p><p>从上面的定义以及例子中，可以知道，业务是具有强目的性的，比如说我的业务就是为了取款，而 12306 网站的业务就是为了解决买车票的业务服务，是为某个具体特定的问题而生的；但是业务就具有弱目的性，普遍性和通用性，比如前面实现取款的技术框架，可能在 12306 中的框架还能复用等等。</p><p>技术存在演变，也是为了更方便的服务于业务本身。</p><h3 id="技术和业务的关系"><a href="#技术和业务的关系" class="headerlink" title="技术和业务的关系"></a>技术和业务的关系</h3><p>接下来以取火为例吧。</p><p>前面说到最开始是通过雷电获取火源，接下来是火石、钻木取火，然后渐渐演变到弓弦加速转动木棍取火，随着科技的发展，渐渐的生成火源便成为了一种业务，并且可以出售带来另外的利益，这个时候，生成火柴、打火机便是业务。而其中业务中使用的剧烈氧化还原反应、汽油制作、物理化学知识、工业制作等便是技术。</p><p>简单的可以得出如下几个结论</p><ol><li> 技术是为了解决业务的问题而产生的，没有了业务，技术就没有了存在的前提</li><li> 有了更好的技术，效率更差的技术，就会慢慢的被淘汰，消失，一切都遵从人类的利益诉求 – 也就是业务</li></ol><p>有人会问，不用钻木取火了，但是弓弦加速转动木棍还可以用啊？ 没错，因为弓弦转动木棍这个技术，不是来生火的，是用来加速木棍转动的，所解决的问题不一样（引出了后面因解决业务而衍生出来的业务）。但是多种不同的技术，合理结合起来，会更好更有效率的解决业务问题。</p><p>所以技术与技术之间，有如下的两种关系：</p><ol><li> 在解决同一个业务问题的前提下，更高效，更低成本的技术，会淘汰低效，高成本的技术。这是人类利益诉求所决定的。</li><li> 一般刚开始解决根本问题的技术（钻木取火）的效率是比较低的，只是把不可能变成了可能（从这一点上来说，技术才是业务的 促成者）。然后就会有提高效率的需求出现，要求改进这个技术。这个技术的低效率部分就会被其他人（或者技术发明人自己）加以改进，这部分就会形成新的技术。</li></ol><p>当更好的技术发生的时候，必定会形成一个切分，新技术会通过某种方式和原有的技术连接在一起形成一个整体，让这个新的技术可以和原有技术共同工作，使得原有的技术可以用更高的效率解决问题。因为要解决的主要业务（生火）并没有发生改变，分拆所形成的是一个树状的结构。</p><p>这个时候其实已经产生了架构。也就是说，一般是先有技术，才会有架构。这些其他技术（弓弦拉动木棍、氧化还原反应生火等），是从直接解决问题的初始主要技术中分拆出来形成的，并通过树状结构和主要技术（钻木取火）组合在一起。在解决主要问题（生火）之后，再开始逐渐的分拆为更为细粒度的技术（弓弦转木棍）</p><p>而这个细粒度的技术（弓弦转动木棍）往往不会和业务的主要目标（生火）发生直接的关系。不同的技术，通过树状结构，组合在一起，形成了一个完整的架构解决方案，共同完成业务的目标。这就是技术，业务和架构之间的关系。（分析火柴与打火机原理生成火源类似）</p><p>很多人把这个过程称为架构的进化，我更愿意把这个过程称为技术的进步所导致的新的架构分拆，因为这个过程内在的动力，更多的是来自技术对解决业务问题的解决。</p><p>我们回到开发者身上来看，写业务代码多一些，还是所谓的技术代码多一些，没有高下之分，只有个人取向和组织分工的不同。</p><h3 id="业务与为解决业务而衍生的业务"><a href="#业务与为解决业务而衍生的业务" class="headerlink" title="业务与为解决业务而衍生的业务"></a>业务与为解决业务而衍生的业务</h3><p>打开淘宝首页，随便浏览一个商品详情页面。</p><p>是不是有人会第一眼觉得商品封面，优惠券等相关信息的代码是没有什么技术含量的，因为那些是业务代码。</p><p>是不是觉得写商品页面的框架，分布式架构，分布式缓存，JMQ，Redis 或者说是 等技术才是有技术含量的。</p><p>但实际上，所谓的业务代码和技术代码，它们的区别，仅仅是和业务的距离远近不同而已：业务代码离业务更近，技术代码离业务稍远。它们最终都是指向业务实现的。</p><p>而且，可以考虑换一种视角来看业务，就会发现，其实每一层代码，都服务于它的上一层代码，上一层代码，就是它的业务！</p><p>![](data:;base64,&lt;?xml version=)” alt=”img” data-src=”<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901f02baa8e24b23abc9cf09be674f41~tplv-k3u1fbpfcp-zoom-1.image&quot;">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901f02baa8e24b23abc9cf09be674f41~tplv-k3u1fbpfcp-zoom-1.image&quot;</a> data-width=”800” data-height=”600” /&gt;</p><p>比如详情页架构的第 2 层 “对外提供 API” 中的“商品介绍” ，它的服务对象，就是前端页面，要解决的业务，就是“响应前端页面的查询，提供商品介绍”</p><p>而第 2 层底部的前端数据集群（JIMDB），它的服务对象，就是商品介绍，要解决的业务，就是 “存储商品或代理商品介绍信息”。</p><p>简单说，每一层技术实现，都服务于上一层，都以上一层的需求为业务。 从这个角度讲，现实中的业务在被虚拟化的过程中，会在技术实现层面引发分层，产生中间性、对用户不可见的新业务。</p><p>但是为什么很多开发者又觉得所做的技术实现越接近现实业务越没技术含量呢？</p><p>这是因为，你越接近用户业务：</p><ol><li> 细节越多，繁琐度越高，越不容易做好，越容易因为一点小瑕疵而被否定，让人觉得自己的劳动没价值</li><li> 现实性越强，变化几率越高，越容易来回修改代码，越让人觉得自己的掌控感低下</li><li> 实现的代码可迁移性越差，劳动成果被复用的概率越低</li></ol><p>而当你远离用户业务时：</p><ol><li> 你用到的技术，多数都是被高度抽象过的、用来解决从用户业务衍生出的技术性业务的，它们比具体的用户业务稳定，它们的适用面更广，也更容易被迁移到其它的业务领域</li><li> 你的劳动成果因为具有抽象属性，被复用的概率会更高，你会更愿意打磨它，会更有成就感</li><li> 你受到压力，经过距离用户近的几层同事的传递，得到了衰减，没那么大</li><li> 你打交道的对象，多数时候是内部同事、是技术人群，更容易达成一致</li></ol><h3 id="对待业务的态度因你在团队的角色不同而不同"><a href="#对待业务的态度因你在团队的角色不同而不同" class="headerlink" title="对待业务的态度因你在团队的角色不同而不同"></a>对待业务的态度因你在团队的角色不同而不同</h3><p>你对业务的态度，会因你在团队中承担的角色不同而不同。这是由开发团队的组织结构和职责分工导致的。</p><p>下面是 “团队结构、能力与职责” 图：</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/7e6220e13c624ca3852ac1cad0528ec2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在一个开发团队中，架构师这个角色，会负责业务拆分和软件架构的工作，并且领导团队来实现满足业务的软件。</p><ul><li>  注 1 ：有的研发团队里有业务架构师和软件架构师两种角色，业务拆分由业务架构师或业务分析师完成。</li><li>  注 2 ：软件架构师和业务架构师这两个角色也可能由没有架构师头衔的研发经理兼任。 架构师一定是要以业务为导向的，要搞懂业务的。所以，在架构师这个阶段，在团队管理者这个阶段，业务的重要性，往往是高于技术的，在他们的眼中，业务统领技术，技术是用来实现业务的。</li></ul><p>当团队完成业务架构和软件架构之后，就会选择不同的开发者来负责不同功能模块的实现。</p><p>负责不同功能模块实现的开发者，必须能够理解业务，并且要熟悉某个技术栈，能够进行模块设计和任务拆分，我称这样的开发者为 “熟练开发者”。</p><p>熟练开发者会承接由架构师分派的子业务，负责模块设计和拆分，把拆分后的小任务，交给普通程序员来完成。</p><p>当你是一个熟练开发者时，业务和技术几乎同等重要，因为：</p><p>你不理解业务，就很难将子业务模块映射到软件实现上，也很难做进一步的业务拆分。</p><p>你不具备完整的技术栈和相应的知识体系，就很难找到合适的技术来实现业务，也很难做软件模块的拆分。</p><p>熟练开发者完成了子业务和软件模块的拆分，会形成一系列的叶子型任务，并把它们分派给具备特定专项技术能力的普通程序员。</p><p>普通程序员要做的事情比较简单，就是接受别人分派的任务，实现特定的业务细节。</p><p>注意当你是一个普通程序员的时候，团队要求你具备一定的专项技术能力，能够完成任务即可，你的角色，就拿把螺丝刀拧螺丝，拧好螺丝就 Ok 。</p><p>这个时候，你内心是痛苦的，对不停地写业务代码是拒绝的，因为你要再找工作时，别的组织看重你的专项技术能力甚于业务能力（他们有人做业务拆分，你过去了能拧螺丝即可），而你在现有组织中，却因为深陷业务代码的编写而无法持续淬炼你的技能能力。</p><p>而开发中普通程序员是占比最大的，所以经常能看到文章或者有人提问纠结写业务代码这件事！</p><p>那么，该如何才能解脱呢？</p><h3 id="从所谓的业务代码中跳出"><a href="#从所谓的业务代码中跳出" class="headerlink" title="从所谓的业务代码中跳出"></a>从所谓的业务代码中跳出</h3><p>首先，很遗憾的告诉各位，这不是一蹴而就的，是一个技术深度和业务层次积累的过程，这需要时间。</p><p>作为一名技术人员，一方面要认识到技术只是用来解决特定问题的工具，所以一定要从问题出发，提出解决方案，而不能一味的追求技术的完美。</p><p>另一方面，也要认识到技术本身也可能成为一项业务，只要它足够通用，能够给其他人、组织提供有价值的解决方案。</p><p>但是，公司业务代码太多，总是 “沉迷业务无法自拔”，如何更好的提升自己，让自己发光发亮，能够提供更多有价值的东西。</p><p>也看到很多文章说的是，需要自己挤出时间出来进行学习，也就是在工作之余进行提升，自己认真的想一想，在业务上真的是无法提升自己吗？ 当我们轻松、漂亮的搞定业务后，能不能再从下面的方面入手进行思考呢。 例如</p><ul><li>  熟悉业务相关的更多业务和代码，不管业务是不是你负责的，不管代码是不是你写的；这样的好处太多，不列举，有兴趣的可以搜索</li><li>  这个业务有没有优化的点；</li><li>  重复代码太多，是不是可以考虑使用设计模式进行优化</li><li>  系统中业务是不是庞大，能不能进行解耦成几个服务或者模块</li><li>  开源框架中的一些功能正好能够用到，可不可以引进</li><li>  代码中性能有没有需要优化的地方</li><li>  在高并发情况下，有没有潜在 Bug</li><li>  能不能使用缓存，减少数据库压力，增加访问性能</li><li>  思考一下这个系统的架构，该系统使用了些什么技术，我还有哪些不知道的</li><li>  系统为什么使用这个技术，为什么使用这种架构</li><li>  下次类似的业务，我能不能抽出相关代码，进行复用，或者直接开发成服务，暴露出来</li><li>  … …</li></ul><p>很多普通程序员天天抱怨老写业务代码没长进，可手上的任务却总是敷衍了事，完成得凑凑合合，甚至还出现频现线上 Bug，那是很难摆重复简单业务任务的泥沼的。</p><h4 id="如何轻松、漂亮的搞定业务"><a href="#如何轻松、漂亮的搞定业务" class="headerlink" title="如何轻松、漂亮的搞定业务"></a>如何轻松、漂亮的搞定业务</h4><p>可以从这四方面进行入手：</p><ol><li> 在深度（研究领域中非常具有代表性的某几个框架的原理链）和广度（开源的框架这么多，至少要认识吧）两个方面提升技术能力（如果当下任务繁重，就利用业余时间练习）</li><li> 把自己的做的事情放在全局理解，提升业务理解能力</li><li> 培养好的工作习惯，比如计划、回顾、总结等</li><li> 做好汇报和展示，让领导知道你的能力</li></ol><p>当你慢慢做了上面 4 点之后，每次拿到任务，都能轻松又漂亮地搞定，超出领导的预期，还有未发挥完的火力，那团队就一定会给你复杂一点的任务。</p><p>如果你还能轻松、漂亮地搞定并且还有余力，那团队就会给你复杂度再高一些的任务。</p><p>往复循环，你就可以跳出最简单的业务代码编写，做越来越重要的事情，你的不可替代性也变得越来越强。</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署到gitee</title>
    <link href="/blog/2020/12/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee/"/>
    <url>/blog/2020/12/27/hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee/</url>
    
    <content type="html"><![CDATA[<p>因为服务器和域名，即将到期，所以准备关闭自建博客，将博客迁移到码云上，用免费的域名和存储。</p><p>首先选择哪个git平台，我尝试了使用github pages，但很难受，我只能在FAN QIANG状态下正常访问，而且速度偏慢，改了hosts也没啥用，而且文章数如果多了起来，更新网站的速度更是慢得不行，所以还是选择国内的一些git平台比较好，比如码云(gitee)，Coding等。</p><p>然后是博客系统的选择，我首先尝试的是Gridea，界面可以，挺好看的，但就是只支持github pages和coding pages，还有个人服务器搭建。github pages不用说，速度慢，我失败了无数次。coding我也试了很多次，实在是找不出问题所在(基本都是连不上的问题，没法解决)。如果想尝试的小伙伴可以去官网看看<a href="https://links.jianshu.com/go?to=https://gridea.dev/">https://gridea.dev/</a>，上面有搭建方法。</p><p>这里我使用的是hexo+gitee。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>首先要下载<a href="https://links.jianshu.com/go?to=http://nodejs.cn/">Node.js</a>，然后安装<a href="https://links.jianshu.com/go?to=https://git-scm.com/downloads">Git</a>，接着注册<a href="https://links.jianshu.com/go?to=https://gitee.com/">码云</a>，最后安装Hexo，Hexo安装命令行(cmd 或 gitbash):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>速度慢可以先改一下安装源:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">npm config <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20201227123923753.png" alt="image-20201227123923753"></p><p>如果遇到上面的情况，就需要进行如下操作，一般在mac才会遇到这种。</p><p>1、vim ~/.bash_profile 编辑文件。</p><p>2、在最后追加下面三行代码。</p><p>alias ll=‘ls -alF’</p><p>alias la=‘ls -A’</p><p>alias l=‘ls -CF’</p><p>3、刷新配置文件，source ~/.bash_profile 。</p><p>后面如果还遇到，直接刷新配置文件即可，和maven在mac所遇到的问题一样，还未找到解决方案。</p><p>在想要存放博客的目录里右键打开控制台，然后输入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>接着生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo g<br></code></pre></td></tr></table></figure><p>然后启动本地服务，查看界面是否生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo s<br></code></pre></td></tr></table></figure><p>将<code>http://localhost:4000</code>复制到浏览器查看，默认主题为<code>landscape</code>。(在下面的每次配置中，对根目录的<code>_config.yml</code>修改后都要重新执行<code>hexo g</code>，同时可以不断刷新本地服务查看效果)</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>这里我选的这一款主题，当然也可以去官网选择，配置方法都差不多。<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a>  这里我用的第二种部署方式。</p><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>创建一个新的文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;测试&#x27;新增文章&quot;</span><br></code></pre></td></tr></table></figure><p>编写就自己用本地编辑器，打开即可。</p><h1 id="配置码云"><a href="#配置码云" class="headerlink" title="配置码云"></a>配置码云</h1><p>打开根目录 _config.yml</p><p>1、修改语言，language: zh-CN。</p><p>2、修改部署到码云的访问地址，</p><p><img src="https://gitee.com/cuixiaoyan/uPic/raw/master/uPic/image-20201227125538853.png" alt="image-20201227125538853"></p><p>url: <a href="https://gitee.com/cuixiaoyan/blog/">https://gitee.com/cuixiaoyan/blog/</a><br>root: /blog/</p><p>3、码云仓库地址，</p><p>deploy:<br>  type: git<br>  repo: <a href="https://gitee.com/cuixiaoyan/blog.git">https://gitee.com/cuixiaoyan/blog.git</a><br>  branch: master</p><p>4、提交步骤。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span><br>hexo g<br>hexo d<br>然后刷新上方，gitee pages 才行，注意，仓库的地址，和文章的路径是不同的。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
